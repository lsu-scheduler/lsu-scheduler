{
    "project": {
        "name": "LSU Scheduler Web Application",
        "version": "0.0.0"
    },
    "files": {
        "app/models/course.js": {
            "name": "app/models/course.js",
            "modules": {},
            "classes": {
                "Application Course Model": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app/models/department.js": {
            "name": "app/models/department.js",
            "modules": {},
            "classes": {
                "Application Department Model": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app/models/instructor.js": {
            "name": "app/models/instructor.js",
            "modules": {},
            "classes": {
                "Application Instructor Model": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app/models/schedule.js": {
            "name": "app/models/schedule.js",
            "modules": {},
            "classes": {
                "Application Schedule Model": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "config/environment.js": {
            "name": "config/environment.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "dist/assets/test-support.js": {
            "name": "dist/assets/test-support.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "dist/assets/vendor.js": {
            "name": "dist/assets/vendor.js",
            "modules": {
                "ember": 1,
                "ember-application": 1,
                "ember-debug": 1,
                "ember-extension-support": 1,
                "ember-handlebars-compiler": 1,
                "ember-handlebars": 1,
                "ember-metal": 1,
                "ember-routing-handlebars": 1,
                "ember-routing": 1,
                "ember-views": 1,
                "ember-runtime": 1,
                "ember-testing": 1,
                "ember-data": 1
            },
            "classes": {
                "Ember.ControllerMixin": 1,
                "Ember.Application": 1,
                "Ember.DAG": 1,
                "Ember.DefaultResolver": 1,
                "Ember": 1,
                "Ember.ContainerDebugAdapter": 1,
                "Ember.DataAdapter": 1,
                "Ember.Handlebars": 1,
                "Ember.Handlebars.helpers": 1,
                "Ember.Handlebars.Compiler": 1,
                "Ember.Handlebars.JavaScriptCompiler": 1,
                "Ember.Checkbox": 1,
                "Ember.Select": 1,
                "Ember.TextArea": 1,
                "Ember.TextField": 1,
                "Ember.TextSupport": 1,
                "Ember.String": 1,
                "Ember._HandlebarsBoundView": 1,
                "Ember._Metamorph": 1,
                "Ember._MetamorphView": 1,
                "Ember._SimpleMetamorphView": 1,
                "Ember.Binding": 1,
                "Ember.ComputedProperty": 1,
                "Ember.FEATURES": 1,
                "Ember.EnumerableUtils": 1,
                "Ember.Error": 1,
                "Ember.Instrumentation": 1,
                "Ember.Logger": 1,
                "Ember.OrderedSet": 1,
                "Ember.Map": 1,
                "Ember.MapWithDefault": 1,
                "Ember.platform": 1,
                "Ember.Descriptor": 1,
                "Ember.run": 1,
                "Ember.LinkView": 1,
                "Ember.Location": 1,
                "Ember.AutoLocation": 1,
                "Ember.HashLocation": 1,
                "Ember.HistoryLocation": 1,
                "Ember.NoneLocation": 1,
                "Ember.Route": 1,
                "Ember.Router": 1,
                "DependentArraysObserver": 1,
                "Ember.ReduceComputedProperty": 1,
                "Ember.ArrayController": 1,
                "Ember.Controller": 1,
                "Ember.ObjectController": 1,
                "Ember.ActionHandler": 1,
                "Ember.Array": 1,
                "Ember.Comparable": 1,
                "Ember.ControllerContentModelAliasDeprecation": 1,
                "Ember.Copyable": 1,
                "Ember.Deferred": 1,
                "Ember.Enumerable": 1,
                "Ember.Evented": 1,
                "Ember.Freezable": 1,
                "Ember.MutableArray": 1,
                "Ember.MutableEnumerable": 1,
                "Ember.Observable": 1,
                "Ember.PromiseProxyMixin": 1,
                "Ember.SortableMixin": 1,
                "Ember.TargetActionSupport": 1,
                "Ember.ArrayProxy": 1,
                "Ember.CoreObject": 1,
                "Ember.EachProxy": 1,
                "Ember.Namespace": 1,
                "Ember.NativeArray": 1,
                "Ember.Object": 1,
                "Ember.ObjectProxy": 1,
                "Ember.Set": 1,
                "Ember.SubArray": 1,
                "Ember.TrackedArray": 1,
                "Ember.Test.Adapter": 1,
                "Ember.Test.QUnitAdapter": 1,
                "Ember.Test": 1,
                "Ember.ComponentTemplateDeprecation": 1,
                "Ember.ViewTargetActionSupport": 1,
                "Ember.EventDispatcher": 1,
                "Ember.RenderBuffer": 1,
                "Ember.CollectionView": 1,
                "Ember.Component": 1,
                "Ember.ContainerView": 1,
                "Ember.CoreView": 1,
                "Ember.View": 1,
                "Ember.StateManager": 1,
                "Ember.State": 1,
                "Ember.RSVP.Promise": 1,
                "DS.ActiveModelAdapter": 1,
                "DS.ActiveModelSerializer": 1,
                "DS.FixtureAdapter": 1,
                "DS.RESTAdapter": 1,
                "DS": 1,
                "Ember.Date": 1,
                "DS.EmbeddedRecordsMixin": 1,
                "DS.JSONSerializer": 1,
                "DS.RESTSerializer": 1,
                "DS.InvalidError": 1,
                "DS.Adapter": 1,
                "DS.ContainerProxy": 1,
                "DS.DebugAdapter": 1,
                "DS.Model": 1,
                "DS.Errors": 1,
                "DS.RootState": 1,
                "DS.PromiseArray": 1,
                "DS.PromiseObject": 1,
                "DS.RecordArrayManager": 1,
                "DS.AdapterPopulatedRecordArray": 1,
                "DS.FilteredRecordArray": 1,
                "DS.ManyArray": 1,
                "DS.RecordArray": 1,
                "DS.Store": 1,
                "DS.Transform": 1,
                "DS.BooleanTransform": 1,
                "DS.DateTransform": 1,
                "DS.NumberTransform": 1,
                "DS.StringTransform": 1,
                "Ember.Inflector": 1
            },
            "fors": {
                "Ember.Handlebars": 1,
                "Ember.Handlebars.Compiler": 1,
                "Ember.Handlebars.helpers": 1,
                "Ember": 1,
                "Ember.String": 1,
                "String": 1,
                "Ember.Ember": 1,
                "Ember.FEATURES": 1,
                "Ember.Logger": 1,
                "Ember.ControllerMixin": 1,
                "Ember.Route": 1,
                "Function": 1,
                "Ember.NativeArray": 1,
                "RSVP": 1,
                "Ember.RSVP": 1,
                "RSVP.EventTarget": 1,
                "DS.Model": 1,
                "DS": 1
            },
            "namespaces": {
                "Ember": 1,
                "Ember.Handlebars": 1,
                "Ember.Instrumentation": 1,
                "Ember.Test": 1,
                "DS": 1
            }
        },
        "dist/testem.js": {
            "name": "dist/testem.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "models/course.js": {
            "name": "models/course.js",
            "modules": {},
            "classes": {
                "Ember.Sequelize Course Model": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "models/department.js": {
            "name": "models/department.js",
            "modules": {},
            "classes": {
                "Ember.Sequelize Department Model": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "models/instructor.js": {
            "name": "models/instructor.js",
            "modules": {},
            "classes": {
                "Ember.Sequelize Instructor Model": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "index.js": {
            "name": "index.js",
            "modules": {
                "lsu-scheduler": 1
            },
            "classes": {
                "LSU Scheduler API": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "newrelic.js": {
            "name": "newrelic.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "ember": {
            "name": "ember",
            "submodules": {
                "ember-metal": 1,
                "ember-application": 1,
                "ember-debug": 1,
                "ember-handlebars-compiler": 1,
                "ember-handlebars": 1,
                "ember-routing-handlebars": 1,
                "ember-routing": 1,
                "ember-views": 1,
                "ember-runtime": 1,
                "ember-testing": 1
            },
            "classes": {
                "Ember.Ember": 1,
                "Application Course Model": 1,
                "Application Department Model": 1,
                "Application Instructor Model": 1,
                "Application Schedule Model": 1,
                "Ember.ControllerMixin": 1,
                "Ember.Application": 1,
                "Ember.DAG": 1,
                "Ember.DefaultResolver": 1,
                "Ember": 1,
                "Ember.ContainerDebugAdapter": 1,
                "Ember.DataAdapter": 1,
                "Ember.Handlebars": 1,
                "Ember.Handlebars.helpers": 1,
                "Ember.Handlebars.Compiler": 1,
                "Ember.Handlebars.JavaScriptCompiler": 1,
                "Ember.Checkbox": 1,
                "Ember.Select": 1,
                "Ember.TextArea": 1,
                "Ember.TextField": 1,
                "Ember.TextSupport": 1,
                "Ember.String": 1,
                "Ember._HandlebarsBoundView": 1,
                "Ember._Metamorph": 1,
                "Ember._MetamorphView": 1,
                "Ember._SimpleMetamorphView": 1,
                "Ember.FEATURES": 1,
                "Ember.LinkView": 1,
                "Ember.Location": 1,
                "Ember.AutoLocation": 1,
                "Ember.HashLocation": 1,
                "Ember.HistoryLocation": 1,
                "Ember.NoneLocation": 1,
                "Ember.Route": 1,
                "Ember.Router": 1,
                "DependentArraysObserver": 1,
                "Ember.ReduceComputedProperty": 1,
                "Ember.ArrayController": 1,
                "Ember.Controller": 1,
                "Ember.ObjectController": 1,
                "Function": 1,
                "Ember.ActionHandler": 1,
                "Ember.Array": 1,
                "Ember.Comparable": 1,
                "Ember.ControllerContentModelAliasDeprecation": 1,
                "Ember.Copyable": 1,
                "Ember.Deferred": 1,
                "Ember.Enumerable": 1,
                "Ember.Evented": 1,
                "Ember.Freezable": 1,
                "Ember.MutableArray": 1,
                "Ember.MutableEnumerable": 1,
                "Ember.Observable": 1,
                "Ember.PromiseProxyMixin": 1,
                "Ember.SortableMixin": 1,
                "Ember.TargetActionSupport": 1,
                "Ember.ArrayProxy": 1,
                "Ember.CoreObject": 1,
                "Ember.EachProxy": 1,
                "Ember.Namespace": 1,
                "Ember.NativeArray": 1,
                "Ember.Object": 1,
                "Ember.ObjectProxy": 1,
                "Ember.Set": 1,
                "Ember.SubArray": 1,
                "Ember.TrackedArray": 1,
                "Ember.Test.Adapter": 1,
                "Ember.Test.QUnitAdapter": 1,
                "Ember.Test": 1,
                "Ember.ComponentTemplateDeprecation": 1,
                "Ember.ViewTargetActionSupport": 1,
                "Ember.EventDispatcher": 1,
                "Ember.RenderBuffer": 1,
                "Ember.CollectionView": 1,
                "Ember.Component": 1,
                "Ember.ContainerView": 1,
                "Ember.CoreView": 1,
                "Ember.View": 1,
                "Ember.StateManager": 1,
                "Ember.State": 1,
                "Ember.RSVP.EventTarget": 1,
                "RSVP.EventTarget": 1,
                "Ember.RSVP.Promise": 1
            },
            "fors": {
                "Ember.Handlebars": 1,
                "Ember.Handlebars.Compiler": 1,
                "Ember.Handlebars.helpers": 1,
                "Ember": 1,
                "Ember.String": 1,
                "String": 1,
                "Ember.FEATURES": 1,
                "Ember.Ember": 1,
                "Ember.ControllerMixin": 1,
                "Ember.Route": 1,
                "Function": 1,
                "Ember.NativeArray": 1,
                "RSVP": 1,
                "Ember.RSVP": 1,
                "RSVP.EventTarget": 1
            },
            "namespaces": {
                "Ember": 1,
                "Ember.Handlebars": 1,
                "Ember.Test": 1
            },
            "tag": "module",
            "file": "dist/assets/vendor.js",
            "line": 68433,
            "description": "Ember",
            "itemtype": "method",
            "params": [
                {
                    "name": "msg",
                    "description": ""
                }
            ],
            "return": {
                "description": "FunctionExpression"
            }
        },
        "ember-application": {
            "name": "ember-application",
            "submodules": {},
            "classes": {
                "Ember.Application": 1,
                "Ember.DAG": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {
                "Ember": 1
            },
            "module": "ember",
            "namespace": "",
            "file": "dist/assets/vendor.js",
            "line": 20209,
            "description": "Ember Application",
            "requires": [
                "ember-views",
                "ember-routing"
            ]
        },
        "ember-debug": {
            "name": "ember-debug",
            "submodules": {},
            "classes": {
                "Ember.DefaultResolver": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "ember",
            "namespace": "",
            "file": "dist/assets/vendor.js",
            "line": 20389,
            "description": "Ember Debug"
        },
        "ember-extension-support": {
            "name": "ember-extension-support",
            "submodules": {},
            "classes": {
                "Ember.ContainerDebugAdapter": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {
                "Ember": 1
            },
            "module": "ember-metal",
            "namespace": "",
            "file": "dist/assets/vendor.js",
            "line": 20953,
            "description": "Ember Extension Support",
            "requires": [
                "ember-application"
            ]
        },
        "ember-handlebars-compiler": {
            "name": "ember-handlebars-compiler",
            "submodules": {},
            "classes": {
                "Ember.DataAdapter": 1,
                "Ember.Handlebars.Compiler": 1,
                "Ember.Handlebars.JavaScriptCompiler": 1
            },
            "fors": {
                "Ember.Handlebars": 1,
                "Ember.Handlebars.Compiler": 1,
                "Ember.Handlebars.helpers": 1
            },
            "is_submodule": 1,
            "namespaces": {
                "Ember": 1,
                "Ember.Handlebars": 1
            },
            "module": "ember",
            "namespace": "",
            "file": "dist/assets/vendor.js",
            "line": 21739,
            "description": "The `DataAdapter` helps a data persistence library\ninterface with tools that debug Ember such\nas the [Ember Extension](https://github.com/tildeio/ember-extension)\nfor Chrome and Firefox.\n\nThis class will be extended by a persistence library\nwhich will override some of the methods with\nlibrary-specific code.\n\nThe methods likely to be overridden are:\n\n* `getFilters`\n* `detect`\n* `columnsForType`\n* `getRecords`\n* `getRecordColumnValues`\n* `getRecordKeywords`\n* `getRecordFilterValues`\n* `getRecordColor`\n* `observeRecord`\n\nThe adapter will need to be registered\nin the application's container as `dataAdapter:main`\n\nExample:\n\n```javascript\nApplication.initializer({\n  name: \"data-adapter\",\n\n  initialize: function(container, application) {\n    application.register('data-adapter:main', DS.DataAdapter);\n  }\n});\n```"
        },
        "ember-handlebars": {
            "name": "ember-handlebars",
            "submodules": {},
            "classes": {
                "Ember.Handlebars": 1,
                "Ember.Checkbox": 1,
                "Ember.Select": 1,
                "Ember.TextArea": 1,
                "Ember.TextField": 1,
                "Ember.TextSupport": 1,
                "Ember._HandlebarsBoundView": 1,
                "Ember._Metamorph": 1,
                "Ember._MetamorphView": 1
            },
            "fors": {
                "Ember": 1,
                "Ember.Handlebars": 1,
                "Ember.Handlebars.helpers": 1,
                "Ember.String": 1,
                "String": 1
            },
            "is_submodule": 1,
            "namespaces": {
                "Ember": 1
            },
            "module": "ember",
            "namespace": "",
            "file": "dist/assets/vendor.js",
            "line": 27580,
            "description": "Ember Handlebars",
            "requires": [
                "ember-views"
            ]
        },
        "ember-metal": {
            "name": "ember-metal",
            "submodules": {
                "ember-extension-support": 1
            },
            "classes": {
                "Ember": 1,
                "Ember._SimpleMetamorphView": 1,
                "Ember.Binding": 1,
                "Ember.ComputedProperty": 1,
                "Ember.FEATURES": 1,
                "Ember.EnumerableUtils": 1,
                "Ember.Error": 1,
                "Ember.Instrumentation": 1,
                "Ember.Logger": 1,
                "Ember.OrderedSet": 1,
                "Ember.Map": 1,
                "Ember.MapWithDefault": 1,
                "Ember.platform": 1,
                "Ember.Descriptor": 1,
                "Ember.run": 1
            },
            "fors": {
                "Ember": 1,
                "Ember.Ember": 1,
                "Ember.FEATURES": 1,
                "Ember.Logger": 1
            },
            "is_submodule": 1,
            "namespaces": {
                "Ember": 1,
                "Ember.Instrumentation": 1
            },
            "module": "ember",
            "namespace": "",
            "file": "dist/assets/vendor.js",
            "line": 34968,
            "description": "All Ember methods and functions are defined inside of this namespace. You\ngenerally should not add new properties to this namespace as it may be\noverwritten by future versions of Ember.\n\nYou can also use the shorthand `Em` instead of `Ember`.\n\nEmber-Runtime is a framework that provides core functions for Ember including\ncross-platform functions, support for property observing and objects. Its\nfocus is on small size and performance. You can use this in place of or\nalong-side other cross-platform libraries such as jQuery.\n\nThe core Runtime framework is based on the jQuery API with a number of\nperformance optimizations.",
            "tag": "module"
        },
        "ember-routing-handlebars": {
            "name": "ember-routing-handlebars",
            "submodules": {},
            "classes": {},
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "ember",
            "namespace": "",
            "file": "dist/assets/vendor.js",
            "line": 36734,
            "description": "Ember Routing Handlebars",
            "requires": [
                "ember-views"
            ]
        },
        "ember-routing": {
            "name": "ember-routing",
            "submodules": {},
            "classes": {
                "Ember.Handlebars.helpers": 1,
                "Ember.LinkView": 1,
                "Ember.Location": 1,
                "Ember.AutoLocation": 1,
                "Ember.HashLocation": 1,
                "Ember.HistoryLocation": 1,
                "Ember.NoneLocation": 1,
                "Ember.Route": 1
            },
            "fors": {
                "Ember.Handlebars.helpers": 1,
                "Ember.ControllerMixin": 1,
                "Ember.Ember": 1,
                "Ember.Route": 1
            },
            "is_submodule": 1,
            "namespaces": {
                "Ember": 1
            },
            "module": "ember",
            "namespace": "",
            "file": "dist/assets/vendor.js",
            "line": 40420,
            "description": "Ember Routing",
            "requires": [
                "ember-views"
            ],
            "itemtype": "method",
            "params": [
                {
                    "name": "name",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            }
        },
        "ember-views": {
            "name": "ember-views",
            "submodules": {},
            "classes": {
                "Ember.Test": 1,
                "Ember.ComponentTemplateDeprecation": 1,
                "Ember.ViewTargetActionSupport": 1,
                "Ember.EventDispatcher": 1,
                "Ember.RenderBuffer": 1,
                "Ember.CollectionView": 1,
                "Ember.Component": 1,
                "Ember.ContainerView": 1,
                "Ember.CoreView": 1,
                "Ember.View": 1
            },
            "fors": {
                "Ember.Ember": 1
            },
            "is_submodule": 1,
            "namespaces": {
                "Ember": 1
            },
            "module": "ember",
            "namespace": "",
            "file": "dist/assets/vendor.js",
            "line": 59687,
            "description": "Ember Views",
            "requires": [
                "ember-runtime"
            ],
            "tag": "main",
            "itemtype": "main"
        },
        "ember-runtime": {
            "name": "ember-runtime",
            "submodules": {},
            "classes": {
                "Ember.ControllerMixin": 1,
                "Ember.String": 1,
                "Ember.Ember": 1,
                "Ember.Router": 1,
                "DependentArraysObserver": 1,
                "Ember.ReduceComputedProperty": 1,
                "Ember.ArrayController": 1,
                "Ember.Controller": 1,
                "Ember.ObjectController": 1,
                "Function": 1,
                "Ember.ActionHandler": 1,
                "Ember.Array": 1,
                "Ember.Comparable": 1,
                "Ember.ControllerContentModelAliasDeprecation": 1,
                "Ember.Copyable": 1,
                "Ember.Deferred": 1,
                "Ember.Enumerable": 1,
                "Ember.Evented": 1,
                "Ember.Freezable": 1,
                "Ember.MutableArray": 1,
                "Ember.MutableEnumerable": 1,
                "Ember.Observable": 1,
                "Ember.PromiseProxyMixin": 1,
                "Ember.SortableMixin": 1,
                "Ember.TargetActionSupport": 1,
                "Ember.ArrayProxy": 1,
                "Ember.CoreObject": 1,
                "Ember.EachProxy": 1,
                "Ember.Namespace": 1,
                "Ember.NativeArray": 1,
                "Ember.Object": 1,
                "Ember.ObjectProxy": 1,
                "Ember.Set": 1,
                "Ember.SubArray": 1
            },
            "fors": {
                "Ember.Ember": 1,
                "Function": 1,
                "Ember.String": 1,
                "Ember.NativeArray": 1
            },
            "is_submodule": 1,
            "namespaces": {
                "Ember": 1
            },
            "module": "ember",
            "namespace": "",
            "file": "dist/assets/vendor.js",
            "line": 54241,
            "description": "Ember Runtime",
            "requires": [
                "ember-metal"
            ],
            "itemtype": "method",
            "params": [
                {
                    "name": "proxy",
                    "description": ""
                },
                {
                    "name": "promise",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            }
        },
        "ember-testing": {
            "name": "ember-testing",
            "submodules": {},
            "classes": {
                "Ember.TrackedArray": 1,
                "Ember.Test.Adapter": 1,
                "Ember.Test.QUnitAdapter": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {
                "Ember.Test": 1,
                "Ember": 1
            },
            "module": "ember",
            "namespace": "",
            "file": "dist/assets/vendor.js",
            "line": 54851,
            "description": "Ember Testing",
            "requires": [
                "ember-application"
            ]
        },
        "ember-data": {
            "name": "ember-data",
            "submodules": {},
            "classes": {
                "Ember.RSVP": 1,
                "DS.ActiveModelAdapter": 1,
                "DS.ActiveModelSerializer": 1,
                "DS.FixtureAdapter": 1,
                "DS.RESTAdapter": 1,
                "DS": 1,
                "Ember.Date": 1,
                "DS.EmbeddedRecordsMixin": 1,
                "DS.JSONSerializer": 1,
                "DS.RESTSerializer": 1,
                "DS.InvalidError": 1,
                "DS.Adapter": 1,
                "DS.ContainerProxy": 1,
                "DS.DebugAdapter": 1,
                "DS.Model": 1,
                "DS.Errors": 1,
                "DS.RootState": 1,
                "DS.PromiseArray": 1,
                "DS.PromiseObject": 1,
                "DS.RecordArrayManager": 1,
                "DS.AdapterPopulatedRecordArray": 1,
                "DS.FilteredRecordArray": 1,
                "DS.ManyArray": 1,
                "DS.RecordArray": 1,
                "DS.Store": 1,
                "DS.Transform": 1,
                "DS.BooleanTransform": 1,
                "DS.DateTransform": 1,
                "DS.NumberTransform": 1,
                "DS.StringTransform": 1,
                "Ember.Inflector": 1,
                "Ember.Sequelize Course Model": 1,
                "Ember.Sequelize Department Model": 1,
                "Ember.Sequelize Instructor Model": 1
            },
            "fors": {
                "DS.Model": 1,
                "DS": 1,
                "Ember.String": 1,
                "Ember.Handlebars.helpers": 1
            },
            "namespaces": {
                "DS": 1,
                "Ember": 1
            },
            "tag": "main",
            "file": "models/instructor.js",
            "line": 19,
            "description": "Ember Data",
            "itemtype": "main"
        },
        "lsu-scheduler": {
            "name": "lsu-scheduler",
            "submodules": {},
            "classes": {
                "LSU Scheduler API": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "index.js",
            "line": 23,
            "description": "Server script that controls the LSU Scheduler backend, including\nthe API used to communicate with front-end clients, managing data requests,\nand fetching updated information from LSU's system.",
            "itemtype": "main"
        }
    },
    "classes": {
        "Application Course Model": {
            "name": "Application Course Model",
            "shortname": "Application Course Model",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "file": "app/models/course.js",
            "line": 21,
            "description": "Model for a LSU Course. Only used by the front end.",
            "is_constructor": 1
        },
        "Application Department Model": {
            "name": "Application Department Model",
            "shortname": "Application Department Model",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "file": "app/models/department.js",
            "line": 19,
            "description": "Model for a LSU Department. Only used by the front end.",
            "is_constructor": 1
        },
        "Application Instructor Model": {
            "name": "Application Instructor Model",
            "shortname": "Application Instructor Model",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "file": "app/models/instructor.js",
            "line": 20,
            "description": "Model for a LSU Instructor. Used by the front end.",
            "is_constructor": 1
        },
        "Application Schedule Model": {
            "name": "Application Schedule Model",
            "shortname": "Application Schedule Model",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "file": "app/models/schedule.js",
            "line": 20,
            "description": "Model for a LSU Schedule. Only used by the front end.",
            "is_constructor": 1
        },
        "Ember.ControllerMixin": {
            "name": "Ember.ControllerMixin",
            "shortname": "Ember.ControllerMixin",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "Ember.ArrayController",
                "Ember.Controller",
                "Ember.ObjectController"
            ],
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember",
            "file": "dist/assets/vendor.js",
            "line": 47643,
            "description": "`Ember.ControllerMixin` provides a standard interface for all classes that\ncompose Ember's controller layer: `Ember.Controller`,\n`Ember.ArrayController`, and `Ember.ObjectController`.",
            "uses": [
                "Ember.ActionHandler"
            ]
        },
        "Ember.Application": {
            "name": "Ember.Application",
            "shortname": "Ember.Application",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember",
            "file": "dist/assets/vendor.js",
            "line": 19192,
            "description": "An instance of `Ember.Application` is the starting point for every Ember\napplication. It helps to instantiate, initialize and coordinate the many\nobjects that make up your app.\n\nEach Ember app has one and only one `Ember.Application` object. In fact, the\nvery first thing you should do in your application is create the instance:\n\n```javascript\nwindow.App = Ember.Application.create();\n```\n\nTypically, the application object is the only global variable. All other\nclasses in your app should be properties on the `Ember.Application` instance,\nwhich highlights its first role: a global namespace.\n\nFor example, if you define a view class, it might look like this:\n\n```javascript\nApp.MyView = Ember.View.extend();\n```\n\nBy default, calling `Ember.Application.create()` will automatically initialize\nyour application by calling the `Ember.Application.initialize()` method. If\nyou need to delay initialization, you can call your app's `deferReadiness()`\nmethod. When you are ready for your app to be initialized, call its\n`advanceReadiness()` method.\n\nYou can define a `ready` method on the `Ember.Application` instance, which\nwill be run by Ember when the application is initialized.\n\nBecause `Ember.Application` inherits from `Ember.Namespace`, any classes\nyou create will have useful string representations when calling `toString()`.\nSee the `Ember.Namespace` documentation for more information.\n\nWhile you can think of your `Ember.Application` as a container that holds the\nother classes in your application, there are several other responsibilities\ngoing on under-the-hood that you may want to understand.\n\n### Event Delegation\n\nEmber uses a technique called _event delegation_. This allows the framework\nto set up a global, shared event listener instead of requiring each view to\ndo it manually. For example, instead of each view registering its own\n`mousedown` listener on its associated element, Ember sets up a `mousedown`\nlistener on the `body`.\n\nIf a `mousedown` event occurs, Ember will look at the target of the event and\nstart walking up the DOM node tree, finding corresponding views and invoking\ntheir `mouseDown` method as it goes.\n\n`Ember.Application` has a number of default events that it listens for, as\nwell as a mapping from lowercase events to camel-cased view method names. For\nexample, the `keypress` event causes the `keyPress` method on the view to be\ncalled, the `dblclick` event causes `doubleClick` to be called, and so on.\n\nIf there is a bubbling browser event that Ember does not listen for by\ndefault, you can specify custom events and their corresponding view method\nnames by setting the application's `customEvents` property:\n\n```javascript\nApp = Ember.Application.create({\n  customEvents: {\n    // add support for the paste event\n    paste: \"paste\"\n  }\n});\n```\n\nBy default, the application sets up these event listeners on the document\nbody. However, in cases where you are embedding an Ember application inside\nan existing page, you may want it to set up the listeners on an element\ninside the body.\n\nFor example, if only events inside a DOM element with the ID of `ember-app`\nshould be delegated, set your application's `rootElement` property:\n\n```javascript\nwindow.App = Ember.Application.create({\n  rootElement: '#ember-app'\n});\n```\n\nThe `rootElement` can be either a DOM element or a jQuery-compatible selector\nstring. Note that *views appended to the DOM outside the root element will\nnot receive events.* If you specify a custom root element, make sure you only\nappend views inside it!\n\nTo learn more about the advantages of event delegation and the Ember view\nlayer, and a list of the event listeners that are setup by default, visit the\n[Ember View Layer guide](http://emberjs.com/guides/understanding-ember/the-view-layer/#toc_event-delegation).\n\n### Initializers\n\nLibraries on top of Ember can add initializers, like so:\n\n```javascript\nEmber.Application.initializer({\n  name: 'api-adapter',\n\n  initialize: function(container, application) {\n    application.register('api-adapter:main', ApiAdapter);\n  }\n});\n```\n\nInitializers provide an opportunity to access the container, which\norganizes the different components of an Ember application. Additionally\nthey provide a chance to access the instantiated application. Beyond\nbeing used for libraries, initializers are also a great way to organize\ndependency injection or setup in your own application.\n\n### Routing\n\nIn addition to creating your application's router, `Ember.Application` is\nalso responsible for telling the router when to start routing. Transitions\nbetween routes can be logged with the `LOG_TRANSITIONS` flag, and more\ndetailed intra-transition logging can be logged with\nthe `LOG_TRANSITIONS_INTERNAL` flag:\n\n```javascript\nwindow.App = Ember.Application.create({\n  LOG_TRANSITIONS: true, // basic logging of successful transitions\n  LOG_TRANSITIONS_INTERNAL: true // detailed logging of all routing steps\n});\n```\n\nBy default, the router will begin trying to translate the current URL into\napplication state once the browser emits the `DOMContentReady` event. If you\nneed to defer routing, you can call the application's `deferReadiness()`\nmethod. Once routing can begin, call the `advanceReadiness()` method.\n\nIf there is any setup required before routing begins, you can implement a\n`ready()` method on your app that will be invoked immediately before routing\nbegins.\n```",
            "extends": "Ember.Namespace"
        },
        "Ember.DAG": {
            "name": "Ember.DAG",
            "shortname": "DAG",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember",
            "file": "dist/assets/vendor.js",
            "line": 20209,
            "description": "DAG stands for Directed acyclic graph.\nIt is used to build a graph of dependencies checking that there isn't circular\ndependencies. p.e Registering initializers with a certain precedence order.",
            "is_constructor": 1,
            "itemtype": "method",
            "return": {
                "description": ""
            }
        },
        "Ember.DefaultResolver": {
            "name": "Ember.DefaultResolver",
            "shortname": "Ember.DefaultResolver",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-debug",
            "namespace": "Ember",
            "file": "dist/assets/vendor.js",
            "line": 20389,
            "description": "The DefaultResolver defines the default lookup rules to resolve\ncontainer lookups before consulting the container for registered\nitems:\n\n* templates are looked up on `Ember.TEMPLATES`\n* other names are looked up on the application after converting\n  the name. For example, `controller:post` looks up\n  `App.PostController` by default.\n* there are some nuances (see examples below)\n\n### How Resolving Works\n\nThe container calls this object's `resolve` method with the\n`fullName` argument.\n\nIt first parses the fullName into an object using `parseName`.\n\nThen it checks for the presence of a type-specific instance\nmethod of the form `resolve[Type]` and calls it if it exists.\nFor example if it was resolving 'template:post', it would call\nthe `resolveTemplate` method.\n\nIts last resort is to call the `resolveOther` method.\n\nThe methods of this object are designed to be easy to override\nin a subclass. For example, you could enhance how a template\nis resolved like so:\n\n```javascript\nApp = Ember.Application.create({\n  Resolver: Ember.DefaultResolver.extend({\n    resolveTemplate: function(parsedName) {\n      var resolvedTemplate = this._super(parsedName);\n      if (resolvedTemplate) { return resolvedTemplate; }\n      return Ember.TEMPLATES['not_found'];\n    }\n  })\n});\n```\n\nSome examples of how names are resolved:\n\n```\n'template:post' //=> Ember.TEMPLATES['post']\n'template:posts/byline' //=> Ember.TEMPLATES['posts/byline']\n'template:posts.byline' //=> Ember.TEMPLATES['posts/byline']\n'template:blogPost' //=> Ember.TEMPLATES['blogPost']\n                    //   OR\n                    //   Ember.TEMPLATES['blog_post']\n'controller:post' //=> App.PostController\n'controller:posts.index' //=> App.PostsIndexController\n'controller:blog/post' //=> Blog.PostController\n'controller:basic' //=> Ember.Controller\n'route:post' //=> App.PostRoute\n'route:posts.index' //=> App.PostsIndexRoute\n'route:blog/post' //=> Blog.PostRoute\n'route:basic' //=> Ember.Route\n'view:post' //=> App.PostView\n'view:posts.index' //=> App.PostsIndexView\n'view:blog/post' //=> Blog.PostView\n'view:basic' //=> Ember.View\n'foo:post' //=> App.PostFoo\n'model:post' //=> App.Post\n```",
            "extends": "Ember.Object"
        },
        "Ember": {
            "name": "Ember",
            "shortname": "Ember",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-metal",
            "namespace": "Ember",
            "file": "dist/assets/vendor.js",
            "line": 30460,
            "description": "All Ember methods and functions are defined inside of this namespace. You\ngenerally should not add new properties to this namespace as it may be\noverwritten by future versions of Ember.\n\nYou can also use the shorthand `Em` instead of `Ember`.\n\nEmber-Runtime is a framework that provides core functions for Ember including\ncross-platform functions, support for property observing and objects. Its\nfocus is on small size and performance. You can use this in place of or\nalong-side other cross-platform libraries such as jQuery.\n\nThe core Runtime framework is based on the jQuery API with a number of\nperformance optimizations.",
            "static": 1,
            "version": "1.7.0"
        },
        "Ember.ContainerDebugAdapter": {
            "name": "Ember.ContainerDebugAdapter",
            "shortname": "Ember.ContainerDebugAdapter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-extension-support",
            "namespace": "Ember",
            "file": "dist/assets/vendor.js",
            "line": 20953,
            "description": "The `ContainerDebugAdapter` helps the container and resolver interface\nwith tools that debug Ember such as the\n[Ember Extension](https://github.com/tildeio/ember-extension)\nfor Chrome and Firefox.\n\nThis class can be extended by a custom resolver implementer\nto override some of the methods with library-specific code.\n\nThe methods likely to be overridden are:\n\n* `canCatalogEntriesByType`\n* `catalogEntriesByType`\n\nThe adapter will need to be registered\nin the application's container as `container-debug-adapter:main`\n\nExample:\n\n```javascript\nApplication.initializer({\n  name: \"containerDebugAdapter\",\n\n  initialize: function(container, application) {\n    application.register('container-debug-adapter:main', require('app/container-debug-adapter'));\n  }\n});\n```",
            "extends": "EmberObject",
            "since": "1.5.0"
        },
        "Ember.DataAdapter": {
            "name": "Ember.DataAdapter",
            "shortname": "Ember.DataAdapter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-handlebars-compiler",
            "namespace": "Ember",
            "file": "dist/assets/vendor.js",
            "line": 21065,
            "description": "The `DataAdapter` helps a data persistence library\ninterface with tools that debug Ember such\nas the [Ember Extension](https://github.com/tildeio/ember-extension)\nfor Chrome and Firefox.\n\nThis class will be extended by a persistence library\nwhich will override some of the methods with\nlibrary-specific code.\n\nThe methods likely to be overridden are:\n\n* `getFilters`\n* `detect`\n* `columnsForType`\n* `getRecords`\n* `getRecordColumnValues`\n* `getRecordKeywords`\n* `getRecordFilterValues`\n* `getRecordColor`\n* `observeRecord`\n\nThe adapter will need to be registered\nin the application's container as `dataAdapter:main`\n\nExample:\n\n```javascript\nApplication.initializer({\n  name: \"data-adapter\",\n\n  initialize: function(container, application) {\n    application.register('data-adapter:main', DS.DataAdapter);\n  }\n});\n```",
            "extends": "EmberObject"
        },
        "Ember.Handlebars": {
            "name": "Ember.Handlebars",
            "shortname": "Ember.Handlebars",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-handlebars",
            "namespace": "Ember",
            "file": "dist/assets/vendor.js",
            "line": 21630,
            "description": "Prepares the Handlebars templating library for use inside Ember's view\nsystem.\n\nThe `Ember.Handlebars` object is the standard Handlebars library, extended to\nuse Ember's `get()` method instead of direct property access, which allows\ncomputed properties to be used inside templates.\n\nTo create an `Ember.Handlebars` template, call `Ember.Handlebars.compile()`.\nThis will return a function that can be used by `Ember.View` for rendering."
        },
        "Ember.Handlebars.helpers": {
            "name": "Ember.Handlebars.helpers",
            "shortname": "Ember.Handlebars.helpers",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember.Handlebars",
            "file": "dist/assets/vendor.js",
            "line": 21715
        },
        "Ember.Handlebars.Compiler": {
            "name": "Ember.Handlebars.Compiler",
            "shortname": "Ember.Handlebars.Compiler",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-handlebars-compiler",
            "namespace": "Ember.Handlebars",
            "file": "dist/assets/vendor.js",
            "line": 21721,
            "description": "Override the the opcode compiler and JavaScript compiler for Handlebars.",
            "access": "private",
            "tagname": "",
            "is_constructor": 1,
            "itemtype": "method",
            "return": {
                "description": ""
            }
        },
        "Ember.Handlebars.JavaScriptCompiler": {
            "name": "Ember.Handlebars.JavaScriptCompiler",
            "shortname": "Ember.Handlebars.JavaScriptCompiler",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-handlebars-compiler",
            "namespace": "Ember.Handlebars",
            "file": "dist/assets/vendor.js",
            "line": 21739,
            "access": "private",
            "tagname": "",
            "is_constructor": 1,
            "itemtype": "method",
            "return": {
                "description": ""
            }
        },
        "Ember.Checkbox": {
            "name": "Ember.Checkbox",
            "shortname": "Ember.Checkbox",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-handlebars",
            "namespace": "Ember",
            "file": "dist/assets/vendor.js",
            "line": 22456,
            "description": "The internal class used to create text inputs when the `{{input}}`\nhelper is used with `type` of `checkbox`.\n\nSee [handlebars.helpers.input](/api/classes/Ember.Handlebars.helpers.html#method_input)  for usage details.\n\n## Direct manipulation of `checked`\n\nThe `checked` attribute of an `Ember.Checkbox` object should always be set\nthrough the Ember object or by interacting with its rendered element\nrepresentation via the mouse, keyboard, or touch. Updating the value of the\ncheckbox via jQuery will result in the checked value of the object and its\nelement losing synchronization.\n\n## Layout and LayoutName properties\n\nBecause HTML `input` elements are self closing `layout` and `layoutName`\nproperties will not be applied. See [Ember.View](/api/classes/Ember.View.html)'s\nlayout section for more information.",
            "extends": "Ember.View"
        },
        "Ember.Select": {
            "name": "Ember.Select",
            "shortname": "Ember.Select",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-handlebars",
            "namespace": "Ember",
            "file": "dist/assets/vendor.js",
            "line": 22635,
            "description": "The `Ember.Select` view class renders a\n[select](https://developer.mozilla.org/en/HTML/Element/select) HTML element,\nallowing the user to choose from a list of options.\n\nThe text and `value` property of each `<option>` element within the\n`<select>` element are populated from the objects in the `Element.Select`'s\n`content` property. The underlying data object of the selected `<option>` is\nstored in the `Element.Select`'s `value` property.\n\n## The Content Property (array of strings)\n\nThe simplest version of an `Ember.Select` takes an array of strings as its\n`content` property. The string will be used as both the `value` property and\nthe inner text of each `<option>` element inside the rendered `<select>`.\n\nExample:\n\n```javascript\nApp.ApplicationController = Ember.ObjectController.extend({\n  names: [\"Yehuda\", \"Tom\"]\n});\n```\n\n```handlebars\n{{view Ember.Select content=names}}\n```\n\nWould result in the following HTML:\n\n```html\n<select class=\"ember-select\">\n  <option value=\"Yehuda\">Yehuda</option>\n  <option value=\"Tom\">Tom</option>\n</select>\n```\n\nYou can control which `<option>` is selected through the `Ember.Select`'s\n`value` property:\n\n```javascript\nApp.ApplicationController = Ember.ObjectController.extend({\n  selectedName: 'Tom',\n  names: [\"Yehuda\", \"Tom\"]\n});\n```\n\n```handlebars\n{{view Ember.Select\n       content=names\n       value=selectedName\n}}\n```\n\nWould result in the following HTML with the `<option>` for 'Tom' selected:\n\n```html\n<select class=\"ember-select\">\n  <option value=\"Yehuda\">Yehuda</option>\n  <option value=\"Tom\" selected=\"selected\">Tom</option>\n</select>\n```\n\nA user interacting with the rendered `<select>` to choose \"Yehuda\" would\nupdate the value of `selectedName` to \"Yehuda\".\n\n## The Content Property (array of Objects)\n\nAn `Ember.Select` can also take an array of JavaScript or Ember objects as\nits `content` property.\n\nWhen using objects you need to tell the `Ember.Select` which property should\nbe accessed on each object to supply the `value` attribute of the `<option>`\nand which property should be used to supply the element text.\n\nThe `optionValuePath` option is used to specify the path on each object to\nthe desired property for the `value` attribute. The `optionLabelPath`\nspecifies the path on each object to the desired property for the\nelement's text. Both paths must reference each object itself as `content`:\n\n```javascript\nApp.ApplicationController = Ember.ObjectController.extend({\n  programmers: [\n    {firstName: \"Yehuda\", id: 1},\n    {firstName: \"Tom\",    id: 2}\n  ]\n});\n```\n\n```handlebars\n{{view Ember.Select\n       content=programmers\n       optionValuePath=\"content.id\"\n       optionLabelPath=\"content.firstName\"}}\n```\n\nWould result in the following HTML:\n\n```html\n<select class=\"ember-select\">\n  <option value=\"1\">Yehuda</option>\n  <option value=\"2\">Tom</option>\n</select>\n```\n\nThe `value` attribute of the selected `<option>` within an `Ember.Select`\ncan be bound to a property on another object:\n\n```javascript\nApp.ApplicationController = Ember.ObjectController.extend({\n  programmers: [\n    {firstName: \"Yehuda\", id: 1},\n    {firstName: \"Tom\",    id: 2}\n  ],\n  currentProgrammer: {\n    id: 2\n  }\n});\n```\n\n```handlebars\n{{view Ember.Select\n       content=programmers\n       optionValuePath=\"content.id\"\n       optionLabelPath=\"content.firstName\"\n       value=currentProgrammer.id}}\n```\n\nWould result in the following HTML with a selected option:\n\n```html\n<select class=\"ember-select\">\n  <option value=\"1\">Yehuda</option>\n  <option value=\"2\" selected=\"selected\">Tom</option>\n</select>\n```\n\nInteracting with the rendered element by selecting the first option\n('Yehuda') will update the `id` of `currentProgrammer`\nto match the `value` property of the newly selected `<option>`.\n\nAlternatively, you can control selection through the underlying objects\nused to render each object by binding the `selection` option. When the selected\n`<option>` is changed, the property path provided to `selection`\nwill be updated to match the content object of the rendered `<option>`\nelement:\n\n```javascript\n\nvar yehuda = {firstName: \"Yehuda\", id: 1, bff4eva: 'tom'}\nvar tom = {firstName: \"Tom\", id: 2, bff4eva: 'yehuda'};\n\nApp.ApplicationController = Ember.ObjectController.extend({\n  selectedPerson: tom,\n  programmers: [\n    yehuda,\n    tom\n  ]\n});\n```\n\n```handlebars\n{{view Ember.Select\n       content=programmers\n       optionValuePath=\"content.id\"\n       optionLabelPath=\"content.firstName\"\n       selection=selectedPerson}}\n```\n\nWould result in the following HTML with a selected option:\n\n```html\n<select class=\"ember-select\">\n  <option value=\"1\">Yehuda</option>\n  <option value=\"2\" selected=\"selected\">Tom</option>\n</select>\n```\n\nInteracting with the rendered element by selecting the first option\n('Yehuda') will update the `selectedPerson` to match the object of\nthe newly selected `<option>`. In this case it is the first object\nin the `programmers`\n\n## Supplying a Prompt\n\nA `null` value for the `Ember.Select`'s `value` or `selection` property\nresults in there being no `<option>` with a `selected` attribute:\n\n```javascript\nApp.ApplicationController = Ember.ObjectController.extend({\n  selectedProgrammer: null,\n  programmers: [\n    \"Yehuda\",\n    \"Tom\"\n  ]\n});\n```\n\n``` handlebars\n{{view Ember.Select\n       content=programmers\n       value=selectedProgrammer\n}}\n```\n\nWould result in the following HTML:\n\n```html\n<select class=\"ember-select\">\n  <option value=\"Yehuda\">Yehuda</option>\n  <option value=\"Tom\">Tom</option>\n</select>\n```\n\nAlthough `selectedProgrammer` is `null` and no `<option>`\nhas a `selected` attribute the rendered HTML will display the\nfirst item as though it were selected. You can supply a string\nvalue for the `Ember.Select` to display when there is no selection\nwith the `prompt` option:\n\n```javascript\nApp.ApplicationController = Ember.ObjectController.extend({\n  selectedProgrammer: null,\n  programmers: [\n    \"Yehuda\",\n    \"Tom\"\n  ]\n});\n```\n\n```handlebars\n{{view Ember.Select\n       content=programmers\n       value=selectedProgrammer\n       prompt=\"Please select a name\"\n}}\n```\n\nWould result in the following HTML:\n\n```html\n<select class=\"ember-select\">\n  <option>Please select a name</option>\n  <option value=\"Yehuda\">Yehuda</option>\n  <option value=\"Tom\">Tom</option>\n</select>\n```",
            "extends": "Ember.View"
        },
        "Ember.TextArea": {
            "name": "Ember.TextArea",
            "shortname": "Ember.TextArea",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-handlebars",
            "namespace": "Ember",
            "file": "dist/assets/vendor.js",
            "line": 23288,
            "description": "The internal class used to create textarea element when the `{{textarea}}`\nhelper is used.\n\nSee [handlebars.helpers.textarea](/api/classes/Ember.Handlebars.helpers.html#method_textarea)  for usage details.\n\n## Layout and LayoutName properties\n\nBecause HTML `textarea` elements do not contain inner HTML the `layout` and\n`layoutName` properties will not be applied. See [Ember.View](/api/classes/Ember.View.html)'s\nlayout section for more information.",
            "extends": "Ember.Component",
            "uses": [
                "Ember.TextSupport"
            ]
        },
        "Ember.TextField": {
            "name": "Ember.TextField",
            "shortname": "Ember.TextField",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-handlebars",
            "namespace": "Ember",
            "file": "dist/assets/vendor.js",
            "line": 23349,
            "description": "The internal class used to create text inputs when the `{{input}}`\n      helper is used with `type` of `text`.\nSee [Handlebars.helpers.input](/api/classes/Ember.Handlebars.helpers.html#method_input)  for usage details.\n## Layout and LayoutName properties\nBecause HTML `input` elements are self closing `layout` and `layoutName`\n      properties will not be applied. See [Ember.View](/api/classes/Ember.View.html)'s\n      layout section for more information.",
            "extends": "Ember.Component",
            "uses": [
                "Ember.TextSupport"
            ]
        },
        "Ember.TextSupport": {
            "name": "Ember.TextSupport",
            "shortname": "Ember.TextSupport",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "Ember.TextArea",
                "Ember.TextField"
            ],
            "module": "ember",
            "submodule": "ember-handlebars",
            "namespace": "Ember",
            "file": "dist/assets/vendor.js",
            "line": 23450,
            "description": "Shared mixin used by `Ember.TextField` and `Ember.TextArea`.",
            "uses": [
                "Ember.TargetActionSupport"
            ],
            "extends": "Ember.Mixin",
            "access": "private",
            "tagname": ""
        },
        "Ember.String": {
            "name": "Ember.String",
            "shortname": "String",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember",
            "file": "dist/assets/vendor.js",
            "line": 54028,
            "description": "Defines string helper methods including string formatting and localization.\nUnless `Ember.EXTEND_PROTOTYPES.String` is `false` these methods will also be\nadded to the `String.prototype` as well.",
            "static": 1
        },
        "Ember._HandlebarsBoundView": {
            "name": "Ember._HandlebarsBoundView",
            "shortname": "Ember._HandlebarsBoundView",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-handlebars",
            "namespace": "Ember",
            "file": "dist/assets/vendor.js",
            "line": 27176,
            "description": "`Ember._HandlebarsBoundView` is a private view created by the Handlebars\n`{{bind}}` helpers that is used to keep track of bound properties.\n\nEvery time a property is bound using a `{{mustache}}`, an anonymous subclass\nof `Ember._HandlebarsBoundView` is created with the appropriate sub-template\nand context set up. When the associated property changes, just the template\nfor this view will re-render.",
            "extends": "Ember._MetamorphView",
            "access": "private",
            "tagname": ""
        },
        "Ember._Metamorph": {
            "name": "Ember._Metamorph",
            "shortname": "Ember._Metamorph",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "Ember._MetamorphView",
                "Ember._SimpleMetamorphView"
            ],
            "module": "ember",
            "submodule": "ember-handlebars",
            "namespace": "Ember",
            "file": "dist/assets/vendor.js",
            "line": 27520,
            "access": "private",
            "tagname": ""
        },
        "Ember._MetamorphView": {
            "name": "Ember._MetamorphView",
            "shortname": "Ember._MetamorphView",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-handlebars",
            "namespace": "Ember",
            "file": "dist/assets/vendor.js",
            "line": 27580,
            "extends": "Ember.View",
            "uses": [
                "Ember._Metamorph"
            ],
            "access": "private",
            "tagname": ""
        },
        "Ember._SimpleMetamorphView": {
            "name": "Ember._SimpleMetamorphView",
            "shortname": "Ember._SimpleMetamorphView",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-metal",
            "namespace": "Ember",
            "file": "dist/assets/vendor.js",
            "line": 27589,
            "extends": "Ember.CoreView",
            "uses": [
                "Ember._Metamorph"
            ],
            "access": "private",
            "tagname": ""
        },
        "Ember.Ember": {
            "name": "Ember.Ember",
            "shortname": "Ember.Ember",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "namespace": "",
            "submodule": "ember-runtime"
        },
        "Ember.Binding": {
            "name": "Ember.Binding",
            "shortname": "Ember.Binding",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-metal",
            "namespace": "Ember",
            "file": "dist/assets/vendor.js",
            "line": 28559,
            "description": "An `Ember.Binding` connects the properties of two objects so that whenever\nthe value of one property changes, the other property will be changed also.\n\n## Automatic Creation of Bindings with `/^*Binding/`-named Properties\n\nYou do not usually create Binding objects directly but instead describe\nbindings in your class or object definition using automatic binding\ndetection.\n\nProperties ending in a `Binding` suffix will be converted to `Ember.Binding`\ninstances. The value of this property should be a string representing a path\nto another object or a custom binding instance created using Binding helpers\n(see \"One Way Bindings\"):\n\n```\nvalueBinding: \"MyApp.someController.title\"\n```\n\nThis will create a binding from `MyApp.someController.title` to the `value`\nproperty of your object instance automatically. Now the two values will be\nkept in sync.\n\n## One Way Bindings\n\nOne especially useful binding customization you can use is the `oneWay()`\nhelper. This helper tells Ember that you are only interested in\nreceiving changes on the object you are binding from. For example, if you\nare binding to a preference and you want to be notified if the preference\nhas changed, but your object will not be changing the preference itself, you\ncould do:\n\n```\nbigTitlesBinding: Ember.Binding.oneWay(\"MyApp.preferencesController.bigTitles\")\n```\n\nThis way if the value of `MyApp.preferencesController.bigTitles` changes the\n`bigTitles` property of your object will change also. However, if you\nchange the value of your `bigTitles` property, it will not update the\n`preferencesController`.\n\nOne way bindings are almost twice as fast to setup and twice as fast to\nexecute because the binding only has to worry about changes to one side.\n\nYou should consider using one way bindings anytime you have an object that\nmay be created frequently and you do not intend to change a property; only\nto monitor it for changes (such as in the example above).\n\n## Adding Bindings Manually\n\nAll of the examples above show you how to configure a custom binding, but the\nresult of these customizations will be a binding template, not a fully active\nBinding instance. The binding will actually become active only when you\ninstantiate the object the binding belongs to. It is useful however, to\nunderstand what actually happens when the binding is activated.\n\nFor a binding to function it must have at least a `from` property and a `to`\nproperty. The `from` property path points to the object/key that you want to\nbind from while the `to` path points to the object/key you want to bind to.\n\nWhen you define a custom binding, you are usually describing the property\nyou want to bind from (such as `MyApp.someController.value` in the examples\nabove). When your object is created, it will automatically assign the value\nyou want to bind `to` based on the name of your binding key. In the\nexamples above, during init, Ember objects will effectively call\nsomething like this on your binding:\n\n```javascript\nbinding = Ember.Binding.from(\"valueBinding\").to(\"value\");\n```\n\nThis creates a new binding instance based on the template you provide, and\nsets the to path to the `value` property of the new object. Now that the\nbinding is fully configured with a `from` and a `to`, it simply needs to be\nconnected to become active. This is done through the `connect()` method:\n\n```javascript\nbinding.connect(this);\n```\n\nNote that when you connect a binding you pass the object you want it to be\nconnected to. This object will be used as the root for both the from and\nto side of the binding when inspecting relative paths. This allows the\nbinding to be automatically inherited by subclassed objects as well.\n\nThis also allows you to bind between objects using the paths you declare in\n`from` and `to`:\n\n```javascript\n// Example 1\nbinding = Ember.Binding.from(\"App.someObject.value\").to(\"value\");\nbinding.connect(this);\n\n// Example 2\nbinding = Ember.Binding.from(\"parentView.value\").to(\"App.someObject.value\");\nbinding.connect(this);\n```\n\nNow that the binding is connected, it will observe both the from and to side\nand relay changes.\n\nIf you ever needed to do so (you almost never will, but it is useful to\nunderstand this anyway), you could manually create an active binding by\nusing the `Ember.bind()` helper method. (This is the same method used by\nto setup your bindings on objects):\n\n```javascript\nEmber.bind(MyApp.anotherObject, \"value\", \"MyApp.someController.value\");\n```\n\nBoth of these code fragments have the same effect as doing the most friendly\nform of binding creation like so:\n\n```javascript\nMyApp.anotherObject = Ember.Object.create({\n  valueBinding: \"MyApp.someController.value\",\n\n  // OTHER CODE FOR THIS OBJECT...\n});\n```\n\nEmber's built in binding creation method makes it easy to automatically\ncreate bindings for you. You should always use the highest-level APIs\navailable, even if you understand how it works underneath.",
            "since": "Ember 0.9"
        },
        "Ember.ComputedProperty": {
            "name": "Ember.ComputedProperty",
            "shortname": "Ember.ComputedProperty",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-metal",
            "namespace": "Ember",
            "file": "dist/assets/vendor.js",
            "line": 29228,
            "description": "A computed property transforms an objects function into a property.\nBy default the function backing the computed property will only be called\nonce and the result will be cached. You can specify various properties\nthat your computed property is dependent on. This will force the cached\nresult to be recomputed if the dependencies are modified.\nIn the following example we declare a computed property (by calling\n`.property()` on the fullName function) and setup the properties\ndependencies (depending on firstName and lastName). The fullName function\nwill be called once (regardless of how many times it is accessed) as long\nas it's dependencies have not been changed. Once firstName or lastName are updated\nany future calls (or anything bound) to fullName will incorporate the new\nvalues.\n```javascript\nvar Person = Ember.Object.extend({\n// these will be supplied by `create`\nfirstName: null,\nlastName: null,\nfullName: function() {\nvar firstName = this.get('firstName');\nvar lastName = this.get('lastName');\nreturn firstName + ' ' + lastName;\n}.property('firstName', 'lastName')\n});\nvar tom = Person.create({\nfirstName: 'Tom',\nlastName: 'Dale'\n});\ntom.get('fullName') // 'Tom Dale'\n```\nYou can also define what Ember should do when setting a computed property.\nIf you try to set a computed property, it will be invoked with the key and\nvalue you want to set it to. You can also accept the previous value as the\nthird parameter.\n```javascript\nvar Person = Ember.Object.extend({\n// these will be supplied by `create`\nfirstName: null,\nlastName: null,\nfullName: function(key, value, oldValue) {\n// getter\nif (arguments.length === 1) {\nvar firstName = this.get('firstName');\nvar lastName = this.get('lastName');\nreturn firstName + ' ' + lastName;\n// setter\n} else {\nvar name = value.split(' ');\nthis.set('firstName', name[0]);\nthis.set('lastName', name[1]);\nreturn value;\n}\n}.property('firstName', 'lastName')\n});\nvar person = Person.create();\nperson.set('fullName', 'Peter Wagenet');\nperson.get('firstName'); // 'Peter'\nperson.get('lastName');  // 'Wagenet'\n```",
            "is_constructor": 1,
            "extends": "Ember.Descriptor",
            "itemtype": "method",
            "params": [
                {
                    "name": "func",
                    "description": ""
                },
                {
                    "name": "opts",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            }
        },
        "Ember.FEATURES": {
            "name": "Ember.FEATURES",
            "shortname": "Ember.FEATURES",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-metal",
            "namespace": "Ember",
            "file": "dist/assets/vendor.js",
            "line": 30548,
            "description": "Hash of enabled Canary features. Add to this before creating your application.\n\nYou can also define `ENV.FEATURES` if you need to enable features flagged at runtime.",
            "static": 1,
            "since": "1.1.0"
        },
        "Ember.EnumerableUtils": {
            "name": "Ember.EnumerableUtils",
            "shortname": "Ember.EnumerableUtils",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-metal",
            "namespace": "Ember",
            "file": "dist/assets/vendor.js",
            "line": 30797,
            "description": "Defines some convenience methods for working with Enumerables.\n`Ember.EnumerableUtils` uses `Ember.ArrayPolyfills` when necessary.",
            "static": 1
        },
        "Ember.Error": {
            "name": "Ember.Error",
            "shortname": "Ember.Error",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-metal",
            "namespace": "Ember",
            "file": "dist/assets/vendor.js",
            "line": 31012,
            "description": "A subclass of the JavaScript Error object for use in Ember.",
            "is_constructor": 1,
            "extends": "Error",
            "itemtype": "method",
            "return": {
                "description": ""
            }
        },
        "Ember.Instrumentation": {
            "name": "Ember.Instrumentation",
            "shortname": "Ember.Instrumentation",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-metal",
            "namespace": "Ember.Instrumentation",
            "file": "dist/assets/vendor.js",
            "line": 31592,
            "description": "The purpose of the Ember Instrumentation module is\nto provide efficient, general-purpose instrumentation\nfor Ember.\n\nSubscribe to a listener by using `Ember.subscribe`:\n\n```javascript\nEmber.subscribe(\"render\", {\n  before: function(name, timestamp, payload) {\n\n  },\n\n  after: function(name, timestamp, payload) {\n\n  }\n});\n```\n\nIf you return a value from the `before` callback, that same\nvalue will be passed as a fourth parameter to the `after`\ncallback.\n\nInstrument a block of code by using `Ember.instrument`:\n\n```javascript\nEmber.instrument(\"render.handlebars\", payload, function() {\n  // rendering logic\n}, binding);\n```\n\nEvent names passed to `Ember.instrument` are namespaced\nby periods, from more general to more specific. Subscribers\ncan listen for events by whatever level of granularity they\nare interested in.\n\nIn the above example, the event is `render.handlebars`,\nand the subscriber listened for all events beginning with\n`render`. It would receive callbacks for events named\n`render`, `render.handlebars`, `render.container`, or\neven `render.handlebars.layout`.",
            "static": 1
        },
        "Ember.Logger": {
            "name": "Ember.Logger",
            "shortname": "Ember.Logger",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-metal",
            "namespace": "Ember",
            "file": "dist/assets/vendor.js",
            "line": 32057,
            "description": "Inside Ember-Metal, simply uses the methods from `imports.console`.\nOverride this to provide more robust logging functionality."
        },
        "Ember.OrderedSet": {
            "name": "Ember.OrderedSet",
            "shortname": "Ember.OrderedSet",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-metal",
            "namespace": "Ember",
            "file": "dist/assets/vendor.js",
            "line": 32225,
            "description": "This class is used internally by Ember and Ember Data.\nPlease do not use it at this time. We plan to clean it up\nand add many tests soon.",
            "is_constructor": 1,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "return": {
                "description": ""
            }
        },
        "Ember.Map": {
            "name": "Ember.Map",
            "shortname": "Ember.Map",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-metal",
            "namespace": "Ember",
            "file": "dist/assets/vendor.js",
            "line": 32359,
            "description": "A Map stores values indexed by keys. Unlike JavaScript's\ndefault Objects, the keys of a Map can be any JavaScript\nobject.\nInternally, a Map has two data structures:\n1. `keys`: an OrderedSet of all of the existing keys\n2. `values`: a JavaScript Object indexed by the `Ember.guidFor(key)`\nWhen a key/value pair is added for the first time, we\nadd the key to the `keys` OrderedSet, and create or\nreplace an entry in `values`. When an entry is deleted,\nwe delete its entry in `keys` and `values`.",
            "access": "private",
            "tagname": "",
            "is_constructor": 1,
            "itemtype": "method",
            "return": {
                "description": ""
            }
        },
        "Ember.MapWithDefault": {
            "name": "Ember.MapWithDefault",
            "shortname": "Ember.MapWithDefault",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-metal",
            "namespace": "Ember",
            "file": "dist/assets/vendor.js",
            "line": 32500,
            "access": "private",
            "tagname": "",
            "is_constructor": 1,
            "extends": "Ember.Map",
            "itemtype": "method",
            "params": [
                {
                    "name": "options",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            }
        },
        "Ember.platform": {
            "name": "Ember.platform",
            "shortname": "Ember.platform",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-metal",
            "namespace": "Ember",
            "file": "dist/assets/vendor.js",
            "line": 34024,
            "description": "Platform specific methods and feature detectors needed by the framework.",
            "static": 1
        },
        "Ember.Descriptor": {
            "name": "Ember.Descriptor",
            "shortname": "Ember.Descriptor",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-metal",
            "namespace": "Ember",
            "file": "dist/assets/vendor.js",
            "line": 34099,
            "description": "Objects of this type can implement an interface to respond to requests to\nget and set. The default implementation handles simple properties.\nYou generally won't need to create or subclass this directly.",
            "access": "private",
            "tagname": "",
            "is_constructor": 1,
            "itemtype": "method",
            "return": {
                "description": ""
            }
        },
        "Ember.run": {
            "name": "Ember.run",
            "shortname": "Ember.run",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-metal",
            "namespace": "Ember",
            "file": "dist/assets/vendor.js",
            "line": 34968,
            "description": "Runs the passed target and method inside of a RunLoop, ensuring any\ndeferred actions including bindings and views updates are flushed at the\nend.\n\nNormally you should not need to invoke this method yourself. However if\nyou are implementing raw event handlers when interfacing with other\nlibraries or plugins, you should probably wrap all of your code inside this\ncall.\n\n```javascript\nrun(function() {\n  // code to be execute within a RunLoop\n});\n```",
            "static": 1,
            "is_constructor": 1,
            "params": [
                {
                    "name": "target",
                    "description": "target of method to call",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "method",
                    "description": "Method to invoke.\n  May be a function or a string. If you pass a string\n  then it will be looked up on the passed target.",
                    "type": "Function|String"
                },
                {
                    "name": "args*",
                    "description": "Any additional arguments you wish to pass to the method.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "return value from invoking the passed function.",
                "type": "Object"
            }
        },
        "Ember.LinkView": {
            "name": "Ember.LinkView",
            "shortname": "Ember.LinkView",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember",
            "file": "dist/assets/vendor.js",
            "line": 37165,
            "description": "`Ember.LinkView` renders an element whose `click` event triggers a\ntransition of the application's instance of `Ember.Router` to\na supplied route by name.\n\nInstances of `LinkView` will most likely be created through\nthe `link-to` Handlebars helper, but properties of this class\ncan be overridden to customize application-wide behavior.",
            "extends": "Ember.View",
            "see": [
                "{Handlebars.helpers.link-to}"
            ]
        },
        "Ember.Location": {
            "name": "Ember.Location",
            "shortname": "Ember.Location",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember",
            "file": "dist/assets/vendor.js",
            "line": 39006,
            "description": "Ember.Location returns an instance of the correct implementation of\nthe `location` API.\n\n## Implementations\n\nYou can pass an implementation name (`hash`, `history`, `none`) to force a\nparticular implementation to be used in your application.\n\n### HashLocation\n\nUsing `HashLocation` results in URLs with a `#` (hash sign) separating the\nserver side URL portion of the URL from the portion that is used by Ember.\nThis relies upon the `hashchange` event existing in the browser.\n\nExample:\n\n```javascript\nApp.Router.map(function() {\n  this.resource('posts', function() {\n    this.route('new');\n  });\n});\n\nApp.Router.reopen({\n  location: 'hash'\n});\n```\n\nThis will result in a posts.new url of `/#/posts/new`.\n\n### HistoryLocation\n\nUsing `HistoryLocation` results in URLs that are indistinguishable from a\nstandard URL. This relies upon the browser's `history` API.\n\nExample:\n\n```javascript\nApp.Router.map(function() {\n  this.resource('posts', function() {\n    this.route('new');\n  });\n});\n\nApp.Router.reopen({\n  location: 'history'\n});\n```\n\nThis will result in a posts.new url of `/posts/new`.\n\nKeep in mind that your server must serve the Ember app at all the routes you\ndefine.\n\n### AutoLocation\n\nUsing `AutoLocation`, the router will use the best Location class supported by\nthe browser it is running in.\n\nBrowsers that support the `history` API will use `HistoryLocation`, those that\ndo not, but still support the `hashchange` event will use `HashLocation`, and\nin the rare case neither is supported will use `NoneLocation`.\n\nExample:\n\n```javascript\nApp.Router.map(function() {\n  this.resource('posts', function() {\n    this.route('new');\n  });\n});\n\nApp.Router.reopen({\n  location: 'auto'\n});\n```\n\nThis will result in a posts.new url of `/posts/new` for modern browsers that\nsupport the `history` api or `/#/posts/new` for older ones, like Internet\nExplorer 9 and below.\n\nWhen a user visits a link to your application, they will be automatically\nupgraded or downgraded to the appropriate `Location` class, with the URL\ntransformed accordingly, if needed.\n\nKeep in mind that since some of your users will use `HistoryLocation`, your\nserver must serve the Ember app at all the routes you define.\n\n### NoneLocation\n\nUsing `NoneLocation` causes Ember to not store the applications URL state\nin the actual URL. This is generally used for testing purposes, and is one\nof the changes made when calling `App.setupForTesting()`.\n\n## Location API\n\nEach location implementation must provide the following methods:\n\n* implementation: returns the string name used to reference the implementation.\n* getURL: returns the current URL.\n* setURL(path): sets the current URL.\n* replaceURL(path): replace the current URL (optional).\n* onUpdateURL(callback): triggers the callback when the URL changes.\n* formatURL(url): formats `url` to be placed into `href` attribute.\n\nCalling setURL or replaceURL will not trigger onUpdateURL callbacks.",
            "static": 1
        },
        "Ember.AutoLocation": {
            "name": "Ember.AutoLocation",
            "shortname": "Ember.AutoLocation",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember",
            "file": "dist/assets/vendor.js",
            "line": 39216,
            "description": "Ember.AutoLocation will select the best location option based off browser\nsupport with the priority order: history, hash, none.\n\nClean pushState paths accessed by hashchange-only browsers will be redirected\nto the hash-equivalent and vice versa so future transitions are consistent.\n\nKeep in mind that since some of your users will use `HistoryLocation`, your\nserver must serve the Ember app at all the routes you define.",
            "static": 1
        },
        "Ember.HashLocation": {
            "name": "Ember.HashLocation",
            "shortname": "Ember.HashLocation",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember",
            "file": "dist/assets/vendor.js",
            "line": 39604,
            "description": "`Ember.HashLocation` implements the location API using the browser's\nhash. At present, it relies on a `hashchange` event existing in the\nbrowser.",
            "extends": "Ember.Object"
        },
        "Ember.HistoryLocation": {
            "name": "Ember.HistoryLocation",
            "shortname": "Ember.HistoryLocation",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember",
            "file": "dist/assets/vendor.js",
            "line": 39745,
            "description": "Ember.HistoryLocation implements the location API using the browser's\nhistory.pushState API.",
            "extends": "Ember.Object"
        },
        "Ember.NoneLocation": {
            "name": "Ember.NoneLocation",
            "shortname": "Ember.NoneLocation",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember",
            "file": "dist/assets/vendor.js",
            "line": 39967,
            "description": "Ember.NoneLocation does not interact with the browser. It is useful for\ntesting, or when you need to manage state with your Router, but temporarily\ndon't want it to muck with the URL (for example when you embed your\napplication in a larger page).",
            "extends": "Ember.Object"
        },
        "Ember.Route": {
            "name": "Ember.Route",
            "shortname": "Ember.Route",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember",
            "file": "dist/assets/vendor.js",
            "line": 40420,
            "description": "The `Ember.Route` class is used to define individual routes. Refer to\nthe [routing guide](http://emberjs.com/guides/routing/) for documentation.",
            "extends": "Ember.Object",
            "uses": [
                "Ember.ActionHandler"
            ]
        },
        "Ember.Router": {
            "name": "Ember.Router",
            "shortname": "Ember.Router",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember",
            "file": "dist/assets/vendor.js",
            "line": 42439,
            "description": "The `Ember.Router` class manages the application state and URLs. Refer to\nthe [routing guide](http://emberjs.com/guides/routing/) for documentation.",
            "extends": "Ember.Object"
        },
        "DependentArraysObserver": {
            "name": "DependentArraysObserver",
            "shortname": "DependentArraysObserver",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "",
            "file": "dist/assets/vendor.js",
            "line": 43971,
            "description": "Tracks changes to dependent arrays, as well as to properties of items in\ndependent arrays.",
            "itemtype": "method",
            "params": [
                {
                    "name": "callbacks",
                    "description": ""
                },
                {
                    "name": "cp",
                    "description": ""
                },
                {
                    "name": "instanceMeta",
                    "description": ""
                },
                {
                    "name": "context",
                    "description": ""
                },
                {
                    "name": "propertyName",
                    "description": ""
                },
                {
                    "name": "sugarMeta",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            }
        },
        "Ember.ReduceComputedProperty": {
            "name": "Ember.ReduceComputedProperty",
            "shortname": "Ember.ReduceComputedProperty",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember",
            "file": "dist/assets/vendor.js",
            "line": 44619,
            "description": "A computed property whose dependent keys are arrays and which is updated with\n\"one at a time\" semantics.",
            "extends": "Ember.ComputedProperty",
            "is_constructor": 1
        },
        "Ember.ArrayController": {
            "name": "Ember.ArrayController",
            "shortname": "Ember.ArrayController",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember",
            "file": "dist/assets/vendor.js",
            "line": 46027,
            "description": "`Ember.ArrayController` provides a way for you to publish a collection of\nobjects so that you can easily bind to the collection from a Handlebars\n`#each` helper, an `Ember.CollectionView`, or other controllers.\n\nThe advantage of using an `ArrayController` is that you only have to set up\nyour view bindings once; to change what's displayed, simply swap out the\n`model` property on the controller.\n\nFor example, imagine you wanted to display a list of items fetched via an XHR\nrequest. Create an `Ember.ArrayController` and set its `model` property:\n\n```javascript\nMyApp.listController = Ember.ArrayController.create();\n\n$.get('people.json', function(data) {\n  MyApp.listController.set('model', data);\n});\n```\n\nThen, create a view that binds to your new controller:\n\n```handlebars\n{{#each MyApp.listController}}\n  {{firstName}} {{lastName}}\n{{/each}}\n```\n\nAlthough you are binding to the controller, the behavior of this controller\nis to pass through any methods or properties to the underlying array. This\ncapability comes from `Ember.ArrayProxy`, which this class inherits from.\n\nSometimes you want to display computed properties within the body of an\n`#each` helper that depend on the underlying items in `model`, but are not\npresent on those items.   To do this, set `itemController` to the name of a\ncontroller (probably an `ObjectController`) that will wrap each individual item.\n\nFor example:\n\n```handlebars\n  {{#each post in controller}}\n    <li>{{post.title}} ({{post.titleLength}} characters)</li>\n  {{/each}}\n```\n\n```javascript\nApp.PostsController = Ember.ArrayController.extend({\n  itemController: 'post'\n});\n\nApp.PostController = Ember.ObjectController.extend({\n  // the `title` property will be proxied to the underlying post.\n\n  titleLength: function() {\n    return this.get('title').length;\n  }.property('title')\n});\n```\n\nIn some cases it is helpful to return a different `itemController` depending\non the particular item.  Subclasses can do this by overriding\n`lookupItemController`.\n\nFor example:\n\n```javascript\nApp.MyArrayController = Ember.ArrayController.extend({\n  lookupItemController: function( object ) {\n    if (object.get('isSpecial')) {\n      return \"special\"; // use App.SpecialController\n    } else {\n      return \"regular\"; // use App.RegularController\n    }\n  }\n});\n```\n\nThe itemController instances will have a `parentController` property set to\nthe `ArrayController` instance.",
            "extends": "Ember.ArrayProxy",
            "uses": [
                "Ember.SortableMixin",
                "Ember.ControllerMixin"
            ]
        },
        "Ember.Controller": {
            "name": "Ember.Controller",
            "shortname": "Ember.Controller",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember",
            "file": "dist/assets/vendor.js",
            "line": 46327,
            "extends": "Ember.Object",
            "uses": [
                "Ember.ControllerMixin"
            ]
        },
        "Ember.ObjectController": {
            "name": "Ember.ObjectController",
            "shortname": "Ember.ObjectController",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember",
            "file": "dist/assets/vendor.js",
            "line": 46347,
            "description": "`Ember.ObjectController` is part of Ember's Controller layer. It is intended\nto wrap a single object, proxying unhandled attempts to `get` and `set` to the underlying\nmodel object, and to forward unhandled action attempts to its `target`.\n\n`Ember.ObjectController` derives this functionality from its superclass\n`Ember.ObjectProxy` and the `Ember.ControllerMixin` mixin.",
            "extends": "Ember.ObjectProxy",
            "uses": [
                "Ember.ControllerMixin"
            ]
        },
        "Function": {
            "name": "Function",
            "shortname": "Function",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": ""
        },
        "Ember.ActionHandler": {
            "name": "Ember.ActionHandler",
            "shortname": "Ember.ActionHandler",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "Ember.ControllerMixin",
                "Ember.Route",
                "Ember.CoreView"
            ],
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember",
            "file": "dist/assets/vendor.js",
            "line": 46919,
            "description": "The `Ember.ActionHandler` mixin implements support for moving an `actions`\nproperty to an `_actions` property at extend time, and adding `_actions`\nto the object's mergedProperties list.\n\n`Ember.ActionHandler` is available on some familiar classes including\n`Ember.Route`, `Ember.View`, `Ember.Component`, and controllers such as\n`Ember.Controller` and `Ember.ObjectController`.\n(Internally the mixin is used by `Ember.CoreView`, `Ember.ControllerMixin`,\nand `Ember.Route` and available to the above classes through\ninheritance.)"
        },
        "Ember.Array": {
            "name": "Ember.Array",
            "shortname": "Ember.Array",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "Ember.MutableArray"
            ],
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember",
            "file": "dist/assets/vendor.js",
            "line": 47175,
            "description": "This mixin implements Observer-friendly Array-like behavior. It is not a\nconcrete implementation, but it can be used up by other classes that want\nto appear like arrays.\n\nFor example, ArrayProxy and ArrayController are both concrete classes that can\nbe instantiated to implement array-like behavior. Both of these classes use\nthe Array Mixin by way of the MutableArray mixin, which allows observable\nchanges to be made to the underlying array.\n\nUnlike `Ember.Enumerable,` this mixin defines methods specifically for\ncollections that provide index-ordered access to their contents. When you\nare designing code that needs to accept any kind of Array-like object, you\nshould use these methods instead of Array primitives because these will\nproperly notify observers of changes to the array.\n\nAlthough these methods are efficient, they do add a layer of indirection to\nyour application so it is a good idea to use them only when you need the\nflexibility of using both true JavaScript arrays and \"virtual\" arrays such\nas controllers and collections.\n\nYou can use the methods defined in this module to access and modify array\ncontents in a KVO-friendly way. You can also be notified whenever the\nmembership of an array changes by using `.observes('myArray.[]')`.\n\nTo support `Ember.Array` in your own class, you must override two\nprimitives to use it: `replace()` and `objectAt()`.\n\nNote that the Ember.Array mixin also incorporates the `Ember.Enumerable`\nmixin. All `Ember.Array`-like objects are also enumerable.",
            "uses": [
                "Ember.Enumerable"
            ],
            "since": "Ember 0.9.0"
        },
        "Ember.Comparable": {
            "name": "Ember.Comparable",
            "shortname": "Ember.Comparable",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember",
            "file": "dist/assets/vendor.js",
            "line": 47600,
            "description": "Implements some standard methods for comparing objects. Add this mixin to\nany class you create that can compare its instances.\n\nYou should implement the `compare()` method.",
            "since": "Ember 0.9"
        },
        "Ember.ControllerContentModelAliasDeprecation": {
            "name": "Ember.ControllerContentModelAliasDeprecation",
            "shortname": "Ember.ControllerContentModelAliasDeprecation",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember",
            "file": "dist/assets/vendor.js",
            "line": 47730,
            "description": "The ControllerContentModelAliasDeprecation mixin is used to provide a useful\ndeprecation warning when specifying `content` directly on a `Ember.Controller`\n(without also specifying `model`).\n\nEmber versions prior to 1.7 used `model` as an alias of `content`, but due to\nmuch confusion this alias was reversed (so `content` is now an alias of `model).\n\nThis change reduces many caveats with model/content, and also sets a\nsimple ground rule: Never set a controllers content, rather always set\nit's model and ember will do the right thing.\n\n\n`Ember.ControllerContentModelAliasDeprecation` is used internally by Ember in\n`Ember.Controller`.",
            "access": "private",
            "tagname": "",
            "since": "1.7.0"
        },
        "Ember.Copyable": {
            "name": "Ember.Copyable",
            "shortname": "Ember.Copyable",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "Ember.NativeArray",
                "Ember.Set"
            ],
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember",
            "file": "dist/assets/vendor.js",
            "line": 47798,
            "description": "Implements some standard methods for copying an object. Add this mixin to\nany object you create that can create a copy of itself. This mixin is\nadded automatically to the built-in array.\n\nYou should generally implement the `copy()` method to return a copy of the\nreceiver.\n\nNote that `frozenCopy()` will only work if you also implement\n`Ember.Freezable`.",
            "since": "Ember 0.9"
        },
        "Ember.Deferred": {
            "name": "Ember.Deferred",
            "shortname": "Ember.Deferred",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember",
            "file": "dist/assets/vendor.js",
            "line": 47907
        },
        "Ember.Enumerable": {
            "name": "Ember.Enumerable",
            "shortname": "Ember.Enumerable",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "Ember.Array",
                "Ember.MutableEnumerable",
                "DS.Errors"
            ],
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember",
            "file": "dist/assets/vendor.js",
            "line": 48058,
            "description": "This mixin defines the common interface implemented by enumerable objects\nin Ember. Most of these methods follow the standard Array iteration\nAPI defined up to JavaScript 1.8 (excluding language-specific features that\ncannot be emulated in older versions of JavaScript).\n\nThis mixin is applied automatically to the Array class on page load, so you\ncan use any of these methods on simple arrays. If Array already implements\none of these methods, the mixin will not override them.\n\n## Writing Your Own Enumerable\n\nTo make your own custom class enumerable, you need two items:\n\n1. You must have a length property. This property should change whenever\n   the number of items in your enumerable object changes. If you use this\n   with an `Ember.Object` subclass, you should be sure to change the length\n   property using `set().`\n\n2. You must implement `nextObject().` See documentation.\n\nOnce you have these two methods implemented, apply the `Ember.Enumerable` mixin\nto your class and you will be able to enumerate the contents of your object\nlike any other collection.\n\n## Using Ember Enumeration with Other Libraries\n\nMany other libraries provide some kind of iterator or enumeration like\nfacility. This is often where the most common API conflicts occur.\nEmber's API is designed to be as friendly as possible with other\nlibraries by implementing only methods that mostly correspond to the\nJavaScript 1.8 API.",
            "since": "Ember 0.9"
        },
        "Ember.Evented": {
            "name": "Ember.Evented",
            "shortname": "Ember.Evented",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "Ember.CoreView",
                "DS.Model",
                "DS.Errors",
                "DS.RecordArray"
            ],
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember",
            "file": "dist/assets/vendor.js",
            "line": 48988,
            "description": "This mixin allows for Ember objects to subscribe to and emit events.\n\n```javascript\nApp.Person = Ember.Object.extend(Ember.Evented, {\n  greet: function() {\n    // ...\n    this.trigger('greet');\n  }\n});\n\nvar person = App.Person.create();\n\nperson.on('greet', function() {\n  console.log('Our person has greeted');\n});\n\nperson.greet();\n\n// outputs: 'Our person has greeted'\n```\n\nYou can also chain multiple event subscriptions:\n\n```javascript\nperson.on('greet', function() {\n  console.log('Our person has greeted');\n}).one('greet', function() {\n  console.log('Offer one-time special');\n}).off('event', this, forgetThis);\n```"
        },
        "Ember.Freezable": {
            "name": "Ember.Freezable",
            "shortname": "Ember.Freezable",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "Ember.Set"
            ],
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember",
            "file": "dist/assets/vendor.js",
            "line": 49133,
            "description": "The `Ember.Freezable` mixin implements some basic methods for marking an\nobject as frozen. Once an object is frozen it should be read only. No changes\nmay be made the internal state of the object.\n\n## Enforcement\n\nTo fully support freezing in your subclass, you must include this mixin and\noverride any method that might alter any property on the object to instead\nraise an exception. You can check the state of an object by checking the\n`isFrozen` property.\n\nAlthough future versions of JavaScript may support language-level freezing\nobject objects, that is not the case today. Even if an object is freezable,\nit is still technically possible to modify the object, even though it could\nbreak other parts of your application that do not expect a frozen object to\nchange. It is, therefore, very important that you always respect the\n`isFrozen` property on all freezable objects.\n\n## Example Usage\n\nThe example below shows a simple object that implement the `Ember.Freezable`\nprotocol.\n\n```javascript\nContact = Ember.Object.extend(Ember.Freezable, {\n  firstName: null,\n  lastName: null,\n\n  // swaps the names\n  swapNames: function() {\n    if (this.get('isFrozen')) throw Ember.FROZEN_ERROR;\n    var tmp = this.get('firstName');\n    this.set('firstName', this.get('lastName'));\n    this.set('lastName', tmp);\n    return this;\n  }\n\n});\n\nc = Contact.create({ firstName: \"John\", lastName: \"Doe\" });\nc.swapNames();  // returns c\nc.freeze();\nc.swapNames();  // EXCEPTION\n```\n\n## Copying\n\nUsually the `Ember.Freezable` protocol is implemented in cooperation with the\n`Ember.Copyable` protocol, which defines a `frozenCopy()` method that will\nreturn a frozen object, if the object implements this method as well.",
            "since": "Ember 0.9"
        },
        "Ember.MutableArray": {
            "name": "Ember.MutableArray",
            "shortname": "Ember.MutableArray",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "Ember.ArrayProxy",
                "Ember.NativeArray"
            ],
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember",
            "file": "dist/assets/vendor.js",
            "line": 49250,
            "description": "This mixin defines the API for modifying array-like objects. These methods\ncan be applied only to a collection that keeps its items in an ordered set.\nIt builds upon the Array mixin and adds methods to modify the array.\nConcrete implementations of this class include ArrayProxy and ArrayController.\n\nIt is important to use the methods in this class to modify arrays so that\nchanges are observable. This allows the binding system in Ember to function\ncorrectly.\n\n\nNote that an Array can change even if it does not implement this mixin.\nFor example, one might implement a SparseArray that cannot be directly\nmodified, but if its underlying enumerable changes, it will change also.",
            "uses": [
                "Ember.Array",
                "Ember.MutableEnumerable"
            ]
        },
        "Ember.MutableEnumerable": {
            "name": "Ember.MutableEnumerable",
            "shortname": "Ember.MutableEnumerable",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "Ember.MutableArray",
                "Ember.SortableMixin",
                "Ember.Set"
            ],
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember",
            "file": "dist/assets/vendor.js",
            "line": 49561,
            "description": "This mixin defines the API for modifying generic enumerables. These methods\ncan be applied to an object regardless of whether it is ordered or\nunordered.\n\nNote that an Enumerable can change even if it does not implement this mixin.\nFor example, a MappedEnumerable cannot be directly modified but if its\nunderlying enumerable changes, it will change also.\n\n## Adding Objects\n\nTo add an object to an enumerable, use the `addObject()` method. This\nmethod will only add the object to the enumerable if the object is not\nalready present and is of a type supported by the enumerable.\n\n```javascript\nset.addObject(contact);\n```\n\n## Removing Objects\n\nTo remove an object from an enumerable, use the `removeObject()` method. This\nwill only remove the object if it is present in the enumerable, otherwise\nthis method has no effect.\n\n```javascript\nset.removeObject(contact);\n```\n\n## Implementing In Your Own Code\n\nIf you are implementing an object and want to support this API, just include\nthis mixin in your class and implement the required methods. In your unit\ntests, be sure to apply the Ember.MutableEnumerableTests to your object.",
            "uses": [
                "Ember.Enumerable"
            ]
        },
        "Ember.Observable": {
            "name": "Ember.Observable",
            "shortname": "Ember.Observable",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "Ember.NativeArray",
                "Ember.Object"
            ],
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember",
            "file": "dist/assets/vendor.js",
            "line": 49696,
            "description": "## Overview\n\nThis mixin provides properties and property observing functionality, core\nfeatures of the Ember object model.\n\nProperties and observers allow one object to observe changes to a\nproperty on another object. This is one of the fundamental ways that\nmodels, controllers and views communicate with each other in an Ember\napplication.\n\nAny object that has this mixin applied can be used in observer\noperations. That includes `Ember.Object` and most objects you will\ninteract with as you write your Ember application.\n\nNote that you will not generally apply this mixin to classes yourself,\nbut you will use the features provided by this module frequently, so it\nis important to understand how to use it.\n\n## Using `get()` and `set()`\n\nBecause of Ember's support for bindings and observers, you will always\naccess properties using the get method, and set properties using the\nset method. This allows the observing objects to be notified and\ncomputed properties to be handled properly.\n\nMore documentation about `get` and `set` are below.\n\n## Observing Property Changes\n\nYou typically observe property changes simply by adding the `observes`\ncall to the end of your method declarations in classes that you write.\nFor example:\n\n```javascript\nEmber.Object.extend({\n  valueObserver: function() {\n    // Executes whenever the \"value\" property changes\n  }.observes('value')\n});\n```\n\nAlthough this is the most common way to add an observer, this capability\nis actually built into the `Ember.Object` class on top of two methods\ndefined in this mixin: `addObserver` and `removeObserver`. You can use\nthese two methods to add and remove observers yourself if you need to\ndo so at runtime.\n\nTo add an observer for a property, call:\n\n```javascript\nobject.addObserver('propertyKey', targetObject, targetAction)\n```\n\nThis will call the `targetAction` method on the `targetObject` whenever\nthe value of the `propertyKey` changes.\n\nNote that if `propertyKey` is a computed property, the observer will be\ncalled when any of the property dependencies are changed, even if the\nresulting value of the computed property is unchanged. This is necessary\nbecause computed properties are not computed until `get` is called."
        },
        "Ember.PromiseProxyMixin": {
            "name": "Ember.PromiseProxyMixin",
            "shortname": "Ember.PromiseProxyMixin",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "DS.PromiseArray",
                "DS.PromiseObject"
            ],
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "",
            "file": "dist/assets/vendor.js",
            "line": 50167,
            "description": "A low level mixin making ObjectProxy, ObjectController or ArrayController's promise aware.\n\n```javascript\nvar ObjectPromiseController = Ember.ObjectController.extend(Ember.PromiseProxyMixin);\n\nvar controller = ObjectPromiseController.create({\n  promise: $.getJSON('/some/remote/data.json')\n});\n\ncontroller.then(function(json){\n   // the json\n}, function(reason) {\n   // the reason why you have no json\n});\n```\n\nthe controller has bindable attributes which\ntrack the promises life cycle\n\n```javascript\ncontroller.get('isPending')   //=> true\ncontroller.get('isSettled')  //=> false\ncontroller.get('isRejected')  //=> false\ncontroller.get('isFulfilled') //=> false\n```\n\nWhen the the $.getJSON completes, and the promise is fulfilled\nwith json, the life cycle attributes will update accordingly.\n\n```javascript\ncontroller.get('isPending')   //=> false\ncontroller.get('isSettled')   //=> true\ncontroller.get('isRejected')  //=> false\ncontroller.get('isFulfilled') //=> true\n```\n\nAs the controller is an ObjectController, and the json now its content,\nall the json properties will be available directly from the controller.\n\n```javascript\n// Assuming the following json:\n{\n  firstName: 'Stefan',\n  lastName: 'Penner'\n}\n\n// both properties will accessible on the controller\ncontroller.get('firstName') //=> 'Stefan'\ncontroller.get('lastName')  //=> 'Penner'\n```\n\nIf the controller is backing a template, the attributes are\nbindable from within that template\n\n```handlebars\n{{#if isPending}}\n  loading...\n{{else}}\n  firstName: {{firstName}}\n  lastName: {{lastName}}\n{{/if}}\n```"
        },
        "Ember.SortableMixin": {
            "name": "Ember.SortableMixin",
            "shortname": "Ember.SortableMixin",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "Ember.ArrayController"
            ],
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember",
            "file": "dist/assets/vendor.js",
            "line": 50373,
            "description": "`Ember.SortableMixin` provides a standard interface for array proxies\nto specify a sort order and maintain this sorting when objects are added,\nremoved, or updated without changing the implicit order of their underlying\nmodelarray:\n\n```javascript\nsongs = [\n  {trackNumber: 4, title: 'Ob-La-Di, Ob-La-Da'},\n  {trackNumber: 2, title: 'Back in the U.S.S.R.'},\n  {trackNumber: 3, title: 'Glass Onion'},\n];\n\nsongsController = Ember.ArrayController.create({\n  model: songs,\n  sortProperties: ['trackNumber'],\n  sortAscending: true\n});\n\nsongsController.get('firstObject');  // {trackNumber: 2, title: 'Back in the U.S.S.R.'}\n\nsongsController.addObject({trackNumber: 1, title: 'Dear Prudence'});\nsongsController.get('firstObject');  // {trackNumber: 1, title: 'Dear Prudence'}\n```\n\nIf you add or remove the properties to sort by or change the sort direction the model\nsort order will be automatically updated.\n\n```javascript\nsongsController.set('sortProperties', ['title']);\nsongsController.get('firstObject'); // {trackNumber: 2, title: 'Back in the U.S.S.R.'}\n\nsongsController.toggleProperty('sortAscending');\nsongsController.get('firstObject'); // {trackNumber: 4, title: 'Ob-La-Di, Ob-La-Da'}\n```\n\nSortableMixin works by sorting the arrangedContent array, which is the array that\narrayProxy displays. Due to the fact that the underlying 'content' array is not changed, that\narray will not display the sorted list:\n\n ```javascript\nsongsController.get('content').get('firstObject'); // Returns the unsorted original content\nsongsController.get('firstObject'); // Returns the sorted content.\n```\n\nAlthough the sorted content can also be accessed through the arrangedContent property,\nit is preferable to use the proxied class and not the arrangedContent array directly.",
            "uses": [
                "Ember.MutableEnumerable"
            ]
        },
        "Ember.TargetActionSupport": {
            "name": "Ember.TargetActionSupport",
            "shortname": "Ember.TargetActionSupport",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "Ember.TextSupport"
            ],
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember",
            "file": "dist/assets/vendor.js",
            "line": 50713,
            "description": "`Ember.TargetActionSupport` is a mixin that can be included in a class\nto add a `triggerAction` method with semantics similar to the Handlebars\n`{{action}}` helper. In normal Ember usage, the `{{action}}` helper is\nusually the best choice. This mixin is most often useful when you are\ndoing more complex event handling in View objects.\n\nSee also `Ember.ViewTargetActionSupport`, which has\nview-aware defaults for target and actionContext.",
            "extends": "Ember.Mixin"
        },
        "Ember.ArrayProxy": {
            "name": "Ember.ArrayProxy",
            "shortname": "Ember.ArrayProxy",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember",
            "file": "dist/assets/vendor.js",
            "line": 50886,
            "description": "An ArrayProxy wraps any other object that implements `Ember.Array` and/or\n`Ember.MutableArray,` forwarding all requests. This makes it very useful for\na number of binding use cases or other cases where being able to swap\nout the underlying array is useful.\n\nA simple example of usage:\n\n```javascript\nvar pets = ['dog', 'cat', 'fish'];\nvar ap = Ember.ArrayProxy.create({ content: Ember.A(pets) });\n\nap.get('firstObject');                        // 'dog'\nap.set('content', ['amoeba', 'paramecium']);\nap.get('firstObject');                        // 'amoeba'\n```\n\nThis class can also be useful as a layer to transform the contents of\nan array, as they are accessed. This can be done by overriding\n`objectAtContent`:\n\n```javascript\nvar pets = ['dog', 'cat', 'fish'];\nvar ap = Ember.ArrayProxy.create({\n    content: Ember.A(pets),\n    objectAtContent: function(idx) {\n        return this.get('content').objectAt(idx).toUpperCase();\n    }\n});\n\nap.get('firstObject'); // . 'DOG'\n```",
            "extends": "Ember.Object",
            "uses": [
                "Ember.MutableArray"
            ]
        },
        "Ember.CoreObject": {
            "name": "Ember.CoreObject",
            "shortname": "Ember.CoreObject",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember",
            "file": "dist/assets/vendor.js",
            "line": 51524
        },
        "Ember.EachProxy": {
            "name": "Ember.EachProxy",
            "shortname": "Ember.EachProxy",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember",
            "file": "dist/assets/vendor.js",
            "line": 52329,
            "description": "This is the object instance returned when you get the `@each` property on an\narray. It uses the unknownProperty handler to automatically create\nEachArray instances for property names.",
            "access": "private",
            "tagname": "",
            "extends": "Ember.Object"
        },
        "Ember.Namespace": {
            "name": "Ember.Namespace",
            "shortname": "Ember.Namespace",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember",
            "file": "dist/assets/vendor.js",
            "line": 52615,
            "description": "A Namespace is an object usually used to contain other objects or methods\nsuch as an application or framework. Create a namespace anytime you want\nto define one of these new containers.\n\n# Example Usage\n\n```javascript\nMyFramework = Ember.Namespace.create({\n  VERSION: '1.0.0'\n});\n```",
            "extends": "Ember.Object"
        },
        "Ember.NativeArray": {
            "name": "Ember.NativeArray",
            "shortname": "Ember.NativeArray",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember",
            "file": "dist/assets/vendor.js",
            "line": 52913,
            "description": "The NativeArray mixin contains the properties needed to to make the native\nArray support Ember.MutableArray and all of its dependent APIs. Unless you\nhave `Ember.EXTEND_PROTOTYPES` or `Ember.EXTEND_PROTOTYPES.Array` set to\nfalse, this will be applied automatically. Otherwise you can apply the mixin\nat anytime by calling `Ember.NativeArray.activate`.",
            "uses": [
                "Ember.MutableArray",
                "Ember.Observable",
                "Ember.Copyable"
            ]
        },
        "Ember.Object": {
            "name": "Ember.Object",
            "shortname": "Ember.Object",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember",
            "file": "dist/assets/vendor.js",
            "line": 53143,
            "description": "`Ember.Object` is the main base class for all Ember objects. It is a subclass\nof `Ember.CoreObject` with the `Ember.Observable` mixin applied. For details,\nsee the documentation for each of these.",
            "extends": "Ember.CoreObject",
            "uses": [
                "Ember.Observable"
            ]
        },
        "Ember.ObjectProxy": {
            "name": "Ember.ObjectProxy",
            "shortname": "Ember.ObjectProxy",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember",
            "file": "dist/assets/vendor.js",
            "line": 53216,
            "description": "`Ember.ObjectProxy` forwards all properties not defined by the proxy itself\nto a proxied `content` object.\n\n```javascript\nobject = Ember.Object.create({\n  name: 'Foo'\n});\n\nproxy = Ember.ObjectProxy.create({\n  content: object\n});\n\n// Access and change existing properties\nproxy.get('name')          // 'Foo'\nproxy.set('name', 'Bar');\nobject.get('name')         // 'Bar'\n\n// Create new 'description' property on `object`\nproxy.set('description', 'Foo is a whizboo baz');\nobject.get('description')  // 'Foo is a whizboo baz'\n```\n\nWhile `content` is unset, setting a property to be delegated will throw an\nError.\n\n```javascript\nproxy = Ember.ObjectProxy.create({\n  content: null,\n  flag: null\n});\nproxy.set('flag', true);\nproxy.get('flag');         // true\nproxy.get('foo');          // undefined\nproxy.set('foo', 'data');  // throws Error\n```\n\nDelegated properties can be bound to and will change when content is updated.\n\nComputed properties on the proxy itself can depend on delegated properties.\n\n```javascript\nProxyWithComputedProperty = Ember.ObjectProxy.extend({\n  fullName: function () {\n    var firstName = this.get('firstName'),\n        lastName = this.get('lastName');\n    if (firstName && lastName) {\n      return firstName + ' ' + lastName;\n    }\n    return firstName || lastName;\n  }.property('firstName', 'lastName')\n});\n\nproxy = ProxyWithComputedProperty.create();\n\nproxy.get('fullName');  // undefined\nproxy.set('content', {\n  firstName: 'Tom', lastName: 'Dale'\n}); // triggers property change for fullName on proxy\n\nproxy.get('fullName');  // 'Tom Dale'\n```",
            "extends": "Ember.Object"
        },
        "Ember.Set": {
            "name": "Ember.Set",
            "shortname": "Ember.Set",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember",
            "file": "dist/assets/vendor.js",
            "line": 53390,
            "description": "An unordered collection of objects.\n\nA Set works a bit like an array except that its items are not ordered. You\ncan create a set to efficiently test for membership for an object. You can\nalso iterate through a set just like an array, even accessing objects by\nindex, however there is no guarantee as to their order.\n\nAll Sets are observable via the Enumerable Observer API - which works\non any enumerable object including both Sets and Arrays.\n\n## Creating a Set\n\nYou can create a set like you would most objects using\n`new Ember.Set()`. Most new sets you create will be empty, but you can\nalso initialize the set with some content by passing an array or other\nenumerable of objects to the constructor.\n\nFinally, you can pass in an existing set and the set will be copied. You\ncan also create a copy of a set by calling `Ember.Set#copy()`.\n\n```javascript\n// creates a new empty set\nvar foundNames = new Ember.Set();\n\n// creates a set with four names in it.\nvar names = new Ember.Set([\"Charles\", \"Tom\", \"Juan\", \"Alex\"]); // :P\n\n// creates a copy of the names set.\nvar namesCopy = new Ember.Set(names);\n\n// same as above.\nvar anotherNamesCopy = names.copy();\n```\n\n## Adding/Removing Objects\n\nYou generally add or remove objects from a set using `add()` or\n`remove()`. You can add any type of object including primitives such as\nnumbers, strings, and booleans.\n\nUnlike arrays, objects can only exist one time in a set. If you call `add()`\non a set with the same object multiple times, the object will only be added\nonce. Likewise, calling `remove()` with the same object multiple times will\nremove the object the first time and have no effect on future calls until\nyou add the object to the set again.\n\nNOTE: You cannot add/remove `null` or `undefined` to a set. Any attempt to do\nso will be ignored.\n\nIn addition to add/remove you can also call `push()`/`pop()`. Push behaves\njust like `add()` but `pop()`, unlike `remove()` will pick an arbitrary\nobject, remove it and return it. This is a good way to use a set as a job\nqueue when you don't care which order the jobs are executed in.\n\n## Testing for an Object\n\nTo test for an object's presence in a set you simply call\n`Ember.Set#contains()`.\n\n## Observing changes\n\nWhen using `Ember.Set`, you can observe the `\"[]\"` property to be\nalerted whenever the content changes. You can also add an enumerable\nobserver to the set to be notified of specific objects that are added and\nremoved from the set. See [Ember.Enumerable](/api/classes/Ember.Enumerable.html)\nfor more information on enumerables.\n\nThis is often unhelpful. If you are filtering sets of objects, for instance,\nit is very inefficient to re-filter all of the items each time the set\nchanges. It would be better if you could just adjust the filtered set based\non what was changed on the original set. The same issue applies to merging\nsets, as well.\n\n## Other Methods\n\n`Ember.Set` primary implements other mixin APIs. For a complete reference\non the methods you will use with `Ember.Set`, please consult these mixins.\nThe most useful ones will be `Ember.Enumerable` and\n`Ember.MutableEnumerable` which implement most of the common iterator\nmethods you are used to on Array.\n\nNote that you can also use the `Ember.Copyable` and `Ember.Freezable`\nAPIs on `Ember.Set` as well. Once a set is frozen it can no longer be\nmodified. The benefit of this is that when you call `frozenCopy()` on it,\nEmber will avoid making copies of the set. This allows you to write\ncode that can know with certainty when the underlying set data will or\nwill not be modified.",
            "extends": "Ember.CoreObject",
            "uses": [
                "Ember.MutableEnumerable",
                "Ember.Copyable",
                "Ember.Freezable"
            ],
            "since": "Ember 0.9"
        },
        "Ember.SubArray": {
            "name": "Ember.SubArray",
            "shortname": "Ember.SubArray",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember",
            "file": "dist/assets/vendor.js",
            "line": 54241,
            "description": "An `Ember.SubArray` tracks an array in a way similar to, but more specialized\nthan, `Ember.TrackedArray`.  It is useful for keeping track of the indexes of\nitems within a filtered array.",
            "itemtype": "method",
            "params": [
                {
                    "name": "length",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            }
        },
        "Ember.TrackedArray": {
            "name": "Ember.TrackedArray",
            "shortname": "Ember.TrackedArray",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-testing",
            "namespace": "Ember",
            "file": "dist/assets/vendor.js",
            "line": 54423,
            "description": "An `Ember.TrackedArray` tracks array operations.  It's useful when you want to\nlazily compute the indexes of items in an array after they've been shifted by\nsubsequent operations.\nthe initial items for the starting state of retain:n.",
            "itemtype": "method",
            "params": [
                {
                    "name": "items",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            }
        },
        "Ember.Test.Adapter": {
            "name": "Ember.Test.Adapter",
            "shortname": "Ember.Test.Adapter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-testing",
            "namespace": "Ember.Test",
            "file": "dist/assets/vendor.js",
            "line": 54795,
            "description": "The primary purpose of this class is to create hooks that can be implemented\nby an adapter for various test frameworks."
        },
        "Ember.Test.QUnitAdapter": {
            "name": "Ember.Test.QUnitAdapter",
            "shortname": "Ember.Test.QUnitAdapter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-testing",
            "namespace": "Ember",
            "file": "dist/assets/vendor.js",
            "line": 54851,
            "description": "This class implements the methods defined by Ember.Test.Adapter for the\nQUnit testing framework.",
            "extends": "Ember.Test.Adapter"
        },
        "Ember.Test": {
            "name": "Ember.Test",
            "shortname": "Ember.Test",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember",
            "file": "dist/assets/vendor.js",
            "line": 55571,
            "description": "This is a container for an assortment of testing related functionality:\n\n* Choose your default test adapter (for your framework of choice).\n* Register/Unregister additional test helpers.\n* Setup callbacks to be fired when the test helpers are injected into\n  your application."
        },
        "Ember.ComponentTemplateDeprecation": {
            "name": "Ember.ComponentTemplateDeprecation",
            "shortname": "Ember.ComponentTemplateDeprecation",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember",
            "file": "dist/assets/vendor.js",
            "line": 56165,
            "description": "The ComponentTemplateDeprecation mixin is used to provide a useful\ndeprecation warning when using either `template` or `templateName` with\na component. The `template` and `templateName` properties specified at\nextend time are moved to `layout` and `layoutName` respectively.\n\n`Ember.ComponentTemplateDeprecation` is used internally by Ember in\n`Ember.Component`."
        },
        "Ember.ViewTargetActionSupport": {
            "name": "Ember.ViewTargetActionSupport",
            "shortname": "Ember.ViewTargetActionSupport",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember",
            "file": "dist/assets/vendor.js",
            "line": 56234,
            "description": "`Ember.ViewTargetActionSupport` is a mixin that can be included in a\nview class to add a `triggerAction` method with semantics similar to\nthe Handlebars `{{action}}` helper. It provides intelligent defaults\nfor the action's target: the view's controller; and the context that is\nsent with the action: the view's context.\n\nNote: In normal Ember usage, the `{{action}}` helper is usually the best\nchoice. This mixin is most often useful when you are doing more complex\nevent handling in custom View subclasses.\n\nFor example:\n\n```javascript\nApp.SaveButtonView = Ember.View.extend(Ember.ViewTargetActionSupport, {\n  action: 'save',\n  click: function() {\n    this.triggerAction(); // Sends the `save` action, along with the current context\n                          // to the current controller\n  }\n});\n```\n\nThe `action` can be provided as properties of an optional object argument\nto `triggerAction` as well.\n\n```javascript\nApp.SaveButtonView = Ember.View.extend(Ember.ViewTargetActionSupport, {\n  click: function() {\n    this.triggerAction({\n      action: 'save'\n    }); // Sends the `save` action, along with the current context\n        // to the current controller\n  }\n});\n```",
            "extends": "Ember.TargetActionSupport"
        },
        "Ember.EventDispatcher": {
            "name": "Ember.EventDispatcher",
            "shortname": "Ember.EventDispatcher",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember",
            "file": "dist/assets/vendor.js",
            "line": 56312,
            "description": "`Ember.EventDispatcher` handles delegating browser events to their\ncorresponding `Ember.Views.` For example, when you click on a view,\n`Ember.EventDispatcher` ensures that that view's `mouseDown` method gets\ncalled.",
            "access": "private",
            "tagname": "",
            "extends": "Ember.Object"
        },
        "Ember.RenderBuffer": {
            "name": "Ember.RenderBuffer",
            "shortname": "Ember.RenderBuffer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember",
            "file": "dist/assets/vendor.js",
            "line": 56733,
            "description": "`Ember.RenderBuffer` gathers information regarding the view and generates the\nfinal representation. `Ember.RenderBuffer` will generate HTML which can be pushed\nto the DOM.\n```javascript\nvar buffer = Ember.RenderBuffer('div');\n```",
            "is_constructor": 1,
            "params": [
                {
                    "name": "tagName",
                    "description": "tag name (such as 'div' or 'p') used for the buffer",
                    "type": "String"
                }
            ],
            "return": {
                "description": "NewExpression"
            }
        },
        "Ember.CollectionView": {
            "name": "Ember.CollectionView",
            "shortname": "Ember.CollectionView",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember",
            "file": "dist/assets/vendor.js",
            "line": 57422,
            "description": "`Ember.CollectionView` is an `Ember.View` descendent responsible for managing\na collection (an array or array-like object) by maintaining a child view object\nand associated DOM representation for each item in the array and ensuring\nthat child views and their associated rendered HTML are updated when items in\nthe array are added, removed, or replaced.\n\n## Setting content\n\nThe managed collection of objects is referenced as the `Ember.CollectionView`\ninstance's `content` property.\n\n```javascript\nsomeItemsView = Ember.CollectionView.create({\n  content: ['A', 'B','C']\n})\n```\n\nThe view for each item in the collection will have its `content` property set\nto the item.\n\n## Specifying itemViewClass\n\nBy default the view class for each item in the managed collection will be an\ninstance of `Ember.View`. You can supply a different class by setting the\n`CollectionView`'s `itemViewClass` property.\n\nGiven an empty `<body>` and the following code:\n\n```javascript\nsomeItemsView = Ember.CollectionView.create({\n  classNames: ['a-collection'],\n  content: ['A','B','C'],\n  itemViewClass: Ember.View.extend({\n    template: Ember.Handlebars.compile(\"the letter: {{view.content}}\")\n  })\n});\n\nsomeItemsView.appendTo('body');\n```\n\nWill result in the following HTML structure\n\n```html\n<div class=\"ember-view a-collection\">\n  <div class=\"ember-view\">the letter: A</div>\n  <div class=\"ember-view\">the letter: B</div>\n  <div class=\"ember-view\">the letter: C</div>\n</div>\n```\n\n## Automatic matching of parent/child tagNames\n\nSetting the `tagName` property of a `CollectionView` to any of\n\"ul\", \"ol\", \"table\", \"thead\", \"tbody\", \"tfoot\", \"tr\", or \"select\" will result\nin the item views receiving an appropriately matched `tagName` property.\n\nGiven an empty `<body>` and the following code:\n\n```javascript\nanUnorderedListView = Ember.CollectionView.create({\n  tagName: 'ul',\n  content: ['A','B','C'],\n  itemViewClass: Ember.View.extend({\n    template: Ember.Handlebars.compile(\"the letter: {{view.content}}\")\n  })\n});\n\nanUnorderedListView.appendTo('body');\n```\n\nWill result in the following HTML structure\n\n```html\n<ul class=\"ember-view a-collection\">\n  <li class=\"ember-view\">the letter: A</li>\n  <li class=\"ember-view\">the letter: B</li>\n  <li class=\"ember-view\">the letter: C</li>\n</ul>\n```\n\nAdditional `tagName` pairs can be provided by adding to\n`Ember.CollectionView.CONTAINER_MAP `\n\n```javascript\nEmber.CollectionView.CONTAINER_MAP['article'] = 'section'\n```\n\n## Programmatic creation of child views\n\nFor cases where additional customization beyond the use of a single\n`itemViewClass` or `tagName` matching is required CollectionView's\n`createChildView` method can be overidden:\n\n```javascript\nCustomCollectionView = Ember.CollectionView.extend({\n  createChildView: function(viewClass, attrs) {\n    if (attrs.content.kind == 'album') {\n      viewClass = App.AlbumView;\n    } else {\n      viewClass = App.SongView;\n    }\n    return this._super(viewClass, attrs);\n  }\n});\n```\n\n## Empty View\n\nYou can provide an `Ember.View` subclass to the `Ember.CollectionView`\ninstance as its `emptyView` property. If the `content` property of a\n`CollectionView` is set to `null` or an empty array, an instance of this view\nwill be the `CollectionView`s only child.\n\n```javascript\naListWithNothing = Ember.CollectionView.create({\n  classNames: ['nothing']\n  content: null,\n  emptyView: Ember.View.extend({\n    template: Ember.Handlebars.compile(\"The collection is empty\")\n  })\n});\n\naListWithNothing.appendTo('body');\n```\n\nWill result in the following HTML structure\n\n```html\n<div class=\"ember-view nothing\">\n  <div class=\"ember-view\">\n    The collection is empty\n  </div>\n</div>\n```\n\n## Adding and Removing items\n\nThe `childViews` property of a `CollectionView` should not be directly\nmanipulated. Instead, add, remove, replace items from its `content` property.\nThis will trigger appropriate changes to its rendered HTML.",
            "extends": "Ember.ContainerView",
            "since": "Ember 0.9"
        },
        "Ember.Component": {
            "name": "Ember.Component",
            "shortname": "Ember.Component",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember",
            "file": "dist/assets/vendor.js",
            "line": 57857,
            "description": "An `Ember.Component` is a view that is completely\nisolated. Property access in its templates go\nto the view object and actions are targeted at\nthe view object. There is no access to the\nsurrounding context or outer controller; all\ncontextual information must be passed in.\n\nThe easiest way to create an `Ember.Component` is via\na template. If you name a template\n`components/my-foo`, you will be able to use\n`{{my-foo}}` in other templates, which will make\nan instance of the isolated component.\n\n```handlebars\n{{app-profile person=currentUser}}\n```\n\n```handlebars\n<!-- app-profile template -->\n<h1>{{person.title}}</h1>\n<img {{bind-attr src=person.avatar}}>\n<p class='signature'>{{person.signature}}</p>\n```\n\nYou can use `yield` inside a template to\ninclude the **contents** of any block attached to\nthe component. The block will be executed in the\ncontext of the surrounding context or outer controller:\n\n```handlebars\n{{#app-profile person=currentUser}}\n  <p>Admin mode</p>\n  {{! Executed in the controller's context. }}\n{{/app-profile}}\n```\n\n```handlebars\n<!-- app-profile template -->\n<h1>{{person.title}}</h1>\n{{! Executed in the components context. }}\n{{yield}} {{! block contents }}\n```\n\nIf you want to customize the component, in order to\nhandle events or actions, you implement a subclass\nof `Ember.Component` named after the name of the\ncomponent. Note that `Component` needs to be appended to the name of\nyour subclass like `AppProfileComponent`.\n\nFor example, you could implement the action\n`hello` for the `app-profile` component:\n\n```javascript\nApp.AppProfileComponent = Ember.Component.extend({\n  actions: {\n    hello: function(name) {\n      console.log(\"Hello\", name);\n    }\n  }\n});\n```\n\nAnd then use it in the component's template:\n\n```handlebars\n<!-- app-profile template -->\n\n<h1>{{person.title}}</h1>\n{{yield}} <!-- block contents -->\n\n<button {{action 'hello' person.name}}>\n  Say Hello to {{person.name}}\n</button>\n```\n\nComponents must have a `-` in their name to avoid\nconflicts with built-in controls that wrap HTML\nelements. This is consistent with the same\nrequirement in web components.",
            "extends": "Ember.View"
        },
        "Ember.ContainerView": {
            "name": "Ember.ContainerView",
            "shortname": "Ember.ContainerView",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember",
            "file": "dist/assets/vendor.js",
            "line": 58192,
            "description": "A `ContainerView` is an `Ember.View` subclass that implements `Ember.MutableArray`\nallowing programmatic management of its child views.\n\n## Setting Initial Child Views\n\nThe initial array of child views can be set in one of two ways. You can\nprovide a `childViews` property at creation time that contains instance of\n`Ember.View`:\n\n```javascript\naContainer = Ember.ContainerView.create({\n  childViews: [Ember.View.create(), Ember.View.create()]\n});\n```\n\nYou can also provide a list of property names whose values are instances of\n`Ember.View`:\n\n```javascript\naContainer = Ember.ContainerView.create({\n  childViews: ['aView', 'bView', 'cView'],\n  aView: Ember.View.create(),\n  bView: Ember.View.create(),\n  cView: Ember.View.create()\n});\n```\n\nThe two strategies can be combined:\n\n```javascript\naContainer = Ember.ContainerView.create({\n  childViews: ['aView', Ember.View.create()],\n  aView: Ember.View.create()\n});\n```\n\nEach child view's rendering will be inserted into the container's rendered\nHTML in the same order as its position in the `childViews` property.\n\n## Adding and Removing Child Views\n\nThe container view implements `Ember.MutableArray` allowing programmatic management of its child views.\n\nTo remove a view, pass that view into a `removeObject` call on the container view.\n\nGiven an empty `<body>` the following code\n\n```javascript\naContainer = Ember.ContainerView.create({\n  classNames: ['the-container'],\n  childViews: ['aView', 'bView'],\n  aView: Ember.View.create({\n    template: Ember.Handlebars.compile(\"A\")\n  }),\n  bView: Ember.View.create({\n    template: Ember.Handlebars.compile(\"B\")\n  })\n});\n\naContainer.appendTo('body');\n```\n\nResults in the HTML\n\n```html\n<div class=\"ember-view the-container\">\n  <div class=\"ember-view\">A</div>\n  <div class=\"ember-view\">B</div>\n</div>\n```\n\nRemoving a view\n\n```javascript\naContainer.toArray();  // [aContainer.aView, aContainer.bView]\naContainer.removeObject(aContainer.get('bView'));\naContainer.toArray();  // [aContainer.aView]\n```\n\nWill result in the following HTML\n\n```html\n<div class=\"ember-view the-container\">\n  <div class=\"ember-view\">A</div>\n</div>\n```\n\nSimilarly, adding a child view is accomplished by adding `Ember.View` instances to the\ncontainer view.\n\nGiven an empty `<body>` the following code\n\n```javascript\naContainer = Ember.ContainerView.create({\n  classNames: ['the-container'],\n  childViews: ['aView', 'bView'],\n  aView: Ember.View.create({\n    template: Ember.Handlebars.compile(\"A\")\n  }),\n  bView: Ember.View.create({\n    template: Ember.Handlebars.compile(\"B\")\n  })\n});\n\naContainer.appendTo('body');\n```\n\nResults in the HTML\n\n```html\n<div class=\"ember-view the-container\">\n  <div class=\"ember-view\">A</div>\n  <div class=\"ember-view\">B</div>\n</div>\n```\n\nAdding a view\n\n```javascript\nAnotherViewClass = Ember.View.extend({\n  template: Ember.Handlebars.compile(\"Another view\")\n});\n\naContainer.toArray();  // [aContainer.aView, aContainer.bView]\naContainer.pushObject(AnotherViewClass.create());\naContainer.toArray(); // [aContainer.aView, aContainer.bView, <AnotherViewClass instance>]\n```\n\nWill result in the following HTML\n\n```html\n<div class=\"ember-view the-container\">\n  <div class=\"ember-view\">A</div>\n  <div class=\"ember-view\">B</div>\n  <div class=\"ember-view\">Another view</div>\n</div>\n```\n\n## Templates and Layout\n\nA `template`, `templateName`, `defaultTemplate`, `layout`, `layoutName` or\n`defaultLayout` property on a container view will not result in the template\nor layout being rendered. The HTML contents of a `Ember.ContainerView`'s DOM\nrepresentation will only be the rendered HTML of its child views.",
            "extends": "Ember.View"
        },
        "Ember.CoreView": {
            "name": "Ember.CoreView",
            "shortname": "Ember.CoreView",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember",
            "file": "dist/assets/vendor.js",
            "line": 58688,
            "description": "`Ember.CoreView` is an abstract class that exists to give view-like behavior\nto both Ember's main view class `Ember.View` and other classes like\n`Ember._SimpleMetamorphView` that don't need the fully functionaltiy of\n`Ember.View`.\n\nUnless you have specific needs for `CoreView`, you will use `Ember.View`\nin your applications.",
            "extends": "Ember.Object",
            "uses": [
                "Ember.Evented",
                "Ember.ActionHandler"
            ]
        },
        "Ember.View": {
            "name": "Ember.View",
            "shortname": "Ember.View",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember",
            "file": "dist/assets/vendor.js",
            "line": 59687,
            "description": "`Ember.View` is the class in Ember responsible for encapsulating templates of\nHTML content, combining templates with data to render as sections of a page's\nDOM, and registering and responding to user-initiated events.\n\n## HTML Tag\n\nThe default HTML tag name used for a view's DOM representation is `div`. This\ncan be customized by setting the `tagName` property. The following view\nclass:\n\n```javascript\nParagraphView = Ember.View.extend({\n  tagName: 'em'\n});\n```\n\nWould result in instances with the following HTML:\n\n```html\n<em id=\"ember1\" class=\"ember-view\"></em>\n```\n\n## HTML `class` Attribute\n\nThe HTML `class` attribute of a view's tag can be set by providing a\n`classNames` property that is set to an array of strings:\n\n```javascript\nMyView = Ember.View.extend({\n  classNames: ['my-class', 'my-other-class']\n});\n```\n\nWill result in view instances with an HTML representation of:\n\n```html\n<div id=\"ember1\" class=\"ember-view my-class my-other-class\"></div>\n```\n\n`class` attribute values can also be set by providing a `classNameBindings`\nproperty set to an array of properties names for the view. The return value\nof these properties will be added as part of the value for the view's `class`\nattribute. These properties can be computed properties:\n\n```javascript\nMyView = Ember.View.extend({\n  classNameBindings: ['propertyA', 'propertyB'],\n  propertyA: 'from-a',\n  propertyB: function() {\n    if (someLogic) { return 'from-b'; }\n  }.property()\n});\n```\n\nWill result in view instances with an HTML representation of:\n\n```html\n<div id=\"ember1\" class=\"ember-view from-a from-b\"></div>\n```\n\nIf the value of a class name binding returns a boolean the property name\nitself will be used as the class name if the property is true. The class name\nwill not be added if the value is `false` or `undefined`.\n\n```javascript\nMyView = Ember.View.extend({\n  classNameBindings: ['hovered'],\n  hovered: true\n});\n```\n\nWill result in view instances with an HTML representation of:\n\n```html\n<div id=\"ember1\" class=\"ember-view hovered\"></div>\n```\n\nWhen using boolean class name bindings you can supply a string value other\nthan the property name for use as the `class` HTML attribute by appending the\npreferred value after a \":\" character when defining the binding:\n\n```javascript\nMyView = Ember.View.extend({\n  classNameBindings: ['awesome:so-very-cool'],\n  awesome: true\n});\n```\n\nWill result in view instances with an HTML representation of:\n\n```html\n<div id=\"ember1\" class=\"ember-view so-very-cool\"></div>\n```\n\nBoolean value class name bindings whose property names are in a\ncamelCase-style format will be converted to a dasherized format:\n\n```javascript\nMyView = Ember.View.extend({\n  classNameBindings: ['isUrgent'],\n  isUrgent: true\n});\n```\n\nWill result in view instances with an HTML representation of:\n\n```html\n<div id=\"ember1\" class=\"ember-view is-urgent\"></div>\n```\n\nClass name bindings can also refer to object values that are found by\ntraversing a path relative to the view itself:\n\n```javascript\nMyView = Ember.View.extend({\n  classNameBindings: ['messages.empty']\n  messages: Ember.Object.create({\n    empty: true\n  })\n});\n```\n\nWill result in view instances with an HTML representation of:\n\n```html\n<div id=\"ember1\" class=\"ember-view empty\"></div>\n```\n\nIf you want to add a class name for a property which evaluates to true and\nand a different class name if it evaluates to false, you can pass a binding\nlike this:\n\n```javascript\n// Applies 'enabled' class when isEnabled is true and 'disabled' when isEnabled is false\nEmber.View.extend({\n  classNameBindings: ['isEnabled:enabled:disabled']\n  isEnabled: true\n});\n```\n\nWill result in view instances with an HTML representation of:\n\n```html\n<div id=\"ember1\" class=\"ember-view enabled\"></div>\n```\n\nWhen isEnabled is `false`, the resulting HTML reprensentation looks like\nthis:\n\n```html\n<div id=\"ember1\" class=\"ember-view disabled\"></div>\n```\n\nThis syntax offers the convenience to add a class if a property is `false`:\n\n```javascript\n// Applies no class when isEnabled is true and class 'disabled' when isEnabled is false\nEmber.View.extend({\n  classNameBindings: ['isEnabled::disabled']\n  isEnabled: true\n});\n```\n\nWill result in view instances with an HTML representation of:\n\n```html\n<div id=\"ember1\" class=\"ember-view\"></div>\n```\n\nWhen the `isEnabled` property on the view is set to `false`, it will result\nin view instances with an HTML representation of:\n\n```html\n<div id=\"ember1\" class=\"ember-view disabled\"></div>\n```\n\nUpdates to the the value of a class name binding will result in automatic\nupdate of the  HTML `class` attribute in the view's rendered HTML\nrepresentation. If the value becomes `false` or `undefined` the class name\nwill be removed.\n\nBoth `classNames` and `classNameBindings` are concatenated properties. See\n[Ember.Object](/api/classes/Ember.Object.html) documentation for more\ninformation about concatenated properties.\n\n## HTML Attributes\n\nThe HTML attribute section of a view's tag can be set by providing an\n`attributeBindings` property set to an array of property names on the view.\nThe return value of these properties will be used as the value of the view's\nHTML associated attribute:\n\n```javascript\nAnchorView = Ember.View.extend({\n  tagName: 'a',\n  attributeBindings: ['href'],\n  href: 'http://google.com'\n});\n```\n\nWill result in view instances with an HTML representation of:\n\n```html\n<a id=\"ember1\" class=\"ember-view\" href=\"http://google.com\"></a>\n```\n\nOne property can be mapped on to another by placing a \":\" between\nthe source property and the destination property:\n\n```javascript\nAnchorView = Ember.View.extend({\n  tagName: 'a',\n  attributeBindings: ['url:href'],\n  url: 'http://google.com'\n});\n```\n\nWill result in view instances with an HTML representation of:\n\n```html\n<a id=\"ember1\" class=\"ember-view\" href=\"http://google.com\"></a>\n```\n\nIf the return value of an `attributeBindings` monitored property is a boolean\nthe property will follow HTML's pattern of repeating the attribute's name as\nits value:\n\n```javascript\nMyTextInput = Ember.View.extend({\n  tagName: 'input',\n  attributeBindings: ['disabled'],\n  disabled: true\n});\n```\n\nWill result in view instances with an HTML representation of:\n\n```html\n<input id=\"ember1\" class=\"ember-view\" disabled=\"disabled\" />\n```\n\n`attributeBindings` can refer to computed properties:\n\n```javascript\nMyTextInput = Ember.View.extend({\n  tagName: 'input',\n  attributeBindings: ['disabled'],\n  disabled: function() {\n    if (someLogic) {\n      return true;\n    } else {\n      return false;\n    }\n  }.property()\n});\n```\n\nUpdates to the the property of an attribute binding will result in automatic\nupdate of the  HTML attribute in the view's rendered HTML representation.\n\n`attributeBindings` is a concatenated property. See [Ember.Object](/api/classes/Ember.Object.html)\ndocumentation for more information about concatenated properties.\n\n## Templates\n\nThe HTML contents of a view's rendered representation are determined by its\ntemplate. Templates can be any function that accepts an optional context\nparameter and returns a string of HTML that will be inserted within the\nview's tag. Most typically in Ember this function will be a compiled\n`Ember.Handlebars` template.\n\n```javascript\nAView = Ember.View.extend({\n  template: Ember.Handlebars.compile('I am the template')\n});\n```\n\nWill result in view instances with an HTML representation of:\n\n```html\n<div id=\"ember1\" class=\"ember-view\">I am the template</div>\n```\n\nWithin an Ember application is more common to define a Handlebars templates as\npart of a page:\n\n```html\n<script type='text/x-handlebars' data-template-name='some-template'>\n  Hello\n</script>\n```\n\nAnd associate it by name using a view's `templateName` property:\n\n```javascript\nAView = Ember.View.extend({\n  templateName: 'some-template'\n});\n```\n\nIf you have nested resources, your Handlebars template will look like this:\n\n```html\n<script type='text/x-handlebars' data-template-name='posts/new'>\n  <h1>New Post</h1>\n</script>\n```\n\nAnd `templateName` property:\n\n```javascript\nAView = Ember.View.extend({\n  templateName: 'posts/new'\n});\n```\n\nUsing a value for `templateName` that does not have a Handlebars template\nwith a matching `data-template-name` attribute will throw an error.\n\nFor views classes that may have a template later defined (e.g. as the block\nportion of a `{{view}}` Handlebars helper call in another template or in\na subclass), you can provide a `defaultTemplate` property set to compiled\ntemplate function. If a template is not later provided for the view instance\nthe `defaultTemplate` value will be used:\n\n```javascript\nAView = Ember.View.extend({\n  defaultTemplate: Ember.Handlebars.compile('I was the default'),\n  template: null,\n  templateName: null\n});\n```\n\nWill result in instances with an HTML representation of:\n\n```html\n<div id=\"ember1\" class=\"ember-view\">I was the default</div>\n```\n\nIf a `template` or `templateName` is provided it will take precedence over\n`defaultTemplate`:\n\n```javascript\nAView = Ember.View.extend({\n  defaultTemplate: Ember.Handlebars.compile('I was the default')\n});\n\naView = AView.create({\n  template: Ember.Handlebars.compile('I was the template, not default')\n});\n```\n\nWill result in the following HTML representation when rendered:\n\n```html\n<div id=\"ember1\" class=\"ember-view\">I was the template, not default</div>\n```\n\n## View Context\n\nThe default context of the compiled template is the view's controller:\n\n```javascript\nAView = Ember.View.extend({\n  template: Ember.Handlebars.compile('Hello {{excitedGreeting}}')\n});\n\naController = Ember.Object.create({\n  firstName: 'Barry',\n  excitedGreeting: function() {\n    return this.get(\"content.firstName\") + \"!!!\"\n  }.property()\n});\n\naView = AView.create({\n  controller: aController\n});\n```\n\nWill result in an HTML representation of:\n\n```html\n<div id=\"ember1\" class=\"ember-view\">Hello Barry!!!</div>\n```\n\nA context can also be explicitly supplied through the view's `context`\nproperty. If the view has neither `context` nor `controller` properties, the\n`parentView`'s context will be used.\n\n## Layouts\n\nViews can have a secondary template that wraps their main template. Like\nprimary templates, layouts can be any function that  accepts an optional\ncontext parameter and returns a string of HTML that will be inserted inside\nview's tag. Views whose HTML element is self closing (e.g. `<input />`)\ncannot have a layout and this property will be ignored.\n\nMost typically in Ember a layout will be a compiled `Ember.Handlebars`\ntemplate.\n\nA view's layout can be set directly with the `layout` property or reference\nan existing Handlebars template by name with the `layoutName` property.\n\nA template used as a layout must contain a single use of the Handlebars\n`{{yield}}` helper. The HTML contents of a view's rendered `template` will be\ninserted at this location:\n\n```javascript\nAViewWithLayout = Ember.View.extend({\n  layout: Ember.Handlebars.compile(\"<div class='my-decorative-class'>{{yield}}</div>\"),\n  template: Ember.Handlebars.compile(\"I got wrapped\")\n});\n```\n\nWill result in view instances with an HTML representation of:\n\n```html\n<div id=\"ember1\" class=\"ember-view\">\n  <div class=\"my-decorative-class\">\n    I got wrapped\n  </div>\n</div>\n```\n\nSee [Ember.Handlebars.helpers.yield](/api/classes/Ember.Handlebars.helpers.html#method_yield)\nfor more information.\n\n## Responding to Browser Events\n\nViews can respond to user-initiated events in one of three ways: method\nimplementation, through an event manager, and through `{{action}}` helper use\nin their template or layout.\n\n### Method Implementation\n\nViews can respond to user-initiated events by implementing a method that\nmatches the event name. A `jQuery.Event` object will be passed as the\nargument to this method.\n\n```javascript\nAView = Ember.View.extend({\n  click: function(event) {\n    // will be called when when an instance's\n    // rendered element is clicked\n  }\n});\n```\n\n### Event Managers\n\nViews can define an object as their `eventManager` property. This object can\nthen implement methods that match the desired event names. Matching events\nthat occur on the view's rendered HTML or the rendered HTML of any of its DOM\ndescendants will trigger this method. A `jQuery.Event` object will be passed\nas the first argument to the method and an  `Ember.View` object as the\nsecond. The `Ember.View` will be the view whose rendered HTML was interacted\nwith. This may be the view with the `eventManager` property or one of its\ndescendent views.\n\n```javascript\nAView = Ember.View.extend({\n  eventManager: Ember.Object.create({\n    doubleClick: function(event, view) {\n      // will be called when when an instance's\n      // rendered element or any rendering\n      // of this views's descendent\n      // elements is clicked\n    }\n  })\n});\n```\n\nAn event defined for an event manager takes precedence over events of the\nsame name handled through methods on the view.\n\n```javascript\nAView = Ember.View.extend({\n  mouseEnter: function(event) {\n    // will never trigger.\n  },\n  eventManager: Ember.Object.create({\n    mouseEnter: function(event, view) {\n      // takes precedence over AView#mouseEnter\n    }\n  })\n});\n```\n\nSimilarly a view's event manager will take precedence for events of any views\nrendered as a descendent. A method name that matches an event name will not\nbe called if the view instance was rendered inside the HTML representation of\na view that has an `eventManager` property defined that handles events of the\nname. Events not handled by the event manager will still trigger method calls\non the descendent.\n\n```javascript\nOuterView = Ember.View.extend({\n  template: Ember.Handlebars.compile(\"outer {{#view InnerView}}inner{{/view}} outer\"),\n  eventManager: Ember.Object.create({\n    mouseEnter: function(event, view) {\n      // view might be instance of either\n      // OuterView or InnerView depending on\n      // where on the page the user interaction occured\n    }\n  })\n});\n\nInnerView = Ember.View.extend({\n  click: function(event) {\n    // will be called if rendered inside\n    // an OuterView because OuterView's\n    // eventManager doesn't handle click events\n  },\n  mouseEnter: function(event) {\n    // will never be called if rendered inside\n    // an OuterView.\n  }\n});\n```\n\n### Handlebars `{{action}}` Helper\n\nSee [Handlebars.helpers.action](/api/classes/Ember.Handlebars.helpers.html#method_action).\n\n### Event Names\n\nAll of the event handling approaches described above respond to the same set\nof events. The names of the built-in events are listed below. (The hash of\nbuilt-in events exists in `Ember.EventDispatcher`.) Additional, custom events\ncan be registered by using `Ember.Application.customEvents`.\n\nTouch events:\n\n* `touchStart`\n* `touchMove`\n* `touchEnd`\n* `touchCancel`\n\nKeyboard events\n\n* `keyDown`\n* `keyUp`\n* `keyPress`\n\nMouse events\n\n* `mouseDown`\n* `mouseUp`\n* `contextMenu`\n* `click`\n* `doubleClick`\n* `mouseMove`\n* `focusIn`\n* `focusOut`\n* `mouseEnter`\n* `mouseLeave`\n\nForm events:\n\n* `submit`\n* `change`\n* `focusIn`\n* `focusOut`\n* `input`\n\nHTML5 drag and drop events:\n\n* `dragStart`\n* `drag`\n* `dragEnter`\n* `dragLeave`\n* `dragOver`\n* `dragEnd`\n* `drop`\n\n## Handlebars `{{view}}` Helper\n\nOther `Ember.View` instances can be included as part of a view's template by\nusing the `{{view}}` Handlebars helper. See [Ember.Handlebars.helpers.view](/api/classes/Ember.Handlebars.helpers.html#method_view)\nfor additional information.",
            "extends": "Ember.CoreView"
        },
        "Ember.StateManager": {
            "name": "Ember.StateManager",
            "shortname": "Ember.StateManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "namespace": "Ember",
            "file": "dist/assets/vendor.js",
            "line": 62310,
            "description": "This was exported to ember-states plugin for v 1.0.0 release. See: https://github.com/emberjs/ember-states"
        },
        "Ember.State": {
            "name": "Ember.State",
            "shortname": "Ember.State",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "namespace": "Ember",
            "file": "dist/assets/vendor.js",
            "line": 62319,
            "description": "This was exported to ember-states plugin for v 1.0.0 release. See: https://github.com/emberjs/ember-states"
        },
        "Ember.RSVP": {
            "name": "Ember.RSVP",
            "shortname": "RSVP",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-data",
            "namespace": "Ember"
        },
        "Ember.RSVP.EventTarget": {
            "name": "Ember.RSVP.EventTarget",
            "shortname": "RSVP.EventTarget",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "namespace": "Ember"
        },
        "RSVP.EventTarget": {
            "name": "RSVP.EventTarget",
            "shortname": "RSVP.EventTarget",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "namespace": ""
        },
        "Ember.RSVP.Promise": {
            "name": "Ember.RSVP.Promise",
            "shortname": "RSVP.Promise",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "namespace": "Ember",
            "file": "dist/assets/vendor.js",
            "line": 68433,
            "description": "Promise objects represent the eventual result of an asynchronous operation. The\nprimary way of interacting with a promise is through its `then` method, which\nregisters callbacks to receive either a promise’s eventual value or the reason\nwhy the promise cannot be fulfilled.\nTerminology\n-----------\n- `promise` is an object or function with a `then` method whose behavior conforms to this specification.\n- `thenable` is an object or function that defines a `then` method.\n- `value` is any legal JavaScript value (including undefined, a thenable, or a promise).\n- `exception` is a value that is thrown using the throw statement.\n- `reason` is a value that indicates why a promise was rejected.\n- `settled` the final resting state of a promise, fulfilled or rejected.\nA promise can be in one of three states: pending, fulfilled, or rejected.\nPromises that are fulfilled have a fulfillment value and are in the fulfilled\nstate.  Promises that are rejected have a rejection reason and are in the\nrejected state.  A fulfillment value is never a thenable.\nPromises can also be said to *resolve* a value.  If this value is also a\npromise, then the original promise's settled state will match the value's\nsettled state.  So a promise that *resolves* a promise that rejects will\nitself reject, and a promise that *resolves* a promise that fulfills will\nitself fulfill.\nBasic Usage:\n------------\n```js\nvar promise = new Promise(function(resolve, reject) {\n// on success\nresolve(value);\n// on failure\nreject(reason);\n});\npromise.then(function(value) {\n// on fulfillment\n}, function(reason) {\n// on rejection\n});\n```\nAdvanced Usage:\n---------------\nPromises shine when abstracting away asynchronous interactions such as\n`XMLHttpRequest`s.\n```js\nfunction getJSON(url) {\nreturn new Promise(function(resolve, reject){\nvar xhr = new XMLHttpRequest();\nxhr.open('GET', url);\nxhr.onreadystatechange = handler;\nxhr.responseType = 'json';\nxhr.setRequestHeader('Accept', 'application/json');\nxhr.send();\nfunction handler() {\nif (this.readyState === this.DONE) {\nif (this.status === 200) {\nresolve(this.response);\n} else {\nreject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));\n}\n}\n};\n});\n}\ngetJSON('/posts.json').then(function(json) {\n// on fulfillment\n}, function(reason) {\n// on rejection\n});\n```\nUnlike callbacks, promises are great composable primitives.\n```js\nPromise.all([\ngetJSON('/posts'),\ngetJSON('/comments')\n]).then(function(values){\nvalues[0] // => postsJSON\nvalues[1] // => commentsJSON\nreturn values;\n});\n```\nUseful for tooling.",
            "is_constructor": 1,
            "itemtype": "method",
            "params": [
                {
                    "name": "resolver",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "label",
                    "description": "optional string for labeling the promise.",
                    "type": "String"
                }
            ],
            "return": {
                "description": ""
            }
        },
        "DS.ActiveModelAdapter": {
            "name": "DS.ActiveModelAdapter",
            "shortname": "DS.ActiveModelAdapter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-data",
            "namespace": "DS",
            "file": "dist/assets/vendor.js",
            "line": 70196,
            "description": "The ActiveModelAdapter is a subclass of the RESTAdapter designed to integrate\nwith a JSON API that uses an underscored naming convention instead of camelCasing.\nIt has been designed to work out of the box with the\n[active_model_serializers](http://github.com/rails-api/active_model_serializers)\nRuby gem. This Adapter expects specific settings using ActiveModel::Serializers,\n`embed :ids, include: true` which sideloads the records.\n\nThis adapter extends the DS.RESTAdapter by making consistent use of the camelization,\ndecamelization and pluralization methods to normalize the serialized JSON into a\nformat that is compatible with a conventional Rails backend and Ember Data.\n\n## JSON Structure\n\nThe ActiveModelAdapter expects the JSON returned from your server to follow\nthe REST adapter conventions substituting underscored keys for camelcased ones.\n\nUnlike the DS.RESTAdapter, async relationship keys must be the singular form\nof the relationship name, followed by \"_id\" for DS.belongsTo relationships,\nor \"_ids\" for DS.hasMany relationships.\n\n### Conventional Names\n\nAttribute names in your JSON payload should be the underscored versions of\nthe attributes in your Ember.js models.\n\nFor example, if you have a `Person` model:\n\n```js\nApp.FamousPerson = DS.Model.extend({\n  firstName: DS.attr('string'),\n  lastName: DS.attr('string'),\n  occupation: DS.attr('string')\n});\n```\n\nThe JSON returned should look like this:\n\n```js\n{\n  \"famous_person\": {\n    \"id\": 1,\n    \"first_name\": \"Barack\",\n    \"last_name\": \"Obama\",\n    \"occupation\": \"President\"\n  }\n}\n```\n\nLet's imagine that `Occupation` is just another model:\n\n```js\nApp.Person = DS.Model.extend({\n  firstName: DS.attr('string'),\n  lastName: DS.attr('string'),\n  occupation: DS.belongsTo('occupation')\n});\n\nApp.Occupation = DS.Model.extend({\n  name: DS.attr('string'),\n  salary: DS.attr('number'),\n  people: DS.hasMany('person')\n});\n```\n\nThe JSON needed to avoid extra server calls, should look like this:\n\n```js\n{\n  \"people\": [{\n    \"id\": 1,\n    \"first_name\": \"Barack\",\n    \"last_name\": \"Obama\",\n    \"occupation_id\": 1\n  }],\n\n  \"occupations\": [{\n    \"id\": 1,\n    \"name\": \"President\",\n    \"salary\": 100000,\n    \"person_ids\": [1]\n  }]\n}\n```",
            "is_constructor": 1,
            "extends": "DS.RESTAdapter"
        },
        "DS.ActiveModelSerializer": {
            "name": "DS.ActiveModelSerializer",
            "shortname": "DS.ActiveModelSerializer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-data",
            "namespace": "DS",
            "file": "dist/assets/vendor.js",
            "line": 70359,
            "description": "The ActiveModelSerializer is a subclass of the RESTSerializer designed to integrate\nwith a JSON API that uses an underscored naming convention instead of camelCasing.\nIt has been designed to work out of the box with the\n[active_model_serializers](http://github.com/rails-api/active_model_serializers)\nRuby gem. This Serializer expects specific settings using ActiveModel::Serializers,\n`embed :ids, include: true` which sideloads the records.\n\nThis serializer extends the DS.RESTSerializer by making consistent\nuse of the camelization, decamelization and pluralization methods to\nnormalize the serialized JSON into a format that is compatible with\na conventional Rails backend and Ember Data.\n\n## JSON Structure\n\nThe ActiveModelSerializer expects the JSON returned from your server\nto follow the REST adapter conventions substituting underscored keys\nfor camelcased ones.\n\n### Conventional Names\n\nAttribute names in your JSON payload should be the underscored versions of\nthe attributes in your Ember.js models.\n\nFor example, if you have a `Person` model:\n\n```js\nApp.FamousPerson = DS.Model.extend({\n  firstName: DS.attr('string'),\n  lastName: DS.attr('string'),\n  occupation: DS.attr('string')\n});\n```\n\nThe JSON returned should look like this:\n\n```js\n{\n  \"famous_person\": {\n    \"id\": 1,\n    \"first_name\": \"Barack\",\n    \"last_name\": \"Obama\",\n    \"occupation\": \"President\"\n  }\n}\n```\n\nLet's imagine that `Occupation` is just another model:\n\n```js\nApp.Person = DS.Model.extend({\n  firstName: DS.attr('string'),\n  lastName: DS.attr('string'),\n  occupation: DS.belongsTo('occupation')\n});\n\nApp.Occupation = DS.Model.extend({\n  name: DS.attr('string'),\n  salary: DS.attr('number'),\n  people: DS.hasMany('person')\n});\n```\n\nThe JSON needed to avoid extra server calls, should look like this:\n\n```js\n{\n  \"people\": [{\n    \"id\": 1,\n    \"first_name\": \"Barack\",\n    \"last_name\": \"Obama\",\n    \"occupation_id\": 1\n  }],\n\n  \"occupations\": [{\n    \"id\": 1,\n    \"name\": \"President\",\n    \"salary\": 100000,\n    \"person_ids\": [1]\n  }]\n}\n```",
            "extends": "DS.RESTSerializer"
        },
        "DS.FixtureAdapter": {
            "name": "DS.FixtureAdapter",
            "shortname": "DS.FixtureAdapter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-data",
            "namespace": "DS",
            "file": "dist/assets/vendor.js",
            "line": 70762,
            "description": "`DS.FixtureAdapter` is an adapter that loads records from memory.\nIt's primarily used for development and testing. You can also use\n`DS.FixtureAdapter` while working on the API but is not ready to\nintegrate yet. It is a fully functioning adapter. All CRUD methods\nare implemented. You can also implement query logic that a remote\nsystem would do. It's possible to develop your entire application\nwith `DS.FixtureAdapter`.\n\nFor information on how to use the `FixtureAdapter` in your\napplication please see the [FixtureAdapter\nguide](/guides/models/the-fixture-adapter/).",
            "extends": "DS.Adapter"
        },
        "DS.RESTAdapter": {
            "name": "DS.RESTAdapter",
            "shortname": "DS.RESTAdapter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-data",
            "namespace": "DS",
            "file": "dist/assets/vendor.js",
            "line": 71113,
            "description": "The REST adapter allows your store to communicate with an HTTP server by\ntransmitting JSON via XHR. Most Ember.js apps that consume a JSON API\nshould use the REST adapter.\n\nThis adapter is designed around the idea that the JSON exchanged with\nthe server should be conventional.\n\n## JSON Structure\n\nThe REST adapter expects the JSON returned from your server to follow\nthese conventions.\n\n### Object Root\n\nThe JSON payload should be an object that contains the record inside a\nroot property. For example, in response to a `GET` request for\n`/posts/1`, the JSON should look like this:\n\n```js\n{\n  \"post\": {\n    \"id\": 1,\n    \"title\": \"I'm Running to Reform the W3C's Tag\",\n    \"author\": \"Yehuda Katz\"\n  }\n}\n```\n\nSimilarly, in response to a `GET` request for `/posts`, the JSON should\nlook like this:\n\n```js\n{\n  \"posts\": [\n    {\n      \"id\": 1,\n      \"title\": \"I'm Running to Reform the W3C's Tag\",\n      \"author\": \"Yehuda Katz\"\n    },\n    {\n      \"id\": 2,\n      \"title\": \"Rails is omakase\",\n      \"author\": \"D2H\"\n    }\n  ]\n}\n```\n\n### Conventional Names\n\nAttribute names in your JSON payload should be the camelCased versions of\nthe attributes in your Ember.js models.\n\nFor example, if you have a `Person` model:\n\n```js\nApp.Person = DS.Model.extend({\n  firstName: DS.attr('string'),\n  lastName: DS.attr('string'),\n  occupation: DS.attr('string')\n});\n```\n\nThe JSON returned should look like this:\n\n```js\n{\n  \"person\": {\n    \"id\": 5,\n    \"firstName\": \"Barack\",\n    \"lastName\": \"Obama\",\n    \"occupation\": \"President\"\n  }\n}\n```\n\n## Customization\n\n### Endpoint path customization\n\nEndpoint paths can be prefixed with a `namespace` by setting the namespace\nproperty on the adapter:\n\n```js\nDS.RESTAdapter.reopen({\n  namespace: 'api/1'\n});\n```\nRequests for `App.Person` would now target `/api/1/people/1`.\n\n### Host customization\n\nAn adapter can target other hosts by setting the `host` property.\n\n```js\nDS.RESTAdapter.reopen({\n  host: 'https://api.example.com'\n});\n```\n\n### Headers customization\n\nSome APIs require HTTP headers, e.g. to provide an API key. Arbitrary\nheaders can be set as key/value pairs on the `RESTAdapter`'s `headers`\nobject and Ember Data will send them along with each ajax request.\n\n\n```js\nApp.ApplicationAdapter = DS.RESTAdapter.extend({\n  headers: {\n    \"API_KEY\": \"secret key\",\n    \"ANOTHER_HEADER\": \"Some header value\"\n  }\n});\n```\n\n`headers` can also be used as a computed property to support dynamic\nheaders. In the example below, the `session` object has been\ninjected into an adapter by Ember's container.\n\n```js\nApp.ApplicationAdapter = DS.RESTAdapter.extend({\n  headers: function() {\n    return {\n      \"API_KEY\": this.get(\"session.authToken\"),\n      \"ANOTHER_HEADER\": \"Some header value\"\n    };\n  }.property(\"session.authToken\")\n});\n```\n\nIn some cases, your dynamic headers may require data from some\nobject outside of Ember's observer system (for example\n`document.cookie`). You can use the\n[volatile](/api/classes/Ember.ComputedProperty.html#method_volatile)\nfunction to set the property into a non-cached mode causing the headers to\nbe recomputed with every request.\n\n```js\nApp.ApplicationAdapter = DS.RESTAdapter.extend({\n  headers: function() {\n    return {\n      \"API_KEY\": Ember.get(document.cookie.match(/apiKey\\=([^;]*)/), \"1\"),\n      \"ANOTHER_HEADER\": \"Some header value\"\n    };\n  }.property().volatile()\n});\n```",
            "is_constructor": 1,
            "extends": "DS.Adapter"
        },
        "DS": {
            "name": "DS",
            "shortname": "DS",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-data",
            "namespace": "",
            "file": "dist/assets/vendor.js",
            "line": 71944,
            "description": "All Ember Data methods and functions are defined inside of this namespace.",
            "static": 1
        },
        "Ember.Date": {
            "name": "Ember.Date",
            "shortname": "Ember.Date",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-data",
            "namespace": "Ember",
            "file": "dist/assets/vendor.js",
            "line": 72061,
            "description": "Date.parse with progressive enhancement for ISO 8601 <https://github.com/csnover/js-iso8601>\n\n© 2011 Colin Snover <http://zetafleet.com>\n\nReleased under MIT license.",
            "static": 1
        },
        "DS.EmbeddedRecordsMixin": {
            "name": "DS.EmbeddedRecordsMixin",
            "shortname": "DS.EmbeddedRecordsMixin",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-data",
            "namespace": "DS",
            "file": "dist/assets/vendor.js",
            "line": 72235,
            "description": "## Using Embedded Records\n\n`DS.EmbeddedRecordsMixin` supports serializing embedded records.\n\nTo set up embedded records, include the mixin when extending a serializer\nthen define and configure embedded (model) relationships.\n\nBelow is an example of a per-type serializer ('post' type).\n\n```js\nApp.PostSerializer = DS.RESTSerializer.extend(DS.EmbeddedRecordsMixin, {\n  attrs: {\n    author: {embedded: 'always'},\n    comments: {serialize: 'ids'}\n  }\n})\n```\nNote that this use of `{embedded: 'always'}` is unrelated to\nthe `{embedded: 'always'}` that is defined as an option on `DS.attr` as part of\ndefining a model while working with the ActiveModelSerializer.  Nevertheless,\nusing `{embedded: 'always'}` as an option to DS.attr is not a valid way to setup\nembedded records.\n\nThe `attrs` option for a resource `{embedded: 'always'}` is shorthand for:\n\n```js\n{serialize: 'records', deserialize: 'records'}\n```\n\n### Configuring Attrs\n\nA resource's `attrs` option may be set to use `ids`, `records` or false for the\n`serialize`  and `deserialize` settings.\n\nThe `attrs` property can be set on the ApplicationSerializer or a per-type\nserializer.\n\nIn the case where embedded JSON is expected while extracting a payload (reading)\nthe setting is `deserialize: 'records'`, there is no need to use `ids` when\nextracting as that is the default behavior without this mixin if you are using\nthe vanilla EmbeddedRecordsMixin. Likewise, to embed JSON in the payload while\nserializing `serialize: 'records'` is the setting to use. There is an option of\nnot embedding JSON in the serialized payload by using `serialize: 'ids'`. If you\ndo not want the relationship sent at all, you can use `serialize: false`.\n\n\n### EmbeddedRecordsMixin defaults\nIf you do not overwrite `attrs` for a specific relationship, the `EmbeddedRecordsMixin`\nwill behave in the following way:\n\nBelongsTo: `{serialize:'id', deserialize:'id'}`\nHasMany:   `{serialize:false,  deserialize:'ids'}`\n\n### Model Relationships\n\nEmbedded records must have a model defined to be extracted and serialized. Note that\nwhen defining any relationships on your model such as `belongsTo` and `hasMany`, you\nshould not both specify `async:true` and also indicate through the serializer's\n`attrs` attribute that the related model should be embedded.  If a model is\ndeclared embedded, then do not use `async:true`.\n\nTo successfully extract and serialize embedded records the model relationships\nmust be setup correcty See the\n[defining relationships](/guides/models/defining-models/#toc_defining-relationships)\nsection of the **Defining Models** guide page.\n\nRecords without an `id` property are not considered embedded records, model\ninstances must have an `id` property to be used with Ember Data.\n\n### Example JSON payloads, Models and Serializers\n\n**When customizing a serializer it is important to grok what the customizations\nare. Please read the docs for the methods this mixin provides, in case you need\nto modify it to fit your specific needs.**\n\nFor example review the docs for each method of this mixin:\n* [normalize](/api/data/classes/DS.EmbeddedRecordsMixin.html#method_normalize)\n* [serializeBelongsTo](/api/data/classes/DS.EmbeddedRecordsMixin.html#method_serializeBelongsTo)\n* [serializeHasMany](/api/data/classes/DS.EmbeddedRecordsMixin.html#method_serializeHasMany)"
        },
        "DS.JSONSerializer": {
            "name": "DS.JSONSerializer",
            "shortname": "DS.JSONSerializer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-data",
            "namespace": "DS",
            "file": "dist/assets/vendor.js",
            "line": 72758,
            "description": "In Ember Data a Serializer is used to serialize and deserialize\nrecords when they are transferred in and out of an external source.\nThis process involves normalizing property names, transforming\nattribute values and serializing relationships.\n\nFor maximum performance Ember Data recommends you use the\n[RESTSerializer](DS.RESTSerializer.html) or one of its subclasses.\n\n`JSONSerializer` is useful for simpler or legacy backends that may\nnot support the http://jsonapi.org/ spec."
        },
        "DS.RESTSerializer": {
            "name": "DS.RESTSerializer",
            "shortname": "DS.RESTSerializer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-data",
            "namespace": "DS",
            "file": "dist/assets/vendor.js",
            "line": 73739,
            "description": "Normally, applications will use the `RESTSerializer` by implementing\nthe `normalize` method and individual normalizations under\n`normalizeHash`.\n\nThis allows you to do whatever kind of munging you need, and is\nespecially useful if your server is inconsistent and you need to\ndo munging differently for many different kinds of responses.\n\nSee the `normalize` documentation for more information.\n\n## Across the Board Normalization\n\nThere are also a number of hooks that you might find useful to define\nacross-the-board rules for your payload. These rules will be useful\nif your server is consistent, or if you're building an adapter for\nan infrastructure service, like Parse, and want to encode service\nconventions.\n\nFor example, if all of your keys are underscored and all-caps, but\notherwise consistent with the names you use in your models, you\ncan implement across-the-board rules for how to convert an attribute\nname in your model to a key in your JSON.\n\n```js\nApp.ApplicationSerializer = DS.RESTSerializer.extend({\n  keyForAttribute: function(attr) {\n    return Ember.String.underscore(attr).toUpperCase();\n  }\n});\n```\n\nYou can also implement `keyForRelationship`, which takes the name\nof the relationship as the first parameter, and the kind of\nrelationship (`hasMany` or `belongsTo`) as the second parameter.",
            "extends": "DS.JSONSerializer"
        },
        "DS.InvalidError": {
            "name": "DS.InvalidError",
            "shortname": "DS.InvalidError",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-data",
            "namespace": "DS",
            "file": "dist/assets/vendor.js",
            "line": 74419,
            "description": "A `DS.InvalidError` is used by an adapter to signal the external API\nwas unable to process a request because the content was not\nsemantically correct or meaningful per the API. Usually this means a\nrecord failed some form of server side validation. When a promise\nfrom an adapter is rejected with a `DS.InvalidError` the record will\ntransition to the `invalid` state and the errors will be set to the\n`errors` property on the record.\nExample\n```javascript\nApp.ApplicationAdapter = DS.RESTAdapter.extend({\najaxError: function(jqXHR) {\nvar error = this._super(jqXHR);\nif (jqXHR && jqXHR.status === 422) {\nvar jsonErrors = Ember.$.parseJSON(jqXHR.responseText)[\"errors\"];\nreturn new DS.InvalidError(jsonErrors);\n} else {\nreturn error;\n}\n}\n});\n```\nThe `DS.InvalidError` must be constructed with a single object whose\nkeys are the invalid model properties, and whose values are the\ncorresponding error messages. For example:\n```javascript\nreturn new DS.InvalidError({\nlength: 'Must be less than 15',\nname: 'Must not be blank\n});\n```",
            "itemtype": "method",
            "params": [
                {
                    "name": "errors",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            }
        },
        "DS.Adapter": {
            "name": "DS.Adapter",
            "shortname": "DS.Adapter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-data",
            "namespace": "DS",
            "file": "dist/assets/vendor.js",
            "line": 74467,
            "description": "An adapter is an object that receives requests from a store and\ntranslates them into the appropriate action to take against your\npersistence layer. The persistence layer is usually an HTTP API, but\nmay be anything, such as the browser's local storage. Typically the\nadapter is not invoked directly instead its functionality is accessed\nthrough the `store`.\n\n### Creating an Adapter\n\nCreate a new subclass of `DS.Adapter`, then assign\nit to the `ApplicationAdapter` property of the application.\n\n```javascript\nvar MyAdapter = DS.Adapter.extend({\n  // ...your code here\n});\n\nApp.ApplicationAdapter = MyAdapter;\n```\n\nModel-specific adapters can be created by assigning your adapter\nclass to the `ModelName` + `Adapter` property of the application.\n\n```javascript\nvar MyPostAdapter = DS.Adapter.extend({\n  // ...Post-specific adapter code goes here\n});\n\nApp.PostAdapter = MyPostAdapter;\n```\n\n`DS.Adapter` is an abstract base class that you should override in your\napplication to customize it for your backend. The minimum set of methods\nthat you should implement is:\n\n  * `find()`\n  * `createRecord()`\n  * `updateRecord()`\n  * `deleteRecord()`\n  * `findAll()`\n  * `findQuery()`\n\nTo improve the network performance of your application, you can optimize\nyour adapter by overriding these lower-level methods:\n\n  * `findMany()`\n\n\nFor an example implementation, see `DS.RESTAdapter`, the\nincluded REST adapter.",
            "extends": "Ember.Object"
        },
        "DS.ContainerProxy": {
            "name": "DS.ContainerProxy",
            "shortname": "DS.ContainerProxy",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-data",
            "namespace": "DS",
            "file": "dist/assets/vendor.js",
            "line": 74859,
            "description": "This is used internally to enable deprecation of container paths and provide\na decent message to the user indicating how to fix the issue.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "params": [
                {
                    "name": "container",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            }
        },
        "DS.DebugAdapter": {
            "name": "DS.DebugAdapter",
            "shortname": "DS.DebugAdapter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-data",
            "namespace": "DS",
            "file": "dist/assets/vendor.js",
            "line": 74975,
            "description": "Extend `Ember.DataAdapter` with ED specific code.",
            "extends": "Ember.DataAdapter",
            "access": "private",
            "tagname": ""
        },
        "DS.Model": {
            "name": "DS.Model",
            "shortname": "DS.Model",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-data",
            "namespace": "DS",
            "file": "dist/assets/vendor.js",
            "line": 79248,
            "description": "These observers observe all `belongsTo` relationships on the record. See\n`relationships/ext` to see how these observers get their dependencies.",
            "extends": "Ember.Object",
            "uses": [
                "Ember.Evented"
            ]
        },
        "DS.Errors": {
            "name": "DS.Errors",
            "shortname": "DS.Errors",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-data",
            "namespace": "DS",
            "file": "dist/assets/vendor.js",
            "line": 75568,
            "description": "Holds validation errors for a given record organized by attribute names.\n\nEvery DS.Model has an `errors` property that is an instance of\n`DS.Errors`. This can be used to display validation error\nmessages returned from the server when a `record.save()` rejects.\nThis works automatically with `DS.ActiveModelAdapter`, but you\ncan implement [ajaxError](api/data/classes/DS.RESTAdapter.html#method_ajaxError)\nin other adapters as well.\n\nFor Example, if you had an `User` model that looked like this:\n\n```javascript\nApp.User = DS.Model.extend({\n  username: attr('string'),\n  email: attr('string')\n});\n```\nAnd you attempted to save a record that did not validate on the backend.\n\n```javascript\nvar user = store.createRecord('user', {\n  username: 'tomster',\n  email: 'invalidEmail'\n});\nuser.save();\n```\n\nYour backend data store might return a response that looks like\nthis. This response will be used to populate the error object.\n\n```javascript\n{\n  \"errors\": {\n    \"username\": [\"This username is already taken!\"],\n    \"email\": [\"Doesn't look like a valid email.\"]\n  }\n}\n```\n\nErrors can be displayed to the user by accessing their property name\nor using the `messages` property to get an array of all errors.\n\n```handlebars\n{{#each errors.messages}}\n  <div class=\"error\">\n    {{message}}\n  </div>\n{{/each}}\n\n<label>Username: {{input value=username}} </label>\n{{#each errors.username}}\n  <div class=\"error\">\n    {{message}}\n  </div>\n{{/each}}\n\n<label>Email: {{input value=email}} </label>\n{{#each errors.email}}\n  <div class=\"error\">\n    {{message}}\n  </div>\n{{/each}}\n```",
            "extends": "Ember.Object",
            "uses": [
                "Ember.Enumerable",
                "Ember.Evented"
            ]
        },
        "DS.RootState": {
            "name": "DS.RootState",
            "shortname": "DS.RootState",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-data",
            "namespace": "DS",
            "file": "dist/assets/vendor.js",
            "line": 77073,
            "description": "### State\nEach record has a `currentState` property that explicitly tracks what\nstate a record is in at any given time. For instance, if a record is\nnewly created and has not yet been sent to the adapter to be saved,\nit would be in the `root.loaded.created.uncommitted` state.  If a\nrecord has had local modifications made to it that are in the\nprocess of being saved, the record would be in the\n`root.loaded.updated.inFlight` state. (This state paths will be\nexplained in more detail below.)\nEvents are sent by the record or its store to the record's\n`currentState` property. How the state reacts to these events is\ndependent on which state it is in. In some states, certain events\nwill be invalid and will cause an exception to be raised.\nStates are hierarchical and every state is a substate of the\n`RootState`. For example, a record can be in the\n`root.deleted.uncommitted` state, then transition into the\n`root.deleted.inFlight` state. If a child state does not implement\nan event handler, the state manager will attempt to invoke the event\non all parent states until the root state is reached. The state\nhierarchy of a record is described in terms of a path string. You\ncan determine a record's current state by getting the state's\n`stateName` property:\n```javascript\nrecord.get('currentState.stateName');\n//=> \"root.created.uncommitted\"\n```\nThe hierarchy of valid states that ship with ember data looks like\nthis:\n```text\nroot\ndeleted\nsaved\nuncommitted\ninFlight\nempty\nloaded\ncreated\nuncommitted\ninFlight\nsaved\nupdated\nuncommitted\ninFlight\nloading\n```\nThe `DS.Model` states are themselves stateless. What that means is\nthat, the hierarchical states that each of *those* points to is a\nshared data structure. For performance reasons, instead of each\nrecord getting its own copy of the hierarchy of states, each record\npoints to this global, immutable shared instance. How does a state\nknow which record it should be acting on? We pass the record\ninstance into the state's event handlers as the first argument.\nThe record passed as the first parameter is where you should stash\nstate about the record if needed; you should never store data on the state\nobject itself.\n### Events and Flags\nA state may implement zero or more events and flags.\n#### Events\nEvents are named functions that are invoked when sent to a record. The\nrecord will first look for a method with the given name on the\ncurrent state. If no method is found, it will search the current\nstate's parent, and then its grandparent, and so on until reaching\nthe top of the hierarchy. If the root is reached without an event\nhandler being found, an exception will be raised. This can be very\nhelpful when debugging new features.\nHere's an example implementation of a state with a `myEvent` event handler:\n```javascript\naState: DS.State.create({\nmyEvent: function(manager, param) {\nconsole.log(\"Received myEvent with\", param);\n}\n})\n```\nTo trigger this event:\n```javascript\nrecord.send('myEvent', 'foo');\n//=> \"Received myEvent with foo\"\n```\nNote that an optional parameter can be sent to a record's `send()` method,\nwhich will be passed as the second parameter to the event handler.\nEvents should transition to a different state if appropriate. This can be\ndone by calling the record's `transitionTo()` method with a path to the\ndesired state. The state manager will attempt to resolve the state path\nrelative to the current state. If no state is found at that path, it will\nattempt to resolve it relative to the current state's parent, and then its\nparent, and so on until the root is reached. For example, imagine a hierarchy\nlike this:\ncreated\nuncommitted <-- currentState\ninFlight\nupdated\ninFlight\nIf we are currently in the `uncommitted` state, calling\n`transitionTo('inFlight')` would transition to the `created.inFlight` state,\nwhile calling `transitionTo('updated.inFlight')` would transition to\nthe `updated.inFlight` state.\nRemember that *only events* should ever cause a state transition. You should\nnever call `transitionTo()` from outside a state's event handler. If you are\ntempted to do so, create a new event and send that to the state manager.\n#### Flags\nFlags are Boolean values that can be used to introspect a record's current\nstate in a more user-friendly way than examining its state path. For example,\ninstead of doing this:\n```javascript\nvar statePath = record.get('stateManager.currentPath');\nif (statePath === 'created.inFlight') {\ndoSomething();\n}\n```\nYou can say:\n```javascript\nif (record.get('isNew') && record.get('isSaving')) {\ndoSomething();\n}\n```\nIf your state does not set a value for a given flag, the value will\nbe inherited from its parent (or the first place in the state hierarchy\nwhere it is defined).\nThe current set of flags are defined below. If you want to add a new flag,\nin addition to the area below, you will also need to declare it in the\n`DS.Model` class.\n[isEmpty](DS.Model.html#property_isEmpty)\n[isLoading](DS.Model.html#property_isLoading)\n[isLoaded](DS.Model.html#property_isLoaded)\n[isDirty](DS.Model.html#property_isDirty)\n[isSaving](DS.Model.html#property_isSaving)\n[isDeleted](DS.Model.html#property_isDeleted)\n[isNew](DS.Model.html#property_isNew)\n[isValid](DS.Model.html#property_isValid)",
            "itemtype": "method",
            "params": [
                {
                    "name": "record",
                    "description": ""
                },
                {
                    "name": "context",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            }
        },
        "DS.PromiseArray": {
            "name": "DS.PromiseArray",
            "shortname": "DS.PromiseArray",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-data",
            "namespace": "DS",
            "file": "dist/assets/vendor.js",
            "line": 78069,
            "description": "A `PromiseArray` is an object that acts like both an `Ember.Array`\nand a promise. When the promise is resolved the resulting value\nwill be set to the `PromiseArray`'s `content` property. This makes\nit easy to create data bindings with the `PromiseArray` that will be\nupdated when the promise resolves.\n\nFor more information see the [Ember.PromiseProxyMixin\ndocumentation](/api/classes/Ember.PromiseProxyMixin.html).\n\nExample\n\n```javascript\nvar promiseArray = DS.PromiseArray.create({\n  promise: $.getJSON('/some/remote/data.json')\n});\n\npromiseArray.get('length'); // 0\n\npromiseArray.then(function() {\n  promiseArray.get('length'); // 100\n});\n```",
            "extends": "Ember.ArrayProxy",
            "uses": [
                "Ember.PromiseProxyMixin"
            ]
        },
        "DS.PromiseObject": {
            "name": "DS.PromiseObject",
            "shortname": "DS.PromiseObject",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-data",
            "namespace": "DS",
            "file": "dist/assets/vendor.js",
            "line": 78100,
            "description": "A `PromiseObject` is an object that acts like both an `Ember.Object`\nand a promise. When the promise is resolved, then the resulting value\nwill be set to the `PromiseObject`'s `content` property. This makes\nit easy to create data bindings with the `PromiseObject` that will\nbe updated when the promise resolves.\n\nFor more information see the [Ember.PromiseProxyMixin\ndocumentation](/api/classes/Ember.PromiseProxyMixin.html).\n\nExample\n\n```javascript\nvar promiseObject = DS.PromiseObject.create({\n  promise: $.getJSON('/some/remote/data.json')\n});\n\npromiseObject.get('name'); // null\n\npromiseObject.then(function() {\n  promiseObject.get('name'); // 'Tomster'\n});\n```",
            "extends": "Ember.ObjectProxy",
            "uses": [
                "Ember.PromiseProxyMixin"
            ]
        },
        "DS.RecordArrayManager": {
            "name": "DS.RecordArrayManager",
            "shortname": "DS.RecordArrayManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-data",
            "namespace": "DS",
            "file": "dist/assets/vendor.js",
            "line": 78177,
            "access": "private",
            "tagname": "",
            "extends": "Ember.Object"
        },
        "DS.AdapterPopulatedRecordArray": {
            "name": "DS.AdapterPopulatedRecordArray",
            "shortname": "DS.AdapterPopulatedRecordArray",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-data",
            "namespace": "DS",
            "file": "dist/assets/vendor.js",
            "line": 78557,
            "description": "Represents an ordered list of records whose order and membership is\ndetermined by the adapter. For example, a query sent to the adapter\nmay trigger a search on the server, whose results would be loaded\ninto an instance of the `AdapterPopulatedRecordArray`.",
            "extends": "DS.RecordArray"
        },
        "DS.FilteredRecordArray": {
            "name": "DS.FilteredRecordArray",
            "shortname": "DS.FilteredRecordArray",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-data",
            "namespace": "DS",
            "file": "dist/assets/vendor.js",
            "line": 78619,
            "description": "Represents a list of records whose membership is determined by the\nstore. As records are created, loaded, or modified, the store\nevaluates them to determine if they should be part of the record\narray.",
            "extends": "DS.RecordArray"
        },
        "DS.ManyArray": {
            "name": "DS.ManyArray",
            "shortname": "DS.ManyArray",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-data",
            "namespace": "DS",
            "file": "dist/assets/vendor.js",
            "line": 78695,
            "description": "A `ManyArray` is a `RecordArray` that represents the contents of a has-many\nrelationship.\n\nThe `ManyArray` is instantiated lazily the first time the relationship is\nrequested.\n\n### Inverses\n\nOften, the relationships in Ember Data applications will have\nan inverse. For example, imagine the following models are\ndefined:\n\n```javascript\nApp.Post = DS.Model.extend({\n  comments: DS.hasMany('comment')\n});\n\nApp.Comment = DS.Model.extend({\n  post: DS.belongsTo('post')\n});\n```\n\nIf you created a new instance of `App.Post` and added\na `App.Comment` record to its `comments` has-many\nrelationship, you would expect the comment's `post`\nproperty to be set to the post that contained\nthe has-many.\n\nWe call the record to which a relationship belongs the\nrelationship's _owner_.",
            "extends": "DS.RecordArray"
        },
        "DS.RecordArray": {
            "name": "DS.RecordArray",
            "shortname": "DS.RecordArray",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-data",
            "namespace": "DS",
            "file": "dist/assets/vendor.js",
            "line": 78862,
            "description": "A record array is an array that contains records of a certain type. The record\narray materializes records as needed when they are retrieved for the first\ntime. You should not create record arrays yourself. Instead, an instance of\n`DS.RecordArray` or its subclasses will be returned by your application's store\nin response to queries.",
            "extends": "Ember.ArrayProxy",
            "uses": [
                "Ember.Evented"
            ]
        },
        "DS.Store": {
            "name": "DS.Store",
            "shortname": "DS.Store",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-data",
            "namespace": "DS",
            "file": "dist/assets/vendor.js",
            "line": 80378,
            "description": "The store contains all of the data for records loaded from the server.\nIt is also responsible for creating instances of `DS.Model` that wrap\nthe individual data for a record, so that they can be bound to in your\nHandlebars templates.\n\nDefine your application's store like this:\n\n```javascript\nMyApp.Store = DS.Store.extend();\n```\n\nMost Ember.js applications will only have a single `DS.Store` that is\nautomatically created by their `Ember.Application`.\n\nYou can retrieve models from the store in several ways. To retrieve a record\nfor a specific id, use `DS.Store`'s `find()` method:\n\n```javascript\nstore.find('person', 123).then(function (person) {\n});\n```\n\nIf your application has multiple `DS.Store` instances (an unusual case), you can\nspecify which store should be used:\n\n```javascript\nstore.find('person', 123).then(function (person) {\n});\n```\n\nBy default, the store will talk to your backend using a standard\nREST mechanism. You can customize how the store talks to your\nbackend by specifying a custom adapter:\n\n```javascript\nMyApp.ApplicationAdapter = MyApp.CustomAdapter\n```\n\nYou can learn more about writing a custom adapter by reading the `DS.Adapter`\ndocumentation.\n\n### Store createRecord() vs. push() vs. pushPayload() vs. update()\n\nThe store provides multiple ways to create new record objects. They have\nsome subtle differences in their use which are detailed below:\n\n[createRecord](#method_createRecord) is used for creating new\nrecords on the client side. This will return a new record in the\n`created.uncommitted` state. In order to persist this record to the\nbackend you will need to call `record.save()`.\n\n[push](#method_push) is used to notify Ember Data's store of new or\nupdated records that exist in the backend. This will return a record\nin the `loaded.saved` state. The primary use-case for `store#push` is\nto notify Ember Data about record updates that happen\noutside of the normal adapter methods (for example\n[SSE](http://dev.w3.org/html5/eventsource/) or [Web\nSockets](http://www.w3.org/TR/2009/WD-websockets-20091222/)).\n\n[pushPayload](#method_pushPayload) is a convenience wrapper for\n`store#push` that will deserialize payloads if the\nSerializer implements a `pushPayload` method.\n\n[update](#method_update) works like `push`, except it can handle\npartial attributes without overwriting the existing record\nproperties.\n\nNote: When creating a new record using any of the above methods\nEmber Data will update `DS.RecordArray`s such as those returned by\n`store#all()`, `store#findAll()` or `store#filter()`. This means any\ndata bindings or computed properties that depend on the RecordArray\nwill automatically be synced to include the new or updated record\nvalues.",
            "extends": "Ember.Object"
        },
        "DS.Transform": {
            "name": "DS.Transform",
            "shortname": "DS.Transform",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-data",
            "namespace": "DS",
            "file": "dist/assets/vendor.js",
            "line": 82262,
            "description": "The `DS.Transform` class is used to serialize and deserialize model\nattributes when they are saved or loaded from an\nadapter. Subclassing `DS.Transform` is useful for creating custom\nattributes. All subclasses of `DS.Transform` must implement a\n`serialize` and a `deserialize` method.\n\nExample\n\n```javascript\n// Converts centigrade in the JSON to fahrenheit in the app\nApp.TemperatureTransform = DS.Transform.extend({\n  deserialize: function(serialized) {\n    return (serialized *  1.8) + 32;\n  },\n  serialize: function(deserialized) {\n    return (deserialized - 32) / 1.8;\n  }\n});\n```\n\nUsage\n\n```javascript\nvar attr = DS.attr;\nApp.Requirement = DS.Model.extend({\n  name: attr('string'),\n  temperature: attr('temperature')\n});\n```"
        },
        "DS.BooleanTransform": {
            "name": "DS.BooleanTransform",
            "shortname": "DS.BooleanTransform",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-data",
            "namespace": "DS",
            "file": "dist/assets/vendor.js",
            "line": 82340,
            "description": "The `DS.BooleanTransform` class is used to serialize and deserialize\nboolean attributes on Ember Data record objects. This transform is\nused when `boolean` is passed as the type parameter to the\n[DS.attr](../../data#method_attr) function.\n\nUsage\n\n```javascript\nvar attr = DS.attr;\nApp.User = DS.Model.extend({\n  isAdmin: attr('boolean'),\n  name: attr('string'),\n  email: attr('string')\n});\n```",
            "extends": "DS.Transform"
        },
        "DS.DateTransform": {
            "name": "DS.DateTransform",
            "shortname": "DS.DateTransform",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-data",
            "namespace": "DS",
            "file": "dist/assets/vendor.js",
            "line": 82397,
            "description": "The `DS.DateTransform` class is used to serialize and deserialize\ndate attributes on Ember Data record objects. This transform is used\nwhen `date` is passed as the type parameter to the\n[DS.attr](../../data#method_attr) function.\n\n```javascript\nvar attr = DS.attr;\nApp.Score = DS.Model.extend({\n  value: attr('number'),\n  player: DS.belongsTo('player'),\n  date: attr('date')\n});\n```",
            "extends": "DS.Transform"
        },
        "DS.NumberTransform": {
            "name": "DS.NumberTransform",
            "shortname": "DS.NumberTransform",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-data",
            "namespace": "DS",
            "file": "dist/assets/vendor.js",
            "line": 82497,
            "description": "The `DS.NumberTransform` class is used to serialize and deserialize\nnumeric attributes on Ember Data record objects. This transform is\nused when `number` is passed as the type parameter to the\n[DS.attr](../../data#method_attr) function.\n\nUsage\n\n```javascript\nvar attr = DS.attr;\nApp.Score = DS.Model.extend({\n  value: attr('number'),\n  player: DS.belongsTo('player'),\n  date: attr('date')\n});\n```",
            "extends": "DS.Transform"
        },
        "DS.StringTransform": {
            "name": "DS.StringTransform",
            "shortname": "DS.StringTransform",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-data",
            "namespace": "DS",
            "file": "dist/assets/vendor.js",
            "line": 82547,
            "description": "The `DS.StringTransform` class is used to serialize and deserialize\nstring attributes on Ember Data record objects. This transform is\nused when `string` is passed as the type parameter to the\n[DS.attr](../../data#method_attr) function.\n\nUsage\n\n```javascript\nvar attr = DS.attr;\nApp.User = DS.Model.extend({\n  isAdmin: attr('boolean'),\n  name: attr('string'),\n  email: attr('string')\n});\n```",
            "extends": "DS.Transform"
        },
        "Ember.Inflector": {
            "name": "Ember.Inflector",
            "shortname": "Ember.Inflector",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-data",
            "namespace": "Ember",
            "file": "dist/assets/vendor.js",
            "line": 82825,
            "description": "Inflector.Ember provides a mechanism for supplying inflection rules for your\napplication. Ember includes a default set of inflection rules, and provides an\nAPI for providing additional rules.\nExamples:\nCreating an inflector with no rules.\n```js\nvar inflector = new Ember.Inflector();\n```\nCreating an inflector with the default ember ruleset.\n```js\nvar inflector = new Ember.Inflector(Ember.Inflector.defaultRules);\ninflector.pluralize('cow'); //=> 'kine'\ninflector.singularize('kine'); //=> 'cow'\n```\nCreating an inflector and adding rules later.\n```javascript\nvar inflector = Ember.Inflector.inflector;\ninflector.pluralize('advice'); // => 'advices'\ninflector.uncountable('advice');\ninflector.pluralize('advice'); // => 'advice'\ninflector.pluralize('formula'); // => 'formulas'\ninflector.irregular('formula', 'formulae');\ninflector.pluralize('formula'); // => 'formulae'\n// you would not need to add these as they are the default rules\ninflector.plural(/$/, 's');\ninflector.singular(/s$/i, '');\n```\nCreating an inflector with a nondefault ruleset.\n```javascript\nvar rules = {\nplurals:  [ /$/, 's' ],\nsingular: [ /\\s$/, '' ],\nirregularPairs: [\n[ 'cow', 'kine' ]\n],\nuncountable: [ 'fish' ]\n};\nvar inflector = new Ember.Inflector(rules);\n```",
            "itemtype": "method",
            "params": [
                {
                    "name": "ruleSet",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            }
        },
        "Ember.Sequelize Course Model": {
            "name": "Ember.Sequelize Course Model",
            "shortname": "Sequelize Course Model",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-data",
            "namespace": "Ember",
            "file": "models/course.js",
            "line": 20,
            "description": "Model for a LSU Course. Only used by the back end.",
            "is_constructor": 1
        },
        "Ember.Sequelize Department Model": {
            "name": "Ember.Sequelize Department Model",
            "shortname": "Sequelize Department Model",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-data",
            "namespace": "Ember",
            "file": "models/department.js",
            "line": 19,
            "description": "Model for a LSU Department. Only used by the back end.",
            "is_constructor": 1
        },
        "Ember.Sequelize Instructor Model": {
            "name": "Ember.Sequelize Instructor Model",
            "shortname": "Sequelize Instructor Model",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-data",
            "namespace": "Ember",
            "file": "models/instructor.js",
            "line": 19,
            "description": "Model for a LSU Instructor. Only used by the back end.",
            "is_constructor": 1
        },
        "LSU Scheduler API": {
            "name": "LSU Scheduler API",
            "shortname": "LSU Scheduler API",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "lsu-scheduler",
            "namespace": "",
            "file": "index.js",
            "line": 23,
            "description": "Server script that controls the LSU Scheduler backend, including\nthe API used to communicate with front-end clients, managing data requests,\nand fetching updated information from LSU's system.",
            "mainName": "lsu-scheduler",
            "tag": "main",
            "itemtype": "main",
            "_main": true
        }
    },
    "classitems": [
        {
            "file": "app/models/course.js",
            "line": 28,
            "description": "Constructs a new Application Course Model",
            "itemtype": "method",
            "name": "Constructor",
            "params": [
                {
                    "name": "Available",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "Enrollment",
                    "description": "Count",
                    "type": "String"
                },
                {
                    "name": "Course",
                    "description": "Abbreviation",
                    "type": "String"
                },
                {
                    "name": "Course",
                    "description": "Number",
                    "type": "Integer"
                },
                {
                    "name": "Course",
                    "description": "Type",
                    "type": "String"
                },
                {
                    "name": "Section",
                    "description": "Number",
                    "type": "Integer"
                },
                {
                    "name": "Course",
                    "description": "Title",
                    "type": "String"
                },
                {
                    "name": "Credit",
                    "description": "Hour",
                    "type": "Decimal"
                },
                {
                    "name": "Time",
                    "description": "Begin",
                    "type": "DateTime"
                },
                {
                    "name": "Time",
                    "description": "End",
                    "type": "DateTime"
                },
                {
                    "name": "Days",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "Room",
                    "description": "Number",
                    "type": "Integer"
                },
                {
                    "name": "Building",
                    "description": "Name",
                    "type": "String"
                },
                {
                    "name": "Special",
                    "description": "Enrollment",
                    "type": "String"
                },
                {
                    "name": "Instructor",
                    "description": "Name",
                    "type": "String"
                }
            ],
            "class": "Application Course Model"
        },
        {
            "file": "app/models/department.js",
            "line": 26,
            "description": "Constructs a new Application Department Model",
            "itemtype": "method",
            "name": "Constructor",
            "params": [
                {
                    "name": "Name",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "Application Department Model"
        },
        {
            "file": "app/models/instructor.js",
            "line": 27,
            "description": "Constructs a new Application Instructor Model",
            "itemtype": "method",
            "name": "Constructor",
            "params": [
                {
                    "name": "Name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "Course",
                    "description": "Abbreviation",
                    "type": "String"
                },
                {
                    "name": "Course",
                    "description": "Number",
                    "type": "Integer"
                },
                {
                    "name": "Room",
                    "description": "Number",
                    "type": "Integer"
                },
                {
                    "name": "Building",
                    "description": "Name",
                    "type": "String"
                },
                {
                    "name": "Department",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "Application Instructor Model"
        },
        {
            "file": "config/environment.js",
            "line": 1,
            "description": "jshint node: true",
            "itemtype": "method",
            "name": "exports",
            "params": [
                {
                    "name": "environment",
                    "description": ""
                }
            ],
            "return": {
                "description": "ENV"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 14,
            "description": "Description",
            "params": [
                {
                    "name": "fullNames",
                    "description": ""
                }
            ],
            "return": {
                "description": "container"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 47,
            "description": "Description",
            "itemtype": "method",
            "name": "setResolver",
            "params": [
                {
                    "name": "resolver",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 57,
            "description": "Description",
            "itemtype": "method",
            "name": "globalize",
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 84,
            "description": "Description",
            "params": [
                {
                    "name": "name",
                    "description": ""
                },
                {
                    "name": "description",
                    "description": ""
                },
                {
                    "name": "callbacks",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 107,
            "description": "Description",
            "itemtype": "method",
            "name": "append",
            "params": [
                {
                    "name": "selector",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 135,
            "description": "Description",
            "params": [
                {
                    "name": "name",
                    "description": ""
                },
                {
                    "name": "description",
                    "description": ""
                },
                {
                    "name": "callbacks",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 155,
            "description": "Description",
            "itemtype": "method",
            "name": "store",
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 165,
            "description": "Description",
            "itemtype": "method",
            "name": "subject",
            "params": [
                {
                    "name": "options",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 188,
            "description": "Description",
            "params": [
                {
                    "name": "fullName",
                    "description": ""
                },
                {
                    "name": "description",
                    "description": ""
                },
                {
                    "name": "callbacks",
                    "description": ""
                },
                {
                    "name": "delegate",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 201,
            "description": "Description",
            "itemtype": "method",
            "name": "setup",
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 217,
            "description": "Description",
            "itemtype": "method",
            "name": "factory",
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 247,
            "description": "Description",
            "itemtype": "method",
            "name": "teardown",
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 269,
            "description": "Description",
            "itemtype": "method",
            "name": "defaultSubject",
            "params": [
                {
                    "name": "options",
                    "description": ""
                },
                {
                    "name": "factory",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 281,
            "description": "Description",
            "itemtype": "method",
            "name": "buildContextVariables",
            "params": [
                {
                    "name": "context",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 297,
            "description": "Description",
            "itemtype": "method",
            "name": "key",
            "params": [
                {
                    "name": "options",
                    "description": ""
                }
            ],
            "return": {
                "description": "result"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 318,
            "description": "Description",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "context",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 329,
            "description": "Description",
            "itemtype": "method",
            "name": "get",
            "return": {
                "description": "__test_context__"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 345,
            "description": "Description",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "resolver",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 356,
            "description": "Description",
            "itemtype": "method",
            "name": "get",
            "return": {
                "description": "__resolver__"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 375,
            "description": "Description",
            "itemtype": "method",
            "name": "resetViews",
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 384,
            "description": "Description",
            "params": [
                {
                    "name": "testName",
                    "description": ""
                },
                {
                    "name": "callback",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 392,
            "description": "Description",
            "itemtype": "method",
            "name": "wrapper",
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 403,
            "description": "Description",
            "itemtype": "method",
            "name": "failTestOnPromiseRejection",
            "params": [
                {
                    "name": "reason",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 443,
            "description": "Description",
            "itemtype": "method",
            "name": "objectValues",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                }
            ],
            "return": {
                "description": "vals"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 476,
            "description": "Provides a normalized error string, correcting an issue\nwith IE 7 (and prior) where Error.prototype.toString is\nnot properly implemented\n\nBased on http://es5.github.com/#x15.11.4.4",
            "params": [
                {
                    "name": "error",
                    "description": "",
                    "type": "String|Error"
                }
            ],
            "return": {
                "description": "error message",
                "type": "String"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 505,
            "description": "Makes a clone of an object using only Array or Object as base,\nand copies over the own enumerable properties.",
            "params": [
                {
                    "name": "obj",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "New object with only the own properties (recursively).",
                "type": "Object"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 529,
            "description": "Description",
            "itemtype": "method",
            "name": "module",
            "params": [
                {
                    "name": "name",
                    "description": ""
                },
                {
                    "name": "testEnvironment",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 542,
            "description": "Description",
            "itemtype": "method",
            "name": "asyncTest",
            "params": [
                {
                    "name": "testName",
                    "description": ""
                },
                {
                    "name": "expected",
                    "description": ""
                },
                {
                    "name": "callback",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 559,
            "description": "Description",
            "itemtype": "method",
            "name": "test",
            "params": [
                {
                    "name": "testName",
                    "description": ""
                },
                {
                    "name": "expected",
                    "description": ""
                },
                {
                    "name": "callback",
                    "description": ""
                },
                {
                    "name": "async",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 593,
            "description": "Description",
            "itemtype": "method",
            "name": "start",
            "params": [
                {
                    "name": "count",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 655,
            "description": "Description",
            "itemtype": "method",
            "name": "stop",
            "params": [
                {
                    "name": "count",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 679,
            "description": "Description",
            "itemtype": "method",
            "name": "F",
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 692,
            "description": "Config object: Maintain internal state\nLater exposed as QUnit.config\n`config` initialized at top of scope",
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 793,
            "description": "Description",
            "itemtype": "method",
            "name": "is",
            "params": [
                {
                    "name": "type",
                    "description": ""
                },
                {
                    "name": "obj",
                    "description": ""
                }
            ],
            "return": {
                "description": "BinaryExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 804,
            "description": "Description",
            "itemtype": "method",
            "name": "objectType",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                }
            ],
            "return": {
                "description": "undefined"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 843,
            "description": "Description",
            "itemtype": "method",
            "name": "url",
            "params": [
                {
                    "name": "params",
                    "description": ""
                }
            ],
            "return": {
                "description": "BinaryExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 867,
            "deprecated": true,
            "deprecationMessage": ": Created for backwards compatibility with test runner that set the hook function\ninto QUnit.{hook}, instead of invoking it and passing the hook function.\nQUnit.constructor is set to the empty F() above so that we can add to it's prototype here.\nDoing this allows us to tell if the following methods have been overwritten on the actual\nQUnit object.",
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 899,
            "description": "Description",
            "itemtype": "method",
            "name": "load",
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 934,
            "description": "Description",
            "itemtype": "method",
            "name": "onerror",
            "params": [
                {
                    "name": "error",
                    "description": ""
                },
                {
                    "name": "filePath",
                    "description": ""
                },
                {
                    "name": "linerNr",
                    "description": ""
                }
            ],
            "return": {
                "description": "ret"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 967,
            "description": "Description",
            "itemtype": "method",
            "name": "done",
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 997,
            "description": "Description",
            "itemtype": "method",
            "name": "validTest",
            "params": [
                {
                    "name": "test",
                    "description": ""
                }
            ],
            "return": {
                "description": "UnaryExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 1045,
            "description": "Description",
            "itemtype": "method",
            "name": "extractStacktrace",
            "params": [
                {
                    "name": "e",
                    "description": ""
                },
                {
                    "name": "offset",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 1093,
            "description": "Description",
            "itemtype": "method",
            "name": "sourceFromStacktrace",
            "params": [
                {
                    "name": "offset",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 1107,
            "description": "Description",
            "itemtype": "method",
            "name": "synchronize",
            "params": [
                {
                    "name": "callback",
                    "description": ""
                },
                {
                    "name": "last",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 1122,
            "description": "Description",
            "itemtype": "method",
            "name": "process",
            "params": [
                {
                    "name": "last",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 1129,
            "description": "Description",
            "itemtype": "method",
            "name": "next",
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 1154,
            "description": "Description",
            "itemtype": "method",
            "name": "saveGlobal",
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 1175,
            "description": "Description",
            "itemtype": "method",
            "name": "checkPollution",
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 1199,
            "description": "Description",
            "itemtype": "method",
            "name": "diff",
            "params": [
                {
                    "name": "a",
                    "description": ""
                },
                {
                    "name": "b",
                    "description": ""
                }
            ],
            "return": {
                "description": "result"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 1222,
            "description": "Description",
            "itemtype": "method",
            "name": "extend",
            "params": [
                {
                    "name": "a",
                    "description": ""
                },
                {
                    "name": "b",
                    "description": ""
                },
                {
                    "name": "undefOnly",
                    "description": ""
                }
            ],
            "return": {
                "description": "a"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 1248,
            "description": "Description",
            "itemtype": "method",
            "name": "registerLoggingCallback",
            "params": [
                {
                    "name": "key",
                    "description": ""
                }
            ],
            "return": {
                "description": "FunctionExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 1266,
            "description": "Description",
            "itemtype": "method",
            "name": "runLoggingCallbacks",
            "params": [
                {
                    "name": "key",
                    "description": ""
                },
                {
                    "name": "args",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 1283,
            "description": "Description",
            "itemtype": "method",
            "name": "inArray",
            "params": [
                {
                    "name": "elem",
                    "description": ""
                },
                {
                    "name": "array",
                    "description": ""
                }
            ],
            "return": {
                "description": "UnaryExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 1304,
            "description": "Description",
            "itemtype": "method",
            "name": "Test",
            "params": [
                {
                    "name": "settings",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 1320,
            "description": "Description",
            "itemtype": "method",
            "name": "setup",
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 1355,
            "description": "Description",
            "itemtype": "method",
            "name": "setup",
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 1361,
            "description": "Description",
            "itemtype": "method",
            "name": "teardown",
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 1389,
            "description": "Description",
            "itemtype": "method",
            "name": "run",
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 1426,
            "description": "Description",
            "itemtype": "method",
            "name": "teardown",
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 1448,
            "description": "Description",
            "itemtype": "method",
            "name": "finish",
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 1497,
            "description": "Description",
            "itemtype": "method",
            "name": "queue",
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 1506,
            "description": "Description",
            "itemtype": "method",
            "name": "run",
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 1539,
            "description": "Description",
            "itemtype": "method",
            "name": "push",
            "params": [
                {
                    "name": "result",
                    "description": ""
                },
                {
                    "name": "actual",
                    "description": ""
                },
                {
                    "name": "expected",
                    "description": ""
                },
                {
                    "name": "message",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 1576,
            "description": "Description",
            "itemtype": "method",
            "name": "pushFailure",
            "params": [
                {
                    "name": "message",
                    "description": ""
                },
                {
                    "name": "source",
                    "description": ""
                },
                {
                    "name": "actual",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 1611,
            "description": "Description",
            "itemtype": "method",
            "name": "pushFailure",
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 1627,
            "description": "Description",
            "itemtype": "method",
            "name": "Assert",
            "params": [
                {
                    "name": "testContext",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 1641,
            "description": "Description",
            "itemtype": "method",
            "name": "expect",
            "params": [
                {
                    "name": "asserts",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 1656,
            "description": "Description",
            "itemtype": "method",
            "name": "push",
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 1678,
            "description": "Asserts rough true-ish result.",
            "itemtype": "method",
            "name": "ok",
            "example": [
                " ok( \"asdfasdf\".length > 5, \"There must be at least 5 chars\" );"
            ],
            "params": [
                {
                    "name": "result",
                    "description": ""
                },
                {
                    "name": "message",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 1698,
            "description": "Assert that the first two arguments are equal, with an optional message.\nPrints out both actual and expected values.",
            "itemtype": "method",
            "name": "equal",
            "example": [
                " equal( format( \"Received {0} bytes.\", 2), \"Received 2 bytes.\", \"format() replaces {0} with next argument\" );"
            ],
            "params": [
                {
                    "name": "actual",
                    "description": ""
                },
                {
                    "name": "expected",
                    "description": ""
                },
                {
                    "name": "message",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 1715,
            "itemtype": "method",
            "name": "notEqual",
            "params": [
                {
                    "name": "actual",
                    "description": ""
                },
                {
                    "name": "expected",
                    "description": ""
                },
                {
                    "name": "message",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 1729,
            "itemtype": "method",
            "name": "propEqual",
            "params": [
                {
                    "name": "actual",
                    "description": ""
                },
                {
                    "name": "expected",
                    "description": ""
                },
                {
                    "name": "message",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 1744,
            "itemtype": "method",
            "name": "notPropEqual",
            "params": [
                {
                    "name": "actual",
                    "description": ""
                },
                {
                    "name": "expected",
                    "description": ""
                },
                {
                    "name": "message",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 1759,
            "itemtype": "method",
            "name": "deepEqual",
            "params": [
                {
                    "name": "actual",
                    "description": ""
                },
                {
                    "name": "expected",
                    "description": ""
                },
                {
                    "name": "message",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 1772,
            "itemtype": "method",
            "name": "notDeepEqual",
            "params": [
                {
                    "name": "actual",
                    "description": ""
                },
                {
                    "name": "expected",
                    "description": ""
                },
                {
                    "name": "message",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 1785,
            "itemtype": "method",
            "name": "strictEqual",
            "params": [
                {
                    "name": "actual",
                    "description": ""
                },
                {
                    "name": "expected",
                    "description": ""
                },
                {
                    "name": "message",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 1798,
            "itemtype": "method",
            "name": "notStrictEqual",
            "params": [
                {
                    "name": "actual",
                    "description": ""
                },
                {
                    "name": "expected",
                    "description": ""
                },
                {
                    "name": "message",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 1811,
            "description": "Description",
            "params": [
                {
                    "name": "block",
                    "description": ""
                },
                {
                    "name": "expected",
                    "description": ""
                },
                {
                    "name": "message",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 1881,
            "description": "Description",
            "itemtype": "method",
            "name": "bindCallbacks",
            "params": [
                {
                    "name": "o",
                    "description": ""
                },
                {
                    "name": "callbacks",
                    "description": ""
                },
                {
                    "name": "args",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 1917,
            "description": "Description",
            "itemtype": "method",
            "name": "useStrictEquality",
            "params": [
                {
                    "name": "b",
                    "description": ""
                },
                {
                    "name": "a",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 1946,
            "description": "Description",
            "params": [
                {
                    "name": "b",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 1955,
            "description": "Description",
            "params": [
                {
                    "name": "b",
                    "description": ""
                },
                {
                    "name": "a",
                    "description": ""
                }
            ],
            "return": {
                "description": "LogicalExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 1965,
            "description": "Description",
            "params": [
                {
                    "name": "b",
                    "description": ""
                },
                {
                    "name": "a",
                    "description": ""
                }
            ],
            "return": {
                "description": "LogicalExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 1989,
            "description": "Description",
            "return": {
                "description": "LogicalExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 1998,
            "description": "Description",
            "params": [
                {
                    "name": "b",
                    "description": ""
                },
                {
                    "name": "a",
                    "description": ""
                }
            ],
            "return": {
                "description": "Literal"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 2047,
            "description": "Description",
            "params": [
                {
                    "name": "b",
                    "description": ""
                },
                {
                    "name": "a",
                    "description": ""
                }
            ],
            "return": {
                "description": "LogicalExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 2117,
            "description": "Description",
            "return": {
                "description": "LogicalExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 2150,
            "description": "Description",
            "itemtype": "method",
            "name": "quote",
            "params": [
                {
                    "name": "str",
                    "description": ""
                }
            ],
            "return": {
                "description": "BinaryExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 2159,
            "description": "Description",
            "itemtype": "method",
            "name": "literal",
            "params": [
                {
                    "name": "o",
                    "description": ""
                }
            ],
            "return": {
                "description": "BinaryExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 2168,
            "description": "Description",
            "itemtype": "method",
            "name": "join",
            "params": [
                {
                    "name": "pre",
                    "description": ""
                },
                {
                    "name": "arr",
                    "description": ""
                },
                {
                    "name": "post",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 2188,
            "description": "Description",
            "itemtype": "method",
            "name": "array",
            "params": [
                {
                    "name": "arr",
                    "description": ""
                },
                {
                    "name": "stack",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 2209,
            "description": "Description",
            "itemtype": "method",
            "name": "parse",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                },
                {
                    "name": "type",
                    "description": ""
                },
                {
                    "name": "stack",
                    "description": ""
                }
            ],
            "return": {
                "description": "ConditionalExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 2236,
            "description": "Description",
            "itemtype": "method",
            "name": "typeOf",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                }
            ],
            "return": {
                "description": "type"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 2276,
            "description": "Description",
            "itemtype": "method",
            "name": "separator",
            "return": {
                "description": "ConditionalExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 2285,
            "description": "Description",
            "itemtype": "method",
            "name": "indent",
            "params": [
                {
                    "name": "extra",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 2301,
            "description": "Description",
            "itemtype": "method",
            "name": "up",
            "params": [
                {
                    "name": "a",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 2310,
            "description": "Description",
            "itemtype": "method",
            "name": "down",
            "params": [
                {
                    "name": "a",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 2319,
            "description": "Description",
            "itemtype": "method",
            "name": "setParser",
            "params": [
                {
                    "name": "name",
                    "description": ""
                },
                {
                    "name": "parser",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 2339,
            "description": "Description",
            "itemtype": "method",
            "name": "error",
            "params": [
                {
                    "name": "error",
                    "description": ""
                }
            ],
            "return": {
                "description": "BinaryExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 2351,
            "description": "Description",
            "params": [
                {
                    "name": "fn",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 2372,
            "description": "Description",
            "itemtype": "method",
            "name": "object",
            "params": [
                {
                    "name": "map",
                    "description": ""
                },
                {
                    "name": "stack",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 2405,
            "description": "Description",
            "itemtype": "method",
            "name": "node",
            "params": [
                {
                    "name": "node",
                    "description": ""
                }
            ],
            "return": {
                "description": "BinaryExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 2441,
            "description": "Description",
            "itemtype": "method",
            "name": "functionArgs",
            "params": [
                {
                    "name": "fn",
                    "description": ""
                }
            ],
            "return": {
                "description": "BinaryExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 2498,
            "description": "Description",
            "itemtype": "method",
            "name": "applyCurrent",
            "params": [
                {
                    "name": "current",
                    "description": ""
                }
            ],
            "return": {
                "description": "FunctionExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 2573,
            "description": "jshint eqeqeq:false, eqnull:true",
            "itemtype": "method",
            "name": "diff",
            "params": [
                {
                    "name": "o",
                    "description": ""
                },
                {
                    "name": "n",
                    "description": ""
                }
            ],
            "return": {
                "description": "ObjectExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 2713,
            "description": "Description",
            "itemtype": "method",
            "name": "init",
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 2775,
            "description": "DEPRECATED: Use multiple tests instead of resetting inside a test.\nUse testStart or testDone for custom cleanup.\nThis method will throw an error in 2.0, and will be removed in 2.1",
            "itemtype": "method",
            "name": "reset",
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 2817,
            "description": "Escape text for attribute or text content.",
            "itemtype": "method",
            "name": "escapeText",
            "params": [
                {
                    "name": "s",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 2846,
            "description": "Description",
            "itemtype": "method",
            "name": "addEvent",
            "params": [
                {
                    "name": "elem",
                    "description": "",
                    "type": "HTMLElement"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "fn",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 2866,
            "description": "Description",
            "itemtype": "method",
            "name": "addEvents",
            "params": [
                {
                    "name": "elems",
                    "description": ""
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "fn",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 2881,
            "description": "Description",
            "itemtype": "method",
            "name": "hasClass",
            "params": [
                {
                    "name": "elem",
                    "description": ""
                },
                {
                    "name": "name",
                    "description": ""
                }
            ],
            "return": {
                "description": "BinaryExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 2892,
            "description": "Description",
            "itemtype": "method",
            "name": "addClass",
            "params": [
                {
                    "name": "elem",
                    "description": ""
                },
                {
                    "name": "name",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 2905,
            "description": "Description",
            "itemtype": "method",
            "name": "toggleClass",
            "params": [
                {
                    "name": "elem",
                    "description": ""
                },
                {
                    "name": "name",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 2920,
            "description": "Description",
            "itemtype": "method",
            "name": "removeClass",
            "params": [
                {
                    "name": "elem",
                    "description": ""
                },
                {
                    "name": "name",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 2939,
            "description": "Description",
            "itemtype": "method",
            "name": "id",
            "params": [
                {
                    "name": "name",
                    "description": ""
                }
            ],
            "return": {
                "description": "LogicalExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 2949,
            "description": "Description",
            "itemtype": "method",
            "name": "getUrlConfigHtml",
            "return": {
                "description": "urlConfigHtml"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 3017,
            "description": "Description",
            "itemtype": "method",
            "name": "toolbarUrlConfigContainer",
            "return": {
                "description": "urlConfigContainer"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 3049,
            "description": "Description",
            "itemtype": "method",
            "name": "getModuleNames",
            "return": {
                "description": "moduleNames"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 3071,
            "description": "Description",
            "itemtype": "method",
            "name": "toolbarModuleFilterHtml",
            "return": {
                "description": "moduleFilterHtml"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 3101,
            "description": "Description",
            "itemtype": "method",
            "name": "toolbarModuleFilter",
            "return": {
                "description": "moduleFilter"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 3133,
            "description": "Description",
            "itemtype": "method",
            "name": "toolbarFilter",
            "return": {
                "description": "filter"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 3169,
            "description": "Description",
            "itemtype": "method",
            "name": "toolbarLabel",
            "return": {
                "description": "label"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 3183,
            "description": "Description",
            "itemtype": "method",
            "name": "appendToolbar",
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 3204,
            "description": "Description",
            "itemtype": "method",
            "name": "appendBanner",
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 3220,
            "description": "Description",
            "itemtype": "method",
            "name": "appendTestResults",
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 3243,
            "description": "Description",
            "itemtype": "method",
            "name": "storeFixture",
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 3255,
            "description": "Description",
            "itemtype": "method",
            "name": "appendUserAgent",
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 3338,
            "description": "Description",
            "itemtype": "method",
            "name": "getNameHtml",
            "params": [
                {
                    "name": "name",
                    "description": ""
                },
                {
                    "name": "module",
                    "description": ""
                }
            ],
            "return": {
                "description": "nameHtml"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 3509,
            "description": "Description",
            "itemtype": "method",
            "name": "notifications",
            "params": [
                {
                    "name": "options",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/test-support.js",
            "line": 3522,
            "description": "Description",
            "itemtype": "method",
            "name": "renderBody",
            "params": [
                {
                    "name": "body",
                    "description": ""
                },
                {
                    "name": "details",
                    "description": ""
                }
            ],
            "return": {
                "description": "body"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 14,
            "description": "Description",
            "params": [
                {
                    "name": "x",
                    "description": ""
                }
            ],
            "return": {
                "description": "BinaryExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 29,
            "description": "Description",
            "params": [
                {
                    "name": "name",
                    "description": ""
                },
                {
                    "name": "deps",
                    "description": ""
                },
                {
                    "name": "callback",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 49,
            "description": "Description",
            "itemtype": "method",
            "name": "reify",
            "params": [
                {
                    "name": "deps",
                    "description": ""
                },
                {
                    "name": "name",
                    "description": ""
                },
                {
                    "name": "seen",
                    "description": ""
                }
            ],
            "return": {
                "description": "ObjectExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 79,
            "description": "Description",
            "params": [
                {
                    "name": "name",
                    "description": ""
                }
            ],
            "return": {
                "description": "ConditionalExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 114,
            "description": "Description",
            "itemtype": "method",
            "name": "resolve",
            "params": [
                {
                    "name": "child",
                    "description": ""
                },
                {
                    "name": "name",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 146,
            "description": "Description",
            "itemtype": "method",
            "name": "clear",
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 222,
            "description": "Description",
            "itemtype": "method",
            "name": "fcamelCase",
            "params": [
                {
                    "name": "all",
                    "description": ""
                },
                {
                    "name": "letter",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 264,
            "description": "Description",
            "itemtype": "method",
            "name": "toArray",
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 275,
            "description": "Description",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "num",
                    "description": ""
                }
            ],
            "return": {
                "description": "ConditionalExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 293,
            "description": "Description",
            "itemtype": "method",
            "name": "pushStack",
            "params": [
                {
                    "name": "elems",
                    "description": ""
                }
            ],
            "return": {
                "description": "ret"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 315,
            "description": "Description",
            "itemtype": "method",
            "name": "each",
            "params": [
                {
                    "name": "callback",
                    "description": ""
                },
                {
                    "name": "args",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 326,
            "description": "Description",
            "itemtype": "method",
            "name": "map",
            "params": [
                {
                    "name": "callback",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 338,
            "description": "Description",
            "itemtype": "method",
            "name": "slice",
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 347,
            "description": "Description",
            "itemtype": "method",
            "name": "first",
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 356,
            "description": "Description",
            "itemtype": "method",
            "name": "last",
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 365,
            "description": "Description",
            "itemtype": "method",
            "name": "eq",
            "params": [
                {
                    "name": "i",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 377,
            "description": "Description",
            "itemtype": "method",
            "name": "end",
            "return": {
                "description": "LogicalExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 394,
            "description": "Description",
            "itemtype": "method",
            "name": "extend",
            "return": {
                "description": "target"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 471,
            "description": "Description",
            "itemtype": "method",
            "name": "error",
            "params": [
                {
                    "name": "msg",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 481,
            "description": "Description",
            "itemtype": "method",
            "name": "noop",
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 491,
            "description": "Description",
            "itemtype": "method",
            "name": "isFunction",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                }
            ],
            "return": {
                "description": "BinaryExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 505,
            "description": "Description",
            "itemtype": "method",
            "name": "isWindow",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                }
            ],
            "return": {
                "description": "LogicalExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 516,
            "description": "Description",
            "itemtype": "method",
            "name": "isNumeric",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                }
            ],
            "return": {
                "description": "LogicalExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 529,
            "description": "Description",
            "itemtype": "method",
            "name": "isEmptyObject",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                }
            ],
            "return": {
                "description": "Literal"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 543,
            "description": "Description",
            "itemtype": "method",
            "name": "isPlainObject",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                }
            ],
            "return": {
                "description": "LogicalExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 586,
            "description": "Description",
            "itemtype": "method",
            "name": "type",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                }
            ],
            "return": {
                "description": "ConditionalExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 604,
            "description": "Description",
            "itemtype": "method",
            "name": "globalEval",
            "params": [
                {
                    "name": "data",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 623,
            "description": "Description",
            "itemtype": "method",
            "name": "camelCase",
            "params": [
                {
                    "name": "string",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 633,
            "description": "Description",
            "itemtype": "method",
            "name": "nodeName",
            "params": [
                {
                    "name": "elem",
                    "description": ""
                },
                {
                    "name": "name",
                    "description": ""
                }
            ],
            "return": {
                "description": "LogicalExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 645,
            "description": "Description",
            "itemtype": "method",
            "name": "each",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                },
                {
                    "name": "callback",
                    "description": ""
                },
                {
                    "name": "args",
                    "description": ""
                }
            ],
            "return": {
                "description": "obj"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 703,
            "description": "Description",
            "itemtype": "method",
            "name": "trim",
            "params": [
                {
                    "name": "text",
                    "description": ""
                }
            ],
            "return": {
                "description": "ConditionalExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 716,
            "description": "Description",
            "itemtype": "method",
            "name": "makeArray",
            "params": [
                {
                    "name": "arr",
                    "description": ""
                },
                {
                    "name": "results",
                    "description": ""
                }
            ],
            "return": {
                "description": "ret"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 740,
            "description": "Description",
            "itemtype": "method",
            "name": "inArray",
            "params": [
                {
                    "name": "elem",
                    "description": ""
                },
                {
                    "name": "arr",
                    "description": ""
                },
                {
                    "name": "i",
                    "description": ""
                }
            ],
            "return": {
                "description": "UnaryExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 770,
            "description": "Description",
            "itemtype": "method",
            "name": "merge",
            "params": [
                {
                    "name": "first",
                    "description": ""
                },
                {
                    "name": "second",
                    "description": ""
                }
            ],
            "return": {
                "description": "first"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 799,
            "description": "Description",
            "itemtype": "method",
            "name": "grep",
            "params": [
                {
                    "name": "elems",
                    "description": ""
                },
                {
                    "name": "callback",
                    "description": ""
                },
                {
                    "name": "invert",
                    "description": ""
                }
            ],
            "return": {
                "description": "matches"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 827,
            "description": "Description",
            "itemtype": "method",
            "name": "map",
            "params": [
                {
                    "name": "elems",
                    "description": ""
                },
                {
                    "name": "callback",
                    "description": ""
                },
                {
                    "name": "arg",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 872,
            "description": "Description",
            "itemtype": "method",
            "name": "proxy",
            "params": [
                {
                    "name": "fn",
                    "description": ""
                },
                {
                    "name": "context",
                    "description": ""
                }
            ],
            "return": {
                "description": "proxy"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 896,
            "description": "Description",
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 910,
            "description": "Description",
            "itemtype": "method",
            "name": "now",
            "return": {
                "description": "UnaryExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 929,
            "description": "Description",
            "itemtype": "method",
            "name": "isArraylike",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                }
            ],
            "return": {
                "description": "LogicalExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 963,
            "description": "Description",
            "itemtype": "method",
            "name": "funescape",
            "params": [
                {
                    "name": "_",
                    "description": ""
                },
                {
                    "name": "escaped",
                    "description": ""
                },
                {
                    "name": "escapedWhitespace",
                    "description": ""
                }
            ],
            "return": {
                "description": "ConditionalExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 1146,
            "description": "Description",
            "itemtype": "method",
            "name": "Sizzle",
            "params": [
                {
                    "name": "selector",
                    "description": ""
                },
                {
                    "name": "context",
                    "description": ""
                },
                {
                    "name": "results",
                    "description": ""
                },
                {
                    "name": "seed",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 1264,
            "description": "Create key-value caches of limited size\nproperty name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)\ndeleting the oldest entry",
            "itemtype": "method",
            "name": "createCache",
            "return": {
                "description": "cache"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 1274,
            "description": "Description",
            "itemtype": "method",
            "name": "cache",
            "params": [
                {
                    "name": "key",
                    "description": ""
                },
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": "AssignmentExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 1292,
            "description": "Mark a function for special use by Sizzle",
            "itemtype": "method",
            "name": "markFunction",
            "params": [
                {
                    "name": "fn",
                    "description": "The function to mark",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "fn"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 1303,
            "description": "Support testing using an element",
            "itemtype": "method",
            "name": "assert",
            "params": [
                {
                    "name": "fn",
                    "description": "Passed the created div and expects a boolean result",
                    "type": "Function"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 1326,
            "description": "Adds the same handler for all of the specified attrs",
            "itemtype": "method",
            "name": "addHandle",
            "params": [
                {
                    "name": "attrs",
                    "description": "Pipe-separated list of attributes",
                    "type": "String"
                },
                {
                    "name": "handler",
                    "description": "The method that will be applied",
                    "type": "Function"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 1342,
            "description": "Checks document order of two siblings",
            "itemtype": "method",
            "name": "siblingCheck",
            "params": [
                {
                    "name": "a",
                    "description": "",
                    "type": "Element"
                },
                {
                    "name": "b",
                    "description": "",
                    "type": "Element"
                }
            ],
            "return": {
                "description": "ConditionalExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 1372,
            "description": "Returns a function to use in pseudos for input types",
            "itemtype": "method",
            "name": "createInputPseudo",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "FunctionExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 1385,
            "description": "Returns a function to use in pseudos for buttons",
            "itemtype": "method",
            "name": "createButtonPseudo",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "FunctionExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 1398,
            "description": "Returns a function to use in pseudos for positionals",
            "itemtype": "method",
            "name": "createPositionalPseudo",
            "params": [
                {
                    "name": "fn",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 1422,
            "description": "Checks a node for validity as a Sizzle context",
            "itemtype": "method",
            "name": "testContext",
            "params": [
                {
                    "name": "context",
                    "description": ""
                }
            ],
            "return": {
                "description": "LogicalExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 1435,
            "description": "Detects XML nodes",
            "params": [
                {
                    "name": "elem",
                    "description": "An element or a document",
                    "type": "Element|Object"
                }
            ],
            "return": {
                "description": "True iff elem is a non-HTML XML node",
                "type": "Boolean"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 1441,
            "description": "Description",
            "itemtype": "method",
            "name": "isXML",
            "params": [
                {
                    "name": "elem",
                    "description": ""
                }
            ],
            "return": {
                "description": "ConditionalExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 1454,
            "description": "Sets document-related variables once based on the current document",
            "params": [
                {
                    "name": "doc",
                    "description": "An element or document object to use to set the document",
                    "type": "Element|Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns the current document",
                "type": "Object"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 1460,
            "description": "Description",
            "itemtype": "method",
            "name": "setDocument",
            "params": [
                {
                    "name": "node",
                    "description": ""
                }
            ],
            "return": {
                "description": "doc"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 1542,
            "description": "Description",
            "params": [
                {
                    "name": "id",
                    "description": ""
                },
                {
                    "name": "context",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 1556,
            "description": "Description",
            "params": [
                {
                    "name": "id",
                    "description": ""
                }
            ],
            "return": {
                "description": "FunctionExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 1572,
            "description": "Description",
            "params": [
                {
                    "name": "id",
                    "description": ""
                }
            ],
            "return": {
                "description": "FunctionExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 1844,
            "description": "Description",
            "itemtype": "method",
            "name": "matches",
            "params": [
                {
                    "name": "expr",
                    "description": ""
                },
                {
                    "name": "elements",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 1855,
            "description": "Description",
            "itemtype": "method",
            "name": "matchesSelector",
            "params": [
                {
                    "name": "elem",
                    "description": ""
                },
                {
                    "name": "expr",
                    "description": ""
                }
            ],
            "return": {
                "description": "BinaryExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 1891,
            "description": "Description",
            "itemtype": "method",
            "name": "contains",
            "params": [
                {
                    "name": "context",
                    "description": ""
                },
                {
                    "name": "elem",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 1906,
            "description": "Description",
            "itemtype": "method",
            "name": "attr",
            "params": [
                {
                    "name": "elem",
                    "description": ""
                },
                {
                    "name": "name",
                    "description": ""
                }
            ],
            "return": {
                "description": "ConditionalExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 1934,
            "description": "Description",
            "itemtype": "method",
            "name": "error",
            "params": [
                {
                    "name": "msg",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 1944,
            "description": "Document sorting and removing duplicates",
            "itemtype": "method",
            "name": "uniqueSort",
            "params": [
                {
                    "name": "results",
                    "description": "",
                    "type": "ArrayLike"
                }
            ],
            "return": {
                "description": "results"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 1979,
            "description": "Utility function for retrieving the text value of an array of DOM nodes",
            "params": [
                {
                    "name": "elem",
                    "description": "",
                    "type": "Array|Element"
                }
            ],
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 1984,
            "description": "Description",
            "itemtype": "method",
            "name": "getText",
            "params": [
                {
                    "name": "elem",
                    "description": ""
                }
            ],
            "return": {
                "description": "ret"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 2042,
            "description": "Description",
            "params": [
                {
                    "name": "match",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 2060,
            "description": "Description",
            "params": [
                {
                    "name": "match",
                    "description": ""
                }
            ],
            "return": {
                "description": "match"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 2097,
            "description": "Description",
            "params": [
                {
                    "name": "match",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 2133,
            "description": "Description",
            "params": [
                {
                    "name": "nodeNameSelector",
                    "description": ""
                }
            ],
            "return": {
                "description": "ConditionalExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 2147,
            "description": "Description",
            "params": [
                {
                    "name": "className",
                    "description": ""
                }
            ],
            "return": {
                "description": "LogicalExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 2162,
            "description": "Description",
            "params": [
                {
                    "name": "name",
                    "description": ""
                },
                {
                    "name": "operator",
                    "description": ""
                },
                {
                    "name": "check",
                    "description": ""
                }
            ],
            "return": {
                "description": "FunctionExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 2193,
            "description": "Description",
            "params": [
                {
                    "name": "type",
                    "description": ""
                },
                {
                    "name": "what",
                    "description": ""
                },
                {
                    "name": "argument",
                    "description": ""
                },
                {
                    "name": "first",
                    "description": ""
                },
                {
                    "name": "last",
                    "description": ""
                }
            ],
            "return": {
                "description": "ConditionalExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 2291,
            "description": "Description",
            "params": [
                {
                    "name": "pseudo",
                    "description": ""
                },
                {
                    "name": "argument",
                    "description": ""
                }
            ],
            "return": {
                "description": "fn"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 2406,
            "description": "Description",
            "params": [
                {
                    "name": "elem",
                    "description": ""
                }
            ],
            "return": {
                "description": "LogicalExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 2416,
            "description": "Description",
            "params": [
                {
                    "name": "elem",
                    "description": ""
                }
            ],
            "return": {
                "description": "BinaryExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 2425,
            "description": "Description",
            "params": [
                {
                    "name": "elem",
                    "description": ""
                }
            ],
            "return": {
                "description": "LogicalExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 2435,
            "description": "Description",
            "params": [
                {
                    "name": "elem",
                    "description": ""
                }
            ],
            "return": {
                "description": "BinaryExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 2444,
            "description": "Description",
            "params": [
                {
                    "name": "elem",
                    "description": ""
                }
            ],
            "return": {
                "description": "BinaryExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 2453,
            "description": "Description",
            "params": [
                {
                    "name": "elem",
                    "description": ""
                }
            ],
            "return": {
                "description": "LogicalExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 2465,
            "description": "Description",
            "params": [
                {
                    "name": "elem",
                    "description": ""
                }
            ],
            "return": {
                "description": "BinaryExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 2481,
            "description": "Description",
            "params": [
                {
                    "name": "elem",
                    "description": ""
                }
            ],
            "return": {
                "description": "Literal"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 2499,
            "description": "Description",
            "params": [
                {
                    "name": "elem",
                    "description": ""
                }
            ],
            "return": {
                "description": "UnaryExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 2509,
            "description": "Description",
            "params": [
                {
                    "name": "elem",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 2518,
            "description": "Description",
            "params": [
                {
                    "name": "elem",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 2527,
            "description": "Description",
            "params": [
                {
                    "name": "elem",
                    "description": ""
                }
            ],
            "return": {
                "description": "LogicalExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 2537,
            "description": "Description",
            "params": [
                {
                    "name": "elem",
                    "description": ""
                }
            ],
            "return": {
                "description": "LogicalExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 2610,
            "description": "Description",
            "itemtype": "method",
            "name": "setFilters",
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 2620,
            "description": "Description",
            "itemtype": "method",
            "name": "tokenize",
            "params": [
                {
                    "name": "selector",
                    "description": ""
                },
                {
                    "name": "parseOnly",
                    "description": ""
                }
            ],
            "return": {
                "description": "ConditionalExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 2694,
            "description": "Description",
            "itemtype": "method",
            "name": "toSelector",
            "params": [
                {
                    "name": "tokens",
                    "description": ""
                }
            ],
            "return": {
                "description": "selector"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 2710,
            "description": "Description",
            "itemtype": "method",
            "name": "addCombinator",
            "params": [
                {
                    "name": "matcher",
                    "description": ""
                },
                {
                    "name": "combinator",
                    "description": ""
                },
                {
                    "name": "base",
                    "description": ""
                }
            ],
            "return": {
                "description": "ConditionalExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 2771,
            "description": "Description",
            "itemtype": "method",
            "name": "elementMatcher",
            "params": [
                {
                    "name": "matchers",
                    "description": ""
                }
            ],
            "return": {
                "description": "ConditionalExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 2791,
            "description": "Description",
            "itemtype": "method",
            "name": "multipleContexts",
            "params": [
                {
                    "name": "selector",
                    "description": ""
                },
                {
                    "name": "contexts",
                    "description": ""
                },
                {
                    "name": "results",
                    "description": ""
                }
            ],
            "return": {
                "description": "results"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 2808,
            "description": "Description",
            "itemtype": "method",
            "name": "condense",
            "params": [
                {
                    "name": "unmatched",
                    "description": ""
                },
                {
                    "name": "map",
                    "description": ""
                },
                {
                    "name": "filter",
                    "description": ""
                },
                {
                    "name": "context",
                    "description": ""
                },
                {
                    "name": "xml",
                    "description": ""
                }
            ],
            "return": {
                "description": "newUnmatched"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 2839,
            "description": "Description",
            "itemtype": "method",
            "name": "setMatcher",
            "params": [
                {
                    "name": "preFilter",
                    "description": ""
                },
                {
                    "name": "selector",
                    "description": ""
                },
                {
                    "name": "matcher",
                    "description": ""
                },
                {
                    "name": "postFilter",
                    "description": ""
                },
                {
                    "name": "postFinder",
                    "description": ""
                },
                {
                    "name": "postSelector",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 2943,
            "description": "Description",
            "itemtype": "method",
            "name": "matcherFromTokens",
            "params": [
                {
                    "name": "tokens",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 3004,
            "description": "Description",
            "itemtype": "method",
            "name": "matcherFromGroupMatchers",
            "params": [
                {
                    "name": "elementMatchers",
                    "description": ""
                },
                {
                    "name": "setMatchers",
                    "description": ""
                }
            ],
            "return": {
                "description": "ConditionalExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 3012,
            "description": "Description",
            "itemtype": "method",
            "name": "superMatcher",
            "params": [
                {
                    "name": "seed",
                    "description": ""
                },
                {
                    "name": "context",
                    "description": ""
                },
                {
                    "name": "xml",
                    "description": ""
                },
                {
                    "name": "results",
                    "description": ""
                },
                {
                    "name": "outermost",
                    "description": ""
                }
            ],
            "return": {
                "description": "unmatched"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 3121,
            "description": "Description",
            "itemtype": "method",
            "name": "compile",
            "params": [
                {
                    "name": "selector",
                    "description": ""
                },
                {
                    "name": "match",
                    "description": ""
                }
            ],
            "return": {
                "description": "cached"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 3158,
            "description": "A low-level selection function that works with Sizzle's compiled\n selector functions",
            "params": [
                {
                    "name": "selector",
                    "description": "A selector or a pre-compiled\n selector function built with Sizzle.compile",
                    "type": "String|Function"
                },
                {
                    "name": "context",
                    "description": "",
                    "type": "Element"
                },
                {
                    "name": "results",
                    "description": "",
                    "type": "Array",
                    "optional": true
                },
                {
                    "name": "seed",
                    "description": "A set of elements to match against",
                    "type": "Array",
                    "optional": true
                }
            ],
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 3168,
            "description": "Description",
            "itemtype": "method",
            "name": "select",
            "params": [
                {
                    "name": "selector",
                    "description": ""
                },
                {
                    "name": "context",
                    "description": ""
                },
                {
                    "name": "results",
                    "description": ""
                },
                {
                    "name": "seed",
                    "description": ""
                }
            ],
            "return": {
                "description": "results"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 3335,
            "description": "Description",
            "itemtype": "method",
            "name": "winnow",
            "params": [
                {
                    "name": "elements",
                    "description": ""
                },
                {
                    "name": "qualifier",
                    "description": ""
                },
                {
                    "name": "not",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 3372,
            "description": "Description",
            "itemtype": "method",
            "name": "filter",
            "params": [
                {
                    "name": "expr",
                    "description": ""
                },
                {
                    "name": "elems",
                    "description": ""
                },
                {
                    "name": "not",
                    "description": ""
                }
            ],
            "return": {
                "description": "ConditionalExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 3395,
            "description": "Description",
            "itemtype": "method",
            "name": "find",
            "params": [
                {
                    "name": "selector",
                    "description": ""
                }
            ],
            "return": {
                "description": "ret"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 3426,
            "description": "Description",
            "itemtype": "method",
            "name": "filter",
            "params": [
                {
                    "name": "selector",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 3435,
            "description": "Description",
            "itemtype": "method",
            "name": "not",
            "params": [
                {
                    "name": "selector",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 3444,
            "description": "Description",
            "itemtype": "method",
            "name": "is",
            "params": [
                {
                    "name": "selector",
                    "description": ""
                }
            ],
            "return": {
                "description": "UnaryExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 3480,
            "description": "Description",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "selector",
                    "description": ""
                },
                {
                    "name": "context",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 3609,
            "description": "Description",
            "itemtype": "method",
            "name": "dir",
            "params": [
                {
                    "name": "elem",
                    "description": ""
                },
                {
                    "name": "dir",
                    "description": ""
                },
                {
                    "name": "until",
                    "description": ""
                }
            ],
            "return": {
                "description": "matched"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 3630,
            "description": "Description",
            "itemtype": "method",
            "name": "sibling",
            "params": [
                {
                    "name": "n",
                    "description": ""
                },
                {
                    "name": "elem",
                    "description": ""
                }
            ],
            "return": {
                "description": "r"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 3651,
            "description": "Description",
            "itemtype": "method",
            "name": "has",
            "params": [
                {
                    "name": "target",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 3671,
            "description": "Description",
            "itemtype": "method",
            "name": "closest",
            "params": [
                {
                    "name": "selectors",
                    "description": ""
                },
                {
                    "name": "context",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 3708,
            "description": "Description",
            "itemtype": "method",
            "name": "index",
            "params": [
                {
                    "name": "elem",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 3732,
            "description": "Description",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "selector",
                    "description": ""
                },
                {
                    "name": "context",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 3747,
            "description": "Description",
            "itemtype": "method",
            "name": "addBack",
            "params": [
                {
                    "name": "selector",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 3760,
            "description": "Description",
            "itemtype": "method",
            "name": "sibling",
            "params": [
                {
                    "name": "cur",
                    "description": ""
                },
                {
                    "name": "dir",
                    "description": ""
                }
            ],
            "return": {
                "description": "cur"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 3776,
            "description": "Description",
            "itemtype": "method",
            "name": "parent",
            "params": [
                {
                    "name": "elem",
                    "description": ""
                }
            ],
            "return": {
                "description": "ConditionalExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 3786,
            "description": "Description",
            "itemtype": "method",
            "name": "parents",
            "params": [
                {
                    "name": "elem",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 3795,
            "description": "Description",
            "itemtype": "method",
            "name": "parentsUntil",
            "params": [
                {
                    "name": "elem",
                    "description": ""
                },
                {
                    "name": "i",
                    "description": ""
                },
                {
                    "name": "until",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 3806,
            "description": "Description",
            "itemtype": "method",
            "name": "next",
            "params": [
                {
                    "name": "elem",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 3815,
            "description": "Description",
            "itemtype": "method",
            "name": "prev",
            "params": [
                {
                    "name": "elem",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 3824,
            "description": "Description",
            "itemtype": "method",
            "name": "nextAll",
            "params": [
                {
                    "name": "elem",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 3833,
            "description": "Description",
            "itemtype": "method",
            "name": "prevAll",
            "params": [
                {
                    "name": "elem",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 3842,
            "description": "Description",
            "itemtype": "method",
            "name": "nextUntil",
            "params": [
                {
                    "name": "elem",
                    "description": ""
                },
                {
                    "name": "i",
                    "description": ""
                },
                {
                    "name": "until",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 3853,
            "description": "Description",
            "itemtype": "method",
            "name": "prevUntil",
            "params": [
                {
                    "name": "elem",
                    "description": ""
                },
                {
                    "name": "i",
                    "description": ""
                },
                {
                    "name": "until",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 3864,
            "description": "Description",
            "itemtype": "method",
            "name": "siblings",
            "params": [
                {
                    "name": "elem",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 3873,
            "description": "Description",
            "itemtype": "method",
            "name": "children",
            "params": [
                {
                    "name": "elem",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 3882,
            "description": "Description",
            "itemtype": "method",
            "name": "contents",
            "params": [
                {
                    "name": "elem",
                    "description": ""
                }
            ],
            "return": {
                "description": "ConditionalExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 3894,
            "description": "Description",
            "itemtype": "method",
            "name": "name",
            "params": [
                {
                    "name": "until",
                    "description": ""
                },
                {
                    "name": "selector",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 3935,
            "description": "Description",
            "itemtype": "method",
            "name": "createOptions",
            "params": [
                {
                    "name": "options",
                    "description": ""
                }
            ],
            "return": {
                "description": "object"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 3949,
            "description": "Create a callback list using the following parameters:\noptions: an optional list of space-separated options that will change how\n\t\tthe callback list behaves or a more traditional option object\nBy default a callback list will act like an event callback list and can be\n\"fired\" multiple times.\nPossible options:\nonce:\t\t\twill ensure the callback list can only be fired once (like a Deferred)\nmemory:\t\t\twill keep track of previous values and will call any callback added\n\t\t\t\tafter the list has been fired right away with the latest \"memorized\"\n\t\t\t\tvalues (like a Deferred)\nunique:\t\t\twill ensure a callback can only be added once (no duplicate in the list)\nstopOnFalse:\tinterrupt callings when a callback returns false",
            "itemtype": "method",
            "name": "Callbacks",
            "params": [
                {
                    "name": "options",
                    "description": ""
                }
            ],
            "return": {
                "description": "self"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 3974,
            "description": "Description",
            "itemtype": "method",
            "name": "fire",
            "params": [
                {
                    "name": "data",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 4026,
            "description": "Description",
            "itemtype": "method",
            "name": "add",
            "return": {
                "description": "ThisExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 4062,
            "description": "Description",
            "itemtype": "method",
            "name": "remove",
            "return": {
                "description": "ThisExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 4089,
            "description": "Description",
            "itemtype": "method",
            "name": "has",
            "params": [
                {
                    "name": "fn",
                    "description": ""
                }
            ],
            "return": {
                "description": "ConditionalExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 4099,
            "description": "Description",
            "itemtype": "method",
            "name": "empty",
            "return": {
                "description": "ThisExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 4110,
            "description": "Description",
            "itemtype": "method",
            "name": "disable",
            "return": {
                "description": "ThisExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 4120,
            "description": "Description",
            "itemtype": "method",
            "name": "disabled",
            "return": {
                "description": "UnaryExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 4129,
            "description": "Description",
            "itemtype": "method",
            "name": "lock",
            "return": {
                "description": "ThisExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 4142,
            "description": "Description",
            "itemtype": "method",
            "name": "locked",
            "return": {
                "description": "UnaryExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 4151,
            "description": "Description",
            "itemtype": "method",
            "name": "fireWith",
            "params": [
                {
                    "name": "context",
                    "description": ""
                },
                {
                    "name": "args",
                    "description": ""
                }
            ],
            "return": {
                "description": "ThisExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 4171,
            "description": "Description",
            "itemtype": "method",
            "name": "fire",
            "return": {
                "description": "ThisExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 4181,
            "description": "Description",
            "itemtype": "method",
            "name": "fired",
            "return": {
                "description": "UnaryExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 4197,
            "description": "Description",
            "itemtype": "method",
            "name": "Deferred",
            "params": [
                {
                    "name": "func",
                    "description": ""
                }
            ],
            "return": {
                "description": "deferred"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 4212,
            "description": "Description",
            "itemtype": "method",
            "name": "state",
            "return": {
                "description": "state"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 4220,
            "description": "Description",
            "itemtype": "method",
            "name": "always",
            "return": {
                "description": "ThisExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 4229,
            "description": "Description",
            "itemtype": "method",
            "name": "then",
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 4257,
            "description": "Description",
            "itemtype": "method",
            "name": "promise",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                }
            ],
            "return": {
                "description": "ConditionalExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 4291,
            "description": "Description",
            "return": {
                "description": "ThisExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 4315,
            "description": "Description",
            "itemtype": "method",
            "name": "when",
            "params": [
                {
                    "name": "subordinate",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 4322,
            "description": "Description",
            "itemtype": "method",
            "name": "updateFunc",
            "params": [
                {
                    "name": "i",
                    "description": ""
                },
                {
                    "name": "contexts",
                    "description": ""
                },
                {
                    "name": "values",
                    "description": ""
                }
            ],
            "return": {
                "description": "FunctionExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 4386,
            "description": "Description",
            "itemtype": "method",
            "name": "ready",
            "params": [
                {
                    "name": "fn",
                    "description": ""
                }
            ],
            "return": {
                "description": "ThisExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 4408,
            "description": "Description",
            "itemtype": "method",
            "name": "holdReady",
            "params": [
                {
                    "name": "hold",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 4423,
            "description": "Description",
            "itemtype": "method",
            "name": "ready",
            "params": [
                {
                    "name": "wait",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 4460,
            "description": "Clean-up method for dom ready events",
            "itemtype": "method",
            "name": "detach",
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 4476,
            "description": "The ready event handler and self cleanup method",
            "itemtype": "method",
            "name": "completed",
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 4489,
            "description": "Description",
            "itemtype": "method",
            "name": "promise",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 4631,
            "description": "Determines whether an object can have data",
            "itemtype": "method",
            "name": "acceptData",
            "params": [
                {
                    "name": "elem",
                    "description": ""
                }
            ],
            "return": {
                "description": "ConditionalExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 4653,
            "description": "Description",
            "itemtype": "method",
            "name": "dataAttr",
            "params": [
                {
                    "name": "elem",
                    "description": ""
                },
                {
                    "name": "key",
                    "description": ""
                },
                {
                    "name": "data",
                    "description": ""
                }
            ],
            "return": {
                "description": "data"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 4693,
            "description": "Description",
            "itemtype": "method",
            "name": "isEmptyDataObject",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                }
            ],
            "return": {
                "description": "Literal"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 4715,
            "description": "Description",
            "itemtype": "method",
            "name": "internalData",
            "params": [
                {
                    "name": "elem",
                    "description": ""
                },
                {
                    "name": "name",
                    "description": ""
                },
                {
                    "name": "data",
                    "description": ""
                },
                {
                    "name": "pvt",
                    "description": ""
                }
            ],
            "return": {
                "description": "ret"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 4813,
            "description": "Description",
            "itemtype": "method",
            "name": "internalRemoveData",
            "params": [
                {
                    "name": "elem",
                    "description": ""
                },
                {
                    "name": "name",
                    "description": ""
                },
                {
                    "name": "pvt",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 4923,
            "description": "Description",
            "itemtype": "method",
            "name": "hasData",
            "params": [
                {
                    "name": "elem",
                    "description": ""
                }
            ],
            "return": {
                "description": "LogicalExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 4934,
            "description": "Description",
            "itemtype": "method",
            "name": "data",
            "params": [
                {
                    "name": "elem",
                    "description": ""
                },
                {
                    "name": "name",
                    "description": ""
                },
                {
                    "name": "data",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 4946,
            "description": "Description",
            "itemtype": "method",
            "name": "removeData",
            "params": [
                {
                    "name": "elem",
                    "description": ""
                },
                {
                    "name": "name",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 4968,
            "description": "Description",
            "itemtype": "method",
            "name": "data",
            "params": [
                {
                    "name": "key",
                    "description": ""
                },
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": "ConditionalExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 5028,
            "description": "Description",
            "itemtype": "method",
            "name": "removeData",
            "params": [
                {
                    "name": "key",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 5043,
            "description": "Description",
            "itemtype": "method",
            "name": "queue",
            "params": [
                {
                    "name": "elem",
                    "description": ""
                },
                {
                    "name": "type",
                    "description": ""
                },
                {
                    "name": "data",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 5070,
            "description": "Description",
            "itemtype": "method",
            "name": "dequeue",
            "params": [
                {
                    "name": "elem",
                    "description": ""
                },
                {
                    "name": "type",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 5080,
            "description": "Description",
            "itemtype": "method",
            "name": "next",
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 5130,
            "description": "Description",
            "itemtype": "method",
            "name": "queue",
            "params": [
                {
                    "name": "type",
                    "description": ""
                },
                {
                    "name": "data",
                    "description": ""
                }
            ],
            "return": {
                "description": "ConditionalExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 5163,
            "description": "Description",
            "itemtype": "method",
            "name": "dequeue",
            "params": [
                {
                    "name": "type",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 5174,
            "description": "Description",
            "itemtype": "method",
            "name": "clearQueue",
            "params": [
                {
                    "name": "type",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 5185,
            "description": "Description",
            "itemtype": "method",
            "name": "promise",
            "params": [
                {
                    "name": "type",
                    "description": ""
                },
                {
                    "name": "obj",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 5193,
            "description": "Description",
            "itemtype": "method",
            "name": "resolve",
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 5230,
            "description": "Description",
            "itemtype": "method",
            "name": "isHidden",
            "params": [
                {
                    "name": "elem",
                    "description": ""
                },
                {
                    "name": "el",
                    "description": ""
                }
            ],
            "return": {
                "description": "LogicalExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 5249,
            "description": "Description",
            "itemtype": "method",
            "name": "access",
            "params": [
                {
                    "name": "elems",
                    "description": ""
                },
                {
                    "name": "fn",
                    "description": ""
                },
                {
                    "name": "key",
                    "description": ""
                },
                {
                    "name": "value",
                    "description": ""
                },
                {
                    "name": "chainable",
                    "description": ""
                },
                {
                    "name": "emptyGet",
                    "description": ""
                },
                {
                    "name": "raw",
                    "description": ""
                }
            ],
            "return": {
                "description": "ConditionalExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 5290,
            "description": "Description",
            "params": [
                {
                    "name": "elem",
                    "description": ""
                },
                {
                    "name": "key",
                    "description": ""
                },
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 5418,
            "description": "Description",
            "itemtype": "method",
            "name": "returnTrue",
            "return": {
                "description": "Literal"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 5427,
            "description": "Description",
            "itemtype": "method",
            "name": "returnFalse",
            "return": {
                "description": "Literal"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 5436,
            "description": "Description",
            "itemtype": "method",
            "name": "safeActiveElement",
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 5455,
            "description": "Description",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "elem",
                    "description": ""
                },
                {
                    "name": "types",
                    "description": ""
                },
                {
                    "name": "handler",
                    "description": ""
                },
                {
                    "name": "data",
                    "description": ""
                },
                {
                    "name": "selector",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 5494,
            "description": "Description",
            "itemtype": "method",
            "name": "handle",
            "params": [
                {
                    "name": "e",
                    "description": ""
                }
            ],
            "return": {
                "description": "ConditionalExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 5586,
            "description": "Description",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "elem",
                    "description": ""
                },
                {
                    "name": "types",
                    "description": ""
                },
                {
                    "name": "handler",
                    "description": ""
                },
                {
                    "name": "selector",
                    "description": ""
                },
                {
                    "name": "mappedTypes",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 5669,
            "description": "Description",
            "itemtype": "method",
            "name": "trigger",
            "params": [
                {
                    "name": "event",
                    "description": ""
                },
                {
                    "name": "data",
                    "description": ""
                },
                {
                    "name": "elem",
                    "description": ""
                },
                {
                    "name": "onlyHandlers",
                    "description": ""
                }
            ],
            "return": {
                "description": "MemberExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 5816,
            "description": "Description",
            "itemtype": "method",
            "name": "dispatch",
            "params": [
                {
                    "name": "event",
                    "description": ""
                }
            ],
            "return": {
                "description": "MemberExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 5881,
            "description": "Description",
            "itemtype": "method",
            "name": "handlers",
            "params": [
                {
                    "name": "event",
                    "description": ""
                },
                {
                    "name": "handlers",
                    "description": ""
                }
            ],
            "return": {
                "description": "handlerQueue"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 5937,
            "description": "Description",
            "itemtype": "method",
            "name": "fix",
            "params": [
                {
                    "name": "event",
                    "description": ""
                }
            ],
            "return": {
                "description": "ConditionalExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 5996,
            "description": "Description",
            "itemtype": "method",
            "name": "filter",
            "params": [
                {
                    "name": "event",
                    "description": ""
                },
                {
                    "name": "original",
                    "description": ""
                }
            ],
            "return": {
                "description": "event"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 6016,
            "description": "Description",
            "itemtype": "method",
            "name": "filter",
            "params": [
                {
                    "name": "event",
                    "description": ""
                },
                {
                    "name": "original",
                    "description": ""
                }
            ],
            "return": {
                "description": "event"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 6060,
            "description": "Description",
            "itemtype": "method",
            "name": "trigger",
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 6080,
            "description": "Description",
            "itemtype": "method",
            "name": "trigger",
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 6095,
            "description": "Description",
            "itemtype": "method",
            "name": "trigger",
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 6114,
            "description": "Description",
            "itemtype": "method",
            "name": "postDispatch",
            "params": [
                {
                    "name": "event",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 6131,
            "description": "Description",
            "itemtype": "method",
            "name": "simulate",
            "params": [
                {
                    "name": "type",
                    "description": ""
                },
                {
                    "name": "elem",
                    "description": ""
                },
                {
                    "name": "event",
                    "description": ""
                },
                {
                    "name": "bubble",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 6185,
            "description": "Description",
            "itemtype": "method",
            "name": "Event",
            "params": [
                {
                    "name": "src",
                    "description": ""
                },
                {
                    "name": "props",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 6236,
            "description": "Description",
            "itemtype": "method",
            "name": "preventDefault",
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 6259,
            "description": "Description",
            "itemtype": "method",
            "name": "stopPropagation",
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 6280,
            "description": "Description",
            "itemtype": "method",
            "name": "stopImmediatePropagation",
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 6309,
            "description": "Description",
            "itemtype": "method",
            "name": "handle",
            "params": [
                {
                    "name": "event",
                    "description": ""
                }
            ],
            "return": {
                "description": "ret"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 6337,
            "description": "Description",
            "itemtype": "method",
            "name": "setup",
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 6363,
            "description": "Description",
            "itemtype": "method",
            "name": "postDispatch",
            "params": [
                {
                    "name": "event",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 6379,
            "description": "Description",
            "itemtype": "method",
            "name": "teardown",
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 6401,
            "description": "Description",
            "itemtype": "method",
            "name": "setup",
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 6443,
            "description": "Description",
            "itemtype": "method",
            "name": "handle",
            "params": [
                {
                    "name": "event",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 6458,
            "description": "Description",
            "itemtype": "method",
            "name": "teardown",
            "return": {
                "description": "UnaryExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 6476,
            "description": "Description",
            "itemtype": "method",
            "name": "handler",
            "params": [
                {
                    "name": "event",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 6487,
            "description": "Description",
            "itemtype": "method",
            "name": "setup",
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 6501,
            "description": "Description",
            "itemtype": "method",
            "name": "teardown",
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 6523,
            "description": "Description",
            "itemtype": "method",
            "name": "on",
            "params": [
                {
                    "name": "types",
                    "description": ""
                },
                {
                    "name": "selector",
                    "description": ""
                },
                {
                    "name": "data",
                    "description": ""
                },
                {
                    "name": "fn",
                    "description": ""
                },
                {
                    "name": "one",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 6574,
            "description": "Description",
            "params": [
                {
                    "name": "event",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 6591,
            "description": "Description",
            "itemtype": "method",
            "name": "one",
            "params": [
                {
                    "name": "types",
                    "description": ""
                },
                {
                    "name": "selector",
                    "description": ""
                },
                {
                    "name": "data",
                    "description": ""
                },
                {
                    "name": "fn",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 6603,
            "description": "Description",
            "itemtype": "method",
            "name": "off",
            "params": [
                {
                    "name": "types",
                    "description": ""
                },
                {
                    "name": "selector",
                    "description": ""
                },
                {
                    "name": "fn",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 6643,
            "description": "Description",
            "itemtype": "method",
            "name": "trigger",
            "params": [
                {
                    "name": "type",
                    "description": ""
                },
                {
                    "name": "data",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 6655,
            "description": "Description",
            "itemtype": "method",
            "name": "triggerHandler",
            "params": [
                {
                    "name": "type",
                    "description": ""
                },
                {
                    "name": "data",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 6671,
            "description": "Description",
            "itemtype": "method",
            "name": "createSafeFragment",
            "params": [
                {
                    "name": "document",
                    "description": ""
                }
            ],
            "return": {
                "description": "safeFrag"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 6729,
            "description": "Description",
            "itemtype": "method",
            "name": "getAll",
            "params": [
                {
                    "name": "context",
                    "description": ""
                },
                {
                    "name": "tag",
                    "description": ""
                }
            ],
            "return": {
                "description": "ConditionalExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 6759,
            "description": "Description",
            "itemtype": "method",
            "name": "fixDefaultChecked",
            "params": [
                {
                    "name": "elem",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 6773,
            "description": "Description",
            "itemtype": "method",
            "name": "manipulationTarget",
            "params": [
                {
                    "name": "elem",
                    "description": ""
                },
                {
                    "name": "content",
                    "description": ""
                }
            ],
            "return": {
                "description": "ConditionalExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 6790,
            "description": "Description",
            "itemtype": "method",
            "name": "disableScript",
            "params": [
                {
                    "name": "elem",
                    "description": ""
                }
            ],
            "return": {
                "description": "elem"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 6800,
            "description": "Description",
            "itemtype": "method",
            "name": "restoreScript",
            "params": [
                {
                    "name": "elem",
                    "description": ""
                }
            ],
            "return": {
                "description": "elem"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 6817,
            "description": "Description",
            "itemtype": "method",
            "name": "setGlobalEval",
            "params": [
                {
                    "name": "elems",
                    "description": ""
                },
                {
                    "name": "refElements",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 6832,
            "description": "Description",
            "itemtype": "method",
            "name": "cloneCopyEvent",
            "params": [
                {
                    "name": "src",
                    "description": ""
                },
                {
                    "name": "dest",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 6867,
            "description": "Description",
            "itemtype": "method",
            "name": "fixCloneNodeIssues",
            "params": [
                {
                    "name": "src",
                    "description": ""
                },
                {
                    "name": "dest",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 6942,
            "description": "Description",
            "itemtype": "method",
            "name": "clone",
            "params": [
                {
                    "name": "elem",
                    "description": ""
                },
                {
                    "name": "dataAndEvents",
                    "description": ""
                },
                {
                    "name": "deepDataAndEvents",
                    "description": ""
                }
            ],
            "return": {
                "description": "clone"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 7005,
            "description": "Description",
            "itemtype": "method",
            "name": "buildFragment",
            "params": [
                {
                    "name": "elems",
                    "description": ""
                },
                {
                    "name": "context",
                    "description": ""
                },
                {
                    "name": "scripts",
                    "description": ""
                },
                {
                    "name": "selection",
                    "description": ""
                }
            ],
            "return": {
                "description": "safe"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 7141,
            "description": "Description",
            "itemtype": "method",
            "name": "cleanData",
            "params": [
                {
                    "name": "elems",
                    "description": ""
                },
                {
                    "name": "acceptData",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 7202,
            "description": "Description",
            "itemtype": "method",
            "name": "text",
            "params": [
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 7216,
            "description": "Description",
            "itemtype": "method",
            "name": "append",
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 7230,
            "description": "Description",
            "itemtype": "method",
            "name": "prepend",
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 7244,
            "description": "Description",
            "itemtype": "method",
            "name": "before",
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 7257,
            "description": "Description",
            "itemtype": "method",
            "name": "after",
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 7270,
            "description": "Description",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "selector",
                    "description": ""
                },
                {
                    "name": "keepData",
                    "description": ""
                }
            ],
            "return": {
                "description": "ThisExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 7299,
            "description": "Description",
            "itemtype": "method",
            "name": "empty",
            "return": {
                "description": "ThisExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 7329,
            "description": "Description",
            "itemtype": "method",
            "name": "clone",
            "params": [
                {
                    "name": "dataAndEvents",
                    "description": ""
                },
                {
                    "name": "deepDataAndEvents",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 7345,
            "description": "Description",
            "itemtype": "method",
            "name": "html",
            "params": [
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 7393,
            "description": "Description",
            "itemtype": "method",
            "name": "replaceWith",
            "return": {
                "description": "ConditionalExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 7416,
            "description": "Description",
            "itemtype": "method",
            "name": "detach",
            "params": [
                {
                    "name": "selector",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 7426,
            "description": "Description",
            "itemtype": "method",
            "name": "domManip",
            "params": [
                {
                    "name": "args",
                    "description": ""
                },
                {
                    "name": "callback",
                    "description": ""
                }
            ],
            "return": {
                "description": "ThisExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 7529,
            "description": "Description",
            "itemtype": "method",
            "name": "name",
            "params": [
                {
                    "name": "selector",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 7558,
            "description": "Retrieve the actual display of a element",
            "params": [
                {
                    "name": "name",
                    "description": "nodeName of the element",
                    "type": "String"
                },
                {
                    "name": "doc",
                    "description": "Document object",
                    "type": "Object"
                }
            ],
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 7564,
            "description": "Description",
            "itemtype": "method",
            "name": "actualDisplay",
            "params": [
                {
                    "name": "name",
                    "description": ""
                },
                {
                    "name": "doc",
                    "description": ""
                }
            ],
            "return": {
                "description": "display"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 7589,
            "description": "Try to determine the default display value of an element",
            "itemtype": "method",
            "name": "defaultDisplay",
            "params": [
                {
                    "name": "nodeName",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "display"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 7630,
            "description": "Description",
            "itemtype": "method",
            "name": "shrinkWrapBlocks",
            "return": {
                "description": "shrinkWrapBlocksVal"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 7688,
            "description": "Description",
            "params": [
                {
                    "name": "elem",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 7697,
            "description": "Description",
            "params": [
                {
                    "name": "elem",
                    "description": ""
                },
                {
                    "name": "name",
                    "description": ""
                },
                {
                    "name": "computed",
                    "description": ""
                }
            ],
            "return": {
                "description": "ConditionalExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 7748,
            "description": "Description",
            "params": [
                {
                    "name": "elem",
                    "description": ""
                }
            ],
            "return": {
                "description": "MemberExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 7757,
            "description": "Description",
            "params": [
                {
                    "name": "elem",
                    "description": ""
                },
                {
                    "name": "name",
                    "description": ""
                },
                {
                    "name": "computed",
                    "description": ""
                }
            ],
            "return": {
                "description": "ConditionalExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 7816,
            "description": "Description",
            "itemtype": "method",
            "name": "addGetHookIf",
            "params": [
                {
                    "name": "conditionFn",
                    "description": ""
                },
                {
                    "name": "hookFn",
                    "description": ""
                }
            ],
            "return": {
                "description": "ObjectExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 7826,
            "description": "Description",
            "itemtype": "method",
            "name": "get",
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 7892,
            "description": "Description",
            "itemtype": "method",
            "name": "reliableHiddenOffsets",
            "return": {
                "description": "reliableHiddenOffsetsVal"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 7904,
            "description": "Description",
            "itemtype": "method",
            "name": "boxSizingReliable",
            "return": {
                "description": "boxSizingReliableVal"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 7916,
            "description": "Description",
            "itemtype": "method",
            "name": "pixelPosition",
            "return": {
                "description": "pixelPositionVal"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 7929,
            "description": "Description",
            "itemtype": "method",
            "name": "reliableMarginRight",
            "return": {
                "description": "reliableMarginRightVal"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 7942,
            "description": "Description",
            "itemtype": "method",
            "name": "computeStyleTests",
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 8024,
            "description": "Description",
            "itemtype": "method",
            "name": "swap",
            "params": [
                {
                    "name": "elem",
                    "description": ""
                },
                {
                    "name": "options",
                    "description": ""
                },
                {
                    "name": "callback",
                    "description": ""
                },
                {
                    "name": "args",
                    "description": ""
                }
            ],
            "return": {
                "description": "ret"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 8074,
            "description": "Description",
            "itemtype": "method",
            "name": "vendorPropName",
            "params": [
                {
                    "name": "style",
                    "description": ""
                },
                {
                    "name": "name",
                    "description": ""
                }
            ],
            "return": {
                "description": "origName"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 8103,
            "description": "Description",
            "itemtype": "method",
            "name": "showHide",
            "params": [
                {
                    "name": "elements",
                    "description": ""
                },
                {
                    "name": "show",
                    "description": ""
                }
            ],
            "return": {
                "description": "elements"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 8161,
            "description": "Description",
            "itemtype": "method",
            "name": "setPositiveNumber",
            "params": [
                {
                    "name": "elem",
                    "description": ""
                },
                {
                    "name": "value",
                    "description": ""
                },
                {
                    "name": "subtract",
                    "description": ""
                }
            ],
            "return": {
                "description": "ConditionalExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 8177,
            "description": "Description",
            "itemtype": "method",
            "name": "augmentWidthOrHeight",
            "params": [
                {
                    "name": "elem",
                    "description": ""
                },
                {
                    "name": "name",
                    "description": ""
                },
                {
                    "name": "extra",
                    "description": ""
                },
                {
                    "name": "isBorderBox",
                    "description": ""
                },
                {
                    "name": "styles",
                    "description": ""
                }
            ],
            "return": {
                "description": "val"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 8226,
            "description": "Description",
            "itemtype": "method",
            "name": "getWidthOrHeight",
            "params": [
                {
                    "name": "elem",
                    "description": ""
                },
                {
                    "name": "name",
                    "description": ""
                },
                {
                    "name": "extra",
                    "description": ""
                }
            ],
            "return": {
                "description": "BinaryExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 8282,
            "description": "Description",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "elem",
                    "description": ""
                },
                {
                    "name": "computed",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 8323,
            "description": "Description",
            "itemtype": "method",
            "name": "style",
            "params": [
                {
                    "name": "elem",
                    "description": ""
                },
                {
                    "name": "name",
                    "description": ""
                },
                {
                    "name": "value",
                    "description": ""
                },
                {
                    "name": "extra",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 8397,
            "description": "Description",
            "itemtype": "method",
            "name": "css",
            "params": [
                {
                    "name": "elem",
                    "description": ""
                },
                {
                    "name": "name",
                    "description": ""
                },
                {
                    "name": "extra",
                    "description": ""
                },
                {
                    "name": "styles",
                    "description": ""
                }
            ],
            "return": {
                "description": "val"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 8443,
            "description": "Description",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "elem",
                    "description": ""
                },
                {
                    "name": "computed",
                    "description": ""
                },
                {
                    "name": "extra",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 8463,
            "description": "Description",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "elem",
                    "description": ""
                },
                {
                    "name": "value",
                    "description": ""
                },
                {
                    "name": "extra",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 8488,
            "description": "Description",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "elem",
                    "description": ""
                },
                {
                    "name": "computed",
                    "description": ""
                }
            ],
            "return": {
                "description": "ConditionalExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 8502,
            "description": "Description",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "elem",
                    "description": ""
                },
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 8562,
            "description": "Description",
            "itemtype": "method",
            "name": "expand",
            "params": [
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": "expanded"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 8590,
            "description": "Description",
            "itemtype": "method",
            "name": "css",
            "params": [
                {
                    "name": "name",
                    "description": ""
                },
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 8619,
            "description": "Description",
            "itemtype": "method",
            "name": "show",
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 8627,
            "description": "Description",
            "itemtype": "method",
            "name": "hide",
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 8635,
            "description": "Description",
            "itemtype": "method",
            "name": "toggle",
            "params": [
                {
                    "name": "state",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 8657,
            "description": "Description",
            "itemtype": "method",
            "name": "Tween",
            "params": [
                {
                    "name": "elem",
                    "description": ""
                },
                {
                    "name": "options",
                    "description": ""
                },
                {
                    "name": "prop",
                    "description": ""
                },
                {
                    "name": "end",
                    "description": ""
                },
                {
                    "name": "easing",
                    "description": ""
                }
            ],
            "return": {
                "description": "NewExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 8674,
            "description": "Description",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "elem",
                    "description": ""
                },
                {
                    "name": "options",
                    "description": ""
                },
                {
                    "name": "prop",
                    "description": ""
                },
                {
                    "name": "end",
                    "description": ""
                },
                {
                    "name": "easing",
                    "description": ""
                },
                {
                    "name": "unit",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 8694,
            "description": "Description",
            "itemtype": "method",
            "name": "cur",
            "return": {
                "description": "ConditionalExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 8706,
            "description": "Description",
            "itemtype": "method",
            "name": "run",
            "params": [
                {
                    "name": "percent",
                    "description": ""
                }
            ],
            "return": {
                "description": "ThisExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 8742,
            "description": "Description",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "tween",
                    "description": ""
                }
            ],
            "return": {
                "description": "ConditionalExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 8764,
            "description": "Description",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "tween",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 8788,
            "description": "Description",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "tween",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 8802,
            "description": "Description",
            "itemtype": "method",
            "name": "linear",
            "params": [
                {
                    "name": "p",
                    "description": ""
                }
            ],
            "return": {
                "description": "p"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 8811,
            "description": "Description",
            "itemtype": "method",
            "name": "swing",
            "params": [
                {
                    "name": "p",
                    "description": ""
                }
            ],
            "return": {
                "description": "BinaryExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 8888,
            "description": "Description",
            "itemtype": "method",
            "name": "createFxNow",
            "return": {
                "description": "AssignmentExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 8901,
            "description": "Description",
            "itemtype": "method",
            "name": "genFx",
            "params": [
                {
                    "name": "type",
                    "description": ""
                },
                {
                    "name": "includeWidth",
                    "description": ""
                }
            ],
            "return": {
                "description": "attrs"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 8928,
            "description": "Description",
            "itemtype": "method",
            "name": "createTween",
            "params": [
                {
                    "name": "value",
                    "description": ""
                },
                {
                    "name": "prop",
                    "description": ""
                },
                {
                    "name": "animation",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 8950,
            "description": "Description",
            "itemtype": "method",
            "name": "defaultPrefilter",
            "params": [
                {
                    "name": "elem",
                    "description": ""
                },
                {
                    "name": "props",
                    "description": ""
                },
                {
                    "name": "opts",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 8973,
            "description": "Description",
            "itemtype": "method",
            "name": "fire",
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 9105,
            "description": "Description",
            "itemtype": "method",
            "name": "propFilter",
            "params": [
                {
                    "name": "props",
                    "description": ""
                },
                {
                    "name": "specialEasing",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 9149,
            "description": "Description",
            "itemtype": "method",
            "name": "Animation",
            "params": [
                {
                    "name": "elem",
                    "description": ""
                },
                {
                    "name": "properties",
                    "description": ""
                },
                {
                    "name": "options",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 9158,
            "description": "Description",
            "itemtype": "method",
            "name": "tick",
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 9205,
            "description": "Description",
            "itemtype": "method",
            "name": "createTween",
            "params": [
                {
                    "name": "prop",
                    "description": ""
                },
                {
                    "name": "end",
                    "description": ""
                }
            ],
            "return": {
                "description": "tween"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 9218,
            "description": "Description",
            "itemtype": "method",
            "name": "stop",
            "params": [
                {
                    "name": "gotoEnd",
                    "description": ""
                }
            ],
            "return": {
                "description": "ThisExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 9280,
            "description": "Description",
            "itemtype": "method",
            "name": "tweener",
            "params": [
                {
                    "name": "props",
                    "description": ""
                },
                {
                    "name": "callback",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 9306,
            "description": "Description",
            "itemtype": "method",
            "name": "prefilter",
            "params": [
                {
                    "name": "callback",
                    "description": ""
                },
                {
                    "name": "prepend",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 9322,
            "description": "Description",
            "itemtype": "method",
            "name": "speed",
            "params": [
                {
                    "name": "speed",
                    "description": ""
                },
                {
                    "name": "easing",
                    "description": ""
                },
                {
                    "name": "fn",
                    "description": ""
                }
            ],
            "return": {
                "description": "opt"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 9349,
            "description": "Description",
            "itemtype": "method",
            "name": "complete",
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 9368,
            "description": "Description",
            "itemtype": "method",
            "name": "fadeTo",
            "params": [
                {
                    "name": "speed",
                    "description": ""
                },
                {
                    "name": "to",
                    "description": ""
                },
                {
                    "name": "easing",
                    "description": ""
                },
                {
                    "name": "callback",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 9385,
            "description": "Description",
            "itemtype": "method",
            "name": "animate",
            "params": [
                {
                    "name": "prop",
                    "description": ""
                },
                {
                    "name": "speed",
                    "description": ""
                },
                {
                    "name": "easing",
                    "description": ""
                },
                {
                    "name": "callback",
                    "description": ""
                }
            ],
            "return": {
                "description": "ConditionalExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 9395,
            "description": "Description",
            "itemtype": "method",
            "name": "doAnimation",
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 9417,
            "description": "Description",
            "itemtype": "method",
            "name": "stop",
            "params": [
                {
                    "name": "type",
                    "description": ""
                },
                {
                    "name": "clearQueue",
                    "description": ""
                },
                {
                    "name": "gotoEnd",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 9426,
            "description": "Description",
            "itemtype": "method",
            "name": "stopQueue",
            "params": [
                {
                    "name": "hooks",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 9481,
            "description": "Description",
            "itemtype": "method",
            "name": "finish",
            "params": [
                {
                    "name": "type",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 9532,
            "description": "Description",
            "itemtype": "method",
            "name": "name",
            "params": [
                {
                    "name": "speed",
                    "description": ""
                },
                {
                    "name": "easing",
                    "description": ""
                },
                {
                    "name": "callback",
                    "description": ""
                }
            ],
            "return": {
                "description": "ConditionalExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 9556,
            "description": "Description",
            "itemtype": "method",
            "name": "name",
            "params": [
                {
                    "name": "speed",
                    "description": ""
                },
                {
                    "name": "easing",
                    "description": ""
                },
                {
                    "name": "callback",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 9570,
            "description": "Description",
            "itemtype": "method",
            "name": "tick",
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 9596,
            "description": "Description",
            "itemtype": "method",
            "name": "timer",
            "params": [
                {
                    "name": "timer",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 9613,
            "description": "Description",
            "itemtype": "method",
            "name": "start",
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 9624,
            "description": "Description",
            "itemtype": "method",
            "name": "stop",
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 9644,
            "description": "Description",
            "itemtype": "method",
            "name": "delay",
            "params": [
                {
                    "name": "time",
                    "description": ""
                },
                {
                    "name": "type",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 9657,
            "description": "Description",
            "itemtype": "method",
            "name": "stop",
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 9728,
            "description": "Description",
            "itemtype": "method",
            "name": "val",
            "params": [
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 9797,
            "description": "Description",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "elem",
                    "description": ""
                }
            ],
            "return": {
                "description": "ConditionalExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 9813,
            "description": "Description",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "elem",
                    "description": ""
                }
            ],
            "return": {
                "description": "values"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 9856,
            "description": "Description",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "elem",
                    "description": ""
                },
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": "options"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 9906,
            "description": "Description",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "elem",
                    "description": ""
                },
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 9920,
            "description": "Description",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "elem",
                    "description": ""
                }
            ],
            "return": {
                "description": "ConditionalExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 9944,
            "description": "Description",
            "itemtype": "method",
            "name": "attr",
            "params": [
                {
                    "name": "name",
                    "description": ""
                },
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 9955,
            "description": "Description",
            "itemtype": "method",
            "name": "removeAttr",
            "params": [
                {
                    "name": "name",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 9969,
            "description": "Description",
            "itemtype": "method",
            "name": "attr",
            "params": [
                {
                    "name": "elem",
                    "description": ""
                },
                {
                    "name": "name",
                    "description": ""
                },
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 10025,
            "description": "Description",
            "itemtype": "method",
            "name": "removeAttr",
            "params": [
                {
                    "name": "elem",
                    "description": ""
                },
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 10065,
            "description": "Description",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "elem",
                    "description": ""
                },
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 10090,
            "description": "Description",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "elem",
                    "description": ""
                },
                {
                    "name": "value",
                    "description": ""
                },
                {
                    "name": "name",
                    "description": ""
                }
            ],
            "return": {
                "description": "name"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 10146,
            "description": "Description",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "elem",
                    "description": ""
                },
                {
                    "name": "value",
                    "description": ""
                },
                {
                    "name": "name",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 10172,
            "description": "Description",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "elem",
                    "description": ""
                },
                {
                    "name": "value",
                    "description": ""
                },
                {
                    "name": "name",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 10200,
            "description": "Description",
            "itemtype": "method",
            "name": "coords",
            "params": [
                {
                    "name": "elem",
                    "description": ""
                },
                {
                    "name": "name",
                    "description": ""
                },
                {
                    "name": "isXML",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 10220,
            "description": "Description",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "elem",
                    "description": ""
                },
                {
                    "name": "name",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 10239,
            "description": "Description",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "elem",
                    "description": ""
                },
                {
                    "name": "value",
                    "description": ""
                },
                {
                    "name": "name",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 10256,
            "description": "Description",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "elem",
                    "description": ""
                },
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 10275,
            "description": "Description",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "elem",
                    "description": ""
                }
            ],
            "return": {
                "description": "LogicalExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 10287,
            "description": "Description",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "elem",
                    "description": ""
                },
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": "AssignmentExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 10307,
            "description": "Description",
            "itemtype": "method",
            "name": "prop",
            "params": [
                {
                    "name": "name",
                    "description": ""
                },
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 10318,
            "description": "Description",
            "itemtype": "method",
            "name": "removeProp",
            "params": [
                {
                    "name": "name",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 10342,
            "description": "Description",
            "itemtype": "method",
            "name": "prop",
            "params": [
                {
                    "name": "elem",
                    "description": ""
                },
                {
                    "name": "name",
                    "description": ""
                },
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 10381,
            "description": "Description",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "elem",
                    "description": ""
                }
            ],
            "return": {
                "description": "ConditionalExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 10409,
            "description": "Description",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "elem",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 10427,
            "description": "Description",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "elem",
                    "description": ""
                }
            ],
            "return": {
                "description": "Literal"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 10475,
            "description": "Description",
            "itemtype": "method",
            "name": "addClass",
            "params": [
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": "ThisExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 10524,
            "description": "Description",
            "itemtype": "method",
            "name": "removeClass",
            "params": [
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": "ThisExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 10573,
            "description": "Description",
            "itemtype": "method",
            "name": "toggleClass",
            "params": [
                {
                    "name": "value",
                    "description": ""
                },
                {
                    "name": "stateVal",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 10626,
            "description": "Description",
            "itemtype": "method",
            "name": "hasClass",
            "params": [
                {
                    "name": "selector",
                    "description": ""
                }
            ],
            "return": {
                "description": "Literal"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 10657,
            "description": "Description",
            "itemtype": "method",
            "name": "name",
            "params": [
                {
                    "name": "data",
                    "description": ""
                },
                {
                    "name": "fn",
                    "description": ""
                }
            ],
            "return": {
                "description": "ConditionalExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 10672,
            "description": "Description",
            "itemtype": "method",
            "name": "hover",
            "params": [
                {
                    "name": "fnOver",
                    "description": ""
                },
                {
                    "name": "fnOut",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 10683,
            "description": "Description",
            "itemtype": "method",
            "name": "bind",
            "params": [
                {
                    "name": "types",
                    "description": ""
                },
                {
                    "name": "data",
                    "description": ""
                },
                {
                    "name": "fn",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 10694,
            "description": "Description",
            "itemtype": "method",
            "name": "unbind",
            "params": [
                {
                    "name": "types",
                    "description": ""
                },
                {
                    "name": "fn",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 10705,
            "description": "Description",
            "itemtype": "method",
            "name": "delegate",
            "params": [
                {
                    "name": "selector",
                    "description": ""
                },
                {
                    "name": "types",
                    "description": ""
                },
                {
                    "name": "data",
                    "description": ""
                },
                {
                    "name": "fn",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 10717,
            "description": "Description",
            "itemtype": "method",
            "name": "undelegate",
            "params": [
                {
                    "name": "selector",
                    "description": ""
                },
                {
                    "name": "types",
                    "description": ""
                },
                {
                    "name": "fn",
                    "description": ""
                }
            ],
            "return": {
                "description": "ConditionalExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 10740,
            "description": "Description",
            "itemtype": "method",
            "name": "parseJSON",
            "params": [
                {
                    "name": "data",
                    "description": ""
                }
            ],
            "return": {
                "description": "ConditionalExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 10790,
            "description": "Description",
            "itemtype": "method",
            "name": "parseXML",
            "params": [
                {
                    "name": "data",
                    "description": ""
                }
            ],
            "return": {
                "description": "xml"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 10871,
            "description": "Description",
            "itemtype": "method",
            "name": "addToPrefiltersOrTransports",
            "params": [
                {
                    "name": "structure",
                    "description": ""
                }
            ],
            "return": {
                "description": "FunctionExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 10909,
            "description": "Description",
            "itemtype": "method",
            "name": "inspectPrefiltersOrTransports",
            "params": [
                {
                    "name": "structure",
                    "description": ""
                },
                {
                    "name": "options",
                    "description": ""
                },
                {
                    "name": "originalOptions",
                    "description": ""
                },
                {
                    "name": "jqXHR",
                    "description": ""
                }
            ],
            "return": {
                "description": "LogicalExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 10923,
            "description": "Description",
            "itemtype": "method",
            "name": "inspect",
            "params": [
                {
                    "name": "dataType",
                    "description": ""
                }
            ],
            "return": {
                "description": "selected"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 10951,
            "description": "Description",
            "itemtype": "method",
            "name": "ajaxExtend",
            "params": [
                {
                    "name": "target",
                    "description": ""
                },
                {
                    "name": "src",
                    "description": ""
                }
            ],
            "return": {
                "description": "target"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 10974,
            "description": "Handles responses to an ajax request:\n- finds the right dataType (mediates between content-type and expected dataType)\n- returns the corresponding response",
            "itemtype": "method",
            "name": "ajaxHandleResponses",
            "params": [
                {
                    "name": "s",
                    "description": ""
                },
                {
                    "name": "jqXHR",
                    "description": ""
                },
                {
                    "name": "responses",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 11036,
            "description": "Chain conversions given the request and the original response\nAlso sets the responseXXX fields on the jqXHR instance",
            "itemtype": "method",
            "name": "ajaxConvert",
            "params": [
                {
                    "name": "s",
                    "description": ""
                },
                {
                    "name": "response",
                    "description": ""
                },
                {
                    "name": "jqXHR",
                    "description": ""
                },
                {
                    "name": "isSuccess",
                    "description": ""
                }
            ],
            "return": {
                "description": "ObjectExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 11216,
            "description": "Description",
            "itemtype": "method",
            "name": "ajaxSetup",
            "params": [
                {
                    "name": "target",
                    "description": ""
                },
                {
                    "name": "settings",
                    "description": ""
                }
            ],
            "return": {
                "description": "ConditionalExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 11237,
            "description": "Description",
            "itemtype": "method",
            "name": "ajax",
            "params": [
                {
                    "name": "url",
                    "description": ""
                },
                {
                    "name": "options",
                    "description": ""
                }
            ],
            "return": {
                "description": "jqXHR"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 11297,
            "description": "Description",
            "itemtype": "method",
            "name": "getResponseHeader",
            "params": [
                {
                    "name": "key",
                    "description": ""
                }
            ],
            "return": {
                "description": "ConditionalExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 11318,
            "description": "Description",
            "itemtype": "method",
            "name": "getAllResponseHeaders",
            "return": {
                "description": "ConditionalExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 11328,
            "description": "Description",
            "itemtype": "method",
            "name": "setRequestHeader",
            "params": [
                {
                    "name": "name",
                    "description": ""
                },
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": "ThisExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 11345,
            "description": "Description",
            "itemtype": "method",
            "name": "overrideMimeType",
            "params": [
                {
                    "name": "type",
                    "description": ""
                }
            ],
            "return": {
                "description": "ThisExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 11359,
            "description": "Description",
            "itemtype": "method",
            "name": "statusCode",
            "params": [
                {
                    "name": "map",
                    "description": ""
                }
            ],
            "return": {
                "description": "ThisExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 11382,
            "description": "Description",
            "itemtype": "method",
            "name": "abort",
            "params": [
                {
                    "name": "statusText",
                    "description": ""
                }
            ],
            "return": {
                "description": "ThisExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 11555,
            "description": "Description",
            "itemtype": "method",
            "name": "done",
            "params": [
                {
                    "name": "status",
                    "description": ""
                },
                {
                    "name": "nativeStatusText",
                    "description": ""
                },
                {
                    "name": "responses",
                    "description": ""
                },
                {
                    "name": "headers",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 11679,
            "description": "Description",
            "itemtype": "method",
            "name": "getJSON",
            "params": [
                {
                    "name": "url",
                    "description": ""
                },
                {
                    "name": "data",
                    "description": ""
                },
                {
                    "name": "callback",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 11691,
            "description": "Description",
            "itemtype": "method",
            "name": "getScript",
            "params": [
                {
                    "name": "url",
                    "description": ""
                },
                {
                    "name": "callback",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 11704,
            "description": "Description",
            "itemtype": "method",
            "name": "method",
            "params": [
                {
                    "name": "url",
                    "description": ""
                },
                {
                    "name": "data",
                    "description": ""
                },
                {
                    "name": "callback",
                    "description": ""
                },
                {
                    "name": "type",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 11733,
            "description": "Description",
            "itemtype": "method",
            "name": "type",
            "params": [
                {
                    "name": "fn",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 11758,
            "description": "Description",
            "itemtype": "method",
            "name": "wrapAll",
            "params": [
                {
                    "name": "html",
                    "description": ""
                }
            ],
            "return": {
                "description": "ThisExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 11793,
            "description": "Description",
            "itemtype": "method",
            "name": "wrapInner",
            "params": [
                {
                    "name": "html",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 11819,
            "description": "Description",
            "itemtype": "method",
            "name": "wrap",
            "params": [
                {
                    "name": "html",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 11833,
            "description": "Description",
            "itemtype": "method",
            "name": "unwrap",
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 11848,
            "description": "Description",
            "itemtype": "method",
            "name": "hidden",
            "params": [
                {
                    "name": "elem",
                    "description": ""
                }
            ],
            "return": {
                "description": "LogicalExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 11862,
            "description": "Description",
            "itemtype": "method",
            "name": "visible",
            "params": [
                {
                    "name": "elem",
                    "description": ""
                }
            ],
            "return": {
                "description": "UnaryExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 11881,
            "description": "Description",
            "itemtype": "method",
            "name": "buildParams",
            "params": [
                {
                    "name": "prefix",
                    "description": ""
                },
                {
                    "name": "obj",
                    "description": ""
                },
                {
                    "name": "traditional",
                    "description": ""
                },
                {
                    "name": "add",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 11920,
            "description": "Description",
            "itemtype": "method",
            "name": "param",
            "params": [
                {
                    "name": "a",
                    "description": ""
                },
                {
                    "name": "traditional",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 11928,
            "description": "Description",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "key",
                    "description": ""
                },
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 11968,
            "description": "Description",
            "itemtype": "method",
            "name": "serialize",
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 11976,
            "description": "Description",
            "itemtype": "method",
            "name": "serializeArray",
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 12059,
            "description": "Description",
            "itemtype": "method",
            "name": "send",
            "params": [
                {
                    "name": "headers",
                    "description": ""
                },
                {
                    "name": "complete",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 12114,
            "description": "Description",
            "params": [
                {
                    "name": "_",
                    "description": ""
                },
                {
                    "name": "isAbort",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 12188,
            "description": "Description",
            "itemtype": "method",
            "name": "abort",
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 12204,
            "description": "Description",
            "itemtype": "method",
            "name": "createStandardXHR",
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 12215,
            "description": "Description",
            "itemtype": "method",
            "name": "createActiveXHR",
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 12238,
            "description": "Description",
            "params": [
                {
                    "name": "text",
                    "description": ""
                }
            ],
            "return": {
                "description": "text"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 12272,
            "description": "Description",
            "itemtype": "method",
            "name": "send",
            "params": [
                {
                    "name": "_",
                    "description": ""
                },
                {
                    "name": "callback",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 12293,
            "description": "Description",
            "itemtype": "method",
            "name": "onreadystatechange",
            "params": [
                {
                    "name": "_",
                    "description": ""
                },
                {
                    "name": "isAbort",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 12327,
            "description": "Description",
            "itemtype": "method",
            "name": "abort",
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 12350,
            "description": "Description",
            "itemtype": "method",
            "name": "jsonpCallback",
            "return": {
                "description": "callback"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 12387,
            "description": "Description",
            "return": {
                "description": "MemberExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 12403,
            "description": "Description",
            "itemtype": "method",
            "name": "callbackName",
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 12445,
            "description": "Description",
            "itemtype": "method",
            "name": "parseHTML",
            "params": [
                {
                    "name": "data",
                    "description": ""
                },
                {
                    "name": "context",
                    "description": ""
                },
                {
                    "name": "keepScripts",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 12484,
            "description": "Load a url into a page",
            "itemtype": "method",
            "name": "load",
            "params": [
                {
                    "name": "url",
                    "description": ""
                },
                {
                    "name": "params",
                    "description": ""
                },
                {
                    "name": "callback",
                    "description": ""
                }
            ],
            "return": {
                "description": "ThisExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 12552,
            "description": "Description",
            "itemtype": "method",
            "name": "animated",
            "params": [
                {
                    "name": "elem",
                    "description": ""
                }
            ],
            "return": {
                "description": "MemberExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 12570,
            "description": "Gets a window from an element",
            "itemtype": "method",
            "name": "getWindow",
            "params": [
                {
                    "name": "elem",
                    "description": ""
                }
            ],
            "return": {
                "description": "ConditionalExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 12585,
            "description": "Description",
            "itemtype": "method",
            "name": "setOffset",
            "params": [
                {
                    "name": "elem",
                    "description": ""
                },
                {
                    "name": "options",
                    "description": ""
                },
                {
                    "name": "i",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 12640,
            "description": "Description",
            "itemtype": "method",
            "name": "offset",
            "params": [
                {
                    "name": "options",
                    "description": ""
                }
            ],
            "return": {
                "description": "ObjectExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 12683,
            "description": "Description",
            "itemtype": "method",
            "name": "position",
            "return": {
                "description": "ObjectExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 12725,
            "description": "Description",
            "itemtype": "method",
            "name": "offsetParent",
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 12746,
            "description": "Description",
            "itemtype": "method",
            "name": "method",
            "params": [
                {
                    "name": "val",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 12798,
            "description": "Description",
            "itemtype": "method",
            "name": "funcName",
            "params": [
                {
                    "name": "margin",
                    "description": ""
                },
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 12845,
            "description": "Description",
            "itemtype": "method",
            "name": "size",
            "return": {
                "description": "MemberExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 12888,
            "description": "Description",
            "itemtype": "method",
            "name": "noConflict",
            "params": [
                {
                    "name": "deep",
                    "description": ""
                }
            ],
            "return": {
                "description": "jQuery"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 12953,
            "description": "Description",
            "itemtype": "method",
            "name": "SafeString",
            "params": [
                {
                    "name": "string",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 12963,
            "description": "Description",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "BinaryExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 12995,
            "description": "Description",
            "itemtype": "method",
            "name": "escapeChar",
            "params": [
                {
                    "name": "chr",
                    "description": ""
                }
            ],
            "return": {
                "description": "LogicalExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 13005,
            "description": "Description",
            "itemtype": "method",
            "name": "extend",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                },
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 13024,
            "description": "Description",
            "itemtype": "method",
            "name": "isFunction",
            "params": [
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": "BinaryExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 13035,
            "description": "Description",
            "params": [
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": "LogicalExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 13051,
            "description": "Description",
            "itemtype": "method",
            "name": "escapeExpression",
            "params": [
                {
                    "name": "string",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 13075,
            "description": "Description",
            "itemtype": "method",
            "name": "isEmpty",
            "params": [
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 13102,
            "description": "Description",
            "itemtype": "method",
            "name": "Exception",
            "params": [
                {
                    "name": "message",
                    "description": ""
                },
                {
                    "name": "node",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 13158,
            "description": "Description",
            "itemtype": "method",
            "name": "HandlebarsEnvironment",
            "params": [
                {
                    "name": "helpers",
                    "description": ""
                },
                {
                    "name": "partials",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 13178,
            "description": "Description",
            "itemtype": "method",
            "name": "registerHelper",
            "params": [
                {
                    "name": "name",
                    "description": ""
                },
                {
                    "name": "fn",
                    "description": ""
                },
                {
                    "name": "inverse",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 13196,
            "description": "Description",
            "itemtype": "method",
            "name": "registerPartial",
            "params": [
                {
                    "name": "name",
                    "description": ""
                },
                {
                    "name": "str",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 13212,
            "description": "Description",
            "itemtype": "method",
            "name": "registerDefaultHelpers",
            "params": [
                {
                    "name": "instance",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 13329,
            "description": "Description",
            "itemtype": "method",
            "name": "log",
            "params": [
                {
                    "name": "level",
                    "description": ""
                },
                {
                    "name": "obj",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 13346,
            "description": "Description",
            "itemtype": "method",
            "name": "log",
            "params": [
                {
                    "name": "level",
                    "description": ""
                },
                {
                    "name": "obj",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 13356,
            "description": "Description",
            "itemtype": "method",
            "name": "createFrame",
            "params": [
                {
                    "name": "object",
                    "description": ""
                }
            ],
            "return": {
                "description": "obj"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 13380,
            "description": "Description",
            "itemtype": "method",
            "name": "checkRevision",
            "params": [
                {
                    "name": "compilerInfo",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 13406,
            "description": "Description",
            "itemtype": "method",
            "name": "template",
            "params": [
                {
                    "name": "templateSpec",
                    "description": ""
                },
                {
                    "name": "env",
                    "description": ""
                }
            ],
            "return": {
                "description": "FunctionExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 13420,
            "description": "Description",
            "itemtype": "method",
            "name": "invokePartialWrapper",
            "params": [
                {
                    "name": "partial",
                    "description": ""
                },
                {
                    "name": "name",
                    "description": ""
                },
                {
                    "name": "context",
                    "description": ""
                },
                {
                    "name": "helpers",
                    "description": ""
                },
                {
                    "name": "partials",
                    "description": ""
                },
                {
                    "name": "data",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 13449,
            "description": "Description",
            "itemtype": "method",
            "name": "program",
            "params": [
                {
                    "name": "i",
                    "description": ""
                },
                {
                    "name": "fn",
                    "description": ""
                },
                {
                    "name": "data",
                    "description": ""
                }
            ],
            "return": {
                "description": "programWrapper"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 13466,
            "description": "Description",
            "itemtype": "method",
            "name": "merge",
            "params": [
                {
                    "name": "param",
                    "description": ""
                },
                {
                    "name": "common",
                    "description": ""
                }
            ],
            "return": {
                "description": "ret"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 13514,
            "description": "Description",
            "itemtype": "method",
            "name": "programWithDepth",
            "params": [
                {
                    "name": "i",
                    "description": ""
                },
                {
                    "name": "fn",
                    "description": ""
                },
                {
                    "name": "data",
                    "description": ""
                }
            ],
            "return": {
                "description": "prog"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 13525,
            "description": "Description",
            "itemtype": "method",
            "name": "prog",
            "params": [
                {
                    "name": "context",
                    "description": ""
                },
                {
                    "name": "options",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 13543,
            "description": "Description",
            "itemtype": "method",
            "name": "program",
            "params": [
                {
                    "name": "i",
                    "description": ""
                },
                {
                    "name": "fn",
                    "description": ""
                },
                {
                    "name": "data",
                    "description": ""
                }
            ],
            "return": {
                "description": "prog"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 13552,
            "description": "Description",
            "itemtype": "method",
            "name": "prog",
            "params": [
                {
                    "name": "context",
                    "description": ""
                },
                {
                    "name": "options",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 13570,
            "description": "Description",
            "itemtype": "method",
            "name": "invokePartial",
            "params": [
                {
                    "name": "partial",
                    "description": ""
                },
                {
                    "name": "name",
                    "description": ""
                },
                {
                    "name": "context",
                    "description": ""
                },
                {
                    "name": "helpers",
                    "description": ""
                },
                {
                    "name": "partials",
                    "description": ""
                },
                {
                    "name": "data",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 13592,
            "description": "Description",
            "itemtype": "method",
            "name": "noop",
            "return": {
                "description": "Literal"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 13618,
            "description": "Description",
            "itemtype": "method",
            "name": "create",
            "return": {
                "description": "hb"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 13632,
            "description": "Description",
            "itemtype": "method",
            "name": "template",
            "params": [
                {
                    "name": "spec",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 13658,
            "description": "Description",
            "itemtype": "method",
            "name": "LocationInfo",
            "params": [
                {
                    "name": "locInfo",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 13673,
            "description": "Description",
            "itemtype": "method",
            "name": "ProgramNode",
            "params": [
                {
                    "name": "statements",
                    "description": ""
                },
                {
                    "name": "inverseStrip",
                    "description": ""
                },
                {
                    "name": "inverse",
                    "description": ""
                },
                {
                    "name": "locInfo",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 13716,
            "description": "Description",
            "itemtype": "method",
            "name": "MustacheNode",
            "params": [
                {
                    "name": "rawParams",
                    "description": ""
                },
                {
                    "name": "hash",
                    "description": ""
                },
                {
                    "name": "open",
                    "description": ""
                },
                {
                    "name": "strip",
                    "description": ""
                },
                {
                    "name": "locInfo",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 13757,
            "description": "Description",
            "itemtype": "method",
            "name": "SexprNode",
            "params": [
                {
                    "name": "rawParams",
                    "description": ""
                },
                {
                    "name": "hash",
                    "description": ""
                },
                {
                    "name": "locInfo",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 13788,
            "description": "Description",
            "itemtype": "method",
            "name": "PartialNode",
            "params": [
                {
                    "name": "partialName",
                    "description": ""
                },
                {
                    "name": "context",
                    "description": ""
                },
                {
                    "name": "strip",
                    "description": ""
                },
                {
                    "name": "locInfo",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 13805,
            "description": "Description",
            "itemtype": "method",
            "name": "BlockNode",
            "params": [
                {
                    "name": "mustache",
                    "description": ""
                },
                {
                    "name": "program",
                    "description": ""
                },
                {
                    "name": "inverse",
                    "description": ""
                },
                {
                    "name": "close",
                    "description": ""
                },
                {
                    "name": "locInfo",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 13840,
            "description": "Description",
            "itemtype": "method",
            "name": "ContentNode",
            "params": [
                {
                    "name": "string",
                    "description": ""
                },
                {
                    "name": "locInfo",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 13853,
            "description": "Description",
            "itemtype": "method",
            "name": "HashNode",
            "params": [
                {
                    "name": "pairs",
                    "description": ""
                },
                {
                    "name": "locInfo",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 13866,
            "description": "Description",
            "itemtype": "method",
            "name": "IdNode",
            "params": [
                {
                    "name": "parts",
                    "description": ""
                },
                {
                    "name": "locInfo",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 13910,
            "description": "Description",
            "itemtype": "method",
            "name": "PartialNameNode",
            "params": [
                {
                    "name": "name",
                    "description": ""
                },
                {
                    "name": "locInfo",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 13923,
            "description": "Description",
            "itemtype": "method",
            "name": "DataNode",
            "params": [
                {
                    "name": "id",
                    "description": ""
                },
                {
                    "name": "locInfo",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 13936,
            "description": "Description",
            "itemtype": "method",
            "name": "StringNode",
            "params": [
                {
                    "name": "string",
                    "description": ""
                },
                {
                    "name": "locInfo",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 13951,
            "description": "Description",
            "itemtype": "method",
            "name": "IntegerNode",
            "params": [
                {
                    "name": "integer",
                    "description": ""
                },
                {
                    "name": "locInfo",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 13966,
            "description": "Description",
            "itemtype": "method",
            "name": "BooleanNode",
            "params": [
                {
                    "name": "bool",
                    "description": ""
                },
                {
                    "name": "locInfo",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 13980,
            "description": "Description",
            "itemtype": "method",
            "name": "CommentNode",
            "params": [
                {
                    "name": "comment",
                    "description": ""
                },
                {
                    "name": "locInfo",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 14008,
            "description": "Description",
            "itemtype": "method",
            "name": "trace",
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 14018,
            "description": "Description",
            "itemtype": "method",
            "name": "performAction",
            "params": [
                {
                    "name": "yytext",
                    "description": ""
                },
                {
                    "name": "yyleng",
                    "description": ""
                },
                {
                    "name": "yylineno",
                    "description": ""
                },
                {
                    "name": "yy",
                    "description": ""
                },
                {
                    "name": "yystate",
                    "description": ""
                },
                {
                    "name": "$$",
                    "description": ""
                },
                {
                    "name": "_$",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 14126,
            "description": "Description",
            "itemtype": "method",
            "name": "parseError",
            "params": [
                {
                    "name": "str",
                    "description": ""
                },
                {
                    "name": "hash",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 14136,
            "description": "Description",
            "itemtype": "method",
            "name": "parse",
            "params": [
                {
                    "name": "input",
                    "description": ""
                }
            ],
            "return": {
                "description": "Literal"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 14155,
            "description": "Description",
            "itemtype": "method",
            "name": "popStack",
            "params": [
                {
                    "name": "n",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 14166,
            "description": "Description",
            "itemtype": "method",
            "name": "lex",
            "return": {
                "description": "token"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 14259,
            "description": "Description",
            "itemtype": "method",
            "name": "stripFlags",
            "params": [
                {
                    "name": "open",
                    "description": ""
                },
                {
                    "name": "close",
                    "description": ""
                }
            ],
            "return": {
                "description": "ObjectExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 14276,
            "description": "Description",
            "itemtype": "method",
            "name": "parseError",
            "params": [
                {
                    "name": "str",
                    "description": ""
                },
                {
                    "name": "hash",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 14290,
            "description": "Description",
            "itemtype": "method",
            "name": "setInput",
            "params": [
                {
                    "name": "input",
                    "description": ""
                }
            ],
            "return": {
                "description": "ThisExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 14307,
            "description": "Description",
            "itemtype": "method",
            "name": "input",
            "return": {
                "description": "ch"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 14331,
            "description": "Description",
            "itemtype": "method",
            "name": "unput",
            "params": [
                {
                    "name": "ch",
                    "description": ""
                }
            ],
            "return": {
                "description": "ThisExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 14365,
            "description": "Description",
            "itemtype": "method",
            "name": "more",
            "return": {
                "description": "ThisExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 14374,
            "description": "Description",
            "itemtype": "method",
            "name": "less",
            "params": [
                {
                    "name": "n",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 14383,
            "description": "Description",
            "itemtype": "method",
            "name": "pastInput",
            "return": {
                "description": "BinaryExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 14392,
            "description": "Description",
            "itemtype": "method",
            "name": "upcomingInput",
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 14404,
            "description": "Description",
            "itemtype": "method",
            "name": "showPosition",
            "return": {
                "description": "BinaryExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 14414,
            "description": "Description",
            "itemtype": "method",
            "name": "next",
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 14473,
            "description": "Description",
            "itemtype": "method",
            "name": "lex",
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 14486,
            "description": "Description",
            "itemtype": "method",
            "name": "begin",
            "params": [
                {
                    "name": "condition",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 14495,
            "description": "Description",
            "itemtype": "method",
            "name": "popState",
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 14506,
            "description": "Description",
            "itemtype": "method",
            "name": "topState",
            "return": {
                "description": "MemberExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 14514,
            "description": "Description",
            "itemtype": "method",
            "name": "pushState",
            "params": [
                {
                    "name": "condition",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 14524,
            "description": "Description",
            "itemtype": "method",
            "name": "performAction",
            "params": [
                {
                    "name": "yy",
                    "description": ""
                },
                {
                    "name": "yy_",
                    "description": ""
                },
                {
                    "name": "$avoiding_name_collisions",
                    "description": ""
                },
                {
                    "name": "YY_START",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 14536,
            "description": "Description",
            "itemtype": "method",
            "name": "strip",
            "params": [
                {
                    "name": "start",
                    "description": ""
                },
                {
                    "name": "end",
                    "description": ""
                }
            ],
            "return": {
                "description": "AssignmentExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 14636,
            "description": "Description",
            "itemtype": "method",
            "name": "Parser",
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 14657,
            "description": "Description",
            "itemtype": "method",
            "name": "parse",
            "params": [
                {
                    "name": "input",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 14681,
            "description": "Description",
            "itemtype": "method",
            "name": "Compiler",
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 14696,
            "description": "Description",
            "itemtype": "method",
            "name": "disassemble",
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 14725,
            "description": "Description",
            "itemtype": "method",
            "name": "equals",
            "params": [
                {
                    "name": "other",
                    "description": ""
                }
            ],
            "return": {
                "description": "Literal"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 14765,
            "description": "Description",
            "itemtype": "method",
            "name": "compile",
            "params": [
                {
                    "name": "program",
                    "description": ""
                },
                {
                    "name": "options",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 14798,
            "description": "Description",
            "itemtype": "method",
            "name": "accept",
            "params": [
                {
                    "name": "node",
                    "description": ""
                }
            ],
            "return": {
                "description": "ret"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 14820,
            "description": "Description",
            "itemtype": "method",
            "name": "program",
            "params": [
                {
                    "name": "program",
                    "description": ""
                }
            ],
            "return": {
                "description": "ThisExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 14841,
            "description": "Description",
            "itemtype": "method",
            "name": "compileProgram",
            "params": [
                {
                    "name": "program",
                    "description": ""
                }
            ],
            "return": {
                "description": "guid"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 14865,
            "description": "Description",
            "itemtype": "method",
            "name": "block",
            "params": [
                {
                    "name": "block",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 14912,
            "description": "Description",
            "itemtype": "method",
            "name": "hash",
            "params": [
                {
                    "name": "hash",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 14948,
            "description": "Description",
            "itemtype": "method",
            "name": "partial",
            "params": [
                {
                    "name": "partial",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 14968,
            "description": "Description",
            "itemtype": "method",
            "name": "content",
            "params": [
                {
                    "name": "content",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 14978,
            "description": "Description",
            "itemtype": "method",
            "name": "mustache",
            "params": [
                {
                    "name": "mustache",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 14994,
            "description": "Description",
            "itemtype": "method",
            "name": "ambiguousSexpr",
            "params": [
                {
                    "name": "sexpr",
                    "description": ""
                },
                {
                    "name": "program",
                    "description": ""
                },
                {
                    "name": "inverse",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 15015,
            "description": "Description",
            "itemtype": "method",
            "name": "simpleSexpr",
            "params": [
                {
                    "name": "sexpr",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 15038,
            "description": "Description",
            "itemtype": "method",
            "name": "helperSexpr",
            "params": [
                {
                    "name": "sexpr",
                    "description": ""
                },
                {
                    "name": "program",
                    "description": ""
                },
                {
                    "name": "inverse",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 15059,
            "description": "Description",
            "itemtype": "method",
            "name": "sexpr",
            "params": [
                {
                    "name": "sexpr",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 15077,
            "description": "Description",
            "itemtype": "method",
            "name": "ID",
            "params": [
                {
                    "name": "id",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 15099,
            "description": "Description",
            "itemtype": "method",
            "name": "DATA",
            "params": [
                {
                    "name": "data",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 15118,
            "description": "Description",
            "itemtype": "method",
            "name": "STRING",
            "params": [
                {
                    "name": "string",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 15128,
            "description": "Description",
            "itemtype": "method",
            "name": "INTEGER",
            "params": [
                {
                    "name": "integer",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 15138,
            "description": "Description",
            "itemtype": "method",
            "name": "BOOLEAN",
            "params": [
                {
                    "name": "bool",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 15148,
            "description": "Description",
            "itemtype": "method",
            "name": "comment",
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 15156,
            "description": "Description",
            "itemtype": "method",
            "name": "opcode",
            "params": [
                {
                    "name": "name",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 15166,
            "description": "Description",
            "itemtype": "method",
            "name": "declare",
            "params": [
                {
                    "name": "name",
                    "description": ""
                },
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 15177,
            "description": "Description",
            "itemtype": "method",
            "name": "addDepth",
            "params": [
                {
                    "name": "depth",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 15192,
            "description": "Description",
            "itemtype": "method",
            "name": "classifySexpr",
            "params": [
                {
                    "name": "sexpr",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 15219,
            "description": "Description",
            "itemtype": "method",
            "name": "pushParams",
            "params": [
                {
                    "name": "params",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 15250,
            "description": "Description",
            "itemtype": "method",
            "name": "setupFullMustacheParams",
            "params": [
                {
                    "name": "sexpr",
                    "description": ""
                },
                {
                    "name": "program",
                    "description": ""
                },
                {
                    "name": "inverse",
                    "description": ""
                }
            ],
            "return": {
                "description": "params"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 15275,
            "description": "Description",
            "itemtype": "method",
            "name": "precompile",
            "params": [
                {
                    "name": "input",
                    "description": ""
                },
                {
                    "name": "options",
                    "description": ""
                },
                {
                    "name": "env",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 15299,
            "description": "Description",
            "itemtype": "method",
            "name": "compile",
            "params": [
                {
                    "name": "input",
                    "description": ""
                },
                {
                    "name": "options",
                    "description": ""
                },
                {
                    "name": "env",
                    "description": ""
                }
            ],
            "return": {
                "description": "FunctionExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 15320,
            "description": "Description",
            "itemtype": "method",
            "name": "compileInput",
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 15354,
            "description": "Description",
            "itemtype": "method",
            "name": "Literal",
            "params": [
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 15364,
            "description": "Description",
            "itemtype": "method",
            "name": "JavaScriptCompiler",
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 15374,
            "description": "Description",
            "itemtype": "method",
            "name": "nameLookup",
            "params": [
                {
                    "name": "parent",
                    "description": ""
                },
                {
                    "name": "name",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 15404,
            "description": "Description",
            "itemtype": "method",
            "name": "compilerInfo",
            "return": {
                "description": "BinaryExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 15415,
            "description": "Description",
            "itemtype": "method",
            "name": "appendToBuffer",
            "params": [
                {
                    "name": "string",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 15428,
            "description": "Description",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "BinaryExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 15438,
            "description": "Description",
            "itemtype": "method",
            "name": "initializeBuffer",
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 15450,
            "description": "Description",
            "itemtype": "method",
            "name": "compile",
            "params": [
                {
                    "name": "environment",
                    "description": ""
                },
                {
                    "name": "options",
                    "description": ""
                },
                {
                    "name": "context",
                    "description": ""
                },
                {
                    "name": "asObject",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 15513,
            "description": "Description",
            "itemtype": "method",
            "name": "preamble",
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 15544,
            "description": "Description",
            "itemtype": "method",
            "name": "createFunctionContext",
            "params": [
                {
                    "name": "asObject",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 15602,
            "description": "Description",
            "itemtype": "method",
            "name": "mergeSource",
            "return": {
                "description": "source"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 15640,
            "description": "Description",
            "itemtype": "method",
            "name": "blockValue",
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 15663,
            "description": "Description",
            "itemtype": "method",
            "name": "ambiguousBlockValue",
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 15686,
            "description": "Description",
            "itemtype": "method",
            "name": "appendContent",
            "params": [
                {
                    "name": "content",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 15710,
            "description": "Description",
            "itemtype": "method",
            "name": "strip",
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 15731,
            "description": "Description",
            "itemtype": "method",
            "name": "append",
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 15753,
            "description": "Description",
            "itemtype": "method",
            "name": "appendEscaped",
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 15771,
            "description": "Description",
            "itemtype": "method",
            "name": "getContext",
            "params": [
                {
                    "name": "depth",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 15790,
            "description": "Description",
            "itemtype": "method",
            "name": "lookupOnContext",
            "params": [
                {
                    "name": "name",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 15806,
            "description": "Description",
            "itemtype": "method",
            "name": "pushContext",
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 15822,
            "description": "Description",
            "itemtype": "method",
            "name": "resolvePossibleLambda",
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 15842,
            "description": "Description",
            "itemtype": "method",
            "name": "lookup",
            "params": [
                {
                    "name": "name",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 15860,
            "description": "Description",
            "itemtype": "method",
            "name": "lookupData",
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 15877,
            "description": "Description",
            "itemtype": "method",
            "name": "pushStringParam",
            "params": [
                {
                    "name": "string",
                    "description": ""
                },
                {
                    "name": "type",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 15900,
            "description": "Description",
            "itemtype": "method",
            "name": "emptyHash",
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 15913,
            "description": "Description",
            "itemtype": "method",
            "name": "pushHash",
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 15924,
            "description": "Description",
            "itemtype": "method",
            "name": "popHash",
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 15947,
            "description": "Description",
            "itemtype": "method",
            "name": "pushString",
            "params": [
                {
                    "name": "string",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 15963,
            "description": "Description",
            "itemtype": "method",
            "name": "push",
            "params": [
                {
                    "name": "expr",
                    "description": ""
                }
            ],
            "return": {
                "description": "expr"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 15982,
            "description": "Description",
            "itemtype": "method",
            "name": "pushLiteral",
            "params": [
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 16000,
            "description": "Description",
            "itemtype": "method",
            "name": "pushProgram",
            "params": [
                {
                    "name": "guid",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 16023,
            "description": "Description",
            "itemtype": "method",
            "name": "invokeHelper",
            "params": [
                {
                    "name": "paramSize",
                    "description": ""
                },
                {
                    "name": "name",
                    "description": ""
                },
                {
                    "name": "isRoot",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 16065,
            "description": "Description",
            "itemtype": "method",
            "name": "invokeKnownHelper",
            "params": [
                {
                    "name": "paramSize",
                    "description": ""
                },
                {
                    "name": "name",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 16089,
            "description": "Description",
            "itemtype": "method",
            "name": "invokeAmbiguous",
            "params": [
                {
                    "name": "name",
                    "description": ""
                },
                {
                    "name": "helperCall",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 16122,
            "description": "Description",
            "itemtype": "method",
            "name": "invokePartial",
            "params": [
                {
                    "name": "name",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 16146,
            "description": "Description",
            "itemtype": "method",
            "name": "assignToHash",
            "params": [
                {
                    "name": "key",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 16176,
            "description": "Description",
            "itemtype": "method",
            "name": "compileChildren",
            "params": [
                {
                    "name": "environment",
                    "description": ""
                },
                {
                    "name": "options",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 16205,
            "description": "Description",
            "itemtype": "method",
            "name": "matchExistingProgram",
            "params": [
                {
                    "name": "child",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 16220,
            "description": "Description",
            "itemtype": "method",
            "name": "programExpression",
            "params": [
                {
                    "name": "guid",
                    "description": ""
                }
            ],
            "return": {
                "description": "BinaryExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 16248,
            "description": "Description",
            "itemtype": "method",
            "name": "register",
            "params": [
                {
                    "name": "name",
                    "description": ""
                },
                {
                    "name": "val",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 16260,
            "description": "Description",
            "itemtype": "method",
            "name": "useRegister",
            "params": [
                {
                    "name": "name",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 16273,
            "description": "Description",
            "itemtype": "method",
            "name": "pushStackLiteral",
            "params": [
                {
                    "name": "item",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 16283,
            "description": "Description",
            "itemtype": "method",
            "name": "pushSource",
            "params": [
                {
                    "name": "source",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 16300,
            "description": "Description",
            "itemtype": "method",
            "name": "pushStack",
            "params": [
                {
                    "name": "item",
                    "description": ""
                }
            ],
            "return": {
                "description": "stack"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 16317,
            "description": "Description",
            "itemtype": "method",
            "name": "replaceStack",
            "params": [
                {
                    "name": "callback",
                    "description": ""
                }
            ],
            "return": {
                "description": "stack"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 16372,
            "description": "Description",
            "itemtype": "method",
            "name": "nextStack",
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 16381,
            "description": "Description",
            "itemtype": "method",
            "name": "incrStack",
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 16391,
            "description": "Description",
            "itemtype": "method",
            "name": "topStackName",
            "return": {
                "description": "BinaryExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 16399,
            "description": "Description",
            "itemtype": "method",
            "name": "flushInline",
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 16418,
            "description": "Description",
            "itemtype": "method",
            "name": "isInline",
            "return": {
                "description": "MemberExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 16427,
            "description": "Description",
            "itemtype": "method",
            "name": "popStack",
            "params": [
                {
                    "name": "wrapped",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 16450,
            "description": "Description",
            "itemtype": "method",
            "name": "topStack",
            "params": [
                {
                    "name": "wrapped",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 16467,
            "description": "Description",
            "itemtype": "method",
            "name": "quotedString",
            "params": [
                {
                    "name": "str",
                    "description": ""
                }
            ],
            "return": {
                "description": "BinaryExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 16483,
            "description": "Description",
            "itemtype": "method",
            "name": "setupHelper",
            "params": [
                {
                    "name": "paramSize",
                    "description": ""
                },
                {
                    "name": "name",
                    "description": ""
                },
                {
                    "name": "missingParams",
                    "description": ""
                }
            ],
            "return": {
                "description": "ObjectExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 16505,
            "description": "Description",
            "itemtype": "method",
            "name": "setupOptions",
            "params": [
                {
                    "name": "paramSize",
                    "description": ""
                },
                {
                    "name": "params",
                    "description": ""
                }
            ],
            "return": {
                "description": "options"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 16566,
            "description": "Description",
            "itemtype": "method",
            "name": "setupParams",
            "params": [
                {
                    "name": "paramSize",
                    "description": ""
                },
                {
                    "name": "params",
                    "description": ""
                },
                {
                    "name": "useRegister",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 16612,
            "description": "Description",
            "itemtype": "method",
            "name": "isValidJavaScriptVariableName",
            "params": [
                {
                    "name": "name",
                    "description": ""
                }
            ],
            "return": {
                "description": "Literal"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 16646,
            "description": "Description",
            "itemtype": "method",
            "name": "create",
            "return": {
                "description": "hb"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 16654,
            "description": "Description",
            "itemtype": "method",
            "name": "compile",
            "params": [
                {
                    "name": "input",
                    "description": ""
                },
                {
                    "name": "options",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 16664,
            "description": "Description",
            "itemtype": "method",
            "name": "precompile",
            "params": [
                {
                    "name": "input",
                    "description": ""
                },
                {
                    "name": "options",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 16714,
            "description": "Description",
            "params": [
                {
                    "name": "name",
                    "description": ""
                },
                {
                    "name": "deps",
                    "description": ""
                },
                {
                    "name": "callback",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 16726,
            "description": "Description",
            "params": [
                {
                    "name": "name",
                    "description": ""
                }
            ],
            "return": {
                "description": "AssignmentExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 16756,
            "description": "Description",
            "itemtype": "method",
            "name": "resolve",
            "params": [
                {
                    "name": "child",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 16813,
            "description": "Description",
            "itemtype": "method",
            "name": "isCoercableNumber",
            "params": [
                {
                    "name": "number",
                    "description": ""
                }
            ],
            "return": {
                "description": "LogicalExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 16823,
            "description": "Description",
            "itemtype": "method",
            "name": "Backburner",
            "params": [
                {
                    "name": "queueNames",
                    "description": ""
                },
                {
                    "name": "options",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 16847,
            "description": "Description",
            "itemtype": "method",
            "name": "begin",
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 16867,
            "description": "Description",
            "itemtype": "method",
            "name": "end",
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 16901,
            "description": "Description",
            "itemtype": "method",
            "name": "run",
            "params": [
                {
                    "name": "target",
                    "description": ""
                },
                {
                    "name": "method",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 16950,
            "description": "Description",
            "itemtype": "method",
            "name": "defer",
            "params": [
                {
                    "name": "queueName",
                    "description": ""
                },
                {
                    "name": "target",
                    "description": ""
                },
                {
                    "name": "method",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 16974,
            "description": "Description",
            "itemtype": "method",
            "name": "deferOnce",
            "params": [
                {
                    "name": "queueName",
                    "description": ""
                },
                {
                    "name": "target",
                    "description": ""
                },
                {
                    "name": "method",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 16998,
            "description": "Description",
            "itemtype": "method",
            "name": "setTimeout",
            "return": {
                "description": "fn"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 17059,
            "description": "Description",
            "itemtype": "method",
            "name": "fn",
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 17086,
            "description": "Description",
            "itemtype": "method",
            "name": "throttle",
            "params": [
                {
                    "name": "target",
                    "description": ""
                },
                {
                    "name": "method",
                    "description": ""
                }
            ],
            "return": {
                "description": "throttler"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 17135,
            "description": "Description",
            "itemtype": "method",
            "name": "debounce",
            "params": [
                {
                    "name": "target",
                    "description": ""
                },
                {
                    "name": "method",
                    "description": ""
                }
            ],
            "return": {
                "description": "debouncee"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 17189,
            "description": "Description",
            "itemtype": "method",
            "name": "cancelTimers",
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 17195,
            "description": "Description",
            "itemtype": "method",
            "name": "clearItems",
            "params": [
                {
                    "name": "item",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 17223,
            "description": "Description",
            "itemtype": "method",
            "name": "hasTimers",
            "return": {
                "description": "LogicalExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 17232,
            "description": "Description",
            "itemtype": "method",
            "name": "cancel",
            "params": [
                {
                    "name": "timer",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 17293,
            "description": "Description",
            "itemtype": "method",
            "name": "wrapInTryCatch",
            "params": [
                {
                    "name": "func",
                    "description": ""
                }
            ],
            "return": {
                "description": "FunctionExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 17309,
            "description": "Description",
            "itemtype": "method",
            "name": "getOnError",
            "params": [
                {
                    "name": "options",
                    "description": ""
                }
            ],
            "return": {
                "description": "LogicalExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 17320,
            "description": "Description",
            "itemtype": "method",
            "name": "createAutorun",
            "params": [
                {
                    "name": "backburner",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 17334,
            "description": "Description",
            "itemtype": "method",
            "name": "updateLaterTimer",
            "params": [
                {
                    "name": "self",
                    "description": ""
                },
                {
                    "name": "executeAt",
                    "description": ""
                },
                {
                    "name": "wait",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 17353,
            "description": "Description",
            "itemtype": "method",
            "name": "executeTimers",
            "params": [
                {
                    "name": "self",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 17378,
            "description": "Description",
            "itemtype": "method",
            "name": "findDebouncee",
            "params": [
                {
                    "name": "target",
                    "description": ""
                },
                {
                    "name": "method",
                    "description": ""
                },
                {
                    "name": "debouncees",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 17390,
            "description": "Description",
            "itemtype": "method",
            "name": "findThrottler",
            "params": [
                {
                    "name": "target",
                    "description": ""
                },
                {
                    "name": "method",
                    "description": ""
                },
                {
                    "name": "throttlers",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 17402,
            "description": "Description",
            "itemtype": "method",
            "name": "findItem",
            "params": [
                {
                    "name": "target",
                    "description": ""
                },
                {
                    "name": "method",
                    "description": ""
                },
                {
                    "name": "collection",
                    "description": ""
                }
            ],
            "return": {
                "description": "index"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 17425,
            "description": "Description",
            "itemtype": "method",
            "name": "searchTimer",
            "params": [
                {
                    "name": "time",
                    "description": ""
                },
                {
                    "name": "timers",
                    "description": ""
                }
            ],
            "return": {
                "description": "ConditionalExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 17468,
            "description": "Description",
            "itemtype": "method",
            "name": "DeferredActionQueues",
            "params": [
                {
                    "name": "queueNames",
                    "description": ""
                },
                {
                    "name": "options",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 17491,
            "description": "Description",
            "itemtype": "method",
            "name": "schedule",
            "params": [
                {
                    "name": "queueName",
                    "description": ""
                },
                {
                    "name": "target",
                    "description": ""
                },
                {
                    "name": "method",
                    "description": ""
                },
                {
                    "name": "args",
                    "description": ""
                },
                {
                    "name": "onceFlag",
                    "description": ""
                },
                {
                    "name": "stack",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 17515,
            "description": "Description",
            "itemtype": "method",
            "name": "invoke",
            "params": [
                {
                    "name": "target",
                    "description": ""
                },
                {
                    "name": "method",
                    "description": ""
                },
                {
                    "name": "args",
                    "description": ""
                },
                {
                    "name": "_",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 17532,
            "description": "Description",
            "itemtype": "method",
            "name": "invokeWithOnError",
            "params": [
                {
                    "name": "target",
                    "description": ""
                },
                {
                    "name": "method",
                    "description": ""
                },
                {
                    "name": "args",
                    "description": ""
                },
                {
                    "name": "onError",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 17553,
            "description": "Description",
            "itemtype": "method",
            "name": "flush",
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 17611,
            "description": "Description",
            "itemtype": "method",
            "name": "indexOfPriorQueueWithActions",
            "params": [
                {
                    "name": "daq",
                    "description": ""
                },
                {
                    "name": "currentQueueIndex",
                    "description": ""
                }
            ],
            "return": {
                "description": "UnaryExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 17636,
            "description": "Description",
            "itemtype": "method",
            "name": "Queue",
            "params": [
                {
                    "name": "daq",
                    "description": ""
                },
                {
                    "name": "name",
                    "description": ""
                },
                {
                    "name": "options",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 17659,
            "description": "Description",
            "itemtype": "method",
            "name": "push",
            "params": [
                {
                    "name": "target",
                    "description": ""
                },
                {
                    "name": "method",
                    "description": ""
                },
                {
                    "name": "args",
                    "description": ""
                },
                {
                    "name": "stack",
                    "description": ""
                }
            ],
            "return": {
                "description": "ObjectExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 17674,
            "description": "Description",
            "itemtype": "method",
            "name": "pushUnique",
            "params": [
                {
                    "name": "target",
                    "description": ""
                },
                {
                    "name": "method",
                    "description": ""
                },
                {
                    "name": "args",
                    "description": ""
                },
                {
                    "name": "stack",
                    "description": ""
                }
            ],
            "return": {
                "description": "ObjectExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 17702,
            "description": "Description",
            "itemtype": "method",
            "name": "flush",
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 17757,
            "description": "Description",
            "itemtype": "method",
            "name": "cancel",
            "params": [
                {
                    "name": "actionToCancel",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 17803,
            "description": "Description",
            "itemtype": "method",
            "name": "each",
            "params": [
                {
                    "name": "collection",
                    "description": ""
                },
                {
                    "name": "callback",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 17816,
            "description": "Description",
            "itemtype": "method",
            "name": "isString",
            "params": [
                {
                    "name": "suspect",
                    "description": ""
                }
            ],
            "return": {
                "description": "BinaryExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 17826,
            "description": "Description",
            "itemtype": "method",
            "name": "isFunction",
            "params": [
                {
                    "name": "suspect",
                    "description": ""
                }
            ],
            "return": {
                "description": "BinaryExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 17836,
            "description": "Description",
            "itemtype": "method",
            "name": "isNumber",
            "params": [
                {
                    "name": "suspect",
                    "description": ""
                }
            ],
            "return": {
                "description": "BinaryExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 17857,
            "description": "Description",
            "itemtype": "method",
            "name": "exports",
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 17932,
            "description": "Description",
            "itemtype": "method",
            "name": "Container",
            "params": [
                {
                    "name": "parent",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 17960,
            "itemtype": "property",
            "name": "parent",
            "type": "Container",
            "default": "null",
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 17967,
            "itemtype": "property",
            "name": "children",
            "type": "Array",
            "default": "[]",
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 17974,
            "itemtype": "property",
            "name": "resolver",
            "type": "function",
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 17980,
            "itemtype": "property",
            "name": "registry",
            "type": "InheritingDict",
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 17986,
            "itemtype": "property",
            "name": "cache",
            "type": "InheritingDict",
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 17992,
            "itemtype": "property",
            "name": "typeInjections",
            "type": "InheritingDict",
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 17998,
            "itemtype": "property",
            "name": "injections",
            "type": "Object",
            "default": "{}",
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 18005,
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_options",
            "type": "InheritingDict",
            "default": "null",
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 18014,
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_typeOptions",
            "type": "InheritingDict",
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 18022,
            "description": "Returns a new child of the current container. These children are configured\nto correctly inherit from the current container.",
            "itemtype": "method",
            "name": "child",
            "return": {
                "description": "container"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 18034,
            "description": "Sets a key-value pair on the current container. If a parent container,\nhas the same key, once set on a child, the parent and child will diverge\nas expected.",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "object",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "Any"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 18048,
            "description": "Registers a factory for later injection.\nExample:\n```javascript\nvar container = new Container();\ncontainer.register('model:user', Person, {singleton: false });\ncontainer.register('fruit:favorite', Orange);\ncontainer.register('communication:main', Email, {singleton: false});\n```",
            "itemtype": "method",
            "name": "register",
            "params": [
                {
                    "name": "fullName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "factory",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 18080,
            "description": "Unregister a fullName\n```javascript\nvar container = new Container();\ncontainer.register('model:user', User);\ncontainer.lookup('model:user') instanceof User //=> true\ncontainer.unregister('model:user')\ncontainer.lookup('model:user') === undefined //=> true\n```",
            "itemtype": "method",
            "name": "unregister",
            "params": [
                {
                    "name": "fullName",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 18105,
            "description": "Given a fullName return the corresponding factory.\nBy default `resolve` will retrieve the factory from\nits container's registry.\n```javascript\nvar container = new Container();\ncontainer.register('api:twitter', Twitter);\ncontainer.resolve('api:twitter') // => Twitter\n```\nOptionally the container can be provided with a custom resolver.\nIf provided, `resolve` will first provide the custom resolver\nthe opportunity to resolve the fullName, otherwise it will fallback\nto the registry.\n```javascript\nvar container = new Container();\ncontainer.resolver = function(fullName) {\n// lookup via the module system of choice\n};\n// the twitter factory is added to the module system\ncontainer.resolve('api:twitter') // => Twitter\n```",
            "itemtype": "method",
            "name": "resolve",
            "params": [
                {
                    "name": "fullName",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 18135,
            "description": "A hook that can be used to describe how the resolver will\nattempt to find the factory.\nFor example, the default Ember `.describe` returns the full\nclass name (including namespace) where Ember's resolver expects\nto find the `fullName`.",
            "itemtype": "method",
            "name": "describe",
            "params": [
                {
                    "name": "fullName",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "fullName"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 18149,
            "description": "A hook to enable custom fullName normalization behaviour",
            "itemtype": "method",
            "name": "normalize",
            "params": [
                {
                    "name": "fullName",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "fullName"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 18159,
            "description": "Description",
            "itemtype": "method",
            "name": "makeToString",
            "params": [
                {
                    "name": "factory",
                    "description": "",
                    "type": "Any"
                },
                {
                    "name": "fullName",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 18170,
            "description": "Given a fullName return a corresponding instance.\nThe default behaviour is for lookup to return a singleton instance.\nThe singleton is scoped to the container, allowing multiple containers\nto all have their own locally scoped singletons.\n```javascript\nvar container = new Container();\ncontainer.register('api:twitter', Twitter);\nvar twitter = container.lookup('api:twitter');\ntwitter instanceof Twitter; // => true\n// by default the container will return singletons\nvar twitter2 = container.lookup('api:twitter');\ntwitter2 instanceof Twitter; // => true\ntwitter === twitter2; //=> true\n```\nIf singletons are not wanted an optional flag can be provided at lookup.\n```javascript\nvar container = new Container();\ncontainer.register('api:twitter', Twitter);\nvar twitter = container.lookup('api:twitter', { singleton: false });\nvar twitter2 = container.lookup('api:twitter', { singleton: false });\ntwitter === twitter2; //=> false\n```",
            "itemtype": "method",
            "name": "lookup",
            "params": [
                {
                    "name": "fullName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 18203,
            "description": "Given a fullName return the corresponding factory.",
            "itemtype": "method",
            "name": "lookupFactory",
            "params": [
                {
                    "name": "fullName",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 18214,
            "description": "Given a fullName check if the container is aware of its factory\nor singleton instance.",
            "itemtype": "method",
            "name": "has",
            "params": [
                {
                    "name": "fullName",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 18226,
            "description": "Allow registering options for all factories of a type.\n```javascript\nvar container = new Container();\n// if all of type `connection` must not be singletons\ncontainer.optionsForType('connection', { singleton: false });\ncontainer.register('connection:twitter', TwitterConnection);\ncontainer.register('connection:facebook', FacebookConnection);\nvar twitter = container.lookup('connection:twitter');\nvar twitter2 = container.lookup('connection:twitter');\ntwitter === twitter2; // => false\nvar facebook = container.lookup('connection:facebook');\nvar facebook2 = container.lookup('connection:facebook');\nfacebook === facebook2; // => false\n```",
            "itemtype": "method",
            "name": "optionsForType",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 18252,
            "description": "Description",
            "itemtype": "method",
            "name": "options",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 18263,
            "description": "Used only via `injection`.\nProvides a specialized form of injection, specifically enabling\nall objects of one type to be injected with a reference to another\nobject.\nFor example, provided each object of type `controller` needed a `router`.\none would do the following:\n```javascript\nvar container = new Container();\ncontainer.register('router:main', Router);\ncontainer.register('controller:user', UserController);\ncontainer.register('controller:post', PostController);\ncontainer.typeInjection('controller', 'router', 'router:main');\nvar user = container.lookup('controller:user');\nvar post = container.lookup('controller:post');\nuser.router instanceof Router; //=> true\npost.router instanceof Router; //=> true\n// both controllers share the same router\nuser.router === post.router; //=> true\n```",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "typeInjection",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "property",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "fullName",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 18301,
            "description": "Defines injection rules.\nThese rules are used to inject dependencies onto objects when they\nare instantiated.\nTwo forms of injections are possible:\nInjecting one fullName on another fullName\nInjecting one fullName on a type\nExample:\n```javascript\nvar container = new Container();\ncontainer.register('source:main', Source);\ncontainer.register('model:user', User);\ncontainer.register('model:post', Post);\n// injecting one fullName on another fullName\n// eg. each user model gets a post model\ncontainer.injection('model:user', 'post', 'model:post');\n// injecting one fullName on another type\ncontainer.injection('model', 'source', 'source:main');\nvar user = container.lookup('model:user');\nvar post = container.lookup('model:post');\nuser.source instanceof Source; //=> true\npost.source instanceof Source; //=> true\nuser.post instanceof Post; //=> true\n// and both models share the same source\nuser.source === post.source; //=> true\n```",
            "itemtype": "method",
            "name": "injection",
            "params": [
                {
                    "name": "fullName",
                    "description": ""
                },
                {
                    "name": "property",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "injectionName",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 18353,
            "description": "Used only via `factoryInjection`.\nProvides a specialized form of injection, specifically enabling\nall factory of one type to be injected with a reference to another\nobject.\nFor example, provided each factory of type `model` needed a `store`.\none would do the following:\n```javascript\nvar container = new Container();\ncontainer.register('store:main', SomeStore);\ncontainer.factoryTypeInjection('model', 'store', 'store:main');\nvar store = container.lookup('store:main');\nvar UserFactory = container.lookupFactory('model:user');\nUserFactory.store instanceof SomeStore; //=> true\n```",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "factoryTypeInjection",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "property",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "fullName",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 18381,
            "description": "Defines factory injection rules.\nSimilar to regular injection rules, but are run against factories, via\n`Container#lookupFactory`.\nThese rules are used to inject objects onto factories when they\nare looked up.\nTwo forms of injections are possible:\nInjecting one fullName on another fullName\nInjecting one fullName on a type\nExample:\n```javascript\nvar container = new Container();\ncontainer.register('store:main', Store);\ncontainer.register('store:secondary', OtherStore);\ncontainer.register('model:user', User);\ncontainer.register('model:post', Post);\n// injecting one fullName on another type\ncontainer.factoryInjection('model', 'store', 'store:main');\n// injecting one fullName on another fullName\ncontainer.factoryInjection('model:post', 'secondaryStore', 'store:secondary');\nvar UserFactory = container.lookupFactory('model:user');\nvar PostFactory = container.lookupFactory('model:post');\nvar store = container.lookup('store:main');\nUserFactory.store instanceof Store; //=> true\nUserFactory.secondaryStore instanceof OtherStore; //=> false\nPostFactory.store instanceof Store; //=> true\nPostFactory.secondaryStore instanceof OtherStore; //=> true\n// and both models share the same source instance\nUserFactory.store === PostFactory.store; //=> true\n```",
            "itemtype": "method",
            "name": "factoryInjection",
            "params": [
                {
                    "name": "fullName",
                    "description": ""
                },
                {
                    "name": "property",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "injectionName",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 18439,
            "description": "A depth first traversal, destroying the container, its descendant containers and all\ntheir managed objects.",
            "itemtype": "method",
            "name": "destroy",
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 18460,
            "description": "Description",
            "itemtype": "method",
            "name": "reset",
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 18474,
            "description": "Description",
            "itemtype": "method",
            "name": "resolve",
            "params": [
                {
                    "name": "container",
                    "description": ""
                },
                {
                    "name": "normalizedName",
                    "description": ""
                }
            ],
            "return": {
                "description": "resolved"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 18491,
            "description": "Description",
            "itemtype": "method",
            "name": "has",
            "params": [
                {
                    "name": "container",
                    "description": ""
                },
                {
                    "name": "fullName",
                    "description": ""
                }
            ],
            "return": {
                "description": "UnaryExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 18506,
            "description": "Description",
            "itemtype": "method",
            "name": "lookup",
            "params": [
                {
                    "name": "container",
                    "description": ""
                },
                {
                    "name": "fullName",
                    "description": ""
                },
                {
                    "name": "options",
                    "description": ""
                }
            ],
            "return": {
                "description": "value"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 18532,
            "description": "Description",
            "itemtype": "method",
            "name": "illegalChildOperation",
            "params": [
                {
                    "name": "operation",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 18542,
            "description": "Description",
            "itemtype": "method",
            "name": "isSingleton",
            "params": [
                {
                    "name": "container",
                    "description": ""
                },
                {
                    "name": "fullName",
                    "description": ""
                }
            ],
            "return": {
                "description": "BinaryExpression"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 18555,
            "description": "Description",
            "itemtype": "method",
            "name": "buildInjections",
            "params": [
                {
                    "name": "container",
                    "description": ""
                },
                {
                    "name": "injections",
                    "description": ""
                }
            ],
            "return": {
                "description": "hash"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 18583,
            "description": "Description",
            "itemtype": "method",
            "name": "option",
            "params": [
                {
                    "name": "container",
                    "description": ""
                },
                {
                    "name": "fullName",
                    "description": ""
                },
                {
                    "name": "optionName",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 18606,
            "description": "Description",
            "itemtype": "method",
            "name": "factoryFor",
            "params": [
                {
                    "name": "container",
                    "description": ""
                },
                {
                    "name": "fullName",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 18641,
            "description": "Description",
            "itemtype": "method",
            "name": "injectionsFor",
            "params": [
                {
                    "name": "container",
                    "description": ""
                },
                {
                    "name": "fullName",
                    "description": ""
                }
            ],
            "return": {
                "description": "injections"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 18663,
            "description": "Description",
            "itemtype": "method",
            "name": "factoryInjectionsFor",
            "params": [
                {
                    "name": "container",
                    "description": ""
                },
                {
                    "name": "fullName",
                    "description": ""
                }
            ],
            "return": {
                "description": "factoryInjections"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 18684,
            "description": "Description",
            "itemtype": "method",
            "name": "instantiate",
            "params": [
                {
                    "name": "container",
                    "description": ""
                },
                {
                    "name": "fullName",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 18716,
            "description": "Description",
            "itemtype": "method",
            "name": "eachDestroyable",
            "params": [
                {
                    "name": "container",
                    "description": ""
                },
                {
                    "name": "callback",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 18730,
            "description": "Description",
            "itemtype": "method",
            "name": "resetCache",
            "params": [
                {
                    "name": "container",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 18744,
            "description": "Description",
            "itemtype": "method",
            "name": "addTypeInjection",
            "params": [
                {
                    "name": "rules",
                    "description": ""
                },
                {
                    "name": "type",
                    "description": ""
                },
                {
                    "name": "property",
                    "description": ""
                },
                {
                    "name": "fullName",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 18768,
            "description": "Description",
            "itemtype": "method",
            "name": "validateFullName",
            "params": [
                {
                    "name": "fullName",
                    "description": ""
                }
            ],
            "return": {
                "description": "Literal"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 18781,
            "description": "Description",
            "itemtype": "method",
            "name": "addInjection",
            "params": [
                {
                    "name": "rules",
                    "description": ""
                },
                {
                    "name": "factoryName",
                    "description": ""
                },
                {
                    "name": "property",
                    "description": ""
                },
                {
                    "name": "injectionName",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 18802,
            "description": "Description",
            "itemtype": "method",
            "name": "InheritingDict",
            "params": [
                {
                    "name": "parent",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 18815,
            "itemtype": "property",
            "name": "parent",
            "type": "InheritingDict",
            "default": "null",
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 18823,
            "description": "Object used to store the current nodes data.",
            "itemtype": "property",
            "name": "dict",
            "type": "Object",
            "default": "Object",
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 18832,
            "description": "Retrieve the value given a key, if the value is present at the current\nlevel use it, otherwise walk up the parent hierarchy and try again. If\nno matching key is found, return undefined.",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 18852,
            "description": "Set the given value for the given key, at the current level.",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "Any"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 18863,
            "description": "Delete the given key",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 18873,
            "description": "Check for the existence of given a key, if the key is present at the current\nlevel return true, otherwise walk up the parent hierarchy and try again. If\nno matching key is found, return false.",
            "itemtype": "method",
            "name": "has",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Literal"
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 18895,
            "description": "Iterate and invoke a callback for each local key-value pair.",
            "itemtype": "method",
            "name": "eachLocal",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "binding",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 18963,
            "description": "Description",
            "itemtype": "method",
            "name": "verifyNeedsDependencies",
            "params": [
                {
                    "name": "controller",
                    "description": ""
                },
                {
                    "name": "container",
                    "description": ""
                },
                {
                    "name": "needs",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin",
            "module": "ember",
            "submodule": "ember-application"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 18999,
            "description": "Description",
            "itemtype": "method",
            "name": "unknownProperty",
            "params": [
                {
                    "name": "controllerName",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin",
            "module": "ember",
            "submodule": "ember-application"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 19018,
            "description": "Description",
            "itemtype": "method",
            "name": "setUnknownProperty",
            "params": [
                {
                    "name": "key",
                    "description": ""
                },
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin",
            "module": "ember",
            "submodule": "ember-application"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 19038,
            "description": "An array of other controller objects available inside\ninstances of this controller via the `controllers`\nproperty:\n\nFor example, when you define a controller:\n\n```javascript\nApp.CommentsController = Ember.ArrayController.extend({\n  needs: ['post']\n});\n```\n\nThe application's single instance of these other\ncontrollers are accessible by name through the\n`controllers` property:\n\n```javascript\nthis.get('controllers.post'); // instance of App.PostController\n```\n\nGiven that you have a nested controller (nested resource):\n\n```javascript\nApp.CommentsNewController = Ember.ObjectController.extend({\n});\n```\n\nWhen you define a controller that requires access to a nested one:\n\n```javascript\nApp.IndexController = Ember.ObjectController.extend({\n  needs: ['commentsNew']\n});\n```\n\nYou will be able to get access to it:\n\n```javascript\nthis.get('controllers.commentsNew'); // instance of App.CommentsNewController\n```\n\nThis is only available for singleton controllers.",
            "itemtype": "property",
            "name": "needs",
            "type": "Array",
            "default": "[]",
            "class": "Ember.ControllerMixin",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 19087,
            "description": "Description",
            "itemtype": "method",
            "name": "init",
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 19113,
            "description": "Description",
            "see": [
                "{Ember.Route#controllerFor}"
            ],
            "deprecated": true,
            "deprecationMessage": "Use `needs` instead",
            "itemtype": "method",
            "name": "controllerFor",
            "params": [
                {
                    "name": "controllerName",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 19126,
            "description": "Stores the instances of other controllers available from within\nthis controller. Any controller listed by name in the `needs`\nproperty will be accessible by name through this property.\n\n```javascript\nApp.CommentsController = Ember.ArrayController.extend({\n  needs: ['post'],\n  postTitle: function(){\n    var currentPost = this.get('controllers.post'); // instance of App.PostController\n    return currentPost.get('title');\n  }.property('controllers.post.title')\n});\n```",
            "see": [
                "{Ember.ControllerMixin#needs}"
            ],
            "itemtype": "property",
            "name": "controllers",
            "type": "Object",
            "default": "null",
            "class": "Ember.ControllerMixin",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 19337,
            "description": "The root DOM element of the Application. This can be specified as an\nelement or a\n[jQuery-compatible selector string](http://api.jquery.com/category/selectors/).\n\nThis is the element that will be passed to the Application's,\n`eventDispatcher`, which sets up the listeners for event delegation. Every\nview in your application should be a child of the element you specify here.",
            "itemtype": "property",
            "name": "rootElement",
            "type": "DOMElement",
            "default": "'body'",
            "class": "Ember.Application",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 19352,
            "description": "The `Ember.EventDispatcher` responsible for delegating events to this\napplication's views.\n\nThe event dispatcher is created by the application at initialization time\nand sets up event listeners on the DOM element described by the\napplication's `rootElement` property.\n\nSee the documentation for `Ember.EventDispatcher` for more information.",
            "itemtype": "property",
            "name": "eventDispatcher",
            "type": "Ember.EventDispatcher",
            "default": "null",
            "class": "Ember.Application",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 19368,
            "description": "The DOM events for which the event dispatcher should listen.\n\nBy default, the application's `Ember.EventDispatcher` listens\nfor a set of standard DOM events, such as `mousedown` and\n`keyup`, and delegates them to your application's `Ember.View`\ninstances.\n\nIf you would like additional bubbling events to be delegated to your\nviews, set your `Ember.Application`'s `customEvents` property\nto a hash containing the DOM event name as the key and the\ncorresponding view method name as the value. For example:\n\n```javascript\nApp = Ember.Application.create({\n  customEvents: {\n    // add support for the paste event\n    paste: \"paste\"\n  }\n});\n```",
            "itemtype": "property",
            "name": "customEvents",
            "type": "Object",
            "default": "null",
            "class": "Ember.Application",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 19400,
            "description": "Description",
            "itemtype": "method",
            "name": "init",
            "return": {
                "description": ""
            },
            "class": "Ember.Application",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 19436,
            "description": "Build the container for the current application.\nAlso register a default application view in case the application\nitself does not.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "buildContainer",
            "return": {
                "description": "container"
            },
            "class": "Ember.Application",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 19450,
            "description": "If the application has not opted out of routing and has not explicitly\ndefined a router, supply a default router for the application author\nto configure.\nThis allows application developers to do:\n```javascript\nvar App = Ember.Application.create();\nApp.Router.map(function() {\nthis.resource('posts');\n});\n```",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "defaultRouter",
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Application",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 19477,
            "description": "Automatically initialize the application once the DOM has\nbecome ready.\nThe initialization itself is scheduled on the actions queue\nwhich ensures that application loading finishes before\nbooting.\nIf you are asynchronously loading code, you should call\n`deferReadiness()` to defer booting, and then call\n`advanceReadiness()` once all of your code has finished\nloading.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "scheduleInitialize",
            "return": {
                "description": ""
            },
            "class": "Ember.Application",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 19503,
            "description": "Use this to defer readiness until some condition is true.\nExample:\n```javascript\nApp = Ember.Application.create();\nApp.deferReadiness();\njQuery.getJSON(\"/auth-token\", function(token) {\nApp.token = token;\nApp.advanceReadiness();\n});\n```\nThis allows you to perform asynchronous setup logic and defer\nbooting your application until the setup has finished.\nHowever, if the setup requires a loading UI, it might be better\nto use the router for this purpose.",
            "itemtype": "method",
            "name": "deferReadiness",
            "return": {
                "description": ""
            },
            "class": "Ember.Application",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 19527,
            "description": "Call `advanceReadiness` after any asynchronous setup logic has completed.\nEach call to `deferReadiness` must be matched by a call to `advanceReadiness`\nor the application will never become ready and routing will not begin.",
            "see": [
                "{Ember.Application#deferReadiness}"
            ],
            "itemtype": "method",
            "name": "advanceReadiness",
            "return": {
                "description": ""
            },
            "class": "Ember.Application",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 19544,
            "description": "Registers a factory that can be used for dependency injection (with\n`App.inject`) or for service lookup. Each factory is registered with\na full name including two parts: `type:name`.\nA simple example:\n```javascript\nvar App = Ember.Application.create();\nApp.Orange  = Ember.Object.extend();\nApp.register('fruit:favorite', App.Orange);\n```\nEmber will resolve factories from the `App` namespace automatically.\nFor example `App.CarsController` will be discovered and returned if\nan application requests `controller:cars`.\nAn example of registering a controller with a non-standard name:\n```javascript\nvar App = Ember.Application.create(),\nSession  = Ember.Controller.extend();\nApp.register('controller:session', Session);\n// The Session controller can now be treated like a normal controller,\n// despite its non-standard name.\nApp.ApplicationController = Ember.Controller.extend({\nneeds: ['session']\n});\n```\nRegistered factories are **instantiated** by having `create`\ncalled on them. Additionally they are **singletons**, each time\nthey are looked up they return the same instance.\nSome examples modifying that default behavior:\n```javascript\nvar App = Ember.Application.create();\nApp.Person  = Ember.Object.extend();\nApp.Orange  = Ember.Object.extend();\nApp.Email   = Ember.Object.extend();\nApp.session = Ember.Object.create();\nApp.register('model:user', App.Person, {singleton: false });\nApp.register('fruit:favorite', App.Orange);\nApp.register('communication:main', App.Email, {singleton: false});\nApp.register('session', App.session, {instantiate: false});\n```",
            "itemtype": "method",
            "name": "register",
            "return": {
                "description": ""
            },
            "class": "Ember.Application",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 19591,
            "description": "Define a dependency injection onto a specific factory or all factories\nof a type.\nWhen Ember instantiates a controller, view, or other framework component\nit can attach a dependency to that component. This is often used to\nprovide services to a set of framework components.\nAn example of providing a session object to all controllers:\n```javascript\nvar App = Ember.Application.create(),\nSession = Ember.Object.extend({ isAuthenticated: false });\n// A factory must be registered before it can be injected\nApp.register('session:main', Session);\n// Inject 'session:main' onto all factories of the type 'controller'\n// with the name 'session'\nApp.inject('controller', 'session', 'session:main');\nApp.IndexController = Ember.Controller.extend({\nisLoggedIn: Ember.computed.alias('session.isAuthenticated')\n});\n```\nInjections can also be performed on specific factories.\n```javascript\nApp.inject(<full_name or type>, <property name>, <full_name>)\nApp.inject('route', 'source', 'source:main')\nApp.inject('route:application', 'email', 'model:email')\n```\nIt is important to note that injections can only be performed on\nclasses that are instantiated by Ember itself. Instantiating a class\ndirectly (via `create` or `new`) bypasses the dependency injection\nsystem.\nEmber-Data instantiates its models in a unique manner, and consequently\ninjections onto models (or all models) will not work as expected. Injections\non models can be enabled by setting `Ember.MODEL_FACTORY_INJECTIONS`\nto `true`.",
            "itemtype": "method",
            "name": "inject",
            "return": {
                "description": ""
            },
            "class": "Ember.Application",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 19632,
            "description": "Calling initialize manually is not supported.\nPlease see Ember.Application#advanceReadiness and\nEmber.Application#deferReadiness.",
            "access": "private",
            "tagname": "",
            "deprecated": true,
            "itemtype": "method",
            "name": "initialize",
            "return": {
                "description": ""
            },
            "class": "Ember.Application",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 19645,
            "description": "Initialize the application. This happens automatically.\n\nRun any initializers and run the application load hook. These hooks may\nchoose to defer readiness. For example, an authentication hook might want\nto defer readiness until the auth token has been retrieved.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_initialize",
            "class": "Ember.Application",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 19676,
            "description": "Reset the application. This is typically used only in tests. It cleans up\nthe application in the following order:\n1. Deactivate existing routes\n2. Destroy all objects in the container\n3. Create a new application container\n4. Re-route to the existing url\nTypical Example:\n```javascript\nvar App;\nrun(function() {\nApp = Ember.Application.create();\n});\nmodule(\"acceptance test\", {\nsetup: function() {\nApp.reset();\n}\n});\ntest(\"first test\", function() {\n// App is freshly reset\n});\ntest(\"first test\", function() {\n// App is again freshly reset\n});\n```\nAdvanced Example:\nOccasionally you may want to prevent the app from initializing during\nsetup. This could enable extra configuration, or enable asserting prior\nto the app becoming ready.\n```javascript\nvar App;\nrun(function() {\nApp = Ember.Application.create();\n});\nmodule(\"acceptance test\", {\nsetup: function() {\nrun(function() {\nApp.reset();\nApp.deferReadiness();\n});\n}\n});\ntest(\"first test\", function() {\nok(true, 'something before app is initialized');\nrun(function() {\nApp.advanceReadiness();\n});\nok(true, 'something after app is initialized');\n});\n```",
            "itemtype": "method",
            "name": "reset",
            "return": {
                "description": ""
            },
            "class": "Ember.Application",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 19732,
            "description": "Description",
            "itemtype": "method",
            "name": "handleReset",
            "return": {
                "description": ""
            },
            "class": "Ember.Application",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 19753,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "runInitializers",
            "return": {
                "description": ""
            },
            "class": "Ember.Application",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 19777,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "didBecomeReady",
            "return": {
                "description": ""
            },
            "class": "Ember.Application",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 19796,
            "description": "Setup up the event dispatcher to receive events on the\napplication's `rootElement` with any registered\n`customEvents`.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "setupEventDispatcher",
            "return": {
                "description": ""
            },
            "class": "Ember.Application",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 19813,
            "description": "If the application has a router, use it to route to the current URL, and\ntrigger a new call to `route` whenever the URL changes.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "startRouting",
            "type": "Ember.Router",
            "return": {
                "description": ""
            },
            "class": "Ember.Application",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 19828,
            "description": "Description",
            "itemtype": "method",
            "name": "handleURL",
            "params": [
                {
                    "name": "url",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Application",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 19840,
            "description": "Called when the Application has become ready.\nThe call will be delayed until the DOM has become ready.",
            "itemtype": "event",
            "name": "ready",
            "class": "Ember.Application",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 19848,
            "deprecated": true,
            "deprecationMessage": "Use 'Resolver' instead\nSet this to provide an alternate class to `Ember.DefaultResolver`",
            "itemtype": "property",
            "name": "resolver",
            "class": "Ember.Application",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 19857,
            "description": "Set this to provide an alternate class to `Ember.DefaultResolver`",
            "itemtype": "property",
            "name": "resolver",
            "class": "Ember.Application",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 19864,
            "description": "Description",
            "itemtype": "method",
            "name": "willDestroy",
            "return": {
                "description": ""
            },
            "class": "Ember.Application",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 19877,
            "description": "Description",
            "itemtype": "method",
            "name": "initializer",
            "params": [
                {
                    "name": "options",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Application",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 19887,
            "access": "private",
            "tagname": "",
            "deprecated": true,
            "itemtype": "method",
            "name": "then",
            "return": {
                "description": ""
            },
            "class": "Ember.Application",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 19903,
            "description": "Initializer receives an object which has the following attributes:\n`name`, `before`, `after`, `initialize`. The only required attribute is\n`initialize, all others are optional.\n`name` allows you to specify under which name the initializer is registered.\nThis must be a unique name, as trying to register two initializers with the\nsame name will result in an error.\n```javascript\nEmber.Application.initializer({\nname: 'namedInitializer',\ninitialize: function(container, application) {\nEmber.debug(\"Running namedInitializer!\");\n}\n});\n```\n`before` and `after` are used to ensure that this initializer is ran prior\nor after the one identified by the value. This value can be a single string\nor an array of strings, referencing the `name` of other initializers.\nAn example of ordering initializers, we create an initializer named `first`:\n```javascript\nEmber.Application.initializer({\nname: 'first',\ninitialize: function(container, application) {\nEmber.debug(\"First initializer!\");\n}\n});\n// DEBUG: First initializer!\n```\nWe add another initializer named `second`, specifying that it should run\nafter the initializer named `first`:\n```javascript\nEmber.Application.initializer({\nname: 'second',\nafter: 'first',\ninitialize: function(container, application) {\nEmber.debug(\"Second initializer!\");\n}\n});\n// DEBUG: First initializer!\n// DEBUG: Second initializer!\n```\nAfterwards we add a further initializer named `pre`, this time specifying\nthat it should run before the initializer named `first`:\n```javascript\nEmber.Application.initializer({\nname: 'pre',\nbefore: 'first',\ninitialize: function(container, application) {\nEmber.debug(\"Pre initializer!\");\n}\n});\n// DEBUG: Pre initializer!\n// DEBUG: First initializer!\n// DEBUG: Second initializer!\n```\nFinally we add an initializer named `post`, specifying it should run after\nboth the `first` and the `second` initializers:\n```javascript\nEmber.Application.initializer({\nname: 'post',\nafter: ['first', 'second'],\ninitialize: function(container, application) {\nEmber.debug(\"Post initializer!\");\n}\n});\n// DEBUG: Pre initializer!\n// DEBUG: First initializer!\n// DEBUG: Second initializer!\n// DEBUG: Post initializer!\n```\n`initialize` is a callback function that receives two arguments, `container`\nand `application` on which you can operate.\nExample of using `container` to preload data into the store:\n```javascript\nEmber.Application.initializer({\nname: \"preload-data\",\ninitialize: function(container, application) {\nvar store = container.lookup('store:main');\nstore.pushPayload(preloadedData);\n}\n});\n```\nExample of using `application` to register an adapter:\n```javascript\nEmber.Application.initializer({\nname: 'api-adapter',\ninitialize: function(container, application) {\napplication.register('api-adapter:main', ApiAdapter);\n}\n});\n```",
            "itemtype": "method",
            "name": "initializer",
            "params": [
                {
                    "name": "initializer",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Application",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 20015,
            "description": "This creates a container with the default Ember naming conventions.\nIt also configures the container:\nregistered views are created every time they are looked up (they are\nnot singletons)\nregistered templates are not factories; the registered value is\nreturned directly.\nthe router receives the application as its `namespace` property\nall controllers receive the router as their `target` and `controllers`\nproperties\nall controllers receive the application as their `namespace` property\nthe application view receives the application controller as its\n`controller` property\nthe application view receives the application template as its\n`defaultTemplate` property",
            "access": "private",
            "tagname": "",
            "static": "container for.",
            "itemtype": "method",
            "name": "buildContainer",
            "params": [
                {
                    "name": "namespace",
                    "description": ""
                }
            ],
            "return": {
                "description": "container"
            },
            "class": "Ember.Application",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 20092,
            "description": "This function defines the default lookup rules for container lookups:\ntemplates are looked up on `Ember.TEMPLATES`\nother names are looked up on the application after classifying the name.\nFor example, `controller:post` looks up `App.PostController` by default.\nif the default lookup fails, look for registered classes on the container\nThis allows the application to register default injections in the container\nthat could be overridden by the normal naming convention.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "resolverFor",
            "params": [
                {
                    "name": "namespace",
                    "description": ""
                }
            ],
            "return": {
                "description": "resolve"
            },
            "class": "Ember.Application",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 20115,
            "description": "Description",
            "itemtype": "method",
            "name": "resolve",
            "params": [
                {
                    "name": "fullName",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Application",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 20125,
            "description": "Description",
            "itemtype": "method",
            "name": "describe",
            "params": [
                {
                    "name": "fullName",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Application",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 20135,
            "description": "Description",
            "itemtype": "method",
            "name": "makeToString",
            "params": [
                {
                    "name": "factory",
                    "description": ""
                },
                {
                    "name": "fullName",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Application",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 20146,
            "description": "Description",
            "itemtype": "method",
            "name": "normalize",
            "params": [
                {
                    "name": "fullName",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Application",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 20174,
            "description": "Description",
            "itemtype": "method",
            "name": "visit",
            "params": [
                {
                    "name": "vertex",
                    "description": ""
                },
                {
                    "name": "fn",
                    "description": ""
                },
                {
                    "name": "visited",
                    "description": ""
                },
                {
                    "name": "path",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Application",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 20223,
            "description": "Adds a vertex entry to the graph unless it is already added.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the vertex to add",
                    "type": "String"
                }
            ],
            "return": {
                "description": "vertex"
            },
            "class": "Ember.DAG",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 20243,
            "description": "Adds a vertex to the graph and sets its value.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "map",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the vertex.",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The value to put in the vertex."
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.DAG",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 20255,
            "description": "Connects the vertices with the given names, adding them to the graph if\nnecesary, only if this does not produce is any circular dependency.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "addEdge",
            "params": [
                {
                    "name": "fromName",
                    "description": "The name the vertex where the edge starts.",
                    "type": "String"
                },
                {
                    "name": "toName",
                    "description": "The name the vertex where the edge ends.",
                    "type": "String"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.DAG",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 20272,
            "description": "Description",
            "itemtype": "method",
            "name": "checkCycle",
            "params": [
                {
                    "name": "vertex",
                    "description": ""
                },
                {
                    "name": "path",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.DAG",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 20290,
            "description": "Visits all the vertex of the graph calling the given function with each one,\nensuring that the vertices are visited respecting their precedence.",
            "itemtype": "method",
            "name": "topsort",
            "params": [
                {
                    "name": "fn",
                    "description": "The function to be invoked on each vertex.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.DAG",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 20312,
            "description": "Adds a vertex with the given name and value to the graph and joins it with the\nvertices referenced in _before_ and _after_. If there isn't vertices with those\nnames, they are added too.\nIf either _before_ or _after_ are falsy/empty, the added vertex will not have\nan incoming/outgoing edge.\n                     which this vertex must be visited.\n                     which this vertex must be visited.",
            "itemtype": "method",
            "name": "addEdges",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the vertex to be added.",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The value of that vertex."
                },
                {
                    "name": "before",
                    "description": "An string or array of strings with the names of the vertices before"
                },
                {
                    "name": "after",
                    "description": "An string or array of strings with the names of the vertex after"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.DAG",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 20373,
            "description": "This will be set to the Application instance when it is\ncreated.",
            "itemtype": "property",
            "name": "namespace",
            "class": "Ember.DAG",
            "module": "ember",
            "submodule": "ember-application"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 20461,
            "description": "This will be set to the Application instance when it is\ncreated.",
            "itemtype": "property",
            "name": "namespace",
            "class": "Ember.DefaultResolver",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 20469,
            "description": "Description",
            "itemtype": "method",
            "name": "normalize",
            "params": [
                {
                    "name": "fullName",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.DefaultResolver",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 20500,
            "description": "This method is called via the container's resolver method.\nIt parses the provided `fullName` and then looks up and\nreturns the appropriate template or class.",
            "itemtype": "method",
            "name": "resolve",
            "params": [
                {
                    "name": "fullName",
                    "description": "the lookup string",
                    "type": "String"
                }
            ],
            "return": {
                "description": "resolved"
            },
            "class": "Ember.DefaultResolver",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 20531,
            "description": "Convert the string name of the form 'type:name' to\na Javascript object with the parsed aspects of the name\nbroken out.",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "parseName",
            "params": [
                {
                    "name": "fullName",
                    "description": "the lookup string",
                    "type": "String"
                }
            ],
            "return": {
                "description": "ObjectExpression"
            },
            "class": "Ember.DefaultResolver",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 20566,
            "description": "Returns a human-readable description for a fullName. Used by the\nApplication namespace in assertions to describe the\nprecise name of the class that Ember is looking for, rather than\ncontainer keys.",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "lookupDescription",
            "params": [
                {
                    "name": "fullName",
                    "description": "the lookup string",
                    "type": "String"
                }
            ],
            "return": {
                "description": "description"
            },
            "class": "Ember.DefaultResolver",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 20589,
            "description": "Description",
            "itemtype": "method",
            "name": "makeToString",
            "params": [
                {
                    "name": "factory",
                    "description": ""
                },
                {
                    "name": "fullName",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.DefaultResolver",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 20599,
            "description": "Given a parseName object (output from `parseName`), apply\nthe conventions expected by `Ember.Router`",
            "access": "protected",
            "tagname": "fullName lookup string",
            "itemtype": "method",
            "name": "useRouterNaming",
            "params": [
                {
                    "name": "parsedName",
                    "description": "a parseName object with the parsed",
                    "type": "Object"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.DefaultResolver",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 20614,
            "description": "Look up the template in Ember.TEMPLATES",
            "access": "protected",
            "tagname": "fullName lookup string",
            "itemtype": "method",
            "name": "resolveTemplate",
            "params": [
                {
                    "name": "parsedName",
                    "description": "a parseName object with the parsed",
                    "type": "Object"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.DefaultResolver",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 20634,
            "description": "Lookup the view using `resolveOther`",
            "access": "protected",
            "tagname": "fullName lookup string",
            "itemtype": "method",
            "name": "resolveView",
            "params": [
                {
                    "name": "parsedName",
                    "description": "a parseName object with the parsed",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.DefaultResolver",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 20646,
            "description": "Lookup the controller using `resolveOther`",
            "access": "protected",
            "tagname": "fullName lookup string",
            "itemtype": "method",
            "name": "resolveController",
            "params": [
                {
                    "name": "parsedName",
                    "description": "a parseName object with the parsed",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.DefaultResolver",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 20658,
            "description": "Lookup the route using `resolveOther`",
            "access": "protected",
            "tagname": "fullName lookup string",
            "itemtype": "method",
            "name": "resolveRoute",
            "params": [
                {
                    "name": "parsedName",
                    "description": "a parseName object with the parsed",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.DefaultResolver",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 20671,
            "description": "Lookup the model on the Application namespace",
            "access": "protected",
            "tagname": "fullName lookup string",
            "itemtype": "method",
            "name": "resolveModel",
            "params": [
                {
                    "name": "parsedName",
                    "description": "a parseName object with the parsed",
                    "type": "Object"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.DefaultResolver",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 20685,
            "description": "Look up the specified object (from parsedName) on the appropriate\nnamespace (usually on the Application)",
            "access": "protected",
            "tagname": "fullName lookup string",
            "itemtype": "method",
            "name": "resolveHelper",
            "params": [
                {
                    "name": "parsedName",
                    "description": "a parseName object with the parsed",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "LogicalExpression"
            },
            "class": "Ember.DefaultResolver",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 20697,
            "description": "Look up the specified object (from parsedName) on the appropriate\nnamespace (usually on the Application)",
            "access": "protected",
            "tagname": "fullName lookup string",
            "itemtype": "method",
            "name": "resolveOther",
            "params": [
                {
                    "name": "parsedName",
                    "description": "a parseName object with the parsed",
                    "type": "Object"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.DefaultResolver",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 20712,
            "itemtype": "method",
            "name": "_logLookup",
            "params": [
                {
                    "name": "found",
                    "description": "",
                    "type": "Boolean"
                },
                {
                    "name": "parsedName",
                    "description": "",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Ember.DefaultResolver",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 20755,
            "description": "Define an assertion that will throw an exception if the condition is not\nmet. Ember build tools will remove any calls to `Ember.assert()` when\ndoing a production build. Example:\n```javascript\n// Test for truthiness\nEmber.assert('Must pass a valid object', obj);\n// Fail unconditionally\nEmber.assert('This code path should never be run');\n```\nthe text of the Error thrown if the assertion fails.\nfalsy, an exception will be thrown.",
            "itemtype": "method",
            "name": "assert",
            "params": [
                {
                    "name": "desc",
                    "description": "A description of the assertion. This will become",
                    "type": "String"
                },
                {
                    "name": "test",
                    "description": "Must be truthy for the assertion to pass. If",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember",
            "module": "ember",
            "submodule": "ember-debug"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 20779,
            "description": "Display a warning with the provided message. Ember build tools will\nremove any calls to `Ember.warn()` when doing a production build.\nwill be displayed.",
            "itemtype": "method",
            "name": "warn",
            "params": [
                {
                    "name": "message",
                    "description": "A warning to display.",
                    "type": "String"
                },
                {
                    "name": "test",
                    "description": "An optional boolean. If falsy, the warning",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember",
            "module": "ember",
            "submodule": "ember-debug"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 20795,
            "description": "Display a debug notice. Ember build tools will remove any calls to\n`Ember.debug()` when doing a production build.\n```javascript\nEmber.debug('I\\'m a debug notice!');\n```",
            "itemtype": "method",
            "name": "debug",
            "params": [
                {
                    "name": "message",
                    "description": "A debug message to display.",
                    "type": "String"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember",
            "module": "ember",
            "submodule": "ember-debug"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 20809,
            "description": "Display a deprecation warning with the provided message and a stack trace\n(Chrome and Firefox only). Ember build tools will remove any calls to\n`Ember.deprecate()` when doing a production build.\nwill be displayed.",
            "itemtype": "method",
            "name": "deprecate",
            "params": [
                {
                    "name": "message",
                    "description": "A description of the deprecation.",
                    "type": "String"
                },
                {
                    "name": "test",
                    "description": "An optional boolean. If falsy, the deprecation",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember",
            "module": "ember",
            "submodule": "ember-debug"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 20852,
            "description": "Alias an old, deprecated method with its new counterpart.\nDisplay a deprecation warning with the provided message and a stack trace\n(Chrome and Firefox only) when the assigned method is called.\nEmber build tools will not remove calls to `Ember.deprecateFunc()`, though\nno warnings will be shown in production.\n```javascript\nEmber.oldMethod = Ember.deprecateFunc('Please use the new, updated method', Ember.newMethod);\n```",
            "itemtype": "method",
            "name": "deprecateFunc",
            "params": [
                {
                    "name": "message",
                    "description": "A description of the deprecation.",
                    "type": "String"
                },
                {
                    "name": "func",
                    "description": "The new function called to replace its deprecated counterpart.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "FunctionExpression"
            },
            "class": "Ember",
            "module": "ember",
            "submodule": "ember-debug"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 20874,
            "description": "Run a function meant for debugging. Ember build tools will remove any calls to\n`Ember.runInDebug()` when doing a production build.\n```javascript\nEmber.runInDebug(function() {\nEmber.Handlebars.EachView.reopen({\ndidInsertElement: function() {\nconsole.log('I\\'m happy');\n}\n});\n});\n```",
            "since": "1.5.0",
            "itemtype": "method",
            "name": "runInDebug",
            "params": [
                {
                    "name": "func",
                    "description": "The function to be executed.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember",
            "module": "ember",
            "submodule": "ember-debug"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 20988,
            "description": "The container of the application being debugged.\nThis property will be injected\non creation.",
            "itemtype": "property",
            "name": "container",
            "default": "null",
            "class": "Ember.ContainerDebugAdapter",
            "module": "ember",
            "submodule": "ember-extension-support",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 20998,
            "description": "The resolver instance of the application\nbeing debugged. This property will be injected\non creation.",
            "itemtype": "property",
            "name": "resolver",
            "default": "null",
            "class": "Ember.ContainerDebugAdapter",
            "module": "ember",
            "submodule": "ember-extension-support",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 21008,
            "description": "Returns true if it is possible to catalog a list of available\nclasses in the resolver for a given type.",
            "itemtype": "method",
            "name": "canCatalogEntriesByType",
            "params": [
                {
                    "name": "type",
                    "description": "The type. e.g. \"model\", \"controller\", \"route\"",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Literal"
            },
            "class": "Ember.ContainerDebugAdapter",
            "module": "ember",
            "submodule": "ember-extension-support",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 21020,
            "description": "Returns the available classes a given type.",
            "itemtype": "method",
            "name": "catalogEntriesByType",
            "params": [
                {
                    "name": "type",
                    "description": "The type. e.g. \"model\", \"controller\", \"route\"",
                    "type": "String"
                }
            ],
            "return": {
                "description": "types"
            },
            "class": "Ember.ContainerDebugAdapter",
            "module": "ember",
            "submodule": "ember-extension-support",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 21107,
            "description": "Description",
            "itemtype": "method",
            "name": "init",
            "return": {
                "description": ""
            },
            "class": "Ember.DataAdapter",
            "module": "ember",
            "submodule": "ember-extension-support",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 21117,
            "description": "The container of the application being debugged.\nThis property will be injected\non creation.",
            "itemtype": "property",
            "name": "container",
            "default": "null",
            "since": "1.3.0",
            "class": "Ember.DataAdapter",
            "module": "ember",
            "submodule": "ember-extension-support",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 21129,
            "description": "The container-debug-adapter which is used\nto list all models.",
            "itemtype": "property",
            "name": "containerDebugAdapter",
            "default": "undefined",
            "since": "1.5.0",
            "class": "Ember.DataAdapter",
            "module": "ember",
            "submodule": "ember-extension-support",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 21139,
            "description": "Number of attributes to send\nas columns. (Enough to make the record\nidentifiable).",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "attributeLimit",
            "default": "3",
            "since": "1.3.0",
            "class": "Ember.DataAdapter",
            "module": "ember",
            "submodule": "ember-extension-support",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 21151,
            "description": "Stores all methods that clear observers.\nThese methods will be called on destruction.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "releaseMethods",
            "since": "1.3.0",
            "class": "Ember.DataAdapter",
            "module": "ember",
            "submodule": "ember-extension-support",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 21161,
            "description": "Specifies how records can be filtered.\nRecords returned will need to have a `filterValues`\nproperty with a key for every name in the returned array.",
            "access": "public",
            "tagname": "The object should have a `name` and `desc` property.",
            "itemtype": "method",
            "name": "getFilters",
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.DataAdapter",
            "module": "ember",
            "submodule": "ember-extension-support",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 21174,
            "description": "Fetch the model types and observe them for changes.",
            "access": "public",
            "tagname": "Takes an array of objects containing wrapped types (returned from `wrapModelType`).\nTakes an array of objects containing wrapped types.",
            "itemtype": "method",
            "name": "watchModelTypes",
            "params": [
                {
                    "name": "typesAdded",
                    "description": "Callback to call to add types.",
                    "type": "Function"
                },
                {
                    "name": "typesUpdated",
                    "description": "Callback to call when a type has changed.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "release"
            },
            "class": "Ember.DataAdapter",
            "module": "ember",
            "submodule": "ember-extension-support",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 21197,
            "description": "Description",
            "itemtype": "method",
            "name": "release",
            "return": {
                "description": ""
            },
            "class": "Ember.DataAdapter",
            "module": "ember",
            "submodule": "ember-extension-support",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 21217,
            "description": "Fetch the records of a given type and observe them for changes.",
            "access": "public",
            "tagname": "Takes an array of objects containing wrapped records.\nThe object should have the following properties:\ncolumnValues: {Object} key and value of a table cell\nobject: {Object} the actual record object\nTakes an array of objects containing wrapped records.\nTakes the following parameters:\nindex: the array index where the records were removed\ncount: the number of records removed",
            "itemtype": "method",
            "name": "watchRecords",
            "params": [
                {
                    "name": "type",
                    "description": ""
                },
                {
                    "name": "recordsAdded",
                    "description": "Callback to call to add records.",
                    "type": "Function"
                },
                {
                    "name": "recordsUpdated",
                    "description": "Callback to call when a record has changed.",
                    "type": "Function"
                },
                {
                    "name": "recordsRemoved",
                    "description": "Callback to call when a record has removed.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "release"
            },
            "class": "Ember.DataAdapter",
            "module": "ember",
            "submodule": "ember-extension-support",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 21238,
            "description": "Description",
            "itemtype": "method",
            "name": "recordUpdated",
            "params": [
                {
                    "name": "updatedRecord",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.DataAdapter",
            "module": "ember",
            "submodule": "ember-extension-support",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 21254,
            "description": "Description",
            "itemtype": "method",
            "name": "contentDidChange",
            "params": [
                {
                    "name": "array",
                    "description": ""
                },
                {
                    "name": "idx",
                    "description": ""
                },
                {
                    "name": "removedCount",
                    "description": ""
                },
                {
                    "name": "addedCount",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.DataAdapter",
            "module": "ember",
            "submodule": "ember-extension-support",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 21279,
            "description": "Description",
            "return": {
                "description": ""
            },
            "class": "Ember.DataAdapter",
            "module": "ember",
            "submodule": "ember-extension-support",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 21295,
            "description": "Clear all observers before destruction",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "willDestroy",
            "return": {
                "description": ""
            },
            "class": "Ember.DataAdapter",
            "module": "ember",
            "submodule": "ember-extension-support",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 21308,
            "description": "Detect whether a class is a model.\nTest that against the model class\nof your persistence library",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "detect",
            "params": [
                {
                    "name": "klass",
                    "description": "The class to test",
                    "type": "Class"
                }
            ],
            "return": {
                "description": "Literal"
            },
            "class": "Ember.DataAdapter",
            "module": "ember",
            "submodule": "ember-extension-support",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 21321,
            "description": "Get the columns for a given model type.",
            "access": "private",
            "tagname": "name: {String} name of the column\ndesc: {String} Humanized description (what would show in a table column name)",
            "itemtype": "method",
            "name": "columnsForType",
            "params": [
                {
                    "name": "type",
                    "description": "The model type",
                    "type": "Class"
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.DataAdapter",
            "module": "ember",
            "submodule": "ember-extension-support",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 21334,
            "description": "Adds observers to a model type class.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "observeModelType",
            "params": [
                {
                    "name": "type",
                    "description": "The model type class",
                    "type": "Class"
                },
                {
                    "name": "typesUpdated",
                    "description": "Called when a type is modified.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "release"
            },
            "class": "Ember.DataAdapter",
            "module": "ember",
            "submodule": "ember-extension-support",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 21345,
            "description": "Description",
            "itemtype": "method",
            "name": "onChange",
            "return": {
                "description": ""
            },
            "class": "Ember.DataAdapter",
            "module": "ember",
            "submodule": "ember-extension-support",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 21354,
            "description": "Description",
            "itemtype": "method",
            "name": "didChange",
            "return": {
                "description": ""
            },
            "class": "Ember.DataAdapter",
            "module": "ember",
            "submodule": "ember-extension-support",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 21367,
            "description": "Description",
            "itemtype": "method",
            "name": "release",
            "return": {
                "description": ""
            },
            "class": "Ember.DataAdapter",
            "module": "ember",
            "submodule": "ember-extension-support",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 21380,
            "description": "Wraps a given model type and observes changes to it.",
            "access": "private",
            "tagname": "Format:\ntype: {Object} the wrapped type\nThe wrapped type has the following format:\nname: {String} name of the type\ncount: {Integer} number of records available\ncolumns: {Columns} array of columns to describe the record\nobject: {Class} the actual Model type class\nrelease: {Function} The function to remove observers",
            "itemtype": "method",
            "name": "wrapModelType",
            "params": [
                {
                    "name": "type",
                    "description": "A model class",
                    "type": "Class"
                },
                {
                    "name": "name",
                    "description": ""
                }
            ],
            "return": {
                "description": "typeToSend"
            },
            "class": "Ember.DataAdapter",
            "module": "ember",
            "submodule": "ember-extension-support",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 21412,
            "description": "Fetches all models defined in the application.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "getModelTypes",
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.DataAdapter",
            "module": "ember",
            "submodule": "ember-extension-support",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 21442,
            "description": "Loops over all namespaces and all objects\nattached to them",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_getObjectsOnNamespaces",
            "return": {
                "description": "Array of model type strings",
                "type": "Array"
            },
            "class": "Ember.DataAdapter",
            "module": "ember",
            "submodule": "ember-extension-support",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 21472,
            "description": "Fetches all loaded records for a given type.",
            "access": "private",
            "tagname": "This array will be observed for changes,\nso it should update when new records are added/removed.",
            "itemtype": "method",
            "name": "getRecords",
            "params": [
                {
                    "name": "type",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.DataAdapter",
            "module": "ember",
            "submodule": "ember-extension-support",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 21485,
            "description": "Wraps a record and observers changes to it.",
            "access": "private",
            "tagname": "columnValues: {Array}\nsearchKeywords: {Array}",
            "itemtype": "method",
            "name": "wrapRecord",
            "params": [
                {
                    "name": "record",
                    "description": "The record instance.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "recordToSend"
            },
            "class": "Ember.DataAdapter",
            "module": "ember",
            "submodule": "ember-extension-support",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 21505,
            "description": "Gets the values for each column.",
            "access": "private",
            "tagname": "by the model type.",
            "itemtype": "method",
            "name": "getRecordColumnValues",
            "params": [
                {
                    "name": "record",
                    "description": ""
                }
            ],
            "return": {
                "description": "ObjectExpression"
            },
            "class": "Ember.DataAdapter",
            "module": "ember",
            "submodule": "ember-extension-support",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 21517,
            "description": "Returns keywords to match when searching records.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "getRecordKeywords",
            "params": [
                {
                    "name": "record",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.DataAdapter",
            "module": "ember",
            "submodule": "ember-extension-support",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 21528,
            "description": "Returns the values of filters defined by `getFilters`.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "getRecordFilterValues",
            "params": [
                {
                    "name": "record",
                    "description": "The record instance",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "ObjectExpression"
            },
            "class": "Ember.DataAdapter",
            "module": "ember",
            "submodule": "ember-extension-support",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 21539,
            "description": "Each record can have a color that represents its state.",
            "access": "private",
            "tagname": "Possible options: black, red, blue, green",
            "itemtype": "method",
            "name": "getRecordColor",
            "params": [
                {
                    "name": "record",
                    "description": "The record instance",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Literal"
            },
            "class": "Ember.DataAdapter",
            "module": "ember",
            "submodule": "ember-extension-support",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 21551,
            "description": "Observes all relevant properties and re-sends the wrapped record\nwhen a change occurs.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "observeRecord",
            "params": [
                {
                    "name": "record",
                    "description": "The record instance",
                    "type": "Object"
                },
                {
                    "name": "recordUpdated",
                    "description": "The callback to call when a record is updated.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "FunctionExpression"
            },
            "class": "Ember.DataAdapter",
            "module": "ember",
            "submodule": "ember-extension-support",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 21586,
            "description": "Description",
            "itemtype": "method",
            "name": "assert",
            "return": {
                "description": ""
            },
            "class": "Ember.DataAdapter",
            "module": "ember",
            "submodule": "ember-handlebars-compiler"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 21593,
            "description": "Description",
            "itemtype": "method",
            "name": "isEnabled",
            "return": {
                "description": ""
            },
            "class": "Ember.DataAdapter",
            "module": "ember",
            "submodule": "ember-handlebars-compiler"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 21601,
            "description": "Description",
            "itemtype": "method",
            "name": "F",
            "return": {
                "description": ""
            },
            "class": "Ember.DataAdapter",
            "module": "ember",
            "submodule": "ember-handlebars-compiler"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 21646,
            "description": "Register a bound helper or custom view helper.\n## Simple bound helper example\n```javascript\nEmber.Handlebars.helper('capitalize', function(value) {\nreturn value.toUpperCase();\n});\n```\nThe above bound helper can be used inside of templates as follows:\n```handlebars\n{{capitalize name}}\n```\nIn this case, when the `name` property of the template's context changes,\nthe rendered value of the helper will update to reflect this change.\nFor more examples of bound helpers, see documentation for\n`Ember.Handlebars.registerBoundHelper`.\n## Custom view helper example\nAssuming a view subclass named `App.CalendarView` were defined, a helper\nfor rendering instances of this view could be registered as follows:\n```javascript\nEmber.Handlebars.helper('calendar', App.CalendarView):\n```\nThe above bound helper can be used inside of templates as follows:\n```handlebars\n{{calendar}}\n```\nWhich is functionally equivalent to:\n```handlebars\n{{view App.CalendarView}}\n```\nOptions in the helper will be passed to the view in exactly the same\nmanner as with the `view` helper.",
            "itemtype": "method",
            "name": "helper",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Handlebars",
            "module": "ember",
            "submodule": "ember-handlebars-compiler",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 21697,
            "description": "Returns a helper function that renders the provided ViewClass.\nUsed internally by Ember.Handlebars.helper and other methods\ninvolving helper/component registration.",
            "access": "private",
            "tagname": "",
            "since": "1.2.0",
            "itemtype": "method",
            "name": "makeViewHelper",
            "params": [
                {
                    "name": "ViewClass",
                    "description": "view class constructor",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "FunctionExpression"
            },
            "class": "Ember.Handlebars",
            "module": "ember",
            "submodule": "ember-handlebars-compiler",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 21758,
            "description": "Description",
            "itemtype": "method",
            "name": "initializeBuffer",
            "return": {
                "description": "Literal"
            },
            "class": "Ember.Handlebars.JavaScriptCompiler",
            "module": "ember",
            "submodule": "ember-handlebars-compiler",
            "namespace": "Ember.Handlebars"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 21767,
            "description": "Override the default buffer for Ember Handlebars. By default, Handlebars\ncreates an empty String at the beginning of each invocation and appends to\nit. Ember's Handlebars overrides this to append to a single shared buffer.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "appendToBuffer",
            "params": [
                {
                    "name": "string",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "BinaryExpression"
            },
            "class": "Ember.Handlebars.JavaScriptCompiler",
            "module": "ember",
            "submodule": "ember-handlebars-compiler",
            "namespace": "Ember.Handlebars"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 21796,
            "description": "Description",
            "itemtype": "method",
            "name": "stringifyLastBlockHelperMissingInvocation",
            "params": [
                {
                    "name": "source",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Handlebars.JavaScriptCompiler",
            "module": "ember",
            "submodule": "ember-handlebars-compiler",
            "namespace": "Ember.Handlebars"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 21813,
            "description": "Description",
            "itemtype": "method",
            "name": "blockValue",
            "return": {
                "description": ""
            },
            "class": "Ember.Handlebars.JavaScriptCompiler",
            "module": "ember",
            "submodule": "ember-handlebars-compiler",
            "namespace": "Ember.Handlebars"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 21824,
            "description": "Description",
            "itemtype": "method",
            "name": "ambiguousBlockValue",
            "return": {
                "description": ""
            },
            "class": "Ember.Handlebars.JavaScriptCompiler",
            "module": "ember",
            "submodule": "ember-handlebars-compiler",
            "namespace": "Ember.Handlebars"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 21834,
            "description": "Rewrite simple mustaches from `{{foo}}` to `{{bind \"foo\"}}`. This means that\nall simple mustaches in Ember's Handlebars will also set up an observer to\nkeep the DOM up to date when the underlying property changes.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "mustache",
            "params": [
                {
                    "name": "mustache",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Handlebars.Compiler",
            "module": "ember",
            "submodule": "ember-handlebars-compiler",
            "namespace": "Ember.Handlebars"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 21861,
            "description": "Used for precompilation of Ember Handlebars templates. This will not be used\nduring normal app execution.",
            "static": "compiled template should be returned as an Object or a String",
            "itemtype": "method",
            "name": "precompile",
            "params": [
                {
                    "name": "string",
                    "description": "The template to precompile",
                    "type": "String"
                },
                {
                    "name": "asObject",
                    "description": "optional parameter, defaulting to true, of whether or not the",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Handlebars",
            "module": "ember",
            "submodule": "ember-handlebars-compiler",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 21896,
            "description": "The entry point for Ember Handlebars. This replaces the default\n`Handlebars.compile` and turns on template-local data and String\nparameters.",
            "static": 1,
            "itemtype": "method",
            "name": "compile",
            "params": [
                {
                    "name": "string",
                    "description": "The template to compile",
                    "type": "String"
                }
            ],
            "return": {
                "description": "template"
            },
            "class": "Ember.Handlebars",
            "module": "ember",
            "submodule": "ember-handlebars-compiler",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 22079,
            "description": "Description",
            "itemtype": "method",
            "name": "lookupFactory",
            "params": [
                {
                    "name": "name",
                    "description": ""
                },
                {
                    "name": "container",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Handlebars",
            "module": "ember",
            "submodule": "ember-handlebars"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 22142,
            "description": "The `{{input}}` helper inserts an HTML `<input>` tag into the template,\nwith a `type` value of either `text` or `checkbox`. If no `type` is provided,\n`text` will be the default value applied. The attributes of `{{input}}`\nmatch those of the native HTML tag as closely as possible for these two types.\n## Use as text field\nAn `{{input}}` with no `type` or a `type` of `text` will render an HTML text input.\nThe following HTML attributes can be set via the helper:\n<table>\n<tr><td>`readonly`</td><td>`required`</td><td>`autofocus`</td></tr>\n<tr><td>`value`</td><td>`placeholder`</td><td>`disabled`</td></tr>\n<tr><td>`size`</td><td>`tabindex`</td><td>`maxlength`</td></tr>\n<tr><td>`name`</td><td>`min`</td><td>`max`</td></tr>\n<tr><td>`pattern`</td><td>`accept`</td><td>`autocomplete`</td></tr>\n<tr><td>`autosave`</td><td>`formaction`</td><td>`formenctype`</td></tr>\n<tr><td>`formmethod`</td><td>`formnovalidate`</td><td>`formtarget`</td></tr>\n<tr><td>`height`</td><td>`inputmode`</td><td>`multiple`</td></tr>\n<tr><td>`step`</td><td>`width`</td><td>`form`</td></tr>\n<tr><td>`selectionDirection`</td><td>`spellcheck`</td><td>&nbsp;</td></tr>\n</table>\nWhen set to a quoted string, these values will be directly applied to the HTML\nelement. When left unquoted, these values will be bound to a property on the\ntemplate's current rendering context (most typically a controller instance).\n## Unbound:\n```handlebars\n{{input value=\"http://www.facebook.com\"}}\n```\n```html\n<input type=\"text\" value=\"http://www.facebook.com\"/>\n```\n## Bound:\n```javascript\nApp.ApplicationController = Ember.Controller.extend({\nfirstName: \"Stanley\",\nentryNotAllowed: true\n});\n```\n```handlebars\n{{input type=\"text\" value=firstName disabled=entryNotAllowed size=\"50\"}}\n```\n```html\n<input type=\"text\" value=\"Stanley\" disabled=\"disabled\" size=\"50\"/>\n```\n## Actions\nThe helper can send multiple actions based on user events.\nThe action property defines the action which is send when\nthe user presses the return key.\n```handlebars\n{{input action=\"submit\"}}\n```\nThe helper allows some user events to send actions.\n`enter`\n`insert-newline`\n`escape-press`\n`focus-in`\n`focus-out`\n`key-press`\nFor example, if you desire an action to be sent when the input is blurred,\nyou only need to setup the action name to the event name property.\n```handlebars\n{{input focus-in=\"alertMessage\"}}\n```\nSee more about [Text Support Actions](/api/classes/Ember.TextField.html)\n## Extension\nInternally, `{{input type=\"text\"}}` creates an instance of `Ember.TextField`, passing\narguments from the helper to `Ember.TextField`'s `create` method. You can extend the\ncapabilities of text inputs in your applications by reopening this class. For example,\nif you are building a Bootstrap project where `data-*` attributes are used, you\ncan add one to the `TextField`'s `attributeBindings` property:\n```javascript\nEmber.TextField.reopen({\nattributeBindings: ['data-error']\n});\n```\nKeep in mind when writing `Ember.TextField` subclasses that `Ember.TextField`\nitself extends `Ember.Component`, meaning that it does NOT inherit\nthe `controller` of the parent view.\nSee more about [Ember components](/api/classes/Ember.Component.html)\n## Use as checkbox\nAn `{{input}}` with a `type` of `checkbox` will render an HTML checkbox input.\nThe following HTML attributes can be set via the helper:\n`checked`\n`disabled`\n`tabindex`\n`indeterminate`\n`name`\n`autofocus`\n`form`\nWhen set to a quoted string, these values will be directly applied to the HTML\nelement. When left unquoted, these values will be bound to a property on the\ntemplate's current rendering context (most typically a controller instance).\n## Unbound:\n```handlebars\n{{input type=\"checkbox\" name=\"isAdmin\"}}\n```\n```html\n<input type=\"checkbox\" name=\"isAdmin\" />\n```\n## Bound:\n```javascript\nApp.ApplicationController = Ember.Controller.extend({\nisAdmin: true\n});\n```\n```handlebars\n{{input type=\"checkbox\" checked=isAdmin }}\n```\n```html\n<input type=\"checkbox\" checked=\"checked\" />\n```\n## Extension\nInternally, `{{input type=\"checkbox\"}}` creates an instance of `Ember.Checkbox`, passing\narguments from the helper to `Ember.Checkbox`'s `create` method. You can extend the\ncapablilties of checkbox inputs in your applications by reopening this class. For example,\nif you wanted to add a css class to all checkboxes in your application:\n```javascript\nEmber.Checkbox.reopen({\nclassNames: ['my-app-checkbox']\n});\n```",
            "itemtype": "method",
            "name": "inputHelper",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Hash"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Handlebars.helpers",
            "module": "ember",
            "submodule": "ember-handlebars-compiler",
            "namespace": "Ember.Handlebars"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 22504,
            "description": "Description",
            "itemtype": "method",
            "name": "init",
            "return": {
                "description": ""
            },
            "class": "Ember.Checkbox",
            "module": "ember",
            "submodule": "ember-handlebars",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 22514,
            "description": "Description",
            "itemtype": "method",
            "name": "didInsertElement",
            "return": {
                "description": ""
            },
            "class": "Ember.Checkbox",
            "module": "ember",
            "submodule": "ember-handlebars",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 22564,
            "description": "Description",
            "itemtype": "method",
            "name": "defaultTemplate",
            "params": [
                {
                    "name": "context",
                    "description": ""
                },
                {
                    "name": "options",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Checkbox",
            "module": "ember",
            "submodule": "ember-handlebars"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 22576,
            "description": "Description",
            "itemtype": "method",
            "name": "init",
            "return": {
                "description": ""
            },
            "class": "Ember.Checkbox",
            "module": "ember",
            "submodule": "ember-handlebars"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 22897,
            "description": "Description",
            "itemtype": "method",
            "name": "program1",
            "params": [
                {
                    "name": "depth0",
                    "description": ""
                },
                {
                    "name": "data",
                    "description": ""
                }
            ],
            "return": {
                "description": "buffer"
            },
            "class": "Ember.Select",
            "module": "ember",
            "submodule": "ember-handlebars",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 22914,
            "description": "Description",
            "itemtype": "method",
            "name": "program3",
            "params": [
                {
                    "name": "depth0",
                    "description": ""
                },
                {
                    "name": "data",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Select",
            "module": "ember",
            "submodule": "ember-handlebars",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 22928,
            "description": "Description",
            "itemtype": "method",
            "name": "program4",
            "params": [
                {
                    "name": "depth0",
                    "description": ""
                },
                {
                    "name": "data",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Select",
            "module": "ember",
            "submodule": "ember-handlebars",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 22944,
            "description": "Description",
            "itemtype": "method",
            "name": "program6",
            "params": [
                {
                    "name": "depth0",
                    "description": ""
                },
                {
                    "name": "data",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Select",
            "module": "ember",
            "submodule": "ember-handlebars",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 22958,
            "description": "Description",
            "itemtype": "method",
            "name": "program7",
            "params": [
                {
                    "name": "depth0",
                    "description": ""
                },
                {
                    "name": "data",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Select",
            "module": "ember",
            "submodule": "ember-handlebars",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 22983,
            "description": "The `multiple` attribute of the select element. Indicates whether multiple\noptions can be selected.",
            "itemtype": "property",
            "name": "multiple",
            "type": "Boolean",
            "default": "false",
            "class": "Ember.Select",
            "module": "ember",
            "submodule": "ember-handlebars",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 22993,
            "description": "The `disabled` attribute of the select element. Indicates whether\nthe element is disabled from interactions.",
            "itemtype": "property",
            "name": "disabled",
            "type": "Boolean",
            "default": "false",
            "class": "Ember.Select",
            "module": "ember",
            "submodule": "ember-handlebars",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 23003,
            "description": "The `required` attribute of the select element. Indicates whether\na selected option is required for form validation.",
            "itemtype": "property",
            "name": "required",
            "type": "Boolean",
            "default": "false",
            "since": "1.5.0",
            "class": "Ember.Select",
            "module": "ember",
            "submodule": "ember-handlebars",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 23014,
            "description": "The list of options.\n\nIf `optionLabelPath` and `optionValuePath` are not overridden, this should\nbe a list of strings, which will serve simultaneously as labels and values.\n\nOtherwise, this should be a list of objects. For instance:\n\n```javascript\nEmber.Select.create({\n  content: Ember.A([\n      { id: 1, firstName: 'Yehuda' },\n      { id: 2, firstName: 'Tom' }\n    ]),\n  optionLabelPath: 'content.firstName',\n  optionValuePath: 'content.id'\n});\n```",
            "itemtype": "property",
            "name": "content",
            "type": "Array",
            "default": "null",
            "class": "Ember.Select",
            "module": "ember",
            "submodule": "ember-handlebars",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 23039,
            "description": "When `multiple` is `false`, the element of `content` that is currently\nselected, if any.\n\nWhen `multiple` is `true`, an array of such elements.",
            "itemtype": "property",
            "name": "selection",
            "type": "Object or Array",
            "default": "null",
            "class": "Ember.Select",
            "module": "ember",
            "submodule": "ember-handlebars",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 23051,
            "description": "In single selection mode (when `multiple` is `false`), value can be used to\nget the current selection's value or set the selection by it's value.\n\nIt is not currently supported in multiple selection mode.",
            "itemtype": "property",
            "name": "value",
            "type": "String",
            "default": "null",
            "class": "Ember.Select",
            "module": "ember",
            "submodule": "ember-handlebars",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 23067,
            "description": "If given, a top-most dummy option will be rendered to serve as a user\nprompt.",
            "itemtype": "property",
            "name": "prompt",
            "type": "String",
            "default": "null",
            "class": "Ember.Select",
            "module": "ember",
            "submodule": "ember-handlebars",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 23077,
            "description": "The path of the option labels. See [content](/api/classes/Ember.Select.html#property_content).",
            "itemtype": "property",
            "name": "optionLabelPath",
            "type": "String",
            "default": "'content'",
            "class": "Ember.Select",
            "module": "ember",
            "submodule": "ember-handlebars",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 23086,
            "description": "The path of the option values. See [content](/api/classes/Ember.Select.html#property_content).",
            "itemtype": "property",
            "name": "optionValuePath",
            "type": "String",
            "default": "'content'",
            "class": "Ember.Select",
            "module": "ember",
            "submodule": "ember-handlebars",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 23095,
            "description": "The path of the option group.\nWhen this property is used, `content` should be sorted by `optionGroupPath`.",
            "itemtype": "property",
            "name": "optionGroupPath",
            "type": "String",
            "default": "null",
            "class": "Ember.Select",
            "module": "ember",
            "submodule": "ember-handlebars",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 23105,
            "description": "The view class for optgroup.",
            "itemtype": "property",
            "name": "groupView",
            "type": "Ember.View",
            "default": "Ember.SelectOptgroup",
            "class": "Ember.Select",
            "module": "ember",
            "submodule": "ember-handlebars",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 23135,
            "description": "The view class for option.",
            "itemtype": "property",
            "name": "optionView",
            "type": "Ember.View",
            "default": "Ember.SelectOption",
            "class": "Ember.Select",
            "module": "ember",
            "submodule": "ember-handlebars",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 23257,
            "description": "Description",
            "itemtype": "method",
            "name": "init",
            "return": {
                "description": ""
            },
            "class": "Ember.Select",
            "module": "ember",
            "submodule": "ember-handlebars",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 23324,
            "description": "Description",
            "itemtype": "method",
            "name": "init",
            "return": {
                "description": ""
            },
            "class": "Ember.TextArea",
            "module": "ember",
            "submodule": "ember-handlebars",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 23378,
            "description": "The `value` attribute of the input element. As the user inputs text, this\nproperty is updated live.",
            "itemtype": "property",
            "name": "value",
            "type": "String",
            "default": "\"\"",
            "class": "Ember.TextField",
            "module": "ember",
            "submodule": "ember-handlebars",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 23388,
            "description": "The `type` attribute of the input element.",
            "itemtype": "property",
            "name": "type",
            "type": "String",
            "default": "\"text\"",
            "class": "Ember.TextField",
            "module": "ember",
            "submodule": "ember-handlebars",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 23397,
            "description": "The `size` of the text field in characters.",
            "itemtype": "property",
            "name": "size",
            "type": "String",
            "default": "null",
            "class": "Ember.TextField",
            "module": "ember",
            "submodule": "ember-handlebars",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 23406,
            "description": "The `pattern` attribute of input element.",
            "itemtype": "property",
            "name": "pattern",
            "type": "String",
            "default": "null",
            "class": "Ember.TextField",
            "module": "ember",
            "submodule": "ember-handlebars",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 23415,
            "description": "The `min` attribute of input element used with `type=\"number\"` or `type=\"range\"`.",
            "itemtype": "property",
            "name": "min",
            "type": "String",
            "default": "null",
            "since": "1.4.0",
            "class": "Ember.TextField",
            "module": "ember",
            "submodule": "ember-handlebars",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 23425,
            "description": "The `max` attribute of input element used with `type=\"number\"` or `type=\"range\"`.",
            "itemtype": "property",
            "name": "max",
            "type": "String",
            "default": "null",
            "since": "1.4.0",
            "class": "Ember.TextField",
            "module": "ember",
            "submodule": "ember-handlebars",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 23469,
            "description": "Description",
            "itemtype": "method",
            "name": "init",
            "return": {
                "description": ""
            },
            "class": "Ember.TextSupport",
            "module": "ember",
            "submodule": "ember-handlebars",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 23484,
            "description": "The action to be sent when the user presses the return key.\n\nThis is similar to the `{{action}}` helper, but is fired when\nthe user presses the return key when editing a text field, and sends\nthe value of the field as the context.",
            "itemtype": "property",
            "name": "action",
            "type": "String",
            "default": "null",
            "class": "Ember.TextSupport",
            "module": "ember",
            "submodule": "ember-handlebars",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 23497,
            "description": "The event that should send the action.\n\nOptions are:\n\n* `enter`: the user pressed enter\n* `keyPress`: the user pressed a key",
            "itemtype": "property",
            "name": "onEvent",
            "type": "String",
            "default": "enter",
            "class": "Ember.TextSupport",
            "module": "ember",
            "submodule": "ember-handlebars",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 23511,
            "description": "Whether they `keyUp` event that triggers an `action` to be sent continues\npropagating to other views.\n\nBy default, when the user presses the return key on their keyboard and\nthe text field has an `action` set, the action will be sent to the view's\ncontroller and the key event will stop propagating.\n\nIf you would like parent views to receive the `keyUp` event even after an\naction has been dispatched, set `bubbles` to true.",
            "itemtype": "property",
            "name": "bubbles",
            "type": "Boolean",
            "default": "false",
            "class": "Ember.TextSupport",
            "module": "ember",
            "submodule": "ember-handlebars",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 23528,
            "description": "Description",
            "itemtype": "method",
            "name": "interpretKeyEvents",
            "params": [
                {
                    "name": "event",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.TextSupport",
            "module": "ember",
            "submodule": "ember-handlebars",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 23546,
            "description": "Called when the user inserts a new line.\nCalled by the `Ember.TextSupport` mixin on keyUp if keycode matches 13.\nUses sendAction to send the `enter` action.",
            "itemtype": "method",
            "name": "insertNewline",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Event"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.TextSupport",
            "module": "ember",
            "submodule": "ember-handlebars",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 23559,
            "description": "Called when the user hits escape.\nCalled by the `Ember.TextSupport` mixin on keyUp if keycode matches 27.\nUses sendAction to send the `escape-press` action.",
            "itemtype": "method",
            "name": "cancel",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Event"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.TextSupport",
            "module": "ember",
            "submodule": "ember-handlebars",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 23571,
            "description": "Called when the text area is focused.\nUses sendAction to send the `focus-in` action.",
            "itemtype": "method",
            "name": "focusIn",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Event"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.TextSupport",
            "module": "ember",
            "submodule": "ember-handlebars",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 23582,
            "description": "Called when the text area is blurred. \nUses sendAction to send the `focus-out` action.",
            "itemtype": "method",
            "name": "focusOut",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Event"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.TextSupport",
            "module": "ember",
            "submodule": "ember-handlebars",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 23593,
            "description": "Called when the user presses a key. Enabled by setting\nthe `onEvent` property to `keyPress`.\nUses sendAction to send the `key-press` action.",
            "itemtype": "method",
            "name": "keyPress",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Event"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.TextSupport",
            "module": "ember",
            "submodule": "ember-handlebars",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 23615,
            "description": "Description",
            "itemtype": "method",
            "name": "sendAction",
            "params": [
                {
                    "name": "eventName",
                    "description": ""
                },
                {
                    "name": "view",
                    "description": ""
                },
                {
                    "name": "event",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.TextSupport",
            "module": "ember",
            "submodule": "ember-handlebars",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 23672,
            "description": "If a path starts with a reserved keyword, returns the root\nthat should be used.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "normalizePath",
            "params": [
                {
                    "name": "root",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "path",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "",
                    "type": "Hash"
                }
            ],
            "return": {
                "description": "ObjectExpression"
            },
            "class": "Ember",
            "module": "ember",
            "submodule": "ember-handlebars"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 23714,
            "description": "Lookup both on root and on window. If the path starts with\na keyword, the corresponding object will be looked up in the\ntemplate's data hash and used to resolve the path.",
            "itemtype": "method",
            "name": "handlebarsGet",
            "params": [
                {
                    "name": "root",
                    "description": "The object to look up the property on",
                    "type": "Object"
                },
                {
                    "name": "path",
                    "description": "The path to be lookedup",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "The template's option hash",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "value"
            },
            "class": "Ember.Handlebars",
            "module": "ember",
            "submodule": "ember-handlebars",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 23744,
            "description": "This method uses `Ember.Handlebars.get` to lookup a value, then ensures\nthat the value is escaped properly.\nIf `unescaped` is a truthy value then the escaping will not be performed.",
            "since": "1.4.0",
            "itemtype": "method",
            "name": "getEscaped",
            "params": [
                {
                    "name": "root",
                    "description": "The object to look up the property on",
                    "type": "Object"
                },
                {
                    "name": "path",
                    "description": "The path to be lookedup",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "The template's option hash",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "result"
            },
            "class": "Ember.Handlebars",
            "module": "ember",
            "submodule": "ember-handlebars",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 23772,
            "description": "Description",
            "itemtype": "method",
            "name": "resolveParams",
            "params": [
                {
                    "name": "context",
                    "description": ""
                },
                {
                    "name": "params",
                    "description": ""
                },
                {
                    "name": "options",
                    "description": ""
                }
            ],
            "return": {
                "description": "resolvedParams"
            },
            "class": "Ember.Handlebars",
            "module": "ember",
            "submodule": "ember-handlebars",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 23798,
            "description": "Description",
            "itemtype": "method",
            "name": "resolveHash",
            "params": [
                {
                    "name": "context",
                    "description": ""
                },
                {
                    "name": "hash",
                    "description": ""
                },
                {
                    "name": "options",
                    "description": ""
                }
            ],
            "return": {
                "description": "resolvedHash"
            },
            "class": "Ember.Handlebars",
            "module": "ember",
            "submodule": "ember-handlebars",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 24000,
            "description": "Description",
            "itemtype": "method",
            "name": "helper",
            "return": {
                "description": ""
            },
            "class": "Ember.Handlebars",
            "module": "ember",
            "submodule": "ember-handlebars",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 24062,
            "description": "Description",
            "itemtype": "method",
            "name": "normalizedValue",
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Handlebars",
            "module": "ember",
            "submodule": "ember-handlebars",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 24131,
            "description": "Renders the unbound form of an otherwise bound helper function.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "evaluateUnboundHelper",
            "params": [
                {
                    "name": "context",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "fn",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "normalizedProperties",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Handlebars",
            "module": "ember",
            "submodule": "ember-handlebars",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 24170,
            "description": "Overrides Handlebars.template so that we can distinguish\nuser-created, top-level templates from inner contexts.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "template",
            "params": [
                {
                    "name": "spec",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "t"
            },
            "class": "Ember.Handlebars",
            "module": "ember",
            "submodule": "ember-handlebars",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 24236,
            "description": "Description",
            "itemtype": "method",
            "name": "exists",
            "params": [
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": "UnaryExpression"
            },
            "class": "Ember.Handlebars",
            "module": "ember",
            "submodule": "ember-handlebars"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 24247,
            "description": "Description",
            "itemtype": "method",
            "name": "init",
            "return": {
                "description": ""
            },
            "class": "Ember.Handlebars",
            "module": "ember",
            "submodule": "ember-handlebars"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 24275,
            "description": "Description",
            "itemtype": "method",
            "name": "valueNormalizerFunc",
            "params": [
                {
                    "name": "result",
                    "description": ""
                }
            ],
            "return": {
                "description": "controller"
            },
            "class": "Ember.Handlebars",
            "module": "ember",
            "submodule": "ember-handlebars"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 24298,
            "description": "Description",
            "itemtype": "method",
            "name": "willDestroy",
            "return": {
                "description": ""
            },
            "class": "Ember.Handlebars",
            "module": "ember",
            "submodule": "ember-handlebars"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 24314,
            "description": "Description",
            "itemtype": "method",
            "name": "bind",
            "params": [
                {
                    "name": "property",
                    "description": ""
                },
                {
                    "name": "options",
                    "description": ""
                },
                {
                    "name": "preserveContext",
                    "description": ""
                },
                {
                    "name": "shouldDisplay",
                    "description": ""
                },
                {
                    "name": "valueNormalizer",
                    "description": ""
                },
                {
                    "name": "childProperties",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Handlebars",
            "module": "ember",
            "submodule": "ember-handlebars"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 24342,
            "description": "Description",
            "return": {
                "description": ""
            },
            "class": "Ember.Handlebars",
            "module": "ember",
            "submodule": "ember-handlebars"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 24393,
            "description": "Description",
            "return": {
                "description": ""
            },
            "class": "Ember.Handlebars",
            "module": "ember",
            "submodule": "ember-handlebars"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 24421,
            "description": "Description",
            "itemtype": "method",
            "name": "simpleBind",
            "params": [
                {
                    "name": "currentContext",
                    "description": ""
                },
                {
                    "name": "property",
                    "description": ""
                },
                {
                    "name": "options",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Handlebars",
            "module": "ember",
            "submodule": "ember-handlebars"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 24440,
            "description": "Description",
            "return": {
                "description": ""
            },
            "class": "Ember.Handlebars",
            "module": "ember",
            "submodule": "ember-handlebars"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 24462,
            "description": "Description",
            "return": {
                "description": ""
            },
            "class": "Ember.Handlebars",
            "module": "ember",
            "submodule": "ember-handlebars"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 24486,
            "description": "Description",
            "itemtype": "method",
            "name": "shouldDisplayIfHelperContent",
            "params": [
                {
                    "name": "result",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Handlebars",
            "module": "ember",
            "submodule": "ember-handlebars"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 24503,
            "description": "'_triageMustache' is used internally select between a binding, helper, or component for\nthe given context. Until this point, it would be hard to determine if the\nmustache is a property reference or a regular helper reference. This triage\nhelper resolves that.\n\nThis would not be typically invoked by directly.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_triageMustache",
            "params": [
                {
                    "name": "property",
                    "description": "Property/helperID to triage",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "hash of template/rendering options",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "HTML string",
                "type": "String"
            },
            "class": "Ember.Handlebars.helpers",
            "module": "ember",
            "submodule": "ember-handlebars",
            "namespace": "Ember.Handlebars"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 24529,
            "description": "Used to lookup/resolve handlebars helpers. The lookup order is:\nLook for a registered helper\nIf a dash exists in the name:\nLook for a helper registed in the container\nUse Ember.ComponentLookup to find an Ember.Component that resolves\nto the given name",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "resolveHelper",
            "params": [
                {
                    "name": "container",
                    "description": "",
                    "type": "Container"
                },
                {
                    "name": "name",
                    "description": "the name of the helper to lookup",
                    "type": "String"
                }
            ],
            "return": {
                "description": "helper"
            },
            "class": "Ember.Handlebars.helpers",
            "module": "ember",
            "submodule": "ember-handlebars",
            "namespace": "Ember.Handlebars"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 24566,
            "description": "`bind` can be used to display a value, then update that value if it\nchanges. For example, if you wanted to print the `title` property of\n`content`:\n```handlebars\n{{bind \"content.title\"}}\n```\nThis will return the `title` property as a string, then create a new observer\nat the specified path. If it changes, it will update the value in DOM. Note\nthat if you need to support IE7 and IE8 you must modify the model objects\nproperties using `Ember.get()` and `Ember.set()` for this to work as it\nrelies on Ember's KVO system. For all other browsers this will be handled for\nyou automatically.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "bindHelper",
            "params": [
                {
                    "name": "property",
                    "description": "Property to bind",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Handlebars.helpers",
            "module": "ember",
            "submodule": "ember-handlebars",
            "namespace": "Ember.Handlebars"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 24600,
            "description": "Use the `boundIf` helper to create a conditional that re-evaluates\nwhenever the truthiness of the bound value changes.\n```handlebars\n{{#boundIf \"content.shouldDisplayTitle\"}}\n{{content.title}}\n{{/boundIf}}\n```",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "boundIfHelper",
            "params": [
                {
                    "name": "property",
                    "description": "Property to bind",
                    "type": "String"
                },
                {
                    "name": "fn",
                    "description": "Context to provide for rendering",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Handlebars.helpers",
            "module": "ember",
            "submodule": "ember-handlebars",
            "namespace": "Ember.Handlebars"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 24624,
            "access": "private",
            "tagname": "Use the `unboundIf` helper to create a conditional that evaluates once.\n```handlebars\n{{#unboundIf \"content.shouldDisplayTitle\"}}\n{{content.title}}\n{{/unboundIf}}\n```",
            "since": "1.4.0",
            "itemtype": "method",
            "name": "unboundIfHelper",
            "params": [
                {
                    "name": "property",
                    "description": "Property to bind",
                    "type": "String"
                },
                {
                    "name": "fn",
                    "description": "Context to provide for rendering",
                    "type": "Function"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Handlebars.helpers",
            "module": "ember",
            "submodule": "ember-handlebars",
            "namespace": "Ember.Handlebars"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 24656,
            "description": "Use the `{{with}}` helper when you want to scope context. Take the following code as an example:\n```handlebars\n<h5>{{user.name}}</h5>\n<div class=\"role\">\n<h6>{{user.role.label}}</h6>\n<span class=\"role-id\">{{user.role.id}}</span>\n<p class=\"role-desc\">{{user.role.description}}</p>\n</div>\n```\n`{{with}}` can be our best friend in these cases,\ninstead of writing `user.role.*` over and over, we use `{{#with user.role}}`.\nNow the context within the `{{#with}} .. {{/with}}` block is `user.role` so you can do the following:\n```handlebars\n<h5>{{user.name}}</h5>\n<div class=\"role\">\n{{#with user.role}}\n<h6>{{label}}</h6>\n<span class=\"role-id\">{{id}}</span>\n<p class=\"role-desc\">{{description}}</p>\n{{/with}}\n</div>\n```\n### `as` operator\nThis operator aliases the scope to a new name. It's helpful for semantic clarity and to retain\ndefault scope or to reference from another `{{with}}` block.\n```handlebars\n// posts might not be\n{{#with user.posts as blogPosts}}\n<div class=\"notice\">\nThere are {{blogPosts.length}} blog posts written by {{user.name}}.\n</div>\n{{#each post in blogPosts}}\n<li>{{post.title}}</li>\n{{/each}}\n{{/with}}\n```\nWithout the `as` operator, it would be impossible to reference `user.name` in the example above.\nNOTE: The alias should not reuse a name from the bound property path.\nFor example: `{{#with foo.bar as foo}}` is not supported because it attempts to alias using\nthe first part of the property path, `foo`. Instead, use `{{#with foo.bar as baz}}`.\n### `controller` option\nAdding `controller='something'` instructs the `{{with}}` helper to create and use an instance of\nthe specified controller with the new context as its content.\nThis is very similar to using an `itemController` option with the `{{each}}` helper.\n```handlebars\n{{#with users.posts controller='userBlogPosts'}}\n{{!- The current context is wrapped in our controller instance }}\n{{/with}}\n```\nIn the above example, the template provided to the `{{with}}` block is now wrapped in the\n`userBlogPost` controller, which provides a very elegant way to decorate the context with custom\nfunctions/properties.",
            "itemtype": "method",
            "name": "withHelper",
            "params": [
                {
                    "name": "context",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Hash"
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Handlebars.helpers",
            "module": "ember",
            "submodule": "ember-handlebars",
            "namespace": "Ember.Handlebars"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 24772,
            "description": "See [boundIf](/api/classes/Ember.Handlebars.helpers.html#method_boundIf)\nand [unboundIf](/api/classes/Ember.Handlebars.helpers.html#method_unboundIf)",
            "itemtype": "method",
            "name": "ifHelper",
            "params": [
                {
                    "name": "context",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Hash"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Handlebars.helpers",
            "module": "ember",
            "submodule": "ember-handlebars",
            "namespace": "Ember.Handlebars"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 24794,
            "description": "Description",
            "itemtype": "method",
            "name": "unlessHelper",
            "params": [
                {
                    "name": "context",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Hash"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Handlebars.helpers",
            "module": "ember",
            "submodule": "ember-handlebars",
            "namespace": "Ember.Handlebars"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 24824,
            "description": "`bind-attr` allows you to create a binding between DOM element attributes and\nEmber objects. For example:\n```handlebars\n<img {{bind-attr src=\"imageUrl\" alt=\"imageTitle\"}}>\n```\nThe above handlebars template will fill the `<img>`'s `src` attribute with\nthe value of the property referenced with `\"imageUrl\"` and its `alt`\nattribute with the value of the property referenced with `\"imageTitle\"`.\nIf the rendering context of this template is the following object:\n```javascript\n{\nimageUrl: 'http://lolcats.info/haz-a-funny',\nimageTitle: 'A humorous image of a cat'\n}\n```\nThe resulting HTML output will be:\n```html\n<img src=\"http://lolcats.info/haz-a-funny\" alt=\"A humorous image of a cat\">\n```\n`bind-attr` cannot redeclare existing DOM element attributes. The use of `src`\nin the following `bind-attr` example will be ignored and the hard coded value\nof `src=\"/failwhale.gif\"` will take precedence:\n```handlebars\n<img src=\"/failwhale.gif\" {{bind-attr src=\"imageUrl\" alt=\"imageTitle\"}}>\n```\n### `bind-attr` and the `class` attribute\n`bind-attr` supports a special syntax for handling a number of cases unique\nto the `class` DOM element attribute. The `class` attribute combines\nmultiple discrete values into a single attribute as a space-delimited\nlist of strings. Each string can be:\na string return value of an object's property.\na boolean return value of an object's property\na hard-coded value\nA string return value works identically to other uses of `bind-attr`. The\nreturn value of the property will become the value of the attribute. For\nexample, the following view and template:\n```javascript\nAView = View.extend({\nsomeProperty: function() {\nreturn \"aValue\";\n}.property()\n})\n```\n```handlebars\n<img {{bind-attr class=\"view.someProperty}}>\n```\nResult in the following rendered output:\n```html\n<img class=\"aValue\">\n```\nA boolean return value will insert a specified class name if the property\nreturns `true` and remove the class name if the property returns `false`.\nA class name is provided via the syntax\n`somePropertyName:class-name-if-true`.\n```javascript\nAView = View.extend({\nsomeBool: true\n})\n```\n```handlebars\n<img {{bind-attr class=\"view.someBool:class-name-if-true\"}}>\n```\nResult in the following rendered output:\n```html\n<img class=\"class-name-if-true\">\n```\nAn additional section of the binding can be provided if you want to\nreplace the existing class instead of removing it when the boolean\nvalue changes:\n```handlebars\n<img {{bind-attr class=\"view.someBool:class-name-if-true:class-name-if-false\"}}>\n```\nA hard-coded value can be used by prepending `:` to the desired\nclass name: `:class-name-to-always-apply`.\n```handlebars\n<img {{bind-attr class=\":class-name-to-always-apply\"}}>\n```\nResults in the following rendered output:\n```html\n<img class=\"class-name-to-always-apply\">\n```\nAll three strategies - string return value, boolean return value, and\nhard-coded value – can be combined in a single declaration:\n```handlebars\n<img {{bind-attr class=\":class-name-to-always-apply view.someBool:class-name-if-true view.someProperty\"}}>\n```",
            "itemtype": "method",
            "name": "bindAttrHelper",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Hash"
                }
            ],
            "return": {
                "description": "NewExpression"
            },
            "class": "Ember.Handlebars.helpers",
            "module": "ember",
            "submodule": "ember-handlebars",
            "namespace": "Ember.Handlebars"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 24962,
            "description": "Description",
            "return": {
                "description": ""
            },
            "class": "Ember.Handlebars.helpers",
            "module": "ember",
            "submodule": "ember-handlebars",
            "namespace": "Ember.Handlebars"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 25011,
            "description": "See `bind-attr`",
            "deprecated": true,
            "itemtype": "method",
            "name": "bindAttrHelperDeprecated",
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Handlebars.helpers",
            "module": "ember",
            "submodule": "ember-handlebars",
            "namespace": "Ember.Handlebars"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 25023,
            "description": "Helper that, given a space-separated string of property paths and a context,\nreturns an array of class names. Calling this method also has the side\neffect of setting up observers at those property paths, such that if they\nchange, the correct class name will be reapplied to the DOM element.\nFor example, if you pass the string \"fooBar\", it will first look up the\n\"fooBar\" value of the context. If that value is true, it will add the\n\"foo-bar\" class to the current element (i.e., the dasherized form of\n\"fooBar\"). If the value is a string, it will add that string as the class.\nOtherwise, it will not add any new class name.",
            "access": "private",
            "tagname": "to use\nelement to update",
            "itemtype": "method",
            "name": "bindClasses",
            "params": [
                {
                    "name": "context",
                    "description": ""
                },
                {
                    "name": "classBindings",
                    "description": "A string, space-separated, of class bindings",
                    "type": "String"
                },
                {
                    "name": "view",
                    "description": "The view in which observers should look for the",
                    "type": "View"
                },
                {
                    "name": "bindAttrId",
                    "description": "Optional bindAttr id used to lookup elements",
                    "type": "Srting"
                },
                {
                    "name": "options",
                    "description": ""
                }
            ],
            "return": {
                "description": "ret"
            },
            "class": "Ember.Handlebars",
            "module": "ember",
            "submodule": "ember-handlebars",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 25051,
            "description": "Description",
            "itemtype": "method",
            "name": "classStringForPath",
            "params": [
                {
                    "name": "root",
                    "description": ""
                },
                {
                    "name": "parsedPath",
                    "description": ""
                },
                {
                    "name": "options",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Handlebars",
            "module": "ember",
            "submodule": "ember-handlebars",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 25099,
            "description": "Description",
            "return": {
                "description": ""
            },
            "class": "Ember.Handlebars",
            "module": "ember",
            "submodule": "ember-handlebars",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 25189,
            "description": "`{{collection}}` is a `Ember.Handlebars` helper for adding instances of\n`Ember.CollectionView` to a template. See [Ember.CollectionView](/api/classes/Ember.CollectionView.html)\nfor additional information on how a `CollectionView` functions.\n`{{collection}}`'s primary use is as a block helper with a `contentBinding`\noption pointing towards an `Ember.Array`-compatible object. An `Ember.View`\ninstance will be created for each item in its `content` property. Each view\nwill have its own `content` property set to the appropriate item in the\ncollection.\nThe provided block will be applied as the template for each item's view.\nGiven an empty `<body>` the following template:\n```handlebars\n{{#collection contentBinding=\"App.items\"}}\nHi {{view.content.name}}\n{{/collection}}\n```\nAnd the following application code\n```javascript\nApp = Ember.Application.create()\nApp.items = [\nEmber.Object.create({name: 'Dave'}),\nEmber.Object.create({name: 'Mary'}),\nEmber.Object.create({name: 'Sara'})\n]\n```\nWill result in the HTML structure below\n```html\n<div class=\"ember-view\">\n<div class=\"ember-view\">Hi Dave</div>\n<div class=\"ember-view\">Hi Mary</div>\n<div class=\"ember-view\">Hi Sara</div>\n</div>\n```\n### Blockless use in a collection\nIf you provide an `itemViewClass` option that has its own `template` you can\nomit the block.\nThe following template:\n```handlebars\n{{collection contentBinding=\"App.items\" itemViewClass=\"App.AnItemView\"}}\n```\nAnd application code\n```javascript\nApp = Ember.Application.create();\nApp.items = [\nEmber.Object.create({name: 'Dave'}),\nEmber.Object.create({name: 'Mary'}),\nEmber.Object.create({name: 'Sara'})\n];\nApp.AnItemView = Ember.View.extend({\ntemplate: Ember.Handlebars.compile(\"Greetings {{view.content.name}}\")\n});\n```\nWill result in the HTML structure below\n```html\n<div class=\"ember-view\">\n<div class=\"ember-view\">Greetings Dave</div>\n<div class=\"ember-view\">Greetings Mary</div>\n<div class=\"ember-view\">Greetings Sara</div>\n</div>\n```\n### Specifying a CollectionView subclass\nBy default the `{{collection}}` helper will create an instance of\n`Ember.CollectionView`. You can supply a `Ember.CollectionView` subclass to\nthe helper by passing it as the first argument:\n```handlebars\n{{#collection App.MyCustomCollectionClass contentBinding=\"App.items\"}}\nHi {{view.content.name}}\n{{/collection}}\n```\n### Forwarded `item.*`-named Options\nAs with the `{{view}}`, helper options passed to the `{{collection}}` will be\nset on the resulting `Ember.CollectionView` as properties. Additionally,\noptions prefixed with `item` will be applied to the views rendered for each\nitem (note the camelcasing):\n```handlebars\n{{#collection contentBinding=\"App.items\"\nitemTagName=\"p\"\nitemClassNames=\"greeting\"}}\nHowdy {{view.content.name}}\n{{/collection}}\n```\nWill result in the following HTML structure:\n```html\n<div class=\"ember-view\">\n<p class=\"ember-view greeting\">Howdy Dave</p>\n<p class=\"ember-view greeting\">Howdy Mary</p>\n<p class=\"ember-view greeting\">Howdy Sara</p>\n</div>\n```",
            "deprecated": true,
            "deprecationMessage": "Use `{{each}}` helper instead.",
            "itemtype": "method",
            "name": "collectionHelper",
            "params": [
                {
                    "name": "path",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Hash"
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Handlebars.helpers",
            "module": "ember",
            "submodule": "ember-handlebars",
            "namespace": "Ember.Handlebars"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 25416,
            "description": "`log` allows you to output the value of variables in the current rendering\ncontext. `log` also accepts primitive types such as strings or numbers.\n```handlebars\n{{log \"myVariable:\" myVariable }}\n```",
            "itemtype": "method",
            "name": "logHelper",
            "return": {
                "description": ""
            },
            "class": "Ember.Handlebars.helpers",
            "module": "ember",
            "submodule": "ember-handlebars",
            "namespace": "Ember.Handlebars"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 25453,
            "description": "Execute the `debugger` statement in the current context.\n```handlebars\n{{debugger}}\n```\nBefore invoking the `debugger` statement, there\nare a few helpful variables defined in the\nbody of this helper that you can inspect while\ndebugging that describe how and where this\nhelper was invoked:\n- templateContext: this is most likely a controller\nfrom which this template looks up / displays properties\n- typeOfTemplateContext: a string description of\nwhat the templateContext is\nFor example, if you're wondering why a value `{{foo}}`\nisn't rendering as expected within a template, you\ncould place a `{{debugger}}` statement, and when\nthe `debugger;` breakpoint is hit, you can inspect\n`templateContext`, determine if it's the object you\nexpect, and/or evaluate expressions in the console\nto perform property lookups on the `templateContext`:\n```\n> templateContext.get('foo') // -> \"<value of {{foo}}>\"\n```",
            "itemtype": "method",
            "name": "debuggerHelper",
            "params": [
                {
                    "name": "options",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Handlebars.helpers",
            "module": "ember",
            "submodule": "ember-handlebars",
            "namespace": "Ember.Handlebars"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 25536,
            "description": "Description",
            "itemtype": "method",
            "name": "init",
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Handlebars.helpers",
            "module": "ember",
            "submodule": "ember-handlebars"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 25581,
            "description": "Description",
            "itemtype": "method",
            "name": "disableContentObservers",
            "params": [
                {
                    "name": "callback",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Handlebars.helpers",
            "module": "ember",
            "submodule": "ember-handlebars"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 25600,
            "description": "Description",
            "itemtype": "method",
            "name": "createChildView",
            "params": [
                {
                    "name": "view",
                    "description": ""
                },
                {
                    "name": "attrs",
                    "description": ""
                }
            ],
            "return": {
                "description": "view"
            },
            "class": "Ember.Handlebars.helpers",
            "module": "ember",
            "submodule": "ember-handlebars"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 25637,
            "description": "Description",
            "itemtype": "method",
            "name": "destroy",
            "return": {
                "description": "ThisExpression"
            },
            "class": "Ember.Handlebars.helpers",
            "module": "ember",
            "submodule": "ember-handlebars"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 25670,
            "description": "Description",
            "itemtype": "method",
            "name": "runInDebug",
            "params": [
                {
                    "name": "f",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Handlebars.helpers",
            "module": "ember",
            "submodule": "ember-handlebars"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 25682,
            "description": "Description",
            "itemtype": "method",
            "name": "GroupedEach",
            "params": [
                {
                    "name": "context",
                    "description": ""
                },
                {
                    "name": "path",
                    "description": ""
                },
                {
                    "name": "options",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Handlebars.helpers",
            "module": "ember",
            "submodule": "ember-handlebars"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 25712,
            "description": "Description",
            "itemtype": "method",
            "name": "contentWillChange",
            "return": {
                "description": ""
            },
            "class": "Ember.Handlebars.helpers",
            "module": "ember",
            "submodule": "ember-handlebars"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 25721,
            "description": "Description",
            "itemtype": "method",
            "name": "contentDidChange",
            "return": {
                "description": ""
            },
            "class": "Ember.Handlebars.helpers",
            "module": "ember",
            "submodule": "ember-handlebars"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 25734,
            "description": "Description",
            "itemtype": "method",
            "name": "contentArrayDidChange",
            "return": {
                "description": ""
            },
            "class": "Ember.Handlebars.helpers",
            "module": "ember",
            "submodule": "ember-handlebars"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 25743,
            "description": "Description",
            "itemtype": "method",
            "name": "lookupContent",
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Handlebars.helpers",
            "module": "ember",
            "submodule": "ember-handlebars"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 25752,
            "description": "Description",
            "itemtype": "method",
            "name": "addArrayObservers",
            "return": {
                "description": ""
            },
            "class": "Ember.Handlebars.helpers",
            "module": "ember",
            "submodule": "ember-handlebars"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 25766,
            "description": "Description",
            "itemtype": "method",
            "name": "removeArrayObservers",
            "return": {
                "description": ""
            },
            "class": "Ember.Handlebars.helpers",
            "module": "ember",
            "submodule": "ember-handlebars"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 25780,
            "description": "Description",
            "itemtype": "method",
            "name": "addContentObservers",
            "return": {
                "description": ""
            },
            "class": "Ember.Handlebars.helpers",
            "module": "ember",
            "submodule": "ember-handlebars"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 25790,
            "description": "Description",
            "itemtype": "method",
            "name": "removeContentObservers",
            "return": {
                "description": ""
            },
            "class": "Ember.Handlebars.helpers",
            "module": "ember",
            "submodule": "ember-handlebars"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 25800,
            "description": "Description",
            "itemtype": "method",
            "name": "render",
            "return": {
                "description": ""
            },
            "class": "Ember.Handlebars.helpers",
            "module": "ember",
            "submodule": "ember-handlebars"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 25822,
            "description": "Description",
            "itemtype": "method",
            "name": "rerenderContainingView",
            "return": {
                "description": ""
            },
            "class": "Ember.Handlebars.helpers",
            "module": "ember",
            "submodule": "ember-handlebars"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 25837,
            "description": "Description",
            "itemtype": "method",
            "name": "destroy",
            "return": {
                "description": ""
            },
            "class": "Ember.Handlebars.helpers",
            "module": "ember",
            "submodule": "ember-handlebars"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 25851,
            "description": "The `{{#each}}` helper loops over elements in a collection, rendering its\nblock once for each item. It is an extension of the base Handlebars `{{#each}}`\nhelper:\n```javascript\nDevelopers = [{name: 'Yehuda'},{name: 'Tom'}, {name: 'Paul'}];\n```\n```handlebars\n{{#each Developers}}\n{{name}}\n{{/each}}\n```\n`{{each}}` supports an alternative syntax with element naming:\n```handlebars\n{{#each person in Developers}}\n{{person.name}}\n{{/each}}\n```\nWhen looping over objects that do not have properties, `{{this}}` can be used\nto render the object:\n```javascript\nDeveloperNames = ['Yehuda', 'Tom', 'Paul']\n```\n```handlebars\n{{#each DeveloperNames}}\n{{this}}\n{{/each}}\n```\n### {{else}} condition\n`{{#each}}` can have a matching `{{else}}`. The contents of this block will render\nif the collection is empty.\n```\n{{#each person in Developers}}\n{{person.name}}\n{{else}}\n<p>Sorry, nobody is available for this task.</p>\n{{/each}}\n```\n### Specifying a View class for items\nIf you provide an `itemViewClass` option that references a view class\nwith its own `template` you can omit the block.\nThe following template:\n```handlebars\n{{#view App.MyView }}\n{{each view.items itemViewClass=\"App.AnItemView\"}}\n{{/view}}\n```\nAnd application code\n```javascript\nApp = Ember.Application.create({\nMyView: Ember.View.extend({\nitems: [\nEmber.Object.create({name: 'Dave'}),\nEmber.Object.create({name: 'Mary'}),\nEmber.Object.create({name: 'Sara'})\n]\n})\n});\nApp.AnItemView = Ember.View.extend({\ntemplate: Ember.Handlebars.compile(\"Greetings {{name}}\")\n});\n```\nWill result in the HTML structure below\n```html\n<div class=\"ember-view\">\n<div class=\"ember-view\">Greetings Dave</div>\n<div class=\"ember-view\">Greetings Mary</div>\n<div class=\"ember-view\">Greetings Sara</div>\n</div>\n```\nIf an `itemViewClass` is defined on the helper, and therefore the helper is not\nbeing used as a block, an `emptyViewClass` can also be provided optionally.\nThe `emptyViewClass` will match the behavior of the `{{else}}` condition\ndescribed above. That is, the `emptyViewClass` will render if the collection\nis empty.\n### Representing each item with a Controller.\nBy default the controller lookup within an `{{#each}}` block will be\nthe controller of the template where the `{{#each}}` was used. If each\nitem needs to be presented by a custom controller you can provide a\n`itemController` option which references a controller by lookup name.\nEach item in the loop will be wrapped in an instance of this controller\nand the item itself will be set to the `model` property of that controller.\nThis is useful in cases where properties of model objects need transformation\nor synthesis for display:\n```javascript\nApp.DeveloperController = Ember.ObjectController.extend({\nisAvailableForHire: function() {\nreturn !this.get('model.isEmployed') && this.get('model.isSeekingWork');\n}.property('isEmployed', 'isSeekingWork')\n})\n```\n```handlebars\n{{#each person in developers itemController=\"developer\"}}\n{{person.name}} {{#if person.isAvailableForHire}}Hire me!{{/if}}\n{{/each}}\n```\nEach itemController will receive a reference to the current controller as\na `parentController` property.\n### (Experimental) Grouped Each\nWhen used in conjunction with the experimental [group helper](https://github.com/emberjs/group-helper),\nyou can inform Handlebars to re-render an entire group of items instead of\nre-rendering them one at a time (in the event that they are changed en masse\nor an item is added/removed).\n```handlebars\n{{#group}}\n{{#each people}}\n{{firstName}} {{lastName}}\n{{/each}}\n{{/group}}\n```\nThis can be faster than the normal way that Handlebars re-renders items\nin some cases.\nIf for some reason you have a group with more than one `#each`, you can make\none of the collections be updated in normal (non-grouped) fashion by setting\nthe option `groupedRows=true` (counter-intuitive, I know).\nFor example,\n```handlebars\n{{dealershipName}}\n{{#group}}\n{{#each dealers}}\n{{firstName}} {{lastName}}\n{{/each}}\n{{#each car in cars groupedRows=true}}\n{{car.make}} {{car.model}} {{car.color}}\n{{/each}}\n{{/group}}\n```\nAny change to `dealershipName` or the `dealers` collection will cause the\nentire group to be re-rendered. However, changes to the `cars` collection\nwill be re-rendered individually (as normal).\nNote that `group` behavior is also disabled by specifying an `itemViewClass`.",
            "itemtype": "method",
            "name": "eachHelper",
            "params": [
                {
                    "name": "path",
                    "description": ""
                },
                {
                    "name": "options",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Handlebars.helpers",
            "module": "ember",
            "submodule": "ember-handlebars",
            "namespace": "Ember.Handlebars"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 26049,
            "description": "Calls [Ember.String.loc](/api/classes/Ember.String.html#method_loc) with the\nprovided string.\nThis is a convenient way to localize text. For example:\n```html\n<script type=\"text/x-handlebars\" data-template-name=\"home\">\n{{loc \"welcome\"}}\n</script>\n```\nTake note that `\"welcome\"` is a string and not an object\nreference.\nSee [Ember.String.loc](/api/classes/Ember.String.html#method_loc) for how to \nset up localized string references.",
            "params": [
                {
                    "name": "str",
                    "description": "The string to format",
                    "type": "String"
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "see": [
                "{Ember.String#loc}"
            ],
            "class": "Ember.Handlebars.helpers",
            "module": "ember",
            "submodule": "ember-handlebars",
            "namespace": "Ember.Handlebars"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 26088,
            "description": "The `partial` helper renders another template without\nchanging the template context:\n```handlebars\n{{foo}}\n{{partial \"nav\"}}\n```\nThe above example template will render a template named\n\"_nav\", which has the same context as the parent template\nit's rendered into, so if the \"_nav\" template also referenced\n`{{foo}}`, it would print the same thing as the `{{foo}}`\nin the above example.\nIf a \"_nav\" template isn't found, the `partial` helper will\nfall back to a template named \"nav\".\n## Bound template names\nThe parameter supplied to `partial` can also be a path\nto a property containing a template name, e.g.:\n```handlebars\n{{partial someTemplateName}}\n```\nThe above example will look up the value of `someTemplateName`\non the template context (e.g. a controller) and use that\nvalue as the name of the template to render. If the resolved\nvalue is falsy, nothing will be rendered. If `someTemplateName`\nchanges, the partial will be re-rendered using the new template\nname.\n## Setting the partial's context with `with`\nThe `partial` helper can be used in conjunction with the `with`\nhelper to set a context that will be used by the partial:\n```handlebars\n{{#with currentUser}}\n{{partial \"user_info\"}}\n{{/with}}\n```",
            "params": [
                {
                    "name": "name",
                    "description": ""
                },
                {
                    "name": "options",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Handlebars.helpers",
            "module": "ember",
            "submodule": "ember-handlebars",
            "namespace": "Ember.Handlebars"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 26137,
            "description": "Description",
            "itemtype": "method",
            "name": "fn",
            "params": [
                {
                    "name": "context",
                    "description": ""
                },
                {
                    "name": "fnOptions",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Handlebars.helpers",
            "module": "ember",
            "submodule": "ember-handlebars",
            "namespace": "Ember.Handlebars"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 26156,
            "description": "Description",
            "itemtype": "method",
            "name": "exists",
            "params": [
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": "UnaryExpression"
            },
            "class": "Ember.Handlebars.helpers",
            "module": "ember",
            "submodule": "ember-handlebars",
            "namespace": "Ember.Handlebars"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 26166,
            "description": "Description",
            "itemtype": "method",
            "name": "renderPartial",
            "params": [
                {
                    "name": "context",
                    "description": ""
                },
                {
                    "name": "name",
                    "description": ""
                },
                {
                    "name": "options",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Handlebars.helpers",
            "module": "ember",
            "submodule": "ember-handlebars",
            "namespace": "Ember.Handlebars"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 26198,
            "description": "Description",
            "params": [
                {
                    "name": "options",
                    "description": ""
                }
            ],
            "return": {
                "description": "ret"
            },
            "class": "Ember.Handlebars.helpers",
            "module": "ember",
            "submodule": "ember-handlebars",
            "namespace": "Ember.Handlebars"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 26230,
            "description": "`template` allows you to render a template from inside another template.\nThis allows you to re-use the same template in multiple places. For example:\n```html\n<script type=\"text/x-handlebars\" data-template-name=\"logged_in_user\">\n{{#with loggedInUser}}\nLast Login: {{lastLogin}}\nUser Info: {{template \"user_info\"}}\n{{/with}}\n</script>\n```\n```html\n<script type=\"text/x-handlebars\" data-template-name=\"user_info\">\nName: <em>{{name}}</em>\nKarma: <em>{{karma}}</em>\n</script>\n```\n```handlebars\n{{#if isUser}}\n{{template \"user_info\"}}\n{{else}}\n{{template \"unlogged_user_info\"}}\n{{/if}}\n```\nThis helper looks for templates in the global `Ember.TEMPLATES` hash. If you\nadd `<script>` tags to your page with the `data-template-name` attribute set,\nthey will be compiled and placed in this hash automatically.\nYou can also manually register templates by adding them to the hash:\n```javascript\nEmber.TEMPLATES[\"my_cool_template\"] = Ember.Handlebars.compile('<b>{{user}}</b>');\n```",
            "deprecated": true,
            "params": [
                {
                    "name": "name",
                    "description": ""
                },
                {
                    "name": "options",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Handlebars.helpers",
            "module": "ember",
            "submodule": "ember-handlebars",
            "namespace": "Ember.Handlebars"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 26294,
            "description": "`unbound` allows you to output a property without binding. *Important:* The\noutput will not be updated if the property changes. Use with caution.\n```handlebars\n<div>{{unbound somePropertyThatDoesntChange}}</div>\n```\n`unbound` can also be used in conjunction with a bound helper to\nrender it in its unbound form:\n```handlebars\n<div>{{unbound helperName somePropertyThatDoesntChange}}</div>\n```",
            "params": [
                {
                    "name": "property",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "fn",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Handlebars.helpers",
            "module": "ember",
            "submodule": "ember-handlebars",
            "namespace": "Ember.Handlebars"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 26359,
            "description": "Description",
            "itemtype": "method",
            "name": "makeBindings",
            "params": [
                {
                    "name": "thisContext",
                    "description": ""
                },
                {
                    "name": "options",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Handlebars.helpers",
            "module": "ember",
            "submodule": "ember-handlebars"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 26397,
            "description": "Description",
            "itemtype": "method",
            "name": "propertiesFromHTMLOptions",
            "params": [
                {
                    "name": "options",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Handlebars.helpers",
            "module": "ember",
            "submodule": "ember-handlebars"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 26494,
            "description": "Description",
            "itemtype": "method",
            "name": "contextualizeBindingPath",
            "params": [
                {
                    "name": "path",
                    "description": ""
                },
                {
                    "name": "data",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Handlebars.helpers",
            "module": "ember",
            "submodule": "ember-handlebars"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 26514,
            "description": "Description",
            "itemtype": "method",
            "name": "helper",
            "params": [
                {
                    "name": "thisContext",
                    "description": ""
                },
                {
                    "name": "path",
                    "description": ""
                },
                {
                    "name": "options",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Handlebars.helpers",
            "module": "ember",
            "submodule": "ember-handlebars"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 26581,
            "description": "`{{view}}` inserts a new instance of an `Ember.View` into a template passing its\noptions to the `Ember.View`'s `create` method and using the supplied block as\nthe view's own template.\nAn empty `<body>` and the following template:\n```handlebars\nA span:\n{{#view tagName=\"span\"}}\nhello.\n{{/view}}\n```\nWill result in HTML structure:\n```html\n<body>\n<!-- Note: the handlebars template script\nalso results in a rendered Ember.View\nwhich is the outer <div> here -->\n<div class=\"ember-view\">\nA span:\n<span id=\"ember1\" class=\"ember-view\">\nHello.\n</span>\n</div>\n</body>\n```\n### `parentView` setting\nThe `parentView` property of the new `Ember.View` instance created through\n`{{view}}` will be set to the `Ember.View` instance of the template where\n`{{view}}` was called.\n```javascript\naView = Ember.View.create({\ntemplate: Ember.Handlebars.compile(\"{{#view}} my parent: {{parentView.elementId}} {{/view}}\")\n});\naView.appendTo('body');\n```\nWill result in HTML structure:\n```html\n<div id=\"ember1\" class=\"ember-view\">\n<div id=\"ember2\" class=\"ember-view\">\nmy parent: ember1\n</div>\n</div>\n```\n### Setting CSS id and class attributes\nThe HTML `id` attribute can be set on the `{{view}}`'s resulting element with\nthe `id` option. This option will _not_ be passed to `Ember.View.create`.\n```handlebars\n{{#view tagName=\"span\" id=\"a-custom-id\"}}\nhello.\n{{/view}}\n```\nResults in the following HTML structure:\n```html\n<div class=\"ember-view\">\n<span id=\"a-custom-id\" class=\"ember-view\">\nhello.\n</span>\n</div>\n```\nThe HTML `class` attribute can be set on the `{{view}}`'s resulting element\nwith the `class` or `classNameBindings` options. The `class` option will\ndirectly set the CSS `class` attribute and will not be passed to\n`Ember.View.create`. `classNameBindings` will be passed to `create` and use\n`Ember.View`'s class name binding functionality:\n```handlebars\n{{#view tagName=\"span\" class=\"a-custom-class\"}}\nhello.\n{{/view}}\n```\nResults in the following HTML structure:\n```html\n<div class=\"ember-view\">\n<span id=\"ember2\" class=\"ember-view a-custom-class\">\nhello.\n</span>\n</div>\n```\n### Supplying a different view class\n`{{view}}` can take an optional first argument before its supplied options to\nspecify a path to a custom view class.\n```handlebars\n{{#view \"MyApp.CustomView\"}}\nhello.\n{{/view}}\n```\nThe first argument can also be a relative path accessible from the current\ncontext.\n```javascript\nMyApp = Ember.Application.create({});\nMyApp.OuterView = Ember.View.extend({\ninnerViewClass: Ember.View.extend({\nclassNames: ['a-custom-view-class-as-property']\n}),\ntemplate: Ember.Handlebars.compile('{{#view \"view.innerViewClass\"}} hi {{/view}}')\n});\nMyApp.OuterView.create().appendTo('body');\n```\nWill result in the following HTML:\n```html\n<div id=\"ember1\" class=\"ember-view\">\n<div id=\"ember2\" class=\"ember-view a-custom-view-class-as-property\">\nhi\n</div>\n</div>\n```\n### Blockless use\nIf you supply a custom `Ember.View` subclass that specifies its own template\nor provide a `templateName` option to `{{view}}` it can be used without\nsupplying a block. Attempts to use both a `templateName` option and supply a\nblock will throw an error.\n```handlebars\n{{view \"MyApp.ViewWithATemplateDefined\"}}\n```\n### `viewName` property\nYou can supply a `viewName` option to `{{view}}`. The `Ember.View` instance\nwill be referenced as a property of its parent view by this name.\n```javascript\naView = Ember.View.create({\ntemplate: Ember.Handlebars.compile('{{#view viewName=\"aChildByName\"}} hi {{/view}}')\n});\naView.appendTo('body');\naView.get('aChildByName') // the instance of Ember.View created by {{view}} helper\n```",
            "itemtype": "method",
            "name": "viewHelper",
            "params": [
                {
                    "name": "path",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Hash"
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Handlebars.helpers",
            "module": "ember",
            "submodule": "ember-handlebars",
            "namespace": "Ember.Handlebars"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 26742,
            "description": "`{{yield}}` denotes an area of a template that will be rendered inside\nof another template. It has two main uses:\n### Use with `layout`\nWhen used in a Handlebars template that is assigned to an `Ember.View`\ninstance's `layout` property Ember will render the layout template first,\ninserting the view's own rendered output at the `{{yield}}` location.\nAn empty `<body>` and the following application code:\n```javascript\nAView = Ember.View.extend({\nclassNames: ['a-view-with-layout'],\nlayout: Ember.Handlebars.compile('<div class=\"wrapper\">{{yield}}</div>'),\ntemplate: Ember.Handlebars.compile('<span>I am wrapped</span>')\n});\naView = AView.create();\naView.appendTo('body');\n```\nWill result in the following HTML output:\n```html\n<body>\n<div class='ember-view a-view-with-layout'>\n<div class=\"wrapper\">\n<span>I am wrapped</span>\n</div>\n</div>\n</body>\n```\nThe `yield` helper cannot be used outside of a template assigned to an\n`Ember.View`'s `layout` property and will throw an error if attempted.\n```javascript\nBView = Ember.View.extend({\nclassNames: ['a-view-with-layout'],\ntemplate: Ember.Handlebars.compile('{{yield}}')\n});\nbView = BView.create();\nbView.appendTo('body');\n// throws\n// Uncaught Error: assertion failed:\n// You called yield in a template that was not a layout\n```\n### Use with Ember.Component\nWhen designing components `{{yield}}` is used to denote where, inside the component's\ntemplate, an optional block passed to the component should render:\n```handlebars\n<!-- application.hbs -->\n{{#labeled-textfield value=someProperty}}\nFirst name:\n{{/labeled-textfield}}\n```\n```handlebars\n<!-- components/labeled-textfield.hbs -->\n<label>\n{{yield}} {{input value=value}}\n</label>\n```\nResult:\n```html\n<label>\nFirst name: <input type=\"text\" />\n</label>\n```",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Hash"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Handlebars.helpers",
            "module": "ember",
            "submodule": "ember-handlebars",
            "namespace": "Ember.Handlebars"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 26841,
            "description": "Find templates stored in the head tag as script tags and make them available\nto `Ember.CoreView` in the global `Ember.TEMPLATES` object. This will be run\nas as jQuery DOM-ready callback.\nScript tags with `text/x-handlebars` will be compiled\nwith Ember's Handlebars and are suitable for use as a view's template.\nThose with type `text/x-raw-handlebars` will be compiled with regular\nHandlebars and are suitable for use in views' computed properties.",
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "method",
            "name": "bootstrap",
            "params": [
                {
                    "name": "ctx",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Handlebars",
            "module": "ember",
            "submodule": "ember-handlebars",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 26890,
            "description": "Description",
            "itemtype": "method",
            "name": "registerComponentLookup",
            "params": [
                {
                    "name": "container",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Handlebars",
            "module": "ember",
            "submodule": "ember-handlebars",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 26933,
            "description": "Mark a string as safe for unescaped output with Handlebars. If you\nreturn HTML from a Handlebars helper, use this function to\nensure Handlebars does not escape the HTML.\n```javascript\nEmber.String.htmlSafe('<div>someString</div>')\n```",
            "static": 1,
            "itemtype": "method",
            "name": "htmlSafe",
            "params": [
                {
                    "name": "str",
                    "description": ""
                }
            ],
            "return": {
                "description": "NewExpression"
            },
            "class": "Ember.String",
            "module": "ember",
            "submodule": "ember-handlebars",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 26953,
            "description": "Mark a string as being safe for unescaped output with Handlebars.\n```javascript\n'<div>someString</div>'.htmlSafe()\n```\nSee [Ember.String.htmlSafe](/api/classes/Ember.String.html#method_htmlSafe).",
            "itemtype": "method",
            "name": "htmlSafe",
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.String",
            "module": "ember",
            "submodule": "ember-handlebars"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 27007,
            "description": "Description",
            "itemtype": "method",
            "name": "SimpleHandlebarsView",
            "params": [
                {
                    "name": "path",
                    "description": ""
                },
                {
                    "name": "pathRoot",
                    "description": ""
                },
                {
                    "name": "isEscaped",
                    "description": ""
                },
                {
                    "name": "templateData",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.String",
            "module": "ember",
            "submodule": "ember-handlebars"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 27034,
            "description": "Description",
            "itemtype": "method",
            "name": "destroy",
            "return": {
                "description": ""
            },
            "class": "Ember.String",
            "module": "ember",
            "submodule": "ember-handlebars"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 27055,
            "description": "Description",
            "itemtype": "method",
            "name": "normalizedValue",
            "return": {
                "description": "result"
            },
            "class": "Ember.String",
            "module": "ember",
            "submodule": "ember-handlebars"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 27079,
            "description": "Description",
            "itemtype": "method",
            "name": "renderToBuffer",
            "params": [
                {
                    "name": "buffer",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.String",
            "module": "ember",
            "submodule": "ember-handlebars"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 27095,
            "description": "Description",
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": "result"
            },
            "class": "Ember.String",
            "module": "ember",
            "submodule": "ember-handlebars"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 27117,
            "description": "Description",
            "itemtype": "method",
            "name": "rerender",
            "return": {
                "description": "ThisExpression"
            },
            "class": "Ember.String",
            "module": "ember",
            "submodule": "ember-handlebars"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 27138,
            "description": "Description",
            "itemtype": "method",
            "name": "update",
            "return": {
                "description": ""
            },
            "class": "Ember.String",
            "module": "ember",
            "submodule": "ember-handlebars"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 27163,
            "description": "Description",
            "itemtype": "method",
            "name": "rerenderIfNeeded",
            "params": [
                {
                    "name": "view",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.String",
            "module": "ember",
            "submodule": "ember-handlebars"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 27195,
            "description": "The function used to determine if the `displayTemplate` or\n`inverseTemplate` should be rendered. This should be a function that takes\na value and returns a Boolean.",
            "itemtype": "property",
            "name": "shouldDisplayFunc",
            "type": "Function",
            "default": "null",
            "class": "Ember._HandlebarsBoundView",
            "module": "ember",
            "submodule": "ember-handlebars",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 27206,
            "description": "Whether the template rendered by this view gets passed the context object\nof its parent template, or gets passed the value of retrieving `path`\nfrom the `pathRoot`.\n\nFor example, this is true when using the `{{#if}}` helper, because the\ntemplate inside the helper should look up properties relative to the same\nobject as outside the block. This would be `false` when used with `{{#with\nfoo}}` because the template should receive the object found by evaluating\n`foo`.",
            "itemtype": "property",
            "name": "preserveContext",
            "type": "Boolean",
            "default": "false",
            "class": "Ember._HandlebarsBoundView",
            "module": "ember",
            "submodule": "ember-handlebars",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 27223,
            "description": "If `preserveContext` is true, this is the object that will be used\nto render the template.",
            "itemtype": "property",
            "name": "previousContext",
            "type": "Object",
            "class": "Ember._HandlebarsBoundView",
            "module": "ember",
            "submodule": "ember-handlebars",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 27232,
            "description": "The template to render when `shouldDisplayFunc` evaluates to `true`.",
            "itemtype": "property",
            "name": "displayTemplate",
            "type": "Function",
            "default": "null",
            "class": "Ember._HandlebarsBoundView",
            "module": "ember",
            "submodule": "ember-handlebars",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 27241,
            "description": "The template to render when `shouldDisplayFunc` evaluates to `false`.",
            "itemtype": "property",
            "name": "inverseTemplate",
            "type": "Function",
            "default": "null",
            "class": "Ember._HandlebarsBoundView",
            "module": "ember",
            "submodule": "ember-handlebars",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 27251,
            "description": "The path to look up on `pathRoot` that is passed to\n`shouldDisplayFunc` to determine which template to render.\n\nIn addition, if `preserveContext` is `false,` the object at this path will\nbe passed to the template when rendering.",
            "itemtype": "property",
            "name": "path",
            "type": "String",
            "default": "null",
            "class": "Ember._HandlebarsBoundView",
            "module": "ember",
            "submodule": "ember-handlebars",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 27264,
            "description": "The object from which the `path` will be looked up. Sometimes this is the\nsame as the `previousContext`, but in cases where this view has been\ngenerated for paths that start with a keyword such as `view` or\n`controller`, the path root will be that resolved object.",
            "itemtype": "property",
            "name": "pathRoot",
            "type": "Object",
            "class": "Ember._HandlebarsBoundView",
            "module": "ember",
            "submodule": "ember-handlebars",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 27275,
            "description": "Description",
            "itemtype": "method",
            "name": "normalizedValue",
            "return": {
                "description": "ConditionalExpression"
            },
            "class": "Ember._HandlebarsBoundView",
            "module": "ember",
            "submodule": "ember-handlebars",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 27300,
            "description": "Description",
            "itemtype": "method",
            "name": "rerenderIfNeeded",
            "return": {
                "description": ""
            },
            "class": "Ember._HandlebarsBoundView",
            "module": "ember",
            "submodule": "ember-handlebars",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 27309,
            "description": "Determines which template to invoke, sets up the correct state based on\nthat logic, then invokes the default `Ember.View` `render` implementation.\nThis method will first look up the `path` key on `pathRoot`,\nthen pass that value to the `shouldDisplayFunc` function. If that returns\n`true,` the `displayTemplate` function will be rendered to DOM. Otherwise,\n`inverseTemplate`, if specified, will be rendered.\nFor example, if this `Ember._HandlebarsBoundView` represented the `{{#with\nfoo}}` helper, it would look up the `foo` property of its context, and\n`shouldDisplayFunc` would always return true. The object found by looking\nup `foo` would be passed to `displayTemplate`.",
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "buffer",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember._HandlebarsBoundView",
            "module": "ember",
            "submodule": "ember-handlebars",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 27412,
            "description": "Description",
            "itemtype": "method",
            "name": "notifyMutationListeners",
            "return": {
                "description": ""
            },
            "class": "Ember._HandlebarsBoundView",
            "module": "ember",
            "submodule": "ember-handlebars"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 27423,
            "description": "Description",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "view",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember._HandlebarsBoundView",
            "module": "ember",
            "submodule": "ember-handlebars"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 27434,
            "description": "Description",
            "itemtype": "method",
            "name": "prepend",
            "params": [
                {
                    "name": "view",
                    "description": ""
                },
                {
                    "name": "html",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember._HandlebarsBoundView",
            "module": "ember",
            "submodule": "ember-handlebars"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 27446,
            "description": "Description",
            "itemtype": "method",
            "name": "after",
            "params": [
                {
                    "name": "view",
                    "description": ""
                },
                {
                    "name": "html",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember._HandlebarsBoundView",
            "module": "ember",
            "submodule": "ember-handlebars"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 27458,
            "description": "Description",
            "itemtype": "method",
            "name": "html",
            "params": [
                {
                    "name": "view",
                    "description": ""
                },
                {
                    "name": "html",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember._HandlebarsBoundView",
            "module": "ember",
            "submodule": "ember-handlebars"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 27471,
            "description": "Description",
            "itemtype": "method",
            "name": "replace",
            "params": [
                {
                    "name": "view",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember._HandlebarsBoundView",
            "module": "ember",
            "submodule": "ember-handlebars"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 27505,
            "description": "Description",
            "itemtype": "method",
            "name": "empty",
            "params": [
                {
                    "name": "view",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember._HandlebarsBoundView",
            "module": "ember",
            "submodule": "ember-handlebars"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 27531,
            "description": "Description",
            "itemtype": "method",
            "name": "init",
            "return": {
                "description": ""
            },
            "class": "Ember._Metamorph",
            "module": "ember",
            "submodule": "ember-handlebars",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 27542,
            "description": "Description",
            "itemtype": "method",
            "name": "beforeRender",
            "params": [
                {
                    "name": "buffer",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember._Metamorph",
            "module": "ember",
            "submodule": "ember-handlebars",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 27553,
            "description": "Description",
            "itemtype": "method",
            "name": "afterRender",
            "params": [
                {
                    "name": "buffer",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember._Metamorph",
            "module": "ember",
            "submodule": "ember-handlebars",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 27564,
            "description": "Description",
            "itemtype": "method",
            "name": "createElement",
            "return": {
                "description": ""
            },
            "class": "Ember._Metamorph",
            "module": "ember",
            "submodule": "ember-handlebars",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 27887,
            "description": "A function may be assigned to `Ember.onerror` to be called when Ember\ninternals encounter an error. This is useful for specialized error handling\nand reporting code.\n\n```javascript\nEmber.onerror = function(error) {\n  Em.$.ajax('/report-error', 'POST', {\n    stack: error.stack,\n    otherInformation: 'whatever app state you want to provide'\n  });\n};\n```\n\nInternally, `Ember.onerror` is used as Backburner's error handler.",
            "itemtype": "event",
            "name": "onerror",
            "params": [
                {
                    "name": "error",
                    "description": "the error object",
                    "type": "Exception"
                }
            ],
            "class": "Ember",
            "module": "ember",
            "submodule": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 27934,
            "description": "Description",
            "itemtype": "method",
            "name": "alias",
            "params": [
                {
                    "name": "altKey",
                    "description": ""
                }
            ],
            "return": {
                "description": "NewExpression"
            },
            "class": "Ember",
            "module": "ember",
            "submodule": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 27945,
            "description": "Description",
            "itemtype": "method",
            "name": "AliasedProperty",
            "params": [
                {
                    "name": "altKey",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember",
            "module": "ember",
            "submodule": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 27958,
            "description": "Description",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                },
                {
                    "name": "keyName",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember",
            "module": "ember",
            "submodule": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 27969,
            "description": "Description",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                },
                {
                    "name": "keyName",
                    "description": ""
                },
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember",
            "module": "ember",
            "submodule": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 27981,
            "description": "Description",
            "itemtype": "method",
            "name": "willWatch",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                },
                {
                    "name": "keyName",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember",
            "module": "ember",
            "submodule": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 27992,
            "description": "Description",
            "itemtype": "method",
            "name": "didUnwatch",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                },
                {
                    "name": "keyName",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember",
            "module": "ember",
            "submodule": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 28003,
            "description": "Description",
            "itemtype": "method",
            "name": "setup",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                },
                {
                    "name": "keyName",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember",
            "module": "ember",
            "submodule": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 28017,
            "description": "Description",
            "itemtype": "method",
            "name": "teardown",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                },
                {
                    "name": "keyName",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember",
            "module": "ember",
            "submodule": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 28031,
            "description": "Description",
            "itemtype": "method",
            "name": "readOnly",
            "return": {
                "description": "ThisExpression"
            },
            "class": "Ember",
            "module": "ember",
            "submodule": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 28041,
            "description": "Description",
            "itemtype": "method",
            "name": "AliasedProperty_readOnlySet",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                },
                {
                    "name": "keyName",
                    "description": ""
                },
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember",
            "module": "ember",
            "submodule": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 28053,
            "description": "Description",
            "itemtype": "method",
            "name": "oneWay",
            "return": {
                "description": "ThisExpression"
            },
            "class": "Ember",
            "module": "ember",
            "submodule": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 28063,
            "description": "Description",
            "itemtype": "method",
            "name": "AliasedProperty_oneWaySet",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                },
                {
                    "name": "keyName",
                    "description": ""
                },
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember",
            "module": "ember",
            "submodule": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 28092,
            "description": "Description",
            "itemtype": "method",
            "name": "isNativeFunc",
            "params": [
                {
                    "name": "func",
                    "description": ""
                }
            ],
            "return": {
                "description": "LogicalExpression"
            },
            "class": "Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 28195,
            "description": "Array polyfills to support ES5 features in older browsers.",
            "itemtype": "property",
            "name": "ArrayPolyfills",
            "class": "Ember",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 28231,
            "description": "Debug parameter you can turn on. This will log all bindings that fire to\nthe console. This should be disabled in production code. Note that you\ncan also enable this from the console or temporarily.",
            "itemtype": "property",
            "name": "LOG_BINDINGS",
            "type": "Boolean",
            "default": "false",
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 28245,
            "description": "Returns true if the provided path is global (e.g., `MyApp.fooController.bar`)\ninstead of local (`foo.bar.baz`).",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "isGlobalPath",
            "params": [
                {
                    "name": "path",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 28258,
            "description": "Description",
            "itemtype": "method",
            "name": "getWithGlobals",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                },
                {
                    "name": "path",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 28273,
            "description": "Description",
            "itemtype": "method",
            "name": "Binding",
            "params": [
                {
                    "name": "toPath",
                    "description": ""
                },
                {
                    "name": "fromPath",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 28295,
            "description": "This copies the Binding so it can be connected to another object.",
            "itemtype": "method",
            "name": "copy",
            "return": {
                "description": "copy"
            },
            "class": "Ember.Binding",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 28310,
            "description": "This will set `from` property path to the specified value. It will not\nattempt to resolve this property path to an actual object until you\nconnect the binding.\nThe binding will search for the property path starting at the root object\nyou pass when you `connect()` the binding. It follows the same rules as\n`get()` - see that method for more information.",
            "itemtype": "method",
            "name": "from",
            "params": [
                {
                    "name": "path",
                    "description": "the property path to connect to",
                    "type": "String"
                }
            ],
            "return": {
                "description": "ThisExpression"
            },
            "class": "Ember.Binding",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 28326,
            "description": "This will set the `to` property path to the specified value. It will not\nattempt to resolve this property path to an actual object until you\nconnect the binding.\nThe binding will search for the property path starting at the root object\nyou pass when you `connect()` the binding. It follows the same rules as\n`get()` - see that method for more information.",
            "itemtype": "method",
            "name": "to",
            "params": [
                {
                    "name": "path",
                    "description": ""
                }
            ],
            "return": {
                "description": "ThisExpression"
            },
            "class": "Ember.Binding",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 28342,
            "description": "Configures the binding as one way. A one-way binding will relay changes\non the `from` side to the `to` side, but not the other way around. This\nmeans that if you change the `to` side directly, the `from` side may have\na different value.",
            "itemtype": "method",
            "name": "oneWay",
            "return": {
                "description": "ThisExpression"
            },
            "class": "Ember.Binding",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 28355,
            "description": "Description",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "BinaryExpression"
            },
            "class": "Ember.Binding",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 28369,
            "description": "Attempts to connect this binding instance so that it can receive and relay\nchanges. This method will raise an exception if you have not set the\nfrom/to properties yet.",
            "itemtype": "method",
            "name": "connect",
            "params": [
                {
                    "name": "obj",
                    "description": "The root object for this binding.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "ThisExpression"
            },
            "class": "Ember.Binding",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 28394,
            "description": "Disconnects the binding instance. Changes will no longer be relayed. You\nwill not usually need to call this method.",
            "itemtype": "method",
            "name": "disconnect",
            "params": [
                {
                    "name": "obj",
                    "description": "The root object you passed when connecting the binding.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "ThisExpression"
            },
            "class": "Ember.Binding",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 28421,
            "description": "called when the from side changes",
            "itemtype": "method",
            "name": "fromDidChange",
            "params": [
                {
                    "name": "target",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Binding",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 28431,
            "description": "called when the to side changes",
            "itemtype": "method",
            "name": "toDidChange",
            "params": [
                {
                    "name": "target",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Binding",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 28500,
            "description": "Description",
            "itemtype": "method",
            "name": "mixinProperties",
            "params": [
                {
                    "name": "to",
                    "description": ""
                },
                {
                    "name": "from",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Binding",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 28517,
            "description": "See `Ember.Binding.from`.",
            "static": 1,
            "itemtype": "method",
            "name": "from",
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Binding",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 28528,
            "description": "See `Ember.Binding.to`.",
            "static": 1,
            "itemtype": "method",
            "name": "to",
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Binding",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 28539,
            "description": "Creates a new Binding instance and makes it apply in a single direction.\nA one-way binding will relay changes on the `from` side object (supplied\nas the `from` argument) the `to` side, but not the other way around.\nThis means that if you change the \"to\" side directly, the \"from\" side may have\na different value.\nSee `Binding.oneWay`.\nbinding `oneWay`. You can instead pass `false` to disable `oneWay`, making the\nbinding two way again.",
            "itemtype": "method",
            "name": "oneWay",
            "params": [
                {
                    "name": "from",
                    "description": "from path.",
                    "type": "String"
                },
                {
                    "name": "flag",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Binding",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 28691,
            "description": "Global helper method to create a new binding. Just pass the root object\nalong with a `to` and `from` path to create and connect the binding.\nMust be relative to obj.\nMust be relative to obj or a global path.",
            "itemtype": "method",
            "name": "bind",
            "params": [
                {
                    "name": "obj",
                    "description": "The root object of the transform.",
                    "type": "Object"
                },
                {
                    "name": "to",
                    "description": "The path to the 'to' side of the binding.",
                    "type": "String"
                },
                {
                    "name": "from",
                    "description": "The path to the 'from' side of the binding.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 28742,
            "description": "Description",
            "itemtype": "method",
            "name": "firstKey",
            "params": [
                {
                    "name": "path",
                    "description": ""
                }
            ],
            "return": {
                "description": "MemberExpression"
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 28757,
            "description": "Description",
            "itemtype": "method",
            "name": "flushPendingChains",
            "return": {
                "description": ""
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 28774,
            "description": "Description",
            "itemtype": "method",
            "name": "addChainWatcher",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                },
                {
                    "name": "keyName",
                    "description": ""
                },
                {
                    "name": "node",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 28796,
            "description": "Description",
            "itemtype": "method",
            "name": "removeChainWatcher",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                },
                {
                    "name": "keyName",
                    "description": ""
                },
                {
                    "name": "node",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 28827,
            "description": "Description",
            "itemtype": "method",
            "name": "ChainNode",
            "params": [
                {
                    "name": "parent",
                    "description": ""
                },
                {
                    "name": "key",
                    "description": ""
                },
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 28866,
            "description": "Description",
            "itemtype": "method",
            "name": "lazyGet",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                },
                {
                    "name": "key",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 28895,
            "description": "Description",
            "itemtype": "method",
            "name": "value",
            "return": {
                "description": "MemberExpression"
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 28908,
            "description": "Description",
            "itemtype": "method",
            "name": "destroy",
            "return": {
                "description": ""
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 28922,
            "description": "Description",
            "itemtype": "method",
            "name": "copy",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                }
            ],
            "return": {
                "description": "ret"
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 28940,
            "description": "Description",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "path",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 28981,
            "description": "Description",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "path",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 29011,
            "description": "Description",
            "itemtype": "method",
            "name": "chain",
            "params": [
                {
                    "name": "key",
                    "description": ""
                },
                {
                    "name": "path",
                    "description": ""
                },
                {
                    "name": "src",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 29035,
            "description": "Description",
            "itemtype": "method",
            "name": "unchain",
            "params": [
                {
                    "name": "key",
                    "description": ""
                },
                {
                    "name": "path",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 29061,
            "description": "Description",
            "itemtype": "method",
            "name": "willChange",
            "params": [
                {
                    "name": "events",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 29079,
            "description": "Description",
            "itemtype": "method",
            "name": "chainWillChange",
            "params": [
                {
                    "name": "chain",
                    "description": ""
                },
                {
                    "name": "path",
                    "description": ""
                },
                {
                    "name": "depth",
                    "description": ""
                },
                {
                    "name": "events",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 29104,
            "description": "Description",
            "itemtype": "method",
            "name": "chainDidChange",
            "params": [
                {
                    "name": "chain",
                    "description": ""
                },
                {
                    "name": "path",
                    "description": ""
                },
                {
                    "name": "depth",
                    "description": ""
                },
                {
                    "name": "events",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 29128,
            "description": "Description",
            "itemtype": "method",
            "name": "didChange",
            "params": [
                {
                    "name": "events",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 29167,
            "description": "Description",
            "itemtype": "method",
            "name": "finishChains",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 29217,
            "description": "Description",
            "itemtype": "method",
            "name": "UNDEFINED",
            "return": {
                "description": ""
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 29312,
            "description": "Properties are cacheable by default. Computed property will automatically\ncache the return value of your function until one of the dependent keys changes.\nCall `volatile()` to set it into non-cached mode. When in this mode\nthe computed property will not automatically cache the return value.\nHowever, if a property is properly observable, there is no reason to disable\ncaching.",
            "chainable": 1,
            "itemtype": "method",
            "name": "cacheable",
            "params": [
                {
                    "name": "aFlag",
                    "description": "optional set to `false` to disable caching",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "ThisExpression"
            },
            "class": "Ember.ComputedProperty",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 29329,
            "description": "Call on a computed property to set it into non-cached mode. When in this\nmode the computed property will not automatically cache the return value.\n```javascript\nvar outsideService = Ember.Object.extend({\nvalue: function() {\nreturn OutsideService.getValue();\n}.property().volatile()\n}).create();\n```",
            "chainable": 1,
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ComputedProperty",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 29346,
            "description": "Call on a computed property to set it into read-only mode. When in this\nmode the computed property will throw an error when set.\n```javascript\nvar Person = Ember.Object.extend({\nguid: function() {\nreturn 'guid-guid-guid';\n}.property().readOnly()\n});\nvar person = Person.create();\nperson.set('guid', 'new-guid'); // will throw an exception\n```",
            "chainable": 1,
            "itemtype": "method",
            "name": "readOnly",
            "params": [
                {
                    "name": "readOnly",
                    "description": ""
                }
            ],
            "return": {
                "description": "ThisExpression"
            },
            "class": "Ember.ComputedProperty",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 29368,
            "description": "Sets the dependent keys on this computed property. Pass any number of\narguments containing key paths that this computed property depends on.\n```javascript\nvar President = Ember.Object.extend({\nfullName: computed(function() {\nreturn this.get('firstName') + ' ' + this.get('lastName');\n// Tell Ember that this computed property depends on firstName\n// and lastName\n}).property('firstName', 'lastName')\n});\nvar president = President.create({\nfirstName: 'Barack',\nlastName: 'Obama'\n});\npresident.get('fullName'); // 'Barack Obama'\n```",
            "chainable": 1,
            "itemtype": "method",
            "name": "property",
            "return": {
                "description": "ThisExpression"
            },
            "class": "Ember.ComputedProperty",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 29392,
            "description": "Description",
            "itemtype": "method",
            "name": "addArg",
            "params": [
                {
                    "name": "property",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ComputedProperty",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 29411,
            "description": "In some cases, you may want to annotate computed properties with additional\nmetadata about how they function or what values they operate on. For example,\ncomputed property functions may close over variables that are then no longer\navailable for introspection.\nYou can pass a hash of these values to a computed property like this:\n```\nperson: function() {\nvar personId = this.get('personId');\nreturn App.Person.create({ id: personId });\n}.property().meta({ type: App.Person })\n```\nThe hash that you pass to the `meta()` function will be saved on the\ncomputed property descriptor under the `_meta` key. Ember runtime\nexposes a public API for retrieving these values from classes,\nvia the `metaForProperty()` function.",
            "chainable": 1,
            "itemtype": "method",
            "name": "meta",
            "params": [
                {
                    "name": "meta",
                    "description": "",
                    "type": "Hash"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ComputedProperty",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 29441,
            "description": "impl descriptor API",
            "itemtype": "method",
            "name": "didChange",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                },
                {
                    "name": "keyName",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ComputedProperty",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 29460,
            "description": "Description",
            "itemtype": "method",
            "name": "finishChains",
            "params": [
                {
                    "name": "chainNodes",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ComputedProperty",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 29473,
            "description": "Access the value of the function backing the computed property.\nIf this property has already been cached, return the cached result.\nOtherwise, call the function passing the property name as an argument.\n```javascript\nvar Person = Ember.Object.extend({\nfullName: function(keyName) {\n// the keyName parameter is 'fullName' in this case.\nreturn this.get('firstName') + ' ' + this.get('lastName');\n}.property('firstName', 'lastName')\n});\nvar tom = Person.create({\nfirstName: 'Tom',\nlastName: 'Dale'\n});\ntom.get('fullName') // 'Tom Dale'\n```",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                },
                {
                    "name": "keyName",
                    "description": "The key being accessed.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "ret"
            },
            "class": "Ember.ComputedProperty",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 29525,
            "description": "Set the value of a computed property. If the function that backs your\ncomputed property does not accept arguments then the default action for\nsetting would be to define the property on the current object, and set\nthe value of the property to the value being set.\nGenerally speaking if you intend for your computed property to be set\nyour backing function should accept either two or three arguments.",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                },
                {
                    "name": "keyName",
                    "description": "The key being accessed.",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": "ret"
            },
            "class": "Ember.ComputedProperty",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 29610,
            "description": "called before property is overridden",
            "itemtype": "method",
            "name": "teardown",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                },
                {
                    "name": "keyName",
                    "description": ""
                }
            ],
            "return": {
                "description": "Literal"
            },
            "class": "Ember.ComputedProperty",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 29630,
            "description": "This helper returns a new property descriptor that wraps the passed\ncomputed property function. You can use this helper to define properties\nwith mixins or via `Ember.defineProperty()`.\nThe function you pass will be used to both get and set property values.\nThe function should accept two parameters, key and value. If value is not\nundefined you should set the value first. In either case return the\ncurrent value of the property.",
            "itemtype": "method",
            "name": "computed",
            "params": [
                {
                    "name": "func",
                    "description": "The computed property function.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "cp"
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 29664,
            "description": "Returns the cached value for a property, if one exists.\nThis can be useful for peeking at the value of a computed\nproperty that is generated lazily, without accidentally causing\nit to be created.\nto return",
            "itemtype": "method",
            "name": "cacheFor",
            "params": [
                {
                    "name": "obj",
                    "description": "the object whose property you want to check",
                    "type": "Object"
                },
                {
                    "name": "key",
                    "description": "the name of the property whose cached value you want",
                    "type": "String"
                }
            ],
            "return": {
                "description": "ret"
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 29685,
            "description": "Description",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "cache",
                    "description": ""
                },
                {
                    "name": "key",
                    "description": ""
                },
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 29701,
            "description": "Description",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "cache",
                    "description": ""
                },
                {
                    "name": "key",
                    "description": ""
                }
            ],
            "return": {
                "description": "ret"
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 29714,
            "description": "Description",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "cache",
                    "description": ""
                },
                {
                    "name": "key",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 29747,
            "description": "Description",
            "itemtype": "method",
            "name": "getProperties",
            "params": [
                {
                    "name": "self",
                    "description": ""
                },
                {
                    "name": "propertyNames",
                    "description": ""
                }
            ],
            "return": {
                "description": "ret"
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 29762,
            "description": "Description",
            "itemtype": "method",
            "name": "registerComputed",
            "params": [
                {
                    "name": "name",
                    "description": ""
                },
                {
                    "name": "macro",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 29770,
            "description": "Description",
            "itemtype": "method",
            "name": "name",
            "params": [
                {
                    "name": "dependentKey",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 29784,
            "description": "Description",
            "itemtype": "method",
            "name": "registerComputedWithProperties",
            "params": [
                {
                    "name": "name",
                    "description": ""
                },
                {
                    "name": "macro",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 29792,
            "description": "Description",
            "itemtype": "method",
            "name": "name",
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 29808,
            "description": "A computed property that returns true if the value of the dependent\nproperty is null, an empty string, empty array, or empty function.\nExample\n```javascript\nvar ToDoList = Ember.Object.extend({\ndone: Ember.computed.empty('todos')\n});\nvar todoList = ToDoList.create({\ntodos: ['Unit Test', 'Documentation', 'Release']\n});\ntodoList.get('done'); // false\ntodoList.get('todos').clear();\ntodoList.get('done'); // true\n```\nthe original value for property",
            "since": "1.6.0",
            "itemtype": "method",
            "name": "empty",
            "params": [
                {
                    "name": "dependentKey",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 29836,
            "description": "A computed property that returns true if the value of the dependent\nproperty is NOT null, an empty string, empty array, or empty function.\nExample\n```javascript\nvar Hamster = Ember.Object.extend({\nhasStuff: Ember.computed.notEmpty('backpack')\n});\nvar hamster = Hamster.create({ backpack: ['Food', 'Sleeping Bag', 'Tent'] });\nhamster.get('hasStuff');         // true\nhamster.get('backpack').clear(); // []\nhamster.get('hasStuff');         // false\n```\noriginal value for property is not empty.",
            "itemtype": "method",
            "name": "notEmpty",
            "params": [
                {
                    "name": "dependentKey",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 29861,
            "description": "A computed property that returns true if the value of the dependent\nproperty is null or undefined. This avoids errors from JSLint complaining\nabout use of ==, which can be technically confusing.\n\nExample\n\n```javascript\nvar Hamster = Ember.Object.extend({\n  isHungry: Ember.computed.none('food')\n});\n\nvar hamster = Hamster.create();\n\nhamster.get('isHungry'); // true\nhamster.set('food', 'Banana');\nhamster.get('isHungry'); // false\nhamster.set('food', null);\nhamster.get('isHungry'); // true\n```",
            "itemtype": "method",
            "name": "computed.none",
            "params": [
                {
                    "name": "dependentKey",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "computed property which\nreturns true if original value for property is null or undefined.",
                "type": "Ember.ComputedProperty"
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 29892,
            "description": "A computed property that returns the inverse boolean value\nof the original value for the dependent property.\n\nExample\n\n```javascript\nvar User = Ember.Object.extend({\n  isAnonymous: Ember.computed.not('loggedIn')\n});\n\nvar user = User.create({loggedIn: false});\n\nuser.get('isAnonymous'); // true\nuser.set('loggedIn', true);\nuser.get('isAnonymous'); // false\n```",
            "itemtype": "method",
            "name": "computed.not",
            "params": [
                {
                    "name": "dependentKey",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "computed property which returns\ninverse of the original value for property",
                "type": "Ember.ComputedProperty"
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 29920,
            "description": "A computed property that converts the provided dependent property\ninto a boolean value.\n\n```javascript\nvar Hamster = Ember.Object.extend({\n  hasBananas: Ember.computed.bool('numBananas')\n});\n\nvar hamster = Hamster.create();\n\nhamster.get('hasBananas'); // false\nhamster.set('numBananas', 0);\nhamster.get('hasBananas'); // false\nhamster.set('numBananas', 1);\nhamster.get('hasBananas'); // true\nhamster.set('numBananas', null);\nhamster.get('hasBananas'); // false\n```",
            "itemtype": "method",
            "name": "computed.bool",
            "params": [
                {
                    "name": "dependentKey",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "computed property which converts\nto boolean the original value for property",
                "type": "Ember.ComputedProperty"
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 29950,
            "description": "A computed property which matches the original value for the\ndependent property against a given RegExp, returning `true`\nif they values matches the RegExp and `false` if it does not.\n\nExample\n\n```javascript\nvar User = Ember.Object.extend({\n  hasValidEmail: Ember.computed.match('email', /^.+@.+\\..+$/)\n});\n\nvar user = User.create({loggedIn: false});\n\nuser.get('hasValidEmail'); // false\nuser.set('email', '');\nuser.get('hasValidEmail'); // false\nuser.set('email', 'ember_hamster@example.com');\nuser.get('hasValidEmail'); // true\n```",
            "itemtype": "method",
            "name": "computed.match",
            "params": [
                {
                    "name": "dependentKey",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "regexp",
                    "description": "",
                    "type": "RegExp"
                }
            ],
            "return": {
                "description": "computed property which match\nthe original value for property against a given RegExp",
                "type": "Ember.ComputedProperty"
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 29983,
            "description": "A computed property that returns true if the provided dependent property\nis equal to the given value.\n\nExample\n\n```javascript\nvar Hamster = Ember.Object.extend({\n  napTime: Ember.computed.equal('state', 'sleepy')\n});\n\nvar hamster = Hamster.create();\n\nhamster.get('napTime'); // false\nhamster.set('state', 'sleepy');\nhamster.get('napTime'); // true\nhamster.set('state', 'hungry');\nhamster.get('napTime'); // false\n```",
            "itemtype": "method",
            "name": "computed.equal",
            "params": [
                {
                    "name": "dependentKey",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "String|Number|Object"
                }
            ],
            "return": {
                "description": "computed property which returns true if\nthe original value for property is equal to the given value.",
                "type": "Ember.ComputedProperty"
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 30014,
            "description": "A computed property that returns true if the provied dependent property\nis greater than the provided value.\n\nExample\n\n```javascript\nvar Hamster = Ember.Object.extend({\n  hasTooManyBananas: Ember.computed.gt('numBananas', 10)\n});\n\nvar hamster = Hamster.create();\n\nhamster.get('hasTooManyBananas'); // false\nhamster.set('numBananas', 3);\nhamster.get('hasTooManyBananas'); // false\nhamster.set('numBananas', 11);\nhamster.get('hasTooManyBananas'); // true\n```",
            "itemtype": "method",
            "name": "computed.gt",
            "params": [
                {
                    "name": "dependentKey",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "computed property which returns true if\nthe original value for property is greater then given value.",
                "type": "Ember.ComputedProperty"
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 30045,
            "description": "A computed property that returns true if the provided dependent property\nis greater than or equal to the provided value.\n\nExample\n\n```javascript\nvar Hamster = Ember.Object.extend({\n  hasTooManyBananas: Ember.computed.gte('numBananas', 10)\n});\n\nvar hamster = Hamster.create();\n\nhamster.get('hasTooManyBananas'); // false\nhamster.set('numBananas', 3);\nhamster.get('hasTooManyBananas'); // false\nhamster.set('numBananas', 10);\nhamster.get('hasTooManyBananas'); // true\n```",
            "itemtype": "method",
            "name": "computed.gte",
            "params": [
                {
                    "name": "dependentKey",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "computed property which returns true if\nthe original value for property is greater or equal then given value.",
                "type": "Ember.ComputedProperty"
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 30076,
            "description": "A computed property that returns true if the provided dependent property\nis less than the provided value.\n\nExample\n\n```javascript\nvar Hamster = Ember.Object.extend({\n  needsMoreBananas: Ember.computed.lt('numBananas', 3)\n});\n\nvar hamster = Hamster.create();\n\nhamster.get('needsMoreBananas'); // true\nhamster.set('numBananas', 3);\nhamster.get('needsMoreBananas'); // false\nhamster.set('numBananas', 2);\nhamster.get('needsMoreBananas'); // true\n```",
            "itemtype": "method",
            "name": "computed.lt",
            "params": [
                {
                    "name": "dependentKey",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "computed property which returns true if\nthe original value for property is less then given value.",
                "type": "Ember.ComputedProperty"
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 30107,
            "description": "A computed property that returns true if the provided dependent property\nis less than or equal to the provided value.\n\nExample\n\n```javascript\nvar Hamster = Ember.Object.extend({\n  needsMoreBananas: Ember.computed.lte('numBananas', 3)\n});\n\nvar hamster = Hamster.create();\n\nhamster.get('needsMoreBananas'); // true\nhamster.set('numBananas', 5);\nhamster.get('needsMoreBananas'); // false\nhamster.set('numBananas', 3);\nhamster.get('needsMoreBananas'); // true\n```",
            "itemtype": "method",
            "name": "computed.lte",
            "params": [
                {
                    "name": "dependentKey",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "computed property which returns true if\nthe original value for property is less or equal then given value.",
                "type": "Ember.ComputedProperty"
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 30138,
            "description": "A computed property that performs a logical `and` on the\noriginal values for the provided dependent properties.\n\nExample\n\n```javascript\nvar Hamster = Ember.Object.extend({\n  readyForCamp: Ember.computed.and('hasTent', 'hasBackpack')\n});\n\nvar hamster = Hamster.create();\n\nhamster.get('readyForCamp'); // false\nhamster.set('hasTent', true);\nhamster.get('readyForCamp'); // false\nhamster.set('hasBackpack', true);\nhamster.get('readyForCamp'); // true\n```",
            "itemtype": "method",
            "name": "computed.and",
            "params": [
                {
                    "name": "dependentKey",
                    "description": "",
                    "type": "String",
                    "multiple": true
                }
            ],
            "return": {
                "description": "computed property which performs\na logical `and` on the values of all the original values for properties.",
                "type": "Ember.ComputedProperty"
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 30173,
            "description": "A computed property which performs a logical `or` on the\noriginal values for the provided dependent properties.\n\nExample\n\n```javascript\nvar Hamster = Ember.Object.extend({\n  readyForRain: Ember.computed.or('hasJacket', 'hasUmbrella')\n});\n\nvar hamster = Hamster.create();\n\nhamster.get('readyForRain'); // false\nhamster.set('hasJacket', true);\nhamster.get('readyForRain'); // true\n```",
            "itemtype": "method",
            "name": "computed.or",
            "params": [
                {
                    "name": "dependentKey",
                    "description": "",
                    "type": "String",
                    "multiple": true
                }
            ],
            "return": {
                "description": "computed property which performs\na logical `or` on the values of all the original values for properties.",
                "type": "Ember.ComputedProperty"
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 30206,
            "description": "A computed property that returns the first truthy value\nfrom a list of dependent properties.\n\nExample\n\n```javascript\nvar Hamster = Ember.Object.extend({\n  hasClothes: Ember.computed.any('hat', 'shirt')\n});\n\nvar hamster = Hamster.create();\n\nhamster.get('hasClothes'); // null\nhamster.set('shirt', 'Hawaiian Shirt');\nhamster.get('hasClothes'); // 'Hawaiian Shirt'\n```",
            "itemtype": "method",
            "name": "computed.any",
            "params": [
                {
                    "name": "dependentKey",
                    "description": "",
                    "type": "String",
                    "multiple": true
                }
            ],
            "return": {
                "description": "computed property which returns\nthe first truthy value of given list of properties.",
                "type": "Ember.ComputedProperty"
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 30239,
            "description": "A computed property that returns the array of values\nfor the provided dependent properties.\n\nExample\n\n```javascript\nvar Hamster = Ember.Object.extend({\n  clothes: Ember.computed.collect('hat', 'shirt')\n});\n\nvar hamster = Hamster.create();\n\nhamster.get('clothes'); // [null, null]\nhamster.set('hat', 'Camp Hat');\nhamster.set('shirt', 'Camp Shirt');\nhamster.get('clothes'); // ['Camp Hat', 'Camp Shirt']\n```",
            "itemtype": "method",
            "name": "computed.collect",
            "params": [
                {
                    "name": "dependentKey",
                    "description": "",
                    "type": "String",
                    "multiple": true
                }
            ],
            "return": {
                "description": "computed property which maps\nvalues of all passed properties in to an array.",
                "type": "Ember.ComputedProperty"
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 30278,
            "description": "Creates a new property that is an alias for another property\non an object. Calls to `get` or `set` this property behave as\nthough they were called on the original property.\n\n```javascript\nvar Person = Ember.Object.extend({\n  name: 'Alex Matchneer',\n  nomen: Ember.computed.alias('name')\n});\n\nvar alex = Person.create();\n\nalex.get('nomen'); // 'Alex Matchneer'\nalex.get('name');  // 'Alex Matchneer'\n\nalex.set('nomen', '@machty');\nalex.get('name');  // '@machty'\n```",
            "itemtype": "method",
            "name": "computed.alias",
            "params": [
                {
                    "name": "dependentKey",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "computed property which creates an\nalias to the original value for property.",
                "type": "Ember.ComputedProperty"
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 30306,
            "description": "Where `computed.alias` aliases `get` and `set`, and allows for bidirectional\ndata flow, `computed.oneWay` only provides an aliased `get`. The `set` will\nnot mutate the upstream property, rather causes the current property to\nbecome the value set. This causes the downstream property to permanently\ndiverge from the upstream property.\nExample\n```javascript\nvar User = Ember.Object.extend({\nfirstName: null,\nlastName: null,\nnickName: Ember.computed.oneWay('firstName')\n});\nvar teddy = User.create({\nfirstName: 'Teddy',\nlastName:  'Zeenny'\n});\nteddy.get('nickName');              // 'Teddy'\nteddy.set('nickName', 'TeddyBear'); // 'TeddyBear'\nteddy.get('firstName');             // 'Teddy'\n```\none way computed property to the original value for property.",
            "itemtype": "method",
            "name": "oneWay",
            "params": [
                {
                    "name": "dependentKey",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 30338,
            "description": "This is a more semantically meaningful alias of `computed.oneWay`,\nwhose name is somewhat ambiguous as to which direction the data flows.",
            "itemtype": "method",
            "name": "computed.reads",
            "params": [
                {
                    "name": "dependentKey",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "computed property which creates a\n  one way computed property to the original value for property.",
                "type": "Ember.ComputedProperty"
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 30351,
            "description": "Where `computed.oneWay` provides oneWay bindings, `computed.readOnly` provides\na readOnly one way binding. Very often when using `computed.oneWay` one does\nnot also want changes to propogate back up, as they will replace the value.\nThis prevents the reverse flow, and also throws an exception when it occurs.\nExample\n```javascript\nvar User = Ember.Object.extend({\nfirstName: null,\nlastName: null,\nnickName: Ember.computed.readOnly('firstName')\n});\nvar teddy = User.create({\nfirstName: 'Teddy',\nlastName:  'Zeenny'\n});\nteddy.get('nickName');              // 'Teddy'\nteddy.set('nickName', 'TeddyBear'); // throws Exception\n// throw new Ember.Error('Cannot Set: nickName on: <User:ember27288>' );`\nteddy.get('firstName');             // 'Teddy'\n```\none way computed property to the original value for property.",
            "since": "1.5.0",
            "itemtype": "method",
            "name": "readOnly",
            "params": [
                {
                    "name": "dependentKey",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 30382,
            "description": "A computed property that acts like a standard getter and setter,\nbut returns the value at the provided `defaultPath` if the\nproperty itself has not been set to a value\n\nExample\n\n```javascript\nvar Hamster = Ember.Object.extend({\n  wishList: Ember.computed.defaultTo('favoriteFood')\n});\n\nvar hamster = Hamster.create({ favoriteFood: 'Banana' });\n\nhamster.get('wishList');                     // 'Banana'\nhamster.set('wishList', 'More Unit Tests');\nhamster.get('wishList');                     // 'More Unit Tests'\nhamster.get('favoriteFood');                 // 'Banana'\n```",
            "itemtype": "method",
            "name": "computed.defaultTo",
            "params": [
                {
                    "name": "defaultPath",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "computed property which acts like\na standard getter and setter, but defaults to the value from `defaultPath`.",
                "type": "Ember.ComputedProperty"
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 30409,
            "description": "Description",
            "itemtype": "method",
            "name": "defaultTo",
            "params": [
                {
                    "name": "defaultPath",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 30424,
            "description": "Creates a new property that is an alias for another property\non an object. Calls to `get` or `set` this property behave as\nthough they were called on the original property, but also\nprint a deprecation warning.\nalias with a deprecation to the original value for property.",
            "since": "1.7.0",
            "itemtype": "method",
            "name": "deprecatingAlias",
            "params": [
                {
                    "name": "dependentKey",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 30498,
            "description": "Description",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "Literal"
            },
            "class": "Ember",
            "module": "ember",
            "submodule": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 30506,
            "itemtype": "property",
            "name": "VERSION",
            "type": "String",
            "default": "'1.7.0'",
            "static": 1,
            "class": "Ember",
            "module": "ember",
            "submodule": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 30514,
            "description": "Standard environmental variables. You can define these in a global `EmberENV`\nvariable before loading Ember to control various configuration settings.\n\nFor backwards compatibility with earlier versions of Ember the global `ENV`\nvariable will be used if `EmberENV` is not defined.",
            "itemtype": "property",
            "name": "ENV",
            "type": "Hash",
            "class": "Ember",
            "module": "ember",
            "submodule": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 30561,
            "description": "Test that a feature is enabled. Parsed by Ember's build tools to leave\nexperimental features out of beta/stable builds.\nYou can define the following configuration options:\n`ENV.ENABLE_ALL_FEATURES` - force all features to be enabled.\n`ENV.ENABLE_OPTIONAL_FEATURES` - enable any features that have not been explicitly\nenabled/disabled.",
            "since": "1.1.0",
            "itemtype": "method",
            "name": "isEnabled",
            "params": [
                {
                    "name": "feature",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.FEATURES",
            "module": "ember",
            "submodule": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 30592,
            "description": "Determines whether Ember should enhance some built-in object prototypes to\nprovide a more friendly API. If enabled, a few methods will be added to\n`Function`, `String`, and `Array`. `Object.prototype` will not be enhanced,\nwhich is the one that causes most trouble for people.\n\nIn general we recommend leaving this option set to true since it rarely\nconflicts with other code. If you need to turn it off however, you can\ndefine an `ENV.EXTEND_PROTOTYPES` config to disable it.",
            "itemtype": "property",
            "name": "EXTEND_PROTOTYPES",
            "type": "Boolean",
            "default": "true",
            "class": "Ember.Ember",
            "module": "ember",
            "submodule": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 30613,
            "description": "Determines whether Ember logs a full stack trace during deprecation warnings",
            "itemtype": "property",
            "name": "LOG_STACKTRACE_ON_DEPRECATION",
            "type": "Boolean",
            "default": "true",
            "class": "Ember.Ember",
            "module": "ember",
            "submodule": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 30622,
            "description": "Determines whether Ember should add ECMAScript 5 shims to older browsers.",
            "itemtype": "property",
            "name": "SHIM_ES5",
            "type": "Boolean",
            "default": "Ember.EXTEND_PROTOTYPES",
            "class": "Ember.Ember",
            "module": "ember",
            "submodule": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 30631,
            "description": "Determines whether Ember logs info about version of used libraries",
            "itemtype": "property",
            "name": "LOG_VERSION",
            "type": "Boolean",
            "default": "true",
            "class": "Ember.Ember",
            "module": "ember",
            "submodule": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 30640,
            "description": "Empty function. Useful for some operations. Always returns `this`.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "K",
            "return": {
                "description": "ThisExpression"
            },
            "class": "Ember.Ember",
            "module": "ember",
            "submodule": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 30659,
            "description": "Description",
            "itemtype": "method",
            "name": "deprecateFunc",
            "params": [
                {
                    "name": "_",
                    "description": ""
                },
                {
                    "name": "func",
                    "description": ""
                }
            ],
            "return": {
                "description": "func"
            },
            "class": "Ember.Ember",
            "module": "ember",
            "submodule": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 30696,
            "description": "This function returns a map of unique dependencies for a\ngiven object and key.",
            "itemtype": "method",
            "name": "keysForDep",
            "params": [
                {
                    "name": "depsMeta",
                    "description": ""
                },
                {
                    "name": "depKey",
                    "description": ""
                }
            ],
            "return": {
                "description": "keys"
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 30718,
            "description": "Description",
            "itemtype": "method",
            "name": "metaForDeps",
            "params": [
                {
                    "name": "meta",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 30728,
            "description": "Description",
            "itemtype": "method",
            "name": "addDependentKeys",
            "params": [
                {
                    "name": "desc",
                    "description": ""
                },
                {
                    "name": "obj",
                    "description": ""
                },
                {
                    "name": "keyName",
                    "description": ""
                },
                {
                    "name": "meta",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 30757,
            "description": "Description",
            "itemtype": "method",
            "name": "removeDependentKeys",
            "params": [
                {
                    "name": "desc",
                    "description": ""
                },
                {
                    "name": "obj",
                    "description": ""
                },
                {
                    "name": "keyName",
                    "description": ""
                },
                {
                    "name": "meta",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 30806,
            "description": "Calls the map function on the passed object with a specified callback. This\nuses `Ember.ArrayPolyfill`'s-map method when necessary.",
            "itemtype": "method",
            "name": "map",
            "params": [
                {
                    "name": "obj",
                    "description": "The object that should be mapped",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "The callback to execute",
                    "type": "Function"
                },
                {
                    "name": "thisArg",
                    "description": "Value to use as this when executing *callback*",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "ConditionalExpression"
            },
            "class": "Ember.EnumerableUtils",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 31065,
            "description": "The event system uses a series of nested hashes to store listeners on an\nobject. When a listener is registered, or when an event arrives, these\nhashes are consulted to determine which target and action pair to invoke.\nThe hashes are stored in the object's meta hash, and look like this:\n// Object's meta hash\n{\nlisteners: {       // variable name: `listenerSet`\n\"foo:changed\": [ // variable name: `actions`\ntarget, method, flags\n]\n}\n}",
            "itemtype": "method",
            "name": "indexOf",
            "params": [
                {
                    "name": "array",
                    "description": ""
                },
                {
                    "name": "target",
                    "description": ""
                },
                {
                    "name": "method",
                    "description": ""
                }
            ],
            "return": {
                "description": "index"
            },
            "class": "Ember.Error",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 31097,
            "description": "Description",
            "itemtype": "method",
            "name": "actionsFor",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                },
                {
                    "name": "eventName",
                    "description": ""
                }
            ],
            "return": {
                "description": "actions"
            },
            "class": "Ember.Error",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 31127,
            "description": "Description",
            "itemtype": "method",
            "name": "listenersUnion",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                },
                {
                    "name": "eventName",
                    "description": ""
                },
                {
                    "name": "otherActions",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Error",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 31153,
            "description": "Description",
            "itemtype": "method",
            "name": "listenersDiff",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                },
                {
                    "name": "eventName",
                    "description": ""
                },
                {
                    "name": "otherActions",
                    "description": ""
                }
            ],
            "return": {
                "description": "diffActions"
            },
            "class": "Ember.Error",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 31262,
            "description": "Suspend listener during callback.\nThis should only be used by the target of the event listener\nwhen it is taking an action that would cause the event, e.g.\nan object might suspend its property change listener while it is\nsetting that property.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "suspendListener",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                },
                {
                    "name": "eventName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "target",
                    "description": ""
                },
                {
                    "name": "method",
                    "description": ""
                },
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 31291,
            "description": "Description",
            "itemtype": "method",
            "name": "tryable",
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 31297,
            "description": "Description",
            "itemtype": "method",
            "name": "finalizer",
            "return": {
                "description": ""
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 31341,
            "description": "Description",
            "itemtype": "method",
            "name": "tryable",
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 31348,
            "description": "Description",
            "itemtype": "method",
            "name": "finalizer",
            "return": {
                "description": ""
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 31508,
            "description": "Expands `pattern`, invoking `callback` for each expansion.\nThe only pattern supported is brace-expansion, anything else will be passed\nonce to `callback` directly. Brace expansion can only appear at the end of a\npattern, for an example see the last call below.\nExample\n```js\nfunction echo(arg){ console.log(arg); }\nEmber.expandProperties('foo.bar', echo);        //=> 'foo.bar'\nEmber.expandProperties('{foo,bar}', echo);      //=> 'foo', 'bar'\nEmber.expandProperties('foo.{bar,baz}', echo);  //=> 'foo.bar', 'foo.baz'\nEmber.expandProperties('{foo,bar}.baz', echo);  //=> '{foo,bar}.baz'\n```",
            "itemtype": "method",
            "name": "",
            "access": "private",
            "tagname": "expansion, and is passed the expansion.",
            "params": [
                {
                    "name": "pattern",
                    "description": "The property pattern to expand.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The callback to invoke.  It is invoked once per",
                    "type": "Function"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 31555,
            "description": "To get multiple properties at once, call `Ember.getProperties`\nwith an object followed by a list of strings or an array:\n```javascript\nEmber.getProperties(record, 'firstName', 'lastName', 'zipCode');\n// { firstName: 'John', lastName: 'Doe', zipCode: '10011' }\n```\nis equivalent to:\n```javascript\nEmber.getProperties(record, ['firstName', 'lastName', 'zipCode']);\n// { firstName: 'John', lastName: 'Doe', zipCode: '10011' }\n```",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                }
            ],
            "return": {
                "description": "ret"
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 31640,
            "description": "Description",
            "itemtype": "method",
            "name": "populateListeners",
            "params": [
                {
                    "name": "name",
                    "description": ""
                }
            ],
            "return": {
                "description": "listeners"
            },
            "class": "Ember.Instrumentation",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 31667,
            "description": "Notifies event's subscribers, calls `before` and `after` hooks.",
            "itemtype": "method",
            "name": "instrument",
            "params": [
                {
                    "name": "name",
                    "description": ""
                },
                {
                    "name": "payload",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "Function that you're instrumenting.",
                    "type": "Function"
                },
                {
                    "name": "binding",
                    "description": "Context that instrument function is called with.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Instrumentation",
            "module": "ember-metal",
            "namespace": "Ember.Instrumentation"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 31698,
            "description": "Description",
            "itemtype": "method",
            "name": "tryable",
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Instrumentation",
            "module": "ember-metal",
            "namespace": "Ember.Instrumentation"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 31712,
            "description": "Description",
            "itemtype": "method",
            "name": "catchable",
            "params": [
                {
                    "name": "e",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Instrumentation",
            "module": "ember-metal",
            "namespace": "Ember.Instrumentation"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 31723,
            "description": "Description",
            "itemtype": "method",
            "name": "finalizer",
            "return": {
                "description": ""
            },
            "class": "Ember.Instrumentation",
            "module": "ember-metal",
            "namespace": "Ember.Instrumentation"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 31818,
            "description": "A value is blank if it is empty or a whitespace string.\n```javascript\nEmber.isBlank();                // true\nEmber.isBlank(null);            // true\nEmber.isBlank(undefined);       // true\nEmber.isBlank('');              // true\nEmber.isBlank([]);              // true\nEmber.isBlank('\\n\\t');          // true\nEmber.isBlank('  ');            // true\nEmber.isBlank({});              // false\nEmber.isBlank('\\n\\t Hello');    // false\nEmber.isBlank('Hello world');   // false\nEmber.isBlank([1,2,3]);         // false\n```",
            "params": [
                {
                    "name": "obj",
                    "description": "Value to test",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "LogicalExpression"
            },
            "since": "1.5.0",
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 31851,
            "description": "Verifies that a value is `null` or an empty string, empty array,\nor empty function.\nConstrains the rules on `Ember.isNone` by returning false for empty\nstring and empty arrays.\n```javascript\nEmber.isEmpty();                // true\nEmber.isEmpty(null);            // true\nEmber.isEmpty(undefined);       // true\nEmber.isEmpty('');              // true\nEmber.isEmpty([]);              // true\nEmber.isEmpty('Adam Hawkins');  // false\nEmber.isEmpty([0,1,2]);         // false\n```",
            "itemtype": "method",
            "name": "isEmpty",
            "params": [
                {
                    "name": "obj",
                    "description": "Value to test",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "LogicalExpression"
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 31887,
            "description": "Returns true if the passed value is null or undefined. This avoids errors\nfrom JSLint complaining about use of ==, which can be technically\nconfusing.\n```javascript\nEmber.isNone();              // true\nEmber.isNone(null);          // true\nEmber.isNone(undefined);     // true\nEmber.isNone('');            // false\nEmber.isNone([]);            // false\nEmber.isNone(function() {});  // false\n```",
            "itemtype": "method",
            "name": "isNone",
            "params": [
                {
                    "name": "obj",
                    "description": "Value to test",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "LogicalExpression"
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 31925,
            "description": "Description",
            "itemtype": "method",
            "name": "getLibrary",
            "params": [
                {
                    "name": "name",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 31939,
            "description": "Description",
            "itemtype": "method",
            "name": "register",
            "params": [
                {
                    "name": "name",
                    "description": ""
                },
                {
                    "name": "version",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 31952,
            "description": "Description",
            "itemtype": "method",
            "name": "registerCoreLibrary",
            "params": [
                {
                    "name": "name",
                    "description": ""
                },
                {
                    "name": "version",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 31965,
            "description": "Description",
            "itemtype": "method",
            "name": "deRegister",
            "params": [
                {
                    "name": "name",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 31976,
            "description": "Description",
            "itemtype": "method",
            "name": "each",
            "params": [
                {
                    "name": "callback",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 32000,
            "description": "Description",
            "itemtype": "method",
            "name": "consoleMethod",
            "params": [
                {
                    "name": "name",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 32019,
            "description": "Description",
            "return": {
                "description": ""
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 32037,
            "description": "Description",
            "itemtype": "method",
            "name": "assertPolyfill",
            "params": [
                {
                    "name": "test",
                    "description": ""
                },
                {
                    "name": "message",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 32065,
            "description": "Logs the arguments to the console.\nYou can pass as many arguments as you want and they will be joined together with a space.\n\n ```javascript\n var foo = 1;\n Ember.Logger.log('log value of foo:', foo);\n // \"log value of foo: 1\" will be printed to the console\n ```",
            "itemtype": "method",
            "name": "log",
            "params": [
                {
                    "name": "arguments",
                    "description": "",
                    "type": "*"
                }
            ],
            "class": "Ember.Logger",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 32081,
            "description": "Prints the arguments to the console with a warning icon.\nYou can pass as many arguments as you want and they will be joined together with a space.\n\n ```javascript\n Ember.Logger.warn('Something happened!');\n // \"Something happened!\" will be printed to the console with a warning icon.\n ```",
            "itemtype": "method",
            "name": "warn",
            "params": [
                {
                    "name": "arguments",
                    "description": "",
                    "type": "*"
                }
            ],
            "class": "Ember.Logger",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 32096,
            "description": "Prints the arguments to the console with an error icon, red text and a stack trace.\nYou can pass as many arguments as you want and they will be joined together with a space.\n\n ```javascript\n Ember.Logger.error('Danger! Danger!');\n // \"Danger! Danger!\" will be printed to the console in red text.\n ```",
            "itemtype": "method",
            "name": "error",
            "params": [
                {
                    "name": "arguments",
                    "description": "",
                    "type": "*"
                }
            ],
            "class": "Ember.Logger",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 32111,
            "description": "Logs the arguments to the console.\nYou can pass as many arguments as you want and they will be joined together with a space.\n\n ```javascript\n var foo = 1;\n Ember.Logger.info('log value of foo:', foo);\n // \"log value of foo: 1\" will be printed to the console\n ```",
            "itemtype": "method",
            "name": "info",
            "params": [
                {
                    "name": "arguments",
                    "description": "",
                    "type": "*"
                }
            ],
            "class": "Ember.Logger",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 32127,
            "description": "Logs the arguments to the console in blue text.\nYou can pass as many arguments as you want and they will be joined together with a space.\n\n ```javascript\n var foo = 1;\n Ember.Logger.debug('log value of foo:', foo);\n // \"log value of foo: 1\" will be printed to the console\n ```",
            "itemtype": "method",
            "name": "debug",
            "params": [
                {
                    "name": "arguments",
                    "description": "",
                    "type": "*"
                }
            ],
            "class": "Ember.Logger",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 32143,
            "description": "If the value passed into `Ember.Logger.assert` is not truthy it will throw an error with a stack trace.\n\n ```javascript\n Ember.Logger.assert(true); // undefined\n Ember.Logger.assert(true === false); // Throws an Assertion failed error.\n ```",
            "itemtype": "method",
            "name": "assert",
            "params": [
                {
                    "name": "bool",
                    "description": "Value to test",
                    "type": "Boolean"
                }
            ],
            "class": "Ember.Logger",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 32191,
            "description": "Description",
            "itemtype": "method",
            "name": "copy",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                }
            ],
            "return": {
                "description": "output"
            },
            "class": "Ember.Logger",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 32207,
            "description": "Description",
            "itemtype": "method",
            "name": "copyMap",
            "params": [
                {
                    "name": "original",
                    "description": ""
                },
                {
                    "name": "newObject",
                    "description": ""
                }
            ],
            "return": {
                "description": "newObject"
            },
            "class": "Ember.Logger",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 32240,
            "static": 1,
            "itemtype": "method",
            "name": "create",
            "return": {
                "description": "NewExpression"
            },
            "class": "Ember.OrderedSet",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 32251,
            "description": "Description",
            "itemtype": "method",
            "name": "clear",
            "return": {
                "description": ""
            },
            "class": "Ember.OrderedSet",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 32261,
            "description": "Description",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.OrderedSet",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 32278,
            "description": "Description",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.OrderedSet",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 32297,
            "description": "Description",
            "itemtype": "method",
            "name": "isEmpty",
            "return": {
                "description": "BinaryExpression"
            },
            "class": "Ember.OrderedSet",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 32306,
            "description": "Description",
            "itemtype": "method",
            "name": "has",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                }
            ],
            "return": {
                "description": "BinaryExpression"
            },
            "class": "Ember.OrderedSet",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 32319,
            "description": "Description",
            "itemtype": "method",
            "name": "forEach",
            "params": [
                {
                    "name": "fn",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "self",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.OrderedSet",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 32335,
            "description": "Description",
            "itemtype": "method",
            "name": "toArray",
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.OrderedSet",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 32344,
            "description": "Description",
            "itemtype": "method",
            "name": "copy",
            "return": {
                "description": "set"
            },
            "class": "Ember.OrderedSet",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 32384,
            "static": 1,
            "itemtype": "method",
            "name": "create",
            "return": {
                "description": "NewExpression"
            },
            "class": "Ember.Map",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 32394,
            "description": "This property will change as the number of objects in the map changes.",
            "itemtype": "property",
            "name": "length",
            "type": "number",
            "default": "0",
            "class": "Ember.Map",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 32403,
            "description": "Retrieve the value associated with a given key.",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "key",
                    "description": ""
                }
            ],
            "return": {
                "description": "MemberExpression"
            },
            "class": "Ember.Map",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 32416,
            "description": "Adds a value to the map. If a value for the given key has already been\nprovided, the new value will replace the old value.",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "key",
                    "description": ""
                },
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Map",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 32434,
            "description": "Removes a value from the map for an associated key.",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "key",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Map",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 32457,
            "description": "Check whether a key is present.",
            "itemtype": "method",
            "name": "has",
            "params": [
                {
                    "name": "key",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Map",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 32470,
            "description": "Iterate over all the keys and values. Calls the function once\nfor each key, passing in the key and value, in that order.\nThe keys are guaranteed to be iterated over in insertion order.\ncallback. By default, `this` is the map.",
            "itemtype": "method",
            "name": "forEach",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "self",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Map",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 32490,
            "description": "Description",
            "itemtype": "method",
            "name": "copy",
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Map",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 32515,
            "static": "`Ember.MapWithDefault` otherwise returns `Ember.Map`",
            "itemtype": "method",
            "name": "create",
            "params": [
                {
                    "name": "options",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.MapWithDefault",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 32532,
            "description": "Retrieve the value associated with a given key.",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "key",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.MapWithDefault",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 32550,
            "description": "Description",
            "itemtype": "method",
            "name": "copy",
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.MapWithDefault",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 32569,
            "description": "Merge the contents of two objects together into the first object.\n```javascript\nEmber.merge({first: 'Tom'}, {last: 'Dale'}); // {first: 'Tom', last: 'Dale'}\nvar a = {first: 'Yehuda'}, b = {last: 'Katz'};\nEmber.merge(a, b); // a == {first: 'Yehuda', last: 'Katz'}, b == {last: 'Katz'}\n```",
            "params": [
                {
                    "name": "original",
                    "description": "The object to merge into",
                    "type": "Object"
                },
                {
                    "name": "updates",
                    "description": "The object to copy properties from",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "original"
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 32631,
            "description": "Description",
            "itemtype": "method",
            "name": "superFunction",
            "return": {
                "description": "ret"
            },
            "class": "Ember.Ember",
            "module": "ember",
            "submodule": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 32646,
            "description": "Description",
            "itemtype": "method",
            "name": "mixinsMeta",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                }
            ],
            "return": {
                "description": "ret"
            },
            "class": "Ember.Ember",
            "module": "ember",
            "submodule": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 32662,
            "description": "Description",
            "itemtype": "method",
            "name": "initMixin",
            "params": [
                {
                    "name": "mixin",
                    "description": ""
                },
                {
                    "name": "args",
                    "description": ""
                }
            ],
            "return": {
                "description": "mixin"
            },
            "class": "Ember.Ember",
            "module": "ember",
            "submodule": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 32685,
            "description": "Description",
            "itemtype": "method",
            "name": "isMethod",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                }
            ],
            "return": {
                "description": "LogicalExpression"
            },
            "class": "Ember.Ember",
            "module": "ember",
            "submodule": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 32699,
            "description": "Description",
            "itemtype": "method",
            "name": "mixinProperties",
            "params": [
                {
                    "name": "mixinsMeta",
                    "description": ""
                },
                {
                    "name": "mixin",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Ember",
            "module": "ember",
            "submodule": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 32719,
            "description": "Description",
            "itemtype": "method",
            "name": "concatenatedMixinProperties",
            "params": [
                {
                    "name": "concatProp",
                    "description": ""
                },
                {
                    "name": "props",
                    "description": ""
                },
                {
                    "name": "values",
                    "description": ""
                },
                {
                    "name": "base",
                    "description": ""
                }
            ],
            "return": {
                "description": "concats"
            },
            "class": "Ember.Ember",
            "module": "ember",
            "submodule": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 32740,
            "description": "Description",
            "itemtype": "method",
            "name": "giveDescriptorSuper",
            "params": [
                {
                    "name": "meta",
                    "description": ""
                },
                {
                    "name": "key",
                    "description": ""
                },
                {
                    "name": "property",
                    "description": ""
                },
                {
                    "name": "values",
                    "description": ""
                },
                {
                    "name": "descs",
                    "description": ""
                }
            ],
            "return": {
                "description": "property"
            },
            "class": "Ember.Ember",
            "module": "ember",
            "submodule": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 32776,
            "description": "Description",
            "itemtype": "method",
            "name": "giveMethodSuper",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                },
                {
                    "name": "key",
                    "description": ""
                },
                {
                    "name": "method",
                    "description": ""
                },
                {
                    "name": "values",
                    "description": ""
                },
                {
                    "name": "descs",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Ember",
            "module": "ember",
            "submodule": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 32807,
            "description": "Description",
            "itemtype": "method",
            "name": "applyConcatenatedProperties",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                },
                {
                    "name": "key",
                    "description": ""
                },
                {
                    "name": "value",
                    "description": ""
                },
                {
                    "name": "values",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Ember",
            "module": "ember",
            "submodule": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 32830,
            "description": "Description",
            "itemtype": "method",
            "name": "applyMergedProperties",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                },
                {
                    "name": "key",
                    "description": ""
                },
                {
                    "name": "value",
                    "description": ""
                },
                {
                    "name": "values",
                    "description": ""
                }
            ],
            "return": {
                "description": "newBase"
            },
            "class": "Ember.Ember",
            "module": "ember",
            "submodule": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 32867,
            "description": "Description",
            "itemtype": "method",
            "name": "addNormalizedProperty",
            "params": [
                {
                    "name": "base",
                    "description": ""
                },
                {
                    "name": "key",
                    "description": ""
                },
                {
                    "name": "value",
                    "description": ""
                },
                {
                    "name": "meta",
                    "description": ""
                },
                {
                    "name": "descs",
                    "description": ""
                },
                {
                    "name": "values",
                    "description": ""
                },
                {
                    "name": "concats",
                    "description": ""
                },
                {
                    "name": "mergings",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Ember",
            "module": "ember",
            "submodule": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 32908,
            "description": "Description",
            "itemtype": "method",
            "name": "mergeMixins",
            "params": [
                {
                    "name": "mixins",
                    "description": ""
                },
                {
                    "name": "m",
                    "description": ""
                },
                {
                    "name": "descs",
                    "description": ""
                },
                {
                    "name": "values",
                    "description": ""
                },
                {
                    "name": "base",
                    "description": ""
                },
                {
                    "name": "keys",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Ember",
            "module": "ember",
            "submodule": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 32922,
            "description": "Description",
            "itemtype": "method",
            "name": "removeKeys",
            "params": [
                {
                    "name": "keyName",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Ember",
            "module": "ember",
            "submodule": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 32964,
            "description": "Description",
            "itemtype": "method",
            "name": "detectBinding",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                },
                {
                    "name": "key",
                    "description": ""
                },
                {
                    "name": "value",
                    "description": ""
                },
                {
                    "name": "m",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Ember",
            "module": "ember",
            "submodule": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 32985,
            "description": "Description",
            "itemtype": "method",
            "name": "connectBindings",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                },
                {
                    "name": "m",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Ember",
            "module": "ember",
            "submodule": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 33015,
            "description": "Description",
            "itemtype": "method",
            "name": "finishPartial",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                },
                {
                    "name": "m",
                    "description": ""
                }
            ],
            "return": {
                "description": "obj"
            },
            "class": "Ember.Ember",
            "module": "ember",
            "submodule": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 33027,
            "description": "Description",
            "itemtype": "method",
            "name": "followAlias",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                },
                {
                    "name": "desc",
                    "description": ""
                },
                {
                    "name": "m",
                    "description": ""
                },
                {
                    "name": "descs",
                    "description": ""
                },
                {
                    "name": "values",
                    "description": ""
                }
            ],
            "return": {
                "description": "ObjectExpression"
            },
            "class": "Ember.Ember",
            "module": "ember",
            "submodule": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 33053,
            "description": "Description",
            "itemtype": "method",
            "name": "updateObserversAndListeners",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                },
                {
                    "name": "key",
                    "description": ""
                },
                {
                    "name": "observerOrListener",
                    "description": ""
                },
                {
                    "name": "pathsKey",
                    "description": ""
                },
                {
                    "name": "updateMethod",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Ember",
            "module": "ember",
            "submodule": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 33073,
            "description": "Description",
            "itemtype": "method",
            "name": "replaceObserversAndListeners",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                },
                {
                    "name": "key",
                    "description": ""
                },
                {
                    "name": "observerOrListener",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Ember",
            "module": "ember",
            "submodule": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 33097,
            "description": "Description",
            "itemtype": "method",
            "name": "applyMixin",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                },
                {
                    "name": "mixins",
                    "description": ""
                },
                {
                    "name": "partial",
                    "description": ""
                }
            ],
            "return": {
                "description": "obj"
            },
            "class": "Ember.Ember",
            "module": "ember",
            "submodule": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 33149,
            "description": "Description",
            "itemtype": "method",
            "name": "mixin",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                }
            ],
            "return": {
                "description": "obj"
            },
            "class": "Ember.Ember",
            "module": "ember",
            "submodule": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 33217,
            "description": "Description",
            "itemtype": "method",
            "name": "Mixin",
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Ember",
            "module": "ember",
            "submodule": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 33231,
            "description": "Description",
            "itemtype": "method",
            "name": "applyPartial",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Ember",
            "module": "ember",
            "submodule": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 33247,
            "static": 1,
            "itemtype": "method",
            "name": "create",
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Ember",
            "module": "ember",
            "submodule": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 33261,
            "description": "Description",
            "itemtype": "method",
            "name": "reopen",
            "return": {
                "description": "ThisExpression"
            },
            "class": "Ember.Ember",
            "module": "ember",
            "submodule": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 33297,
            "description": "Description",
            "itemtype": "method",
            "name": "apply",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Ember",
            "module": "ember",
            "submodule": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 33307,
            "description": "Description",
            "itemtype": "method",
            "name": "applyPartial",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Ember",
            "module": "ember",
            "submodule": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 33331,
            "description": "Description",
            "itemtype": "method",
            "name": "detect",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                }
            ],
            "return": {
                "description": "Literal"
            },
            "class": "Ember.Ember",
            "module": "ember",
            "submodule": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 33348,
            "description": "Description",
            "itemtype": "method",
            "name": "without",
            "return": {
                "description": "ret"
            },
            "class": "Ember.Ember",
            "module": "ember",
            "submodule": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 33373,
            "description": "Description",
            "itemtype": "method",
            "name": "keys",
            "return": {
                "description": "ret"
            },
            "class": "Ember.Ember",
            "module": "ember",
            "submodule": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 33389,
            "description": "Description",
            "itemtype": "method",
            "name": "mixins",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                }
            ],
            "return": {
                "description": "ret"
            },
            "class": "Ember.Ember",
            "module": "ember",
            "submodule": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 33412,
            "description": "Description",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "Literal"
            },
            "class": "Ember.Ember",
            "module": "ember",
            "submodule": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 33419,
            "description": "Denotes a required property for a mixin",
            "itemtype": "method",
            "name": "required",
            "return": {
                "description": "REQUIRED"
            },
            "class": "Ember.Ember",
            "module": "ember",
            "submodule": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 33430,
            "description": "Description",
            "itemtype": "method",
            "name": "Alias",
            "params": [
                {
                    "name": "methodName",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Ember",
            "module": "ember",
            "submodule": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 33442,
            "description": "Makes a method available via an additional name.\n```javascript\nApp.Person = Ember.Object.extend({\nname: function() {\nreturn 'Tomhuda Katzdale';\n},\nmoniker: Ember.aliasMethod('name')\n});\nvar goodGuy = App.Person.create();\ngoodGuy.name();    // 'Tomhuda Katzdale'\ngoodGuy.moniker(); // 'Tomhuda Katzdale'\n```",
            "itemtype": "method",
            "name": "aliasMethod",
            "params": [
                {
                    "name": "methodName",
                    "description": "name of the method to alias",
                    "type": "String"
                }
            ],
            "return": {
                "description": "NewExpression"
            },
            "class": "Ember.Ember",
            "module": "ember",
            "submodule": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 33468,
            "description": "Specify a method that observes property changes.\n```javascript\nEmber.Object.extend({\nvalueObserver: Ember.observer('value', function() {\n// Executes whenever the \"value\" property changes\n})\n});\n```\nIn the future this method may become asynchronous. If you want to ensure\nsynchronous behavior, use `immediateObserver`.\nAlso available as `Function.prototype.observes` if prototype extensions are\nenabled.",
            "itemtype": "method",
            "name": "observer",
            "return": {
                "description": "func"
            },
            "class": "Ember.Ember",
            "module": "ember",
            "submodule": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 33489,
            "description": "Description",
            "itemtype": "method",
            "name": "addWatchedProperty",
            "params": [
                {
                    "name": "path",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Ember",
            "module": "ember",
            "submodule": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 33580,
            "description": "Description",
            "itemtype": "method",
            "name": "addWatchedProperty",
            "params": [
                {
                    "name": "path",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Ember",
            "module": "ember",
            "submodule": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 33633,
            "description": "Description",
            "itemtype": "method",
            "name": "changeEvent",
            "params": [
                {
                    "name": "keyName",
                    "description": ""
                }
            ],
            "return": {
                "description": "BinaryExpression"
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 33643,
            "description": "Description",
            "itemtype": "method",
            "name": "beforeEvent",
            "params": [
                {
                    "name": "keyName",
                    "description": ""
                }
            ],
            "return": {
                "description": "BinaryExpression"
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 33653,
            "description": "Description",
            "itemtype": "method",
            "name": "addObserver",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                },
                {
                    "name": "_path",
                    "description": ""
                },
                {
                    "name": "target",
                    "description": ""
                },
                {
                    "name": "method",
                    "description": ""
                }
            ],
            "return": {
                "description": "ThisExpression"
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 33671,
            "description": "Description",
            "itemtype": "method",
            "name": "observersFor",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                },
                {
                    "name": "path",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 33739,
            "description": "Description",
            "itemtype": "method",
            "name": "beforeObserversFor",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                },
                {
                    "name": "path",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 33795,
            "description": "Description",
            "itemtype": "method",
            "name": "ObserverSet",
            "return": {
                "description": ""
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 33805,
            "description": "Description",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "sender",
                    "description": ""
                },
                {
                    "name": "keyName",
                    "description": ""
                },
                {
                    "name": "eventName",
                    "description": ""
                }
            ],
            "return": {
                "description": "MemberExpression"
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 33836,
            "description": "Description",
            "itemtype": "method",
            "name": "flush",
            "return": {
                "description": ""
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 33852,
            "description": "Description",
            "itemtype": "method",
            "name": "clear",
            "return": {
                "description": ""
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 33884,
            "description": "Identical to `Object.create()`. Implements if not available natively.",
            "itemtype": "method",
            "name": "create",
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 33902,
            "description": "Description",
            "itemtype": "method",
            "name": "K",
            "return": {
                "description": ""
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 33909,
            "description": "Description",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                },
                {
                    "name": "props",
                    "description": ""
                }
            ],
            "return": {
                "description": "obj"
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 33940,
            "description": "Description",
            "itemtype": "method",
            "name": "get",
            "return": {
                "description": ""
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 33960,
            "description": "Description",
            "itemtype": "method",
            "name": "get",
            "return": {
                "description": ""
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 33966,
            "description": "Description",
            "itemtype": "method",
            "name": "set",
            "return": {
                "description": ""
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 33998,
            "description": "Description",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                },
                {
                    "name": "keyName",
                    "description": ""
                },
                {
                    "name": "desc",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 34029,
            "description": "Identical to `Object.defineProperty()`. Implements as much functionality\nas possible if not available natively.",
            "itemtype": "method",
            "name": "defineProperty",
            "params": [
                {
                    "name": "obj",
                    "description": "The object to modify",
                    "type": "Object"
                },
                {
                    "name": "keyName",
                    "description": "property name to modify",
                    "type": "String"
                },
                {
                    "name": "desc",
                    "description": "descriptor hash",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Ember.platform",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 34041,
            "description": "Set to true if the platform supports native getters and setters.",
            "itemtype": "property",
            "name": "hasPropertyAccessors",
            "final": 1,
            "class": "Ember.platform",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 34052,
            "description": "Description",
            "itemtype": "method",
            "name": "defineProperty",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                },
                {
                    "name": "keyName",
                    "description": ""
                },
                {
                    "name": "desc",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.platform",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 34117,
            "description": "Description",
            "itemtype": "method",
            "name": "MANDATORY_SETTER_FUNCTION",
            "params": [
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Descriptor",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 34128,
            "description": "Description",
            "itemtype": "method",
            "name": "DEFAULT_GETTER_FUNCTION",
            "params": [
                {
                    "name": "name",
                    "description": ""
                }
            ],
            "return": {
                "description": "FunctionExpression"
            },
            "class": "Ember.Descriptor",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 34141,
            "description": "NOTE: This is a low-level method used by other parts of the API. You almost\nnever want to call this method directly. Instead you should use\n`Ember.mixin()` to define new properties.\nDefines a property on an object. This method works much like the ES5\n`Object.defineProperty()` method except that it can also accept computed\nproperties and other special descriptors.\nNormally this method takes only three parameters. However if you pass an\ninstance of `Ember.Descriptor` as the third param then you can pass an\noptional value as the fourth parameter. This is often more efficient than\ncreating new descriptor hashes for each property.\n## Examples\n```javascript\n// ES5 compatible mode\nEmber.defineProperty(contact, 'firstName', {\nwritable: true,\nconfigurable: false,\nenumerable: true,\nvalue: 'Charles'\n});\n// define a simple property\nEmber.defineProperty(contact, 'lastName', undefined, 'Jolley');\n// define a computed property\nEmber.defineProperty(contact, 'fullName', Ember.computed(function() {\nreturn this.firstName+' '+this.lastName;\n}).property('firstName', 'lastName'));\n```",
            "access": "private",
            "tagname": "computed property) or an ES5 descriptor.\nYou must provide this or `data` but not both.\nbecome the explicit value of this property.",
            "itemtype": "method",
            "name": "defineProperty",
            "params": [
                {
                    "name": "obj",
                    "description": "the object to define this property on. This may be a prototype.",
                    "type": "Object"
                },
                {
                    "name": "keyName",
                    "description": "the name of the property",
                    "type": "String"
                },
                {
                    "name": "desc",
                    "description": ""
                },
                {
                    "name": "data",
                    "description": ""
                },
                {
                    "name": "meta",
                    "description": ""
                }
            ],
            "return": {
                "description": "ThisExpression"
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 34255,
            "description": "Description",
            "itemtype": "method",
            "name": "deprecate",
            "return": {
                "description": ""
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 34268,
            "description": "Description",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 34275,
            "description": "Description",
            "itemtype": "method",
            "name": "get",
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 34307,
            "description": "This function is called just before an object property is about to change.\nIt will notify any before observers and prepare caches among other things.\nNormally you will not need to call this method directly but if for some\nreason you can't directly watch a property you can invoke this method\nmanually along with `Ember.propertyDidChange()` which you should call just\nafter the property value changes.",
            "itemtype": "method",
            "name": "propertyWillChange",
            "params": [
                {
                    "name": "obj",
                    "description": "The object with the property that will change",
                    "type": "Object"
                },
                {
                    "name": "keyName",
                    "description": "The property key (or path) that will change.",
                    "type": "String"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 34334,
            "description": "This function is called just after an object property has changed.\nIt will notify any observers and clear caches among other things.\nNormally you will not need to call this method directly but if for some\nreason you can't directly watch a property you can invoke this method\nmanually along with `Ember.propertyWillChange()` which you should call just\nbefore the property value changes.",
            "itemtype": "method",
            "name": "propertyDidChange",
            "params": [
                {
                    "name": "obj",
                    "description": "The object with the property that will change",
                    "type": "Object"
                },
                {
                    "name": "keyName",
                    "description": "The property key (or path) that will change.",
                    "type": "String"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 34367,
            "description": "Description",
            "itemtype": "method",
            "name": "dependentKeysWillChange",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                },
                {
                    "name": "depKey",
                    "description": ""
                },
                {
                    "name": "meta",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 34385,
            "description": "Description",
            "itemtype": "method",
            "name": "dependentKeysDidChange",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                },
                {
                    "name": "depKey",
                    "description": ""
                },
                {
                    "name": "meta",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 34402,
            "description": "Description",
            "itemtype": "method",
            "name": "iterDeps",
            "params": [
                {
                    "name": "method",
                    "description": ""
                },
                {
                    "name": "obj",
                    "description": ""
                },
                {
                    "name": "depKey",
                    "description": ""
                },
                {
                    "name": "seen",
                    "description": ""
                },
                {
                    "name": "meta",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 34429,
            "description": "Description",
            "itemtype": "method",
            "name": "chainsWillChange",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                },
                {
                    "name": "keyName",
                    "description": ""
                },
                {
                    "name": "m",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 34456,
            "description": "Description",
            "itemtype": "method",
            "name": "chainsDidChange",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                },
                {
                    "name": "keyName",
                    "description": ""
                },
                {
                    "name": "m",
                    "description": ""
                },
                {
                    "name": "suppressEvents",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 34488,
            "description": "Description",
            "itemtype": "method",
            "name": "overrideChains",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                },
                {
                    "name": "keyName",
                    "description": ""
                },
                {
                    "name": "m",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 34500,
            "chainable": 1,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "beginPropertyChanges",
            "return": {
                "description": ""
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 34510,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "endPropertyChanges",
            "return": {
                "description": ""
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 34523,
            "description": "Make a series of property changes together in an\nexception-safe way.\n```javascript\nEmber.changeProperties(function() {\nobj1.set('foo', mayBlowUpWhenSet);\nobj2.set('bar', baz);\n});\n```",
            "itemtype": "method",
            "name": "changeProperties",
            "params": [
                {
                    "name": "cb",
                    "description": ""
                },
                {
                    "name": "binding",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 34542,
            "description": "Description",
            "itemtype": "method",
            "name": "notifyBeforeObservers",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                },
                {
                    "name": "keyName",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 34562,
            "description": "Description",
            "itemtype": "method",
            "name": "notifyObservers",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                },
                {
                    "name": "keyName",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 34615,
            "description": "Gets the value of a property on an object. If the property is computed,\nthe function will be invoked. If the property is not defined but the\nobject implements the `unknownProperty` method then that will be invoked.\nIf you plan to run on IE8 and older browsers then you should use this\nmethod anytime you want to retrieve a property on an object that you don't\nknow for sure is private. (Properties beginning with an underscore '_'\nare considered private.)\nOn all newer browsers, you only need to use this method to retrieve\nproperties if the property might not be defined on the object and you want\nto respect the `unknownProperty` handler. Otherwise you can ignore this\nmethod.\nNote that if the object itself is `undefined`, this method will throw\nan error.",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "obj",
                    "description": "The object to retrieve from.",
                    "type": "Object"
                },
                {
                    "name": "keyName",
                    "description": "The property key to retrieve",
                    "type": "String"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 34682,
            "description": "Normalizes a target/path pair to reflect that actual target/path that should\nbe observed, etc. This takes into account passing in global property\npaths (i.e. a path beginning with a captial letter not defined on the\ntarget).",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "normalizeTuple",
            "params": [
                {
                    "name": "target",
                    "description": "The current target. May be `null`.",
                    "type": "Object"
                },
                {
                    "name": "path",
                    "description": "A path on the target or a global property path.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "ArrayExpression"
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 34741,
            "description": "Description",
            "itemtype": "method",
            "name": "getWithDefault",
            "params": [
                {
                    "name": "root",
                    "description": ""
                },
                {
                    "name": "key",
                    "description": ""
                },
                {
                    "name": "defaultValue",
                    "description": ""
                }
            ],
            "return": {
                "description": "value"
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 34776,
            "description": "Sets the value of a property on an object, respecting computed properties\nand notifying observers and other listeners of the change. If the\nproperty is not defined but the object implements the `setUnknownProperty`\nmethod then that will be invoked as well.",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "obj",
                    "description": "The object to modify.",
                    "type": "Object"
                },
                {
                    "name": "keyName",
                    "description": "The property key to set",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The value to set",
                    "type": "Object"
                },
                {
                    "name": "tolerant",
                    "description": ""
                }
            ],
            "return": {
                "description": "value"
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 34863,
            "description": "Description",
            "itemtype": "method",
            "name": "setPath",
            "params": [
                {
                    "name": "root",
                    "description": ""
                },
                {
                    "name": "path",
                    "description": ""
                },
                {
                    "name": "value",
                    "description": ""
                },
                {
                    "name": "tolerant",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 34899,
            "description": "Error-tolerant form of `Ember.set`. Will not blow up if any part of the\nchain is `undefined`, `null`, or destroyed.\nThis is primarily used when syncing bindings, which may try to update after\nan object has been destroyed.",
            "itemtype": "method",
            "name": "trySet",
            "params": [
                {
                    "name": "root",
                    "description": ""
                },
                {
                    "name": "path",
                    "description": "The property path to set",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The value to set",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 34927,
            "description": "Description",
            "itemtype": "method",
            "name": "onBegin",
            "params": [
                {
                    "name": "current",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 34937,
            "description": "Description",
            "itemtype": "method",
            "name": "onEnd",
            "params": [
                {
                    "name": "current",
                    "description": ""
                },
                {
                    "name": "next",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 34996,
            "description": "Description",
            "itemtype": "method",
            "name": "run",
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.run",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 35005,
            "description": "If no run-loop is present, it creates a new one. If a run loop is\npresent it will queue itself to run on the existing run-loops action\nqueue.\nPlease note: This is not for normal usage, and should be used sparingly.\nIf invoked when not within a run loop:\n```javascript\nrun.join(function() {\n// creates a new run-loop\n});\n```\nAlternatively, if called within an existing run loop:\n```javascript\nrun(function() {\n// creates a new run-loop\nrun.join(function() {\n// joins with the existing run-loop, and queues for invocation on\n// the existing run-loops action queue.\n});\n});\n```\nMay be a function or a string. If you pass a string\nthen it will be looked up on the passed target.\nwhen called within an existing loop, no return value is possible.",
            "itemtype": "method",
            "name": "join",
            "params": [
                {
                    "name": "target",
                    "description": ""
                },
                {
                    "name": "method",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.run",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 35045,
            "description": "Provides a useful utility for when integrating with non-Ember libraries\nthat provide asynchronous callbacks.\nEmber utilizes a run-loop to batch and coalesce changes. This works by\nmarking the start and end of Ember-related Javascript execution.\nWhen using events such as a View's click handler, Ember wraps the event\nhandler in a run-loop, but when integrating with non-Ember libraries this\ncan be tedious.\nFor example, the following is rather verbose but is the correct way to combine\nthird-party events and Ember code.\n```javascript\nvar that = this;\njQuery(window).on('resize', function(){\nrun(function(){\nthat.handleResize();\n});\n});\n```\nTo reduce the boilerplate, the following can be used to construct a\nrun-loop-wrapped callback handler.\n```javascript\njQuery(window).on('resize', run.bind(this, this.handleResize));\n```\nMay be a function or a string. If you pass a string\nthen it will be looked up on the passed target.\nwhen called within an existing loop, no return value is possible.",
            "since": "1.4.0",
            "itemtype": "method",
            "name": "bind",
            "params": [
                {
                    "name": "target",
                    "description": ""
                },
                {
                    "name": "method",
                    "description": ""
                }
            ],
            "return": {
                "description": "FunctionExpression"
            },
            "class": "Ember.run",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 35089,
            "description": "Begins a new RunLoop. Any deferred actions invoked after the begin will\nbe buffered until you invoke a matching call to `run.end()`. This is\na lower-level way to use a RunLoop instead of using `run()`.\n```javascript\nrun.begin();\n// code to be execute within a RunLoop\nrun.end();\n```",
            "itemtype": "method",
            "name": "begin",
            "return": {
                "description": ""
            },
            "class": "Ember.run",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 35105,
            "description": "Ends a RunLoop. This must be called sometime after you call\n`run.begin()` to flush any deferred actions. This is a lower-level way\nto use a RunLoop instead of using `run()`.\n```javascript\nrun.begin();\n// code to be execute within a RunLoop\nrun.end();\n```",
            "itemtype": "method",
            "name": "end",
            "return": {
                "description": ""
            },
            "class": "Ember.run",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 35121,
            "description": "Array of named queues. This array determines the order in which queues\nare flushed at the end of the RunLoop. You can define your own queues by\nsimply adding the queue name to this array. Normally you should not need\nto inspect or modify this property.",
            "itemtype": "property",
            "name": "queues",
            "type": "Array",
            "default": "['sync', 'actions', 'destroy']",
            "class": "Ember.run",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 35132,
            "description": "Adds the passed target/method and any optional arguments to the named\nqueue to be executed at the end of the RunLoop. If you have not already\nstarted a RunLoop when calling this method one will be started for you\nautomatically.\nAt the end of a RunLoop, any methods scheduled in this way will be invoked.\nMethods will be invoked in an order matching the named queues defined in\nthe `run.queues` property.\n```javascript\nrun.schedule('sync', this, function() {\n// this will be executed in the first RunLoop queue, when bindings are synced\nconsole.log(\"scheduled on sync queue\");\n});\nrun.schedule('actions', this, function() {\n// this will be executed in the 'actions' queue, after bindings have synced.\nconsole.log(\"scheduled on actions queue\");\n});\n// Note the functions will be run in order based on the run queues order.\n// Output would be:\n//   scheduled on sync queue\n//   scheduled on actions queue\n```\nDefault queues are 'sync' and 'actions'\nwill be resolved on the target object at the time the scheduled item is\ninvoked allowing you to change the target function.",
            "itemtype": "method",
            "name": "schedule",
            "params": [
                {
                    "name": "queue",
                    "description": "The name of the queue to schedule against.",
                    "type": "String"
                },
                {
                    "name": "target",
                    "description": ""
                },
                {
                    "name": "method",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.run",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 35169,
            "description": "Description",
            "itemtype": "method",
            "name": "hasScheduledTimers",
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.run",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 35179,
            "description": "Description",
            "itemtype": "method",
            "name": "cancelTimers",
            "return": {
                "description": ""
            },
            "class": "Ember.run",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 35188,
            "description": "Immediately flushes any events scheduled in the 'sync' queue. Bindings\nuse this queue so this method is a useful way to immediately force all\nbindings in the application to sync.\nYou should call this method anytime you need any changed state to propagate\nthroughout the app immediately without repainting the UI (which happens\nin the later 'render' queue added by the `ember-views` package).\n```javascript\nrun.sync();\n```",
            "itemtype": "method",
            "name": "sync",
            "return": {
                "description": ""
            },
            "class": "Ember.run",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 35207,
            "description": "Invokes the passed target/method and optional arguments after a specified\nperiod if time. The last parameter of this method must always be a number\nof milliseconds.\nYou should use this method whenever you need to run some action after a\nperiod of time instead of using `setTimeout()`. This method will ensure that\nitems that expire during the same script execution cycle all execute\ntogether, which is often more efficient than using a real setTimeout.\n```javascript\nrun.later(myContext, function() {\n// code here will execute within a RunLoop in about 500ms with this == myContext\n}, 500);\n```\nIf you pass a string it will be resolved on the\ntarget at the time the method is invoked.\n`run.cancel` later.",
            "itemtype": "method",
            "name": "later",
            "params": [
                {
                    "name": "target",
                    "description": ""
                },
                {
                    "name": "method",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.run",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 35232,
            "description": "Schedule a function to run one time during the current RunLoop. This is equivalent\nto calling `scheduleOnce` with the \"actions\" queue.\nIf you pass a string it will be resolved on the\ntarget at the time the method is invoked.",
            "itemtype": "method",
            "name": "once",
            "params": [
                {
                    "name": "target",
                    "description": ""
                },
                {
                    "name": "method",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.run",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 35249,
            "description": "Schedules a function to run one time in a given queue of the current RunLoop.\nCalling this method with the same queue/target/method combination will have\nno effect (past the initial call).\nNote that although you can pass optional arguments these will not be\nconsidered when looking for duplicates. New arguments will replace previous\ncalls.\n```javascript\nrun(function() {\nvar sayHi = function() { console.log('hi'); }\nrun.scheduleOnce('afterRender', myContext, sayHi);\nrun.scheduleOnce('afterRender', myContext, sayHi);\n// sayHi will only be executed once, in the afterRender queue of the RunLoop\n});\n```\nAlso note that passing an anonymous function to `run.scheduleOnce` will\nnot prevent additional calls with an identical anonymous function from\nscheduling the items multiple times, e.g.:\n```javascript\nfunction scheduleIt() {\nrun.scheduleOnce('actions', myContext, function() { console.log(\"Closure\"); });\n}\nscheduleIt();\nscheduleIt();\n// \"Closure\" will print twice, even though we're using `run.scheduleOnce`,\n// because the function we pass to it is anonymous and won't match the\n// previously scheduled operation.\n```\nAvailable queues, and their order, can be found at `run.queues`\nIf you pass a string it will be resolved on the\ntarget at the time the method is invoked.",
            "itemtype": "method",
            "name": "scheduleOnce",
            "params": [
                {
                    "name": "queue",
                    "description": ""
                },
                {
                    "name": "target",
                    "description": ""
                },
                {
                    "name": "method",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.run",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 35291,
            "description": "Schedules an item to run from within a separate run loop, after\ncontrol has been returned to the system. This is equivalent to calling\n`run.later` with a wait time of 1ms.\n```javascript\nrun.next(myContext, function() {\n// code to be executed in the next run loop,\n// which will be scheduled after the current one\n});\n```\nMultiple operations scheduled with `run.next` will coalesce\ninto the same later run loop, along with any other operations\nscheduled by `run.later` that expire right around the same\ntime that `run.next` operations will fire.\nNote that there are often alternatives to using `run.next`.\nFor instance, if you'd like to schedule an operation to happen\nafter all DOM element operations have completed within the current\nrun loop, you can make use of the `afterRender` run loop queue (added\nby the `ember-views` package, along with the preceding `render` queue\nwhere all the DOM element operations happen). Example:\n```javascript\nApp.MyCollectionView = Ember.CollectionView.extend({\ndidInsertElement: function() {\nrun.scheduleOnce('afterRender', this, 'processChildElements');\n},\nprocessChildElements: function() {\n// ... do something with collectionView's child view\n// elements after they've finished rendering, which\n// can't be done within the CollectionView's\n// `didInsertElement` hook because that gets run\n// before the child elements have been added to the DOM.\n}\n});\n```\nOne benefit of the above approach compared to using `run.next` is\nthat you will be able to perform DOM/CSS operations before unprocessed\nelements are rendered to the screen, which may prevent flickering or\nother artifacts caused by delaying processing until after rendering.\nThe other major benefit to the above approach is that `run.next`\nintroduces an element of non-determinism, which can make things much\nharder to test, due to its reliance on `setTimeout`; it's much harder\nto guarantee the order of scheduled operations when they are scheduled\noutside of the current run loop, i.e. with `run.next`.\nIf you pass a string it will be resolved on the\ntarget at the time the method is invoked.",
            "itemtype": "method",
            "name": "next",
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.run",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 35345,
            "description": "Cancels a scheduled item. Must be a value returned by `run.later()`,\n`run.once()`, `run.next()`, `run.debounce()`, or\n`run.throttle()`.\n```javascript\nvar runNext = run.next(myContext, function() {\n// will not be executed\n});\nrun.cancel(runNext);\nvar runLater = run.later(myContext, function() {\n// will not be executed\n}, 500);\nrun.cancel(runLater);\nvar runOnce = run.once(myContext, function() {\n// will not be executed\n});\nrun.cancel(runOnce);\nvar throttle = run.throttle(myContext, function() {\n// will not be executed\n}, 1, false);\nrun.cancel(throttle);\nvar debounce = run.debounce(myContext, function() {\n// will not be executed\n}, 1);\nrun.cancel(debounce);\nvar debounceImmediate = run.debounce(myContext, function() {\n// will be executed since we passed in true (immediate)\n}, 100, true);\n// the 100ms delay until this method can be called again will be cancelled\nrun.cancel(debounceImmediate);\n```",
            "itemtype": "method",
            "name": "cancel",
            "params": [
                {
                    "name": "timer",
                    "description": "Timer object to cancel",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.run",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 35384,
            "description": "Delay calling the target method until the debounce period has elapsed\nwith no additional debounce calls. If `debounce` is called again before\nthe specified time has elapsed, the timer is reset and the entire period\nmust pass again before the target method is called.\nThis method should be used when an event may be called multiple times\nbut the action should only be called once when the event is done firing.\nA common example is for scroll events where you only want updates to\nhappen once scrolling has ceased.\n```javascript\nvar myFunc = function() { console.log(this.name + ' ran.'); };\nvar myContext = {name: 'debounce'};\nrun.debounce(myContext, myFunc, 150);\n// less than 150ms passes\nrun.debounce(myContext, myFunc, 150);\n// 150ms passes\n// myFunc is invoked with context myContext\n// console logs 'debounce ran.' one time.\n```\nImmediate allows you to run the function immediately, but debounce\nother calls for this function until the wait time has elapsed. If\n`debounce` is called again before the specified time has elapsed,\nthe timer is reset and the entire period must pass again before\nthe method can be called again.\n```javascript\nvar myFunc = function() { console.log(this.name + ' ran.'); };\nvar myContext = {name: 'debounce'};\nrun.debounce(myContext, myFunc, 150, true);\n// console logs 'debounce ran.' one time immediately.\n// 100ms passes\nrun.debounce(myContext, myFunc, 150, true);\n// 150ms passes and nothing else is logged to the console and\n// the debouncee is no longer being watched\nrun.debounce(myContext, myFunc, 150, true);\n// console logs 'debounce ran.' one time immediately.\n// 150ms passes and nothing else is logged to the console and\n// the debouncee is no longer being watched\n```\nMay be a function or a string. If you pass a string\nthen it will be looked up on the passed target.\nof the trailing edge of the wait interval. Defaults to false.",
            "itemtype": "method",
            "name": "debounce",
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.run",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 35432,
            "description": "Ensure that the target method is never called more frequently than\nthe specified spacing period. The target method is called immediately.\n```javascript\nvar myFunc = function() { console.log(this.name + ' ran.'); };\nvar myContext = {name: 'throttle'};\nrun.throttle(myContext, myFunc, 150);\n// myFunc is invoked with context myContext\n// console logs 'throttle ran.'\n// 50ms passes\nrun.throttle(myContext, myFunc, 150);\n// 50ms passes\nrun.throttle(myContext, myFunc, 150);\n// 150ms passes\nrun.throttle(myContext, myFunc, 150);\n// myFunc is invoked with context myContext\n// console logs 'throttle ran.'\n```\nMay be a function or a string. If you pass a string\nthen it will be looked up on the passed target.\nof the trailing edge of the wait interval. Defaults to true.",
            "itemtype": "method",
            "name": "throttle",
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.run",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 35461,
            "description": "Description",
            "itemtype": "method",
            "name": "checkAutoRun",
            "return": {
                "description": ""
            },
            "class": "Ember.run",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 35472,
            "description": "Add a new named queue after the specified queue.\n\nThe queue to add will only be added once.",
            "itemtype": "method",
            "name": "_addQueue",
            "params": [
                {
                    "name": "name",
                    "description": "the name of the queue to add.",
                    "type": "String"
                },
                {
                    "name": "after",
                    "description": "the name of the queue to add after.",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Ember.run",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 35495,
            "description": "Set a list of properties on an object. These properties are set inside\na single `beginPropertyChanges` and `endPropertyChanges` batch, so\nobservers will be buffered.\n```javascript\nvar anObject = Ember.Object.create();\nanObject.setProperties({\nfirstName: 'Stanley',\nlastName: 'Stuart',\nage: 21\n});\n```",
            "params": [
                {
                    "name": "self",
                    "description": ""
                },
                {
                    "name": "hash",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "self"
            },
            "class": "Ember.run",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 35534,
            "description": "Previously we used `Ember.$.uuid`, however `$.uuid` has been removed from\njQuery master. We'll just bootstrap our own uuid now.",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "the uuid",
                "type": "Number"
            },
            "class": "Ember.run",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 35543,
            "description": "Generates a universally unique identifier. This method\nis used internally by Ember for assisting with\nthe generation of GUID's and other unique identifiers\nsuch as `bind-attr` data attributes.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "uuid",
            "return": {
                "description": "UpdateExpression"
            },
            "class": "Ember.run",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 35573,
            "description": "A unique key used to assign guids and other private metadata to objects.\nIf you inspect an object in your browser debugger you will often see these.\nThey can be safely ignored.\n\nOn browsers that support it, these properties are added with enumeration\ndisabled so they won't show up when you iterate over your properties.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "GUID_KEY",
            "type": "String",
            "final": 1,
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 35596,
            "description": "Generates a new guid, optionally saving the guid to the object that you\npass in. You will rarely need to use this method. Instead you should\ncall `Ember.guidFor(obj)`, which return an existing guid if available.",
            "access": "private",
            "tagname": "be saved on the object and reused whenever you pass the same object\nagain.\nIf no object is passed, just generate a new guid.\nseparate the guid into separate namespaces.",
            "itemtype": "method",
            "name": "generateGuid",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                },
                {
                    "name": "prefix",
                    "description": ""
                }
            ],
            "return": {
                "description": "ret"
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 35688,
            "description": "The key used to store meta information on object for property observing.",
            "itemtype": "property",
            "name": "META_KEY",
            "access": "private",
            "tagname": "",
            "final": 1,
            "type": "String",
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 35701,
            "description": "Description",
            "itemtype": "method",
            "name": "Meta",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 35740,
            "description": "Description",
            "itemtype": "method",
            "name": "toJSON",
            "return": {
                "description": ""
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 35753,
            "description": "Retrieves the meta hash for an object. If `writable` is true ensures the\nhash is writable for this object as well.\nThe meta object contains information about computed property descriptors as\nwell as any watched properties and other information. You generally will\nnot access this information directly but instead work with higher level\nmethods that manipulate this hash indirectly.",
            "access": "private",
            "tagname": "the meta hash, allowing the method to avoid making an unnecessary copy.",
            "itemtype": "method",
            "name": "meta",
            "params": [
                {
                    "name": "obj",
                    "description": "The object to retrieve meta for",
                    "type": "Object"
                },
                {
                    "name": "writable",
                    "description": ""
                }
            ],
            "return": {
                "description": "ret"
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 35802,
            "description": "Description",
            "itemtype": "method",
            "name": "getMeta",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                },
                {
                    "name": "property",
                    "description": ""
                }
            ],
            "return": {
                "description": "MemberExpression"
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 35815,
            "description": "Description",
            "itemtype": "method",
            "name": "setMeta",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                },
                {
                    "name": "property",
                    "description": ""
                },
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": "value"
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 35892,
            "description": "Description",
            "itemtype": "method",
            "name": "superWrapper",
            "return": {
                "description": "ret"
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 35916,
            "description": "Returns true if the passed object is an array or Array-like.\n\nEmber Array Protocol:\n\n  - the object has an objectAt property\n  - the object is a native Array\n  - the object is an Object, and has a length property\n\nUnlike `Ember.typeOf` this method returns true even if the passed object is\nnot formally array but appears to be array-like (i.e. implements `Ember.Array`)\n\n```javascript\nEmber.isArray();                                          // false\nEmber.isArray([]);                                        // true\nEmber.isArray(Ember.ArrayProxy.create({ content: [] }));  // true\n```",
            "itemtype": "method",
            "name": "isArray",
            "params": [
                {
                    "name": "obj",
                    "description": "The object to test",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "true if the passed object is an array or Array-like",
                "type": "Boolean"
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 35940,
            "description": "Description",
            "itemtype": "method",
            "name": "isArray",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                }
            ],
            "return": {
                "description": "Literal"
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 35966,
            "description": "Forces the passed object to be part of an array. If the object is already\nan array or array-like, returns the object. Otherwise adds the object to\nan array. If obj is `null` or `undefined`, returns an empty array.\n```javascript\nEmber.makeArray();            // []\nEmber.makeArray(null);        // []\nEmber.makeArray(undefined);   // []\nEmber.makeArray('lindsay');   // ['lindsay']\nEmber.makeArray([1, 2, 42]);  // [1, 2, 42]\nvar controller = Ember.ArrayProxy.create({ content: [] });\nEmber.makeArray(controller) === controller;  // true\n```",
            "itemtype": "method",
            "name": "makeArray",
            "params": [
                {
                    "name": "obj",
                    "description": "the object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "ConditionalExpression"
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 36007,
            "description": "Checks to see if the `methodName` exists on the `obj`,\nand if it does, invokes it with the arguments passed.\n```javascript\nvar d = new Date('03/15/2013');\nEmber.tryInvoke(d, 'getTime');              // 1363320000000\nEmber.tryInvoke(d, 'setFullYear', [2014]);  // 1394856000000\nEmber.tryInvoke(d, 'noSuchMethod', [2014]); // undefined\n```",
            "itemtype": "method",
            "name": "tryInvoke",
            "params": [
                {
                    "name": "obj",
                    "description": "The object to check for the method",
                    "type": "Object"
                },
                {
                    "name": "methodName",
                    "description": "The method name to check for",
                    "type": "String"
                },
                {
                    "name": "args",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 36043,
            "description": "Provides try/finally functionality, while working\naround Safari's double finally bug.\n\n```javascript\nvar tryable = function() {\n  someResource.lock();\n  runCallback(); // May throw error.\n};\n\nvar finalizer = function() {\n  someResource.unlock();\n};\n\nEmber.tryFinally(tryable, finalizer);\n```",
            "itemtype": "method",
            "name": "tryFinally",
            "params": [
                {
                    "name": "tryable",
                    "description": "The function to run the try callback",
                    "type": "Function"
                },
                {
                    "name": "finalizer",
                    "description": "The function to run the finally callback",
                    "type": "Function"
                },
                {
                    "name": "binding",
                    "description": "The optional calling object. Defaults to 'this'",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "The return value is the that of the finalizer,\nunless that value is undefined, in which case it is the return value\nof the tryable",
                "type": "*"
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 36072,
            "description": "Description",
            "params": [
                {
                    "name": "tryable",
                    "description": ""
                },
                {
                    "name": "finalizer",
                    "description": ""
                },
                {
                    "name": "binding",
                    "description": ""
                }
            ],
            "return": {
                "description": "ConditionalExpression"
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 36099,
            "description": "Description",
            "params": [
                {
                    "name": "tryable",
                    "description": ""
                },
                {
                    "name": "finalizer",
                    "description": ""
                },
                {
                    "name": "binding",
                    "description": ""
                }
            ],
            "return": {
                "description": "ConditionalExpression"
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 36121,
            "description": "Provides try/catch/finally functionality, while working\naround Safari's double finally bug.\n\n```javascript\nvar tryable = function() {\n  for (i = 0, l = listeners.length; i < l; i++) {\n    listener = listeners[i];\n    beforeValues[i] = listener.before(name, time(), payload);\n  }\n\n  return callback.call(binding);\n};\n\nvar catchable = function(e) {\n  payload = payload || {};\n  payload.exception = e;\n};\n\nvar finalizer = function() {\n  for (i = 0, l = listeners.length; i < l; i++) {\n    listener = listeners[i];\n    listener.after(name, time(), payload, beforeValues[i]);\n  }\n};\n\nEmber.tryCatchFinally(tryable, catchable, finalizer);\n```",
            "itemtype": "method",
            "name": "tryCatchFinally",
            "params": [
                {
                    "name": "tryable",
                    "description": "The function to run the try callback",
                    "type": "Function"
                },
                {
                    "name": "catchable",
                    "description": "The function to run the catchable callback",
                    "type": "Function"
                },
                {
                    "name": "finalizer",
                    "description": "The function to run the finally callback",
                    "type": "Function"
                },
                {
                    "name": "binding",
                    "description": "The optional calling object. Defaults to 'this'",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "The return value is the that of the finalizer,\nunless that value is undefined, in which case it is the return value\nof the tryable.",
                "type": "*"
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 36162,
            "description": "Description",
            "params": [
                {
                    "name": "tryable",
                    "description": ""
                },
                {
                    "name": "catchable",
                    "description": ""
                },
                {
                    "name": "finalizer",
                    "description": ""
                },
                {
                    "name": "binding",
                    "description": ""
                }
            ],
            "return": {
                "description": "ConditionalExpression"
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 36192,
            "description": "Description",
            "params": [
                {
                    "name": "tryable",
                    "description": ""
                },
                {
                    "name": "catchable",
                    "description": ""
                },
                {
                    "name": "finalizer",
                    "description": ""
                },
                {
                    "name": "binding",
                    "description": ""
                }
            ],
            "return": {
                "description": "ConditionalExpression"
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 36231,
            "description": "Returns a consistent type for the passed item.\nUse this instead of the built-in `typeof` to get the type of an item.\nIt will return the same result across all browsers and includes a bit\nmore detail. Here is what will be returned:\n| Return Value  | Meaning                                              |\n|---------------|------------------------------------------------------|\n| 'string'      | String primitive or String object.                   |\n| 'number'      | Number primitive or Number object.                   |\n| 'boolean'     | Boolean primitive or Boolean object.                 |\n| 'null'        | Null value                                           |\n| 'undefined'   | Undefined value                                      |\n| 'function'    | A function                                           |\n| 'array'       | An instance of Array                                 |\n| 'regexp'      | An instance of RegExp                                |\n| 'date'        | An instance of Date                                  |\n| 'class'       | An Ember class (created using Ember.Object.extend()) |\n| 'instance'    | An Ember object instance                             |\n| 'error'       | An instance of the Error object                      |\n| 'object'      | A JavaScript object not inheriting from Ember.Object |\nExamples:\n```javascript\nEmber.typeOf();                       // 'undefined'\nEmber.typeOf(null);                   // 'null'\nEmber.typeOf(undefined);              // 'undefined'\nEmber.typeOf('michael');              // 'string'\nEmber.typeOf(new String('michael'));  // 'string'\nEmber.typeOf(101);                    // 'number'\nEmber.typeOf(new Number(101));        // 'number'\nEmber.typeOf(true);                   // 'boolean'\nEmber.typeOf(new Boolean(true));      // 'boolean'\nEmber.typeOf(Ember.makeArray);        // 'function'\nEmber.typeOf([1, 2, 90]);             // 'array'\nEmber.typeOf(/abc/);                  // 'regexp'\nEmber.typeOf(new Date());             // 'date'\nEmber.typeOf(Ember.Object.extend());  // 'class'\nEmber.typeOf(Ember.Object.create());  // 'instance'\nEmber.typeOf(new Error('teamocil'));  // 'error'\n// 'normal' JavaScript object\nEmber.typeOf({ a: 'b' });             // 'object'\n```",
            "itemtype": "method",
            "name": "typeOf",
            "params": [
                {
                    "name": "item",
                    "description": "the item to check",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "ret"
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 36301,
            "description": "Convenience method to inspect an object. This method will attempt to\nconvert the object into a useful string description.\nIt is a pretty simple implementation. If you want something more robust,\nuse something like JSDump: https://github.com/NV/jsDump",
            "since": "1.4.0",
            "itemtype": "method",
            "name": "inspect",
            "params": [
                {
                    "name": "obj",
                    "description": "The object you want to inspect.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "BinaryExpression"
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 36336,
            "description": "Description",
            "itemtype": "method",
            "name": "apply",
            "params": [
                {
                    "name": "t",
                    "description": ""
                },
                {
                    "name": "m",
                    "description": ""
                },
                {
                    "name": "a",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 36358,
            "description": "Description",
            "itemtype": "method",
            "name": "applyStr",
            "params": [
                {
                    "name": "t",
                    "description": ""
                },
                {
                    "name": "m",
                    "description": ""
                },
                {
                    "name": "a",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 36404,
            "description": "Description",
            "itemtype": "method",
            "name": "watchKey",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                },
                {
                    "name": "keyName",
                    "description": ""
                },
                {
                    "name": "meta",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 36444,
            "description": "Description",
            "itemtype": "method",
            "name": "unwatchKey",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                },
                {
                    "name": "keyName",
                    "description": ""
                },
                {
                    "name": "meta",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 36469,
            "description": "Description",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "val",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 36508,
            "description": "Description",
            "itemtype": "method",
            "name": "chainsFor",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                },
                {
                    "name": "meta",
                    "description": ""
                }
            ],
            "return": {
                "description": "ret"
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 36525,
            "description": "Description",
            "itemtype": "method",
            "name": "watchPath",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                },
                {
                    "name": "keyPath",
                    "description": ""
                },
                {
                    "name": "meta",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 36548,
            "description": "Description",
            "itemtype": "method",
            "name": "unwatchPath",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                },
                {
                    "name": "keyPath",
                    "description": ""
                },
                {
                    "name": "meta",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 36592,
            "description": "Description",
            "itemtype": "method",
            "name": "isKeyName",
            "params": [
                {
                    "name": "path",
                    "description": ""
                }
            ],
            "return": {
                "description": "BinaryExpression"
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 36602,
            "description": "Starts watching a property on an object. Whenever the property changes,\ninvokes `Ember.propertyWillChange` and `Ember.propertyDidChange`. This is the\nprimitive used by observers and dependent keys; usually you will never call\nthis method directly but instead use higher level methods like\n`Ember.addObserver()`",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "watch",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                },
                {
                    "name": "_keyPath",
                    "description": ""
                },
                {
                    "name": "m",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 36629,
            "description": "Description",
            "itemtype": "method",
            "name": "isWatching",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                },
                {
                    "name": "key",
                    "description": ""
                }
            ],
            "return": {
                "description": "BinaryExpression"
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 36643,
            "description": "Description",
            "itemtype": "method",
            "name": "unwatch",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                },
                {
                    "name": "_keyPath",
                    "description": ""
                },
                {
                    "name": "m",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 36688,
            "description": "Tears down the meta on an object so that it can be garbage collected.\nMultiple calls will have no effect.",
            "itemtype": "method",
            "name": "destroy",
            "params": [
                {
                    "name": "obj",
                    "description": "the object to destroy",
                    "type": "Object"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Ember",
            "module": "ember-metal"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 36804,
            "description": "Description",
            "itemtype": "method",
            "name": "args",
            "params": [
                {
                    "name": "options",
                    "description": ""
                },
                {
                    "name": "actionName",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Ember",
            "module": "ember",
            "submodule": "ember-routing"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 36831,
            "description": "Description",
            "itemtype": "method",
            "name": "isAllowedEvent",
            "params": [
                {
                    "name": "event",
                    "description": ""
                },
                {
                    "name": "allowedKeys",
                    "description": ""
                }
            ],
            "return": {
                "description": "allowed"
            },
            "class": "Ember.Ember",
            "module": "ember",
            "submodule": "ember-routing"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 36862,
            "description": "Description",
            "itemtype": "method",
            "name": "registerAction",
            "params": [
                {
                    "name": "actionNameOrPath",
                    "description": ""
                },
                {
                    "name": "options",
                    "description": ""
                },
                {
                    "name": "allowedKeys",
                    "description": ""
                }
            ],
            "return": {
                "description": "actionId"
            },
            "class": "Ember.Ember",
            "module": "ember",
            "submodule": "ember-routing"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 36875,
            "description": "Description",
            "itemtype": "method",
            "name": "handler",
            "params": [
                {
                    "name": "event",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Ember",
            "module": "ember",
            "submodule": "ember-routing"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 36933,
            "description": "The `{{action}}` helper registers an HTML element within a template for DOM\nevent handling and forwards that interaction to the templates's controller\nor supplied `target` option (see 'Specifying a Target').\nIf the controller does not implement the event, the event is sent\nto the current route, and it bubbles up the route hierarchy from there.\nUser interaction with that element will invoke the supplied action name on\nthe appropriate target. Specifying a non-quoted action name will result in\na bound property lookup at the time the event will be triggered.\nGiven the following application Handlebars template on the page\n```handlebars\n<div {{action 'anActionName'}}>\nclick me\n</div>\n```\nAnd application code\n```javascript\nApp.ApplicationController = Ember.Controller.extend({\nactions: {\nanActionName: function() {\n}\n}\n});\n```\nWill result in the following rendered HTML\n```html\n<div class=\"ember-view\">\n<div data-ember-action=\"1\">\nclick me\n</div>\n</div>\n```\nClicking \"click me\" will trigger the `anActionName` action of the\n`App.ApplicationController`. In this case, no additional parameters will be passed.\nIf you provide additional parameters to the helper:\n```handlebars\n<button {{action 'edit' post}}>Edit</button>\n```\nThose parameters will be passed along as arguments to the JavaScript\nfunction implementing the action.\n### Event Propagation\nEvents triggered through the action helper will automatically have\n`.preventDefault()` called on them. You do not need to do so in your event\nhandlers. If you need to allow event propagation (to handle file inputs for\nexample) you can supply the `preventDefault=false` option to the `{{action}}` helper:\n```handlebars\n<div {{action \"sayHello\" preventDefault=false}}>\n<input type=\"file\" />\n<input type=\"checkbox\" />\n</div>\n```\nTo disable bubbling, pass `bubbles=false` to the helper:\n```handlebars\n<button {{action 'edit' post bubbles=false}}>Edit</button>\n```\nIf you need the default handler to trigger you should either register your\nown event handler, or use event methods on your view class. See [Ember.View](/api/classes/Ember.View.html)\n'Responding to Browser Events' for more information.\n### Specifying DOM event type\nBy default the `{{action}}` helper registers for DOM `click` events. You can\nsupply an `on` option to the helper to specify a different DOM event name:\n```handlebars\n<div {{action \"anActionName\" on=\"doubleClick\"}}>\nclick me\n</div>\n```\nSee `Ember.View` 'Responding to Browser Events' for a list of\nacceptable DOM event names.\nNOTE: Because `{{action}}` depends on Ember's event dispatch system it will\nonly function if an `Ember.EventDispatcher` instance is available. An\n`Ember.EventDispatcher` instance will be created when a new `Ember.Application`\nis created. Having an instance of `Ember.Application` will satisfy this\nrequirement.\n### Specifying whitelisted modifier keys\nBy default the `{{action}}` helper will ignore click event with pressed modifier\nkeys. You can supply an `allowedKeys` option to specify which keys should not be ignored.\n```handlebars\n<div {{action \"anActionName\" allowedKeys=\"alt\"}}>\nclick me\n</div>\n```\nThis way the `{{action}}` will fire when clicking with the alt key pressed down.\nAlternatively, supply \"any\" to the `allowedKeys` option to accept any combination of modifier keys.\n```handlebars\n<div {{action \"anActionName\" allowedKeys=\"any\"}}>\nclick me with any key pressed\n</div>\n```\n### Specifying a Target\nThere are several possible target objects for `{{action}}` helpers:\nIn a typical Ember application, where views are managed through use of the\n`{{outlet}}` helper, actions will bubble to the current controller, then\nto the current route, and then up the route hierarchy.\nAlternatively, a `target` option can be provided to the helper to change\nwhich object will receive the method call. This option must be a path\nto an object, accessible in the current context:\n```handlebars\n{{! the application template }}\n<div {{action \"anActionName\" target=view}}>\nclick me\n</div>\n```\n```javascript\nApp.ApplicationView = Ember.View.extend({\nactions: {\nanActionName: function(){}\n}\n});\n```\n### Additional Parameters\nYou may specify additional parameters to the `{{action}}` helper. These\nparameters are passed along as the arguments to the JavaScript function\nimplementing the action.\n```handlebars\n{{#each person in people}}\n<div {{action \"edit\" person}}>\nclick me\n</div>\n{{/each}}\n```\nClicking \"click me\" will trigger the `edit` method on the current controller\nwith the value of `person` as a parameter.",
            "itemtype": "method",
            "name": "actionHelper",
            "params": [
                {
                    "name": "actionName",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "NewExpression"
            },
            "class": "Ember.Handlebars.helpers",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember.Handlebars"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 37129,
            "description": "Description",
            "itemtype": "method",
            "name": "numberOfContextsAcceptedByHandler",
            "params": [
                {
                    "name": "handler",
                    "description": ""
                },
                {
                    "name": "handlerInfos",
                    "description": ""
                }
            ],
            "return": {
                "description": "req"
            },
            "class": "Ember.Handlebars.helpers",
            "module": "ember",
            "submodule": "ember-routing"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 37151,
            "description": "Description",
            "itemtype": "method",
            "name": "getResolvedPaths",
            "params": [
                {
                    "name": "options",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Handlebars.helpers",
            "module": "ember",
            "submodule": "ember-routing"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 37183,
            "description": "Sets the `title` attribute of the `LinkView`'s HTML element.",
            "itemtype": "property",
            "name": "title",
            "default": "null",
            "class": "Ember.LinkView",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 37191,
            "description": "Sets the `rel` attribute of the `LinkView`'s HTML element.",
            "itemtype": "property",
            "name": "rel",
            "default": "null",
            "class": "Ember.LinkView",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 37199,
            "description": "The CSS class to apply to `LinkView`'s element when its `active`\nproperty is `true`.",
            "itemtype": "property",
            "name": "activeClass",
            "type": "String",
            "default": "active",
            "class": "Ember.LinkView",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 37209,
            "description": "The CSS class to apply to `LinkView`'s element when its `loading`\nproperty is `true`.",
            "itemtype": "property",
            "name": "loadingClass",
            "type": "String",
            "default": "loading",
            "class": "Ember.LinkView",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 37219,
            "description": "The CSS class to apply to a `LinkView`'s element when its `disabled`\nproperty is `true`.",
            "itemtype": "property",
            "name": "disabledClass",
            "type": "String",
            "default": "disabled",
            "class": "Ember.LinkView",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 37230,
            "description": "Determines whether the `LinkView` will trigger routing via\nthe `replaceWith` routing strategy.",
            "itemtype": "property",
            "name": "replace",
            "type": "Boolean",
            "default": "false",
            "class": "Ember.LinkView",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 37240,
            "description": "By default the `{{link-to}}` helper will bind to the `href` and\n`title` attributes. It's discourage that you override these defaults,\nhowever you can push onto the array if needed.",
            "itemtype": "property",
            "name": "attributeBindings",
            "type": "Array | String",
            "default": "['href', 'title', 'rel']",
            "class": "Ember.LinkView",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 37251,
            "description": "By default the `{{link-to}}` helper will bind to the `active`, `loading`, and\n`disabled` classes. It is discouraged to override these directly.",
            "itemtype": "property",
            "name": "classNameBindings",
            "type": "Array",
            "default": "['active', 'loading', 'disabled']",
            "class": "Ember.LinkView",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 37261,
            "description": "By default the `{{link-to}}` helper responds to the `click` event. You\ncan override this globally by setting this property to your custom\nevent name.\n\nThis is particularly useful on mobile when one wants to avoid the 300ms\nclick delay using some sort of custom `tap` event.",
            "itemtype": "property",
            "name": "eventName",
            "type": "String",
            "default": "click",
            "class": "Ember.LinkView",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 37278,
            "description": "Triggers the `LinkView`'s routing behavior. If\n`eventName` is changed to a value other than `click`\nthe routing behavior will trigger on that custom event\ninstead.",
            "itemtype": "event",
            "name": "click",
            "class": "Ember.LinkView",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 37287,
            "description": "An overridable method called when LinkView objects are instantiated.\nExample:\n```javascript\nApp.MyLinkView = Ember.LinkView.extend({\ninit: function() {\nthis._super();\nEmber.Logger.log('Event is ' + this.get('eventName'));\n}\n});\n```\nNOTE: If you do override `init` for a framework class like `Ember.View` or\n`Ember.ArrayController`, be sure to call `this._super()` in your\n`init` declaration! If you don't, Ember may not have an opportunity to\ndo important setup work, and you'll see strange behavior in your\napplication.",
            "itemtype": "method",
            "name": "init",
            "return": {
                "description": ""
            },
            "class": "Ember.LinkView",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 37314,
            "description": "This method is invoked by observers installed during `init` that fire\nwhenever the params change",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_paramsChanged",
            "since": "1.3.0",
            "class": "Ember.LinkView",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 37326,
            "description": "This is called to setup observers that will trigger a rerender.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_setupPathObservers",
            "since": "1.3.0",
            "class": "Ember.LinkView",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 37373,
            "description": "Description",
            "itemtype": "method",
            "name": "afterRender",
            "return": {
                "description": ""
            },
            "class": "Ember.LinkView",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 37383,
            "description": "Accessed as a classname binding to apply the `LinkView`'s `disabledClass`\n        CSS `class` to the element when the link is disabled.\nWhen `true` interactions with the element will not trigger route changes.",
            "itemtype": "property",
            "name": "disabled",
            "class": "Ember.LinkView",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 37397,
            "description": "Accessed as a classname binding to apply the `LinkView`'s `activeClass`\nCSS `class` to the element when the link is active.\n\nA `LinkView` is considered active when its `currentWhen` property is `true`\nor the application's current route is the route the `LinkView` would trigger\ntransitions into.",
            "itemtype": "property",
            "name": "active",
            "class": "Ember.LinkView",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 37453,
            "description": "Accessed as a classname binding to apply the `LinkView`'s `loadingClass`\nCSS `class` to the element when the link is loading.\n\nA `LinkView` is considered loading when it has at least one\nparameter whose value is currently null or undefined. During\nthis time, clicking the link will perform no transition and\nemit a warning that the link is still in a loading state.",
            "itemtype": "property",
            "name": "loading",
            "class": "Ember.LinkView",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 37468,
            "description": "Returns the application's main router from the container.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "router",
            "class": "Ember.LinkView",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 37481,
            "description": "Event handler that invokes the link, activating the associated route.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_invoke",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Event"
                }
            ],
            "class": "Ember.LinkView",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 37526,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_eagerUpdateUrl",
            "params": [
                {
                    "name": "transition",
                    "description": ""
                },
                {
                    "name": "href",
                    "description": ""
                }
            ],
            "class": "Ember.LinkView",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 37555,
            "description": "Computed property that returns an array of the\nresolved parameters passed to the `link-to` helper,\ne.g.:\n\n```hbs\n{{link-to a b '123' c}}\n```\n\nwill generate a `resolvedParams` of:\n\n```js\n[aObject, bObject, '123', cObject]\n```",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "",
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "Ember.LinkView",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 37600,
            "description": "Computed property that returns the current route name,\ndynamic segments, and query params. Returns falsy if\nfor null/undefined params to indicate that the link view\nis still in a loading state.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "",
            "return": {
                "description": "An array with the route name and any dynamic segments",
                "type": "Array"
            },
            "class": "Ember.LinkView",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 37631,
            "description": "Sets the element's `href` attribute to the url for\nthe `LinkView`'s targeted route.\n\nIf the `LinkView`'s `tagName` is changed to a value other\nthan `a`, this property will be ignored.",
            "itemtype": "property",
            "name": "href",
            "class": "Ember.LinkView",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 37661,
            "description": "The default href value to use while a link-to is loading.\nOnly applies when tagName is 'a'",
            "itemtype": "property",
            "name": "loadingHref",
            "type": "String",
            "default": "#",
            "class": "Ember.LinkView",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 37672,
            "description": "Description",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "Literal"
            },
            "class": "Ember.LinkView",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 37680,
            "description": "The `{{link-to}}` helper renders a link to the supplied\n`routeName` passing an optionally supplied model to the\nroute as its `model` context of the route. The block\nfor `{{link-to}}` becomes the innerHTML of the rendered\nelement:\n```handlebars\n{{#link-to 'photoGallery'}}\nGreat Hamster Photos\n{{/link-to}}\n```\n```html\n<a href=\"/hamster-photos\">\nGreat Hamster Photos\n</a>\n```\n### Supplying a tagName\nBy default `{{link-to}}` renders an `<a>` element. This can\nbe overridden for a single use of `{{link-to}}` by supplying\na `tagName` option:\n```handlebars\n{{#link-to 'photoGallery' tagName=\"li\"}}\nGreat Hamster Photos\n{{/link-to}}\n```\n```html\n<li>\nGreat Hamster Photos\n</li>\n```\nTo override this option for your entire application, see\n\"Overriding Application-wide Defaults\".\n### Disabling the `link-to` helper\nBy default `{{link-to}}` is enabled.\nany passed value to `disabled` helper property will disable the `link-to` helper.\nstatic use: the `disabled` option:\n```handlebars\n{{#link-to 'photoGallery' disabled=true}}\nGreat Hamster Photos\n{{/link-to}}\n```\ndynamic use: the `disabledWhen` option:\n```handlebars\n{{#link-to 'photoGallery' disabledWhen=controller.someProperty}}\nGreat Hamster Photos\n{{/link-to}}\n```\nany passed value to `disabled` will disable it except `undefined`.\nto ensure that only `true` disable the `link-to` helper you can\noverride the global behaviour of `Ember.LinkView`.\n```javascript\nEmber.LinkView.reopen({\ndisabled: Ember.computed(function(key, value) {\nif (value !== undefined) {\nthis.set('_isDisabled', value === true);\n}\nreturn value === true ? get(this, 'disabledClass') : false;\n})\n});\n```\nsee \"Overriding Application-wide Defaults\" for more.\n### Handling `href`\n`{{link-to}}` will use your application's Router to\nfill the element's `href` property with a url that\nmatches the path to the supplied `routeName` for your\nrouters's configured `Location` scheme, which defaults\nto Ember.HashLocation.\n### Handling current route\n`{{link-to}}` will apply a CSS class name of 'active'\nwhen the application's current route matches\nthe supplied routeName. For example, if the application's\ncurrent route is 'photoGallery.recent' the following\nuse of `{{link-to}}`:\n```handlebars\n{{#link-to 'photoGallery.recent'}}\nGreat Hamster Photos from the last week\n{{/link-to}}\n```\nwill result in\n```html\n<a href=\"/hamster-photos/this-week\" class=\"active\">\nGreat Hamster Photos\n</a>\n```\nThe CSS class name used for active classes can be customized\nfor a single use of `{{link-to}}` by passing an `activeClass`\noption:\n```handlebars\n{{#link-to 'photoGallery.recent' activeClass=\"current-url\"}}\nGreat Hamster Photos from the last week\n{{/link-to}}\n```\n```html\n<a href=\"/hamster-photos/this-week\" class=\"current-url\">\nGreat Hamster Photos\n</a>\n```\nTo override this option for your entire application, see\n\"Overriding Application-wide Defaults\".\n### Supplying a model\nAn optional model argument can be used for routes whose\npaths contain dynamic segments. This argument will become\nthe model context of the linked route:\n```javascript\nApp.Router.map(function() {\nthis.resource(\"photoGallery\", {path: \"hamster-photos/:photo_id\"});\n});\n```\n```handlebars\n{{#link-to 'photoGallery' aPhoto}}\n{{aPhoto.title}}\n{{/link-to}}\n```\n```html\n<a href=\"/hamster-photos/42\">\nTomster\n</a>\n```\n### Supplying multiple models\nFor deep-linking to route paths that contain multiple\ndynamic segments, multiple model arguments can be used.\nAs the router transitions through the route path, each\nsupplied model argument will become the context for the\nroute with the dynamic segments:\n```javascript\nApp.Router.map(function() {\nthis.resource(\"photoGallery\", {path: \"hamster-photos/:photo_id\"}, function() {\nthis.route(\"comment\", {path: \"comments/:comment_id\"});\n});\n});\n```\nThis argument will become the model context of the linked route:\n```handlebars\n{{#link-to 'photoGallery.comment' aPhoto comment}}\n{{comment.body}}\n{{/link-to}}\n```\n```html\n<a href=\"/hamster-photos/42/comment/718\">\nA+++ would snuggle again.\n</a>\n```\n### Supplying an explicit dynamic segment value\nIf you don't have a model object available to pass to `{{link-to}}`,\nan optional string or integer argument can be passed for routes whose\npaths contain dynamic segments. This argument will become the value\nof the dynamic segment:\n```javascript\nApp.Router.map(function() {\nthis.resource(\"photoGallery\", {path: \"hamster-photos/:photo_id\"});\n});\n```\n```handlebars\n{{#link-to 'photoGallery' aPhotoId}}\n{{aPhoto.title}}\n{{/link-to}}\n```\n```html\n<a href=\"/hamster-photos/42\">\nTomster\n</a>\n```\nWhen transitioning into the linked route, the `model` hook will\nbe triggered with parameters including this passed identifier.\n### Allowing Default Action\nBy default the `{{link-to}}` helper prevents the default browser action\nby calling `preventDefault()` as this sort of action bubbling is normally\nhandled internally and we do not want to take the browser to a new URL (for\nexample).\nIf you need to override this behavior specify `preventDefault=false` in\nyour template:\n```handlebars\n{{#link-to 'photoGallery' aPhotoId preventDefault=false}}\n{{aPhotoId.title}}\n{{/link-to}}\n```\n### Overriding attributes\nYou can override any given property of the Ember.LinkView\nthat is generated by the `{{link-to}}` helper by passing\nkey/value pairs, like so:\n```handlebars\n{{#link-to  aPhoto tagName='li' title='Following this link will change your life' classNames='pic sweet'}}\nUh-mazing!\n{{/link-to}}\n```\nSee [Ember.LinkView](/api/classes/Ember.LinkView.html) for a\ncomplete list of overrideable properties. Be sure to also\ncheck out inherited properties of `LinkView`.\n### Overriding Application-wide Defaults\n``{{link-to}}`` creates an instance of Ember.LinkView\nfor rendering. To override options for your entire\napplication, reopen Ember.LinkView and supply the\ndesired values:\n``` javascript\nEmber.LinkView.reopen({\nactiveClass: \"is-active\",\ntagName: 'li'\n})\n```\nIt is also possible to override the default event in\nthis manner:\n``` javascript\nEmber.LinkView.reopen({\neventName: 'customEventName'\n});\n```",
            "see": [
                "{Ember.LinkView}"
            ],
            "itemtype": "method",
            "name": "linkToHelper",
            "params": [
                {
                    "name": "name",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Handlebars.helpers",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember.Handlebars"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 37911,
            "description": "Description",
            "itemtype": "method",
            "name": "fn",
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Handlebars.helpers",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember.Handlebars"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 37920,
            "description": "Description",
            "itemtype": "method",
            "name": "fn",
            "return": {
                "description": "linkTitle"
            },
            "class": "Ember.Handlebars.helpers",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember.Handlebars"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 37954,
            "description": "See [link-to](/api/classes/Ember.Handlebars.helpers.html#method_link-to)",
            "deprecated": true,
            "itemtype": "method",
            "name": "deprecatedLinkToHelper",
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Handlebars.helpers",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember.Handlebars"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 37966,
            "description": "Description",
            "itemtype": "method",
            "name": "getResolvedQueryParams",
            "params": [
                {
                    "name": "linkView",
                    "description": ""
                },
                {
                    "name": "targetRouteName",
                    "description": ""
                }
            ],
            "return": {
                "description": "resolvedQueryParams"
            },
            "class": "Ember.Handlebars.helpers",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember.Handlebars"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 37996,
            "description": "Description",
            "itemtype": "method",
            "name": "getNormalizedPath",
            "params": [
                {
                    "name": "path",
                    "description": ""
                },
                {
                    "name": "helperParameters",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Handlebars.helpers",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember.Handlebars"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 38007,
            "description": "Description",
            "itemtype": "method",
            "name": "paramsAreLoaded",
            "params": [
                {
                    "name": "params",
                    "description": ""
                }
            ],
            "return": {
                "description": "Literal"
            },
            "class": "Ember.Handlebars.helpers",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember.Handlebars"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 38023,
            "description": "Description",
            "itemtype": "method",
            "name": "shallowEqual",
            "params": [
                {
                    "name": "a",
                    "description": ""
                },
                {
                    "name": "b",
                    "description": ""
                }
            ],
            "return": {
                "description": "Literal"
            },
            "class": "Ember.Handlebars.helpers",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember.Handlebars"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 38070,
            "description": "The `outlet` helper is a placeholder that the router will fill in with\nthe appropriate template based on the current state of the application.\n``` handlebars\n{{outlet}}\n```\nBy default, a template based on Ember's naming conventions will be rendered\ninto the `outlet` (e.g. `App.PostsRoute` will render the `posts` template).\nYou can render a different template by using the `render()` method in the\nroute's `renderTemplate` hook. The following will render the `favoritePost`\ntemplate into the `outlet`.\n``` javascript\nApp.PostsRoute = Ember.Route.extend({\nrenderTemplate: function() {\nthis.render('favoritePost');\n}\n});\n```\nYou can create custom named outlets for more control.\n``` handlebars\n{{outlet 'favoritePost'}}\n{{outlet 'posts'}}\n```\nThen you can define what template is rendered into each outlet in your\nroute.\n``` javascript\nApp.PostsRoute = Ember.Route.extend({\nrenderTemplate: function() {\nthis.render('favoritePost', { outlet: 'favoritePost' });\nthis.render('posts', { outlet: 'posts' });\n}\n});\n```\nYou can specify the view that the outlet uses to contain and manage the\ntemplates rendered into it.\n``` handlebars\n{{outlet view='sectionContainer'}}\n```\n``` javascript\nApp.SectionContainer = Ember.ContainerView.extend({\ntagName: 'section',\nclassNames: ['special']\n});\n```\nthat holds the view for this outlet",
            "itemtype": "method",
            "name": "outletHelper",
            "params": [
                {
                    "name": "property",
                    "description": "the property on the controller",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Handlebars.helpers",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember.Handlebars"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 38182,
            "description": "Calling ``{{render}}`` from within a template will insert another\ntemplate that matches the provided name. The inserted template will\naccess its properties on its own controller (rather than the controller\nof the parent template).\nIf a view class with the same name exists, the view class also will be used.\nNote: A given controller may only be used *once* in your app in this manner.\nA singleton instance of the controller will be created for you.\nExample:\n```javascript\nApp.NavigationController = Ember.Controller.extend({\nwho: \"world\"\n});\n```\n```handlebars\n<!-- navigation.hbs -->\nHello, {{who}}.\n```\n```handelbars\n<!-- application.hbs -->\n<h1>My great app</h1>\n{{render \"navigation\"}}\n```\n```html\n<h1>My great app</h1>\n<div class='ember-view'>\nHello, world.\n</div>\n```\nOptionally you may provide a second argument: a property path\nthat will be bound to the `model` property of the controller.\nIf a `model` property path is specified, then a new instance of the\ncontroller will be created and `{{render}}` can be used multiple times\nwith the same name.\nFor example if you had this `author` template.\n```handlebars\n<div class=\"author\">\nWritten by {{firstName}} {{lastName}}.\nTotal Posts: {{postCount}}\n</div>\n```\nYou could render it inside the `post` template using the `render` helper.\n```handlebars\n<div class=\"post\">\n<h1>{{title}}</h1>\n<div>{{body}}</div>\n{{render \"author\" author}}\n</div>\n```",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "contextString",
                    "description": ""
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Hash"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Handlebars.helpers",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember.Handlebars"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 38338,
            "description": "Description",
            "itemtype": "method",
            "name": "routeArgs",
            "params": [
                {
                    "name": "targetRouteName",
                    "description": ""
                },
                {
                    "name": "models",
                    "description": ""
                },
                {
                    "name": "queryParams",
                    "description": ""
                }
            ],
            "return": {
                "description": "args"
            },
            "class": "Ember.Handlebars.helpers",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember.Handlebars"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 38357,
            "description": "Description",
            "itemtype": "method",
            "name": "getActiveTargetName",
            "params": [
                {
                    "name": "router",
                    "description": ""
                }
            ],
            "return": {
                "description": "MemberExpression"
            },
            "class": "Ember.Handlebars.helpers",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember.Handlebars"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 38371,
            "description": "Description",
            "itemtype": "method",
            "name": "resolveParams",
            "params": [
                {
                    "name": "context",
                    "description": ""
                },
                {
                    "name": "params",
                    "description": ""
                },
                {
                    "name": "options",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Handlebars.helpers",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember.Handlebars"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 38391,
            "description": "Description",
            "itemtype": "method",
            "name": "stashParamNames",
            "params": [
                {
                    "name": "router",
                    "description": ""
                },
                {
                    "name": "handlerInfos",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Handlebars.helpers",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember.Handlebars"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 38427,
            "description": "Description",
            "itemtype": "method",
            "name": "resolvePaths",
            "params": [
                {
                    "name": "context",
                    "description": ""
                },
                {
                    "name": "params",
                    "description": ""
                },
                {
                    "name": "options",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Handlebars.helpers",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember.Handlebars"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 38447,
            "description": "Description",
            "itemtype": "method",
            "name": "unwrap",
            "params": [
                {
                    "name": "object",
                    "description": ""
                },
                {
                    "name": "path",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Handlebars.helpers",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember.Handlebars"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 38534,
            "description": "Transition the application into another route. The route may\nbe either a single route or route path:\n```javascript\naController.transitionToRoute('blogPosts');\naController.transitionToRoute('blogPosts.recentEntries');\n```\nOptionally supply a model for the route in question. The model\nwill be serialized into the URL using the `serialize` hook of\nthe route:\n```javascript\naController.transitionToRoute('blogPost', aPost);\n```\nIf a literal is passed (such as a number or a string), it will\nbe treated as an identifier instead. In this case, the `model`\nhook of the route will be triggered:\n```javascript\naController.transitionToRoute('blogPost', 1);\n```\nMultiple models will be applied last to first recursively up the\nresource tree.\n```javascript\nApp.Router.map(function() {\nthis.resource('blogPost', {path:':blogPostId'}, function(){\nthis.resource('blogComment', {path: ':blogCommentId'});\n});\n});\naController.transitionToRoute('blogComment', aPost, aComment);\naController.transitionToRoute('blogComment', 1, 13);\n```\nIt is also possible to pass a URL (a string that starts with a\n`/`). This is intended for testing and debugging purposes and\nshould rarely be used in production code.\n```javascript\naController.transitionToRoute('/');\naController.transitionToRoute('/blog/post/1/comment/13');\n```\nSee also [replaceRoute](/api/classes/Ember.ControllerMixin.html#method_replaceRoute).\nwhile transitioning to the route.",
            "itemtype": "method",
            "name": "transitionToRoute",
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 38584,
            "deprecated": true,
            "itemtype": "method",
            "name": "transitionTo",
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 38595,
            "description": "Transition into another route while replacing the current URL, if possible.\nThis will replace the current history entry instead of adding a new one.\nBeside that, it is identical to `transitionToRoute` in all other respects.\n```javascript\naController.replaceRoute('blogPosts');\naController.replaceRoute('blogPosts.recentEntries');\n```\nOptionally supply a model for the route in question. The model\nwill be serialized into the URL using the `serialize` hook of\nthe route:\n```javascript\naController.replaceRoute('blogPost', aPost);\n```\nIf a literal is passed (such as a number or a string), it will\nbe treated as an identifier instead. In this case, the `model`\nhook of the route will be triggered:\n```javascript\naController.replaceRoute('blogPost', 1);\n```\nMultiple models will be applied last to first recursively up the\nresource tree.\n```javascript\nApp.Router.map(function() {\nthis.resource('blogPost', {path:':blogPostId'}, function(){\nthis.resource('blogComment', {path: ':blogCommentId'});\n});\n});\naController.replaceRoute('blogComment', aPost, aComment);\naController.replaceRoute('blogComment', 1, 13);\n```\nIt is also possible to pass a URL (a string that starts with a\n`/`). This is intended for testing and debugging purposes and\nshould rarely be used in production code.\n```javascript\naController.replaceRoute('/');\naController.replaceRoute('/blog/post/1/comment/13');\n```\nwhile transitioning to the route.",
            "itemtype": "method",
            "name": "replaceRoute",
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 38645,
            "deprecated": true,
            "itemtype": "method",
            "name": "replaceWith",
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ControllerMixin",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 38661,
            "description": "Description",
            "itemtype": "method",
            "name": "init",
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 38775,
            "description": "Description",
            "itemtype": "method",
            "name": "accumulateQueryParamDescriptors",
            "params": [
                {
                    "name": "_desc",
                    "description": ""
                },
                {
                    "name": "accum",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 38805,
            "description": "Description",
            "itemtype": "method",
            "name": "listenForQueryParamChanges",
            "params": [
                {
                    "name": "controller",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 38857,
            "description": "Sets the private `_outlets` object on the view.",
            "itemtype": "method",
            "name": "init",
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin",
            "module": "ember",
            "submodule": "ember-routing"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 38867,
            "description": "Manually fill any of a view's `{{outlet}}` areas with the\nsupplied view.\nExample\n```javascript\nvar MyView = Ember.View.extend({\ntemplate: Ember.Handlebars.compile('Child view: {{outlet \"main\"}} ')\n});\nvar myView = MyView.create();\nmyView.appendTo('body');\n// The html for myView now looks like:\n// <div id=\"ember228\" class=\"ember-view\">Child view: </div>\nvar FooView = Ember.View.extend({\ntemplate: Ember.Handlebars.compile('<h1>Foo</h1> ')\n});\nvar fooView = FooView.create();\nmyView.connectOutlet('main', fooView);\n// The html for myView now looks like:\n// <div id=\"ember228\" class=\"ember-view\">Child view:\n//   <div id=\"ember234\" class=\"ember-view\"><h1>Foo</h1> </div>\n// </div>\n```",
            "itemtype": "method",
            "name": "connectOutlet",
            "params": [
                {
                    "name": "outletName",
                    "description": "A unique name for the outlet",
                    "type": "String"
                },
                {
                    "name": "view",
                    "description": "An Ember.View",
                    "type": "Object"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin",
            "module": "ember",
            "submodule": "ember-routing"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 38916,
            "description": "Determines if the view has already been created by checking if\nthe view has the same constructor, template, and context as the\nview in the `_outlets` object.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_hasEquivalentView",
            "params": [
                {
                    "name": "outletName",
                    "description": "The name of the outlet we are checking",
                    "type": "String"
                },
                {
                    "name": "view",
                    "description": "An Ember.View",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Ember.ControllerMixin",
            "module": "ember",
            "submodule": "ember-routing"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 38935,
            "description": "Removes an outlet from the view.\nExample\n```javascript\nvar MyView = Ember.View.extend({\ntemplate: Ember.Handlebars.compile('Child view: {{outlet \"main\"}} ')\n});\nvar myView = MyView.create();\nmyView.appendTo('body');\n// myView's html:\n// <div id=\"ember228\" class=\"ember-view\">Child view: </div>\nvar FooView = Ember.View.extend({\ntemplate: Ember.Handlebars.compile('<h1>Foo</h1> ')\n});\nvar fooView = FooView.create();\nmyView.connectOutlet('main', fooView);\n// myView's html:\n// <div id=\"ember228\" class=\"ember-view\">Child view:\n//   <div id=\"ember234\" class=\"ember-view\"><h1>Foo</h1> </div>\n// </div>\nmyView.disconnectOutlet('main');\n// myView's html:\n// <div id=\"ember228\" class=\"ember-view\">Child view: </div>\n```",
            "itemtype": "method",
            "name": "disconnectOutlet",
            "params": [
                {
                    "name": "outletName",
                    "description": "The name of the outlet to be removed",
                    "type": "String"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin",
            "module": "ember",
            "submodule": "ember-routing"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 38971,
            "description": "Gets an outlet that is pending disconnection and then\nnullifys the object on the `_outlet` object.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_finishDisconnections",
            "class": "Ember.ControllerMixin",
            "module": "ember",
            "submodule": "ember-routing"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 39119,
            "description": "This is deprecated in favor of using the container to lookup the location\nimplementation as desired.\nFor example:\n```javascript\n// Given a location registered as follows:\ncontainer.register('location:history-test', HistoryTestLocation);\n// You could create a new instance via:\ncontainer.lookup('location:history-test');\n```\nneed.",
            "deprecated": true,
            "deprecationMessage": "Use the container to lookup the location implementation that you",
            "itemtype": "method",
            "name": "create",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Location",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 39145,
            "description": "This is deprecated in favor of using the container to register the\nlocation implementation as desired.\nExample:\n```javascript\nApplication.initializer({\nname: \"history-test-location\",\ninitialize: function(container, application) {\napplication.register('location:history-test', HistoryTestLocation);\n}\n});\n```\ncontainer directly.",
            "deprecated": true,
            "deprecationMessage": "Register your custom location implementation with the",
            "itemtype": "method",
            "name": "registerImplementation",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "implementation",
                    "description": "of the `location` API",
                    "type": "Object"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Location",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 39173,
            "description": "Returns the current `location.hash` by parsing location.href since browsers\ninconsistently URL-decode `location.hash`.\n\nhttps://bugzilla.mozilla.org/show_bug.cgi?id=483304",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "getHash",
            "since": "1.4.0",
            "class": "Ember.Location",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 39232,
            "access": "private",
            "tagname": "This property is used by router:main to know whether to cancel the routing\nsetup process, which is needed while we redirect the browser.",
            "since": "1.5.1",
            "itemtype": "property",
            "name": "cancelRouterSetup",
            "default": "false",
            "class": "Ember.AutoLocation",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 39244,
            "access": "private",
            "tagname": "Will be pre-pended to path upon state change.",
            "since": "1.5.1",
            "itemtype": "property",
            "name": "rootURL",
            "default": "'/'",
            "class": "Ember.AutoLocation",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 39255,
            "access": "private",
            "tagname": "Attached for mocking in tests",
            "since": "1.5.1",
            "itemtype": "property",
            "name": "_window",
            "default": "window",
            "class": "Ember.AutoLocation",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 39266,
            "access": "private",
            "tagname": "Attached for mocking in tests",
            "itemtype": "property",
            "name": "location",
            "default": "window.location",
            "class": "Ember.AutoLocation",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 39276,
            "access": "private",
            "tagname": "Attached for mocking in tests",
            "since": "1.5.1",
            "itemtype": "property",
            "name": "_history",
            "default": "window.history",
            "class": "Ember.AutoLocation",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 39287,
            "access": "private",
            "tagname": "Attached for mocking in tests",
            "since": "1.5.1",
            "itemtype": "property",
            "name": "_HistoryLocation",
            "default": "Ember.HistoryLocation",
            "class": "Ember.AutoLocation",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 39298,
            "access": "private",
            "tagname": "Attached for mocking in tests",
            "since": "1.5.1",
            "itemtype": "property",
            "name": "_HashLocation",
            "default": "Ember.HashLocation",
            "class": "Ember.AutoLocation",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 39309,
            "access": "private",
            "tagname": "Attached for mocking in tests",
            "since": "1.5.1",
            "itemtype": "property",
            "name": "_NoneLocation",
            "default": "Ember.NoneLocation",
            "class": "Ember.AutoLocation",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 39320,
            "access": "private",
            "tagname": "Returns location.origin or builds it if device doesn't support it.",
            "itemtype": "method",
            "name": "_getOrigin",
            "class": "Ember.AutoLocation",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 39343,
            "access": "private",
            "tagname": "We assume that if the history object has a pushState method, the host should\nsupport HistoryLocation.",
            "itemtype": "method",
            "name": "_getSupportsHistory",
            "class": "Ember.AutoLocation",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 39369,
            "access": "private",
            "tagname": "IE8 running in IE7 compatibility mode gives false positive, so we must also\ncheck documentMode.",
            "itemtype": "method",
            "name": "_getSupportsHashChange",
            "class": "Ember.AutoLocation",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 39384,
            "access": "private",
            "tagname": "Redirects the browser using location.replace, prepending the locatin.origin\nto prevent phishing attempts",
            "itemtype": "method",
            "name": "_replacePath",
            "class": "Ember.AutoLocation",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 39396,
            "since": "1.5.1",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_getRootURL",
            "class": "Ember.AutoLocation",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 39405,
            "access": "private",
            "tagname": "Returns the current `location.pathname`, normalized for IE inconsistencies.",
            "itemtype": "method",
            "name": "_getPath",
            "class": "Ember.AutoLocation",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 39422,
            "access": "private",
            "tagname": "Returns normalized location.hash as an alias to Ember.Location._getHash",
            "since": "1.5.1",
            "itemtype": "method",
            "name": "_getHash",
            "class": "Ember.AutoLocation",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 39432,
            "access": "private",
            "tagname": "Returns location.search",
            "since": "1.5.1",
            "itemtype": "method",
            "name": "_getQuery",
            "class": "Ember.AutoLocation",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 39444,
            "access": "private",
            "tagname": "Returns the full pathname including query and hash",
            "itemtype": "method",
            "name": "_getFullPath",
            "class": "Ember.AutoLocation",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 39455,
            "access": "private",
            "tagname": "Returns the current path as it should appear for HistoryLocation supported\nbrowsers. This may very well differ from the real current path (e.g. if it\nstarts off as a hashed URL)",
            "itemtype": "method",
            "name": "_getHistoryPath",
            "class": "Ember.AutoLocation",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 39504,
            "access": "private",
            "tagname": "Returns the current path as it should appear for HashLocation supported\nbrowsers. This may very well differ from the real current path.",
            "itemtype": "method",
            "name": "_getHashPath",
            "class": "Ember.AutoLocation",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 39529,
            "description": "Selects the best location option based off browser support and returns an\ninstance of that Location class.",
            "see": [
                "Ember.AutoLocation"
            ],
            "itemtype": "method",
            "name": "create",
            "params": [
                {
                    "name": "options",
                    "description": ""
                }
            ],
            "return": {
                "description": "implementation"
            },
            "class": "Ember.AutoLocation",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 39616,
            "description": "Description",
            "itemtype": "method",
            "name": "init",
            "return": {
                "description": ""
            },
            "class": "Ember.HashLocation",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 39625,
            "access": "private",
            "tagname": "Returns normalized location.hash",
            "since": "1.5.1",
            "itemtype": "method",
            "name": "getHash",
            "class": "Ember.HashLocation",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 39635,
            "description": "Returns the current `location.hash`, minus the '#' at the front.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "getURL",
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.HashLocation",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 39645,
            "description": "Set the `location.hash` and remembers what was set. This prevents\n`onUpdateURL` callbacks from triggering when the hash was set by\n`HashLocation`.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "setURL",
            "params": [
                {
                    "name": "path",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.HashLocation",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 39659,
            "description": "Uses location.replace to update the url without a page reload\nor history modification.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "replaceURL",
            "params": [
                {
                    "name": "path",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.HashLocation",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 39672,
            "description": "Register a callback to be invoked when the hash changes. These\ncallbacks will execute when the user presses the back or forward\nbutton, but not after `setURL` is invoked.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "onUpdateURL",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.HashLocation",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 39697,
            "description": "Given a URL, formats it to be placed into the page as part\nof an element's `href` attribute.\nThis is used, for example, when using the {{action}} helper\nto generate a URL based on an event.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "formatURL",
            "params": [
                {
                    "name": "url",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "BinaryExpression"
            },
            "class": "Ember.HashLocation",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 39711,
            "description": "Cleans up the HashLocation event listener.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "willDestroy",
            "return": {
                "description": ""
            },
            "class": "Ember.HashLocation",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 39756,
            "description": "Description",
            "itemtype": "method",
            "name": "init",
            "return": {
                "description": ""
            },
            "class": "Ember.HistoryLocation",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 39766,
            "description": "Used to set state on first call to setURL",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "initState",
            "return": {
                "description": ""
            },
            "class": "Ember.HistoryLocation",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 39777,
            "description": "Will be pre-pended to path upon state change",
            "itemtype": "property",
            "name": "rootURL",
            "default": "'/'",
            "class": "Ember.HistoryLocation",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 39785,
            "description": "Returns the current `location.pathname` without `rootURL` or `baseURL`",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "getURL",
            "return": {
                "description": "url"
            },
            "class": "Ember.HistoryLocation",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 39810,
            "description": "Uses `history.pushState` to update the url without a page reload.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "setURL",
            "params": [
                {
                    "name": "path",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.HistoryLocation",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 39826,
            "description": "Uses `history.replaceState` to update the url without a page reload\nor history modification.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "replaceURL",
            "params": [
                {
                    "name": "path",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.HistoryLocation",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 39843,
            "description": "Get the current `history.state`. Checks for if a polyfill is\nrequired and if so fetches this._historyState. The state returned\nfrom getState may be null if an iframe has changed a window's\nhistory.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "getState",
            "return": {
                "description": "ConditionalExpression"
            },
            "class": "Ember.HistoryLocation",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 39856,
            "description": "Pushes a new state.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "pushState",
            "params": [
                {
                    "name": "path",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.HistoryLocation",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 39877,
            "description": "Replaces the current state.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "replaceState",
            "params": [
                {
                    "name": "path",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.HistoryLocation",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 39898,
            "description": "Register a callback to be invoked whenever the browser\nhistory changes, including using forward and back buttons.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "onUpdateURL",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.HistoryLocation",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 39920,
            "description": "Used when using `{{action}}` helper.  The url is always appended to the rootURL.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "formatURL",
            "params": [
                {
                    "name": "url",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "BinaryExpression"
            },
            "class": "Ember.HistoryLocation",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 39941,
            "description": "Cleans up the HistoryLocation event listener.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "willDestroy",
            "return": {
                "description": ""
            },
            "class": "Ember.HistoryLocation",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 39981,
            "description": "Returns the current path.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "getURL",
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.NoneLocation",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 39991,
            "description": "Set the path and remembers what was set. Using this method\nto change the path will not invoke the `updateURL` callback.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "setURL",
            "params": [
                {
                    "name": "path",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.NoneLocation",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 40003,
            "description": "Register a callback to be invoked when the path changes. These\ncallbacks will execute when the user presses the back or forward\nbutton, but not after `setURL` is invoked.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "onUpdateURL",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.NoneLocation",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 40016,
            "description": "Sets the path and calls the `updateURL` callback.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "handleURL",
            "params": [
                {
                    "name": "url",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.NoneLocation",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 40028,
            "description": "Given a URL, formats it to be placed into the page as part\nof an element's `href` attribute.\nThis is used, for example, when using the {{action}} helper\nto generate a URL based on an event.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "formatURL",
            "params": [
                {
                    "name": "url",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "url"
            },
            "class": "Ember.NoneLocation",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 40053,
            "description": "Description",
            "itemtype": "method",
            "name": "init",
            "return": {
                "description": ""
            },
            "class": "Ember.NoneLocation",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 40061,
            "description": "Description",
            "itemtype": "method",
            "name": "has",
            "params": [
                {
                    "name": "bucketKey",
                    "description": ""
                }
            ],
            "return": {
                "description": "BinaryExpression"
            },
            "class": "Ember.NoneLocation",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 40070,
            "description": "Description",
            "itemtype": "method",
            "name": "stash",
            "params": [
                {
                    "name": "bucketKey",
                    "description": ""
                },
                {
                    "name": "key",
                    "description": ""
                },
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.NoneLocation",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 40085,
            "description": "Description",
            "itemtype": "method",
            "name": "lookup",
            "params": [
                {
                    "name": "bucketKey",
                    "description": ""
                },
                {
                    "name": "prop",
                    "description": ""
                },
                {
                    "name": "defaultValue",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.NoneLocation",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 40117,
            "description": "Finds a controller instance.",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "container",
                    "description": ""
                },
                {
                    "name": "controllerName",
                    "description": ""
                },
                {
                    "name": "lookupOptions",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Ember",
            "module": "ember",
            "submodule": "ember-routing"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 40152,
            "description": "Description",
            "itemtype": "method",
            "name": "route",
            "params": [
                {
                    "name": "name",
                    "description": ""
                },
                {
                    "name": "options",
                    "description": ""
                },
                {
                    "name": "callback",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Ember",
            "module": "ember",
            "submodule": "ember-routing"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 40196,
            "description": "Description",
            "itemtype": "method",
            "name": "push",
            "params": [
                {
                    "name": "url",
                    "description": ""
                },
                {
                    "name": "name",
                    "description": ""
                },
                {
                    "name": "callback",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Ember",
            "module": "ember",
            "submodule": "ember-routing"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 40211,
            "description": "Description",
            "itemtype": "method",
            "name": "resource",
            "params": [
                {
                    "name": "name",
                    "description": ""
                },
                {
                    "name": "options",
                    "description": ""
                },
                {
                    "name": "callback",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Ember",
            "module": "ember",
            "submodule": "ember-routing"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 40233,
            "description": "Description",
            "itemtype": "method",
            "name": "generate",
            "return": {
                "description": "FunctionExpression"
            },
            "class": "Ember.Ember",
            "module": "ember",
            "submodule": "ember-routing"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 40254,
            "description": "Description",
            "itemtype": "method",
            "name": "canNest",
            "params": [
                {
                    "name": "dsl",
                    "description": ""
                }
            ],
            "return": {
                "description": "LogicalExpression"
            },
            "class": "Ember.Ember",
            "module": "ember",
            "submodule": "ember-routing"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 40264,
            "description": "Description",
            "itemtype": "method",
            "name": "route",
            "params": [
                {
                    "name": "dsl",
                    "description": ""
                },
                {
                    "name": "name",
                    "description": ""
                },
                {
                    "name": "options",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Ember",
            "module": "ember",
            "submodule": "ember-routing"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 40288,
            "description": "Description",
            "itemtype": "method",
            "name": "map",
            "params": [
                {
                    "name": "callback",
                    "description": ""
                }
            ],
            "return": {
                "description": "dsl"
            },
            "class": "Ember.Ember",
            "module": "ember",
            "submodule": "ember-routing"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 40314,
            "description": "Generates a controller factory\nThe type of the generated controller factory is derived\nfrom the context. If the context is an array an array controller\nis generated, if an object, an object controller otherwise, a basic\ncontroller is generated.\nYou can customize your generated controllers by defining\n`App.ObjectController` or `App.ArrayController`.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "generateControllerFactory",
            "params": [
                {
                    "name": "container",
                    "description": ""
                },
                {
                    "name": "controllerName",
                    "description": ""
                },
                {
                    "name": "context",
                    "description": ""
                }
            ],
            "return": {
                "description": "Factory"
            },
            "class": "Ember.Ember",
            "module": "ember",
            "submodule": "ember-routing"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 40345,
            "description": "Description",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "BinaryExpression"
            },
            "class": "Ember.Ember",
            "module": "ember",
            "submodule": "ember-routing"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 40431,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "exit",
            "return": {
                "description": ""
            },
            "class": "Ember.Route",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 40441,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_reset",
            "since": "1.7.0",
            "class": "Ember.Route",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 40455,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "enter",
            "return": {
                "description": ""
            },
            "class": "Ember.Route",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 40464,
            "description": "The name of the view to use by default when rendering this routes template.\n\nWhen rendering a template, the route will, by default, determine the\ntemplate and view to use from the name of the route itself. If you need to\ndefine a specific view, set this property.\n\nThis is useful when multiple routes would benefit from using the same view\nbecause it doesn't require a custom `renderTemplate` method. For example,\nthe following routes will all render using the `App.PostsListView` view:\n\n```js\nvar PostsList = Ember.Route.extend({\n  viewName: 'postsList'\n});\n\nApp.PostsIndexRoute = PostsList.extend();\nApp.PostsArchivedRoute = PostsList.extend();\n```",
            "itemtype": "property",
            "name": "viewName",
            "type": "String",
            "default": "null",
            "since": "1.4.0",
            "class": "Ember.Route",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 40491,
            "description": "The name of the template to use by default when rendering this routes\ntemplate.\n\nThis is similar with `viewName`, but is useful when you just want a custom\ntemplate without a view.\n\n```js\nvar PostsList = Ember.Route.extend({\n  templateName: 'posts/list'\n});\n\nApp.PostsIndexRoute = PostsList.extend();\nApp.PostsArchivedRoute = PostsList.extend();\n```",
            "itemtype": "property",
            "name": "templateName",
            "type": "String",
            "default": "null",
            "since": "1.4.0",
            "class": "Ember.Route",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 40514,
            "description": "The name of the controller to associate with this route.\n\nBy default, Ember will lookup a route's controller that matches the name\nof the route (i.e. `App.PostController` for `App.PostRoute`). However,\nif you would like to define a specific controller to use, you can do so\nusing this property.\n\nThis is useful in many ways, as the controller specified will be:\n\n* passed to the `setupController` method.\n* used as the controller for the view being rendered by the route.\n* returned from a call to `controllerFor` for the route.",
            "itemtype": "property",
            "name": "controllerName",
            "type": "String",
            "default": "null",
            "since": "1.4.0",
            "class": "Ember.Route",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 40535,
            "description": "The `willTransition` action is fired at the beginning of any\nattempted transition with a `Transition` object as the sole\nargument. This action can be used for aborting, redirecting,\nor decorating the transition from the currently active routes.\n\nA good example is preventing navigation when a form is\nhalf-filled out:\n\n```js\nApp.ContactFormRoute = Ember.Route.extend({\n  actions: {\n    willTransition: function(transition) {\n      if (this.controller.get('userHasEnteredData')) {\n        this.controller.displayNavigationConfirm();\n        transition.abort();\n      }\n    }\n  }\n});\n```\n\nYou can also redirect elsewhere by calling\n`this.transitionTo('elsewhere')` from within `willTransition`.\nNote that `willTransition` will not be fired for the\nredirecting `transitionTo`, since `willTransition` doesn't\nfire when there is already a transition underway. If you want\nsubsequent `willTransition` actions to fire for the redirecting\ntransition, you must first explicitly call\n`transition.abort()`.",
            "itemtype": "event",
            "name": "willTransition",
            "params": [
                {
                    "name": "transition",
                    "description": "",
                    "type": "Transition"
                }
            ],
            "class": "Ember.Route",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 40570,
            "description": "The `didTransition` action is fired after a transition has\nsuccessfully been completed. This occurs after the normal model\nhooks (`beforeModel`, `model`, `afterModel`, `setupController`)\nhave resolved. The `didTransition` action has no arguments,\nhowever, it can be useful for tracking page views or resetting\nstate on the controller.\n\n```js\nApp.LoginRoute = Ember.Route.extend({\n  actions: {\n    didTransition: function() {\n      this.controller.get('errors.base').clear();\n      return true; // Bubble the didTransition event\n    }\n  }\n});\n```",
            "itemtype": "event",
            "name": "didTransition",
            "since": "1.2.0",
            "class": "Ember.Route",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 40593,
            "description": "The `loading` action is fired on the route when a route's `model`\nhook returns a promise that is not already resolved. The current\n`Transition` object is the first parameter and the route that\ntriggered the loading event is the second parameter.\n\n```js\nApp.ApplicationRoute = Ember.Route.extend({\n  actions: {\n    loading: function(transition, route) {\n      var view = Ember.View.create({\n        classNames: ['app-loading']\n      })\n      .append();\n\n      this.router.one('didTransition', function () {\n        view.destroy();\n      });\n      return true; // Bubble the loading event\n    }\n  }\n});\n```",
            "itemtype": "event",
            "name": "loading",
            "params": [
                {
                    "name": "transition",
                    "description": "",
                    "type": "Transition"
                },
                {
                    "name": "route",
                    "description": "The route that triggered the loading event",
                    "type": "Ember.Route"
                }
            ],
            "since": "1.2.0",
            "class": "Ember.Route",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 40623,
            "description": "When attempting to transition into a route, any of the hooks\nmay return a promise that rejects, at which point an `error`\naction will be fired on the partially-entered routes, allowing\nfor per-route error handling logic, or shared error handling\nlogic defined on a parent route.\n\nHere is an example of an error handler that will be invoked\nfor rejected promises from the various hooks on the route,\nas well as any unhandled errors from child routes:\n\n```js\nApp.AdminRoute = Ember.Route.extend({\n  beforeModel: function() {\n    return Ember.RSVP.reject(\"bad things!\");\n  },\n\n  actions: {\n    error: function(error, transition) {\n      // Assuming we got here due to the error in `beforeModel`,\n      // we can expect that error === \"bad things!\",\n      // but a promise model rejecting would also\n      // call this hook, as would any errors encountered\n      // in `afterModel`.\n\n      // The `error` hook is also provided the failed\n      // `transition`, which can be stored and later\n      // `.retry()`d if desired.\n\n      this.transitionTo('login');\n    }\n  }\n});\n```\n\n`error` actions that bubble up all the way to `ApplicationRoute`\nwill fire a default error handler that logs the error. You can\nspecify your own global default error handler by overriding the\n`error` handler on `ApplicationRoute`:\n\n```js\nApp.ApplicationRoute = Ember.Route.extend({\n  actions: {\n    error: function(error, transition) {\n      this.controllerFor('banner').displayError(error.message);\n    }\n  }\n});\n```",
            "itemtype": "event",
            "name": "error",
            "params": [
                {
                    "name": "error",
                    "description": "",
                    "type": "Error"
                },
                {
                    "name": "transition",
                    "description": "",
                    "type": "Transition"
                }
            ],
            "class": "Ember.Route",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 40677,
            "description": "The controller associated with this route.\n\nExample\n\n```javascript\nApp.FormRoute = Ember.Route.extend({\n  actions: {\n    willTransition: function(transition) {\n      if (this.controller.get('userHasEnteredData') &&\n          !confirm(\"Are you sure you want to abandon progress?\")) {\n        transition.abort();\n      } else {\n        // Bubble the `willTransition` action so that\n        // parent routes can decide whether or not to abort.\n        return true;\n      }\n    }\n  }\n});\n```",
            "itemtype": "property",
            "name": "controller",
            "type": "Ember.Controller",
            "since": "1.6.0",
            "class": "Ember.Route",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 40706,
            "description": "Description",
            "itemtype": "method",
            "name": "queryParamsDidChange",
            "params": [
                {
                    "name": "changed",
                    "description": ""
                },
                {
                    "name": "totalPresent",
                    "description": ""
                },
                {
                    "name": "removed",
                    "description": ""
                }
            ],
            "return": {
                "description": "Literal"
            },
            "class": "Ember.Route",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 40728,
            "description": "Description",
            "itemtype": "method",
            "name": "finalizeQueryParamChange",
            "params": [
                {
                    "name": "params",
                    "description": ""
                },
                {
                    "name": "finalParams",
                    "description": ""
                },
                {
                    "name": "transition",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Route",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 40822,
            "deprecated": true,
            "deprecationMessage": "Please use `actions` instead.",
            "itemtype": "method",
            "name": "events",
            "class": "Ember.Route",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 40832,
            "description": "This hook is executed when the router completely exits this route. It is\nnot executed when the model for the route changes.",
            "itemtype": "method",
            "name": "deactivate",
            "class": "Ember.Route",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 40840,
            "description": "This hook is executed when the router enters the route. It is not executed\nwhen the model for the route changes.",
            "itemtype": "method",
            "name": "activate",
            "class": "Ember.Route",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 40848,
            "description": "Transition the application into another route. The route may\nbe either a single route or route path:\n```javascript\nthis.transitionTo('blogPosts');\nthis.transitionTo('blogPosts.recentEntries');\n```\nOptionally supply a model for the route in question. The model\nwill be serialized into the URL using the `serialize` hook of\nthe route:\n```javascript\nthis.transitionTo('blogPost', aPost);\n```\nIf a literal is passed (such as a number or a string), it will\nbe treated as an identifier instead. In this case, the `model`\nhook of the route will be triggered:\n```javascript\nthis.transitionTo('blogPost', 1);\n```\nMultiple models will be applied last to first recursively up the\nresource tree.\n```javascript\nApp.Router.map(function() {\nthis.resource('blogPost', {path:':blogPostId'}, function(){\nthis.resource('blogComment', {path: ':blogCommentId'});\n});\n});\nthis.transitionTo('blogComment', aPost, aComment);\nthis.transitionTo('blogComment', 1, 13);\n```\nIt is also possible to pass a URL (a string that starts with a\n`/`). This is intended for testing and debugging purposes and\nshould rarely be used in production code.\n```javascript\nthis.transitionTo('/');\nthis.transitionTo('/blog/post/1/comment/13');\n```\nSee also 'replaceWith'.\nSimple Transition Example\n```javascript\nApp.Router.map(function() {\nthis.route(\"index\");\nthis.route(\"secret\");\nthis.route(\"fourOhFour\", { path: \"*:\"});\n});\nApp.IndexRoute = Ember.Route.extend({\nactions: {\nmoveToSecret: function(context){\nif (authorized()){\nthis.transitionTo('secret', context);\n}\nthis.transitionTo('fourOhFour');\n}\n}\n});\n```\nTransition to a nested route\n```javascript\nApp.Router.map(function() {\nthis.resource('articles', { path: '/articles' }, function() {\nthis.route('new');\n});\n});\nApp.IndexRoute = Ember.Route.extend({\nactions: {\ntransitionToNewArticle: function() {\nthis.transitionTo('articles.new');\n}\n}\n});\n```\nMultiple Models Example\n```javascript\nApp.Router.map(function() {\nthis.route(\"index\");\nthis.resource('breakfast', {path:':breakfastId'}, function(){\nthis.resource('cereal', {path: ':cerealId'});\n});\n});\nApp.IndexRoute = Ember.Route.extend({\nactions: {\nmoveToChocolateCereal: function(){\nvar cereal = { cerealId: \"ChocolateYumminess\"},\nbreakfast = {breakfastId: \"CerealAndMilk\"};\nthis.transitionTo('cereal', breakfast, cereal);\n}\n}\n});\n```\ntransitioning to the route.\nattempted transition",
            "itemtype": "method",
            "name": "transitionTo",
            "params": [
                {
                    "name": "name",
                    "description": "the name of the route or a URL",
                    "type": "String"
                },
                {
                    "name": "context",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Route",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 40949,
            "description": "Perform a synchronous transition into another route without attempting\nto resolve promises, update the URL, or abort any currently active\nasynchronous transitions (i.e. regular transitions caused by\n`transitionTo` or URL changes).\nThis method is handy for performing intermediate transitions on the\nway to a final destination route, and is called internally by the\ndefault implementations of the `error` and `loading` handlers.\nto the route.",
            "since": "1.2.0",
            "itemtype": "method",
            "name": "intermediateTransitionTo",
            "return": {
                "description": ""
            },
            "class": "Ember.Route",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 40967,
            "description": "Refresh the model on this route and any child routes, firing the\n`beforeModel`, `model`, and `afterModel` hooks in a similar fashion\nto how routes are entered when transitioning in from other route.\nThe current route params (e.g. `article_id`) will be passed in\nto the respective model hooks, and if a different model is returned,\n`setupController` and associated route hooks will re-fire as well.\nAn example usage of this method is re-querying the server for the\nlatest information using the same parameters as when the route\nwas first entered.\nNote that this will cause `model` hooks to fire even on routes\nthat were provided a model object when the route was initially\nentered.\nattempted transition",
            "since": "1.4.0",
            "itemtype": "method",
            "name": "refresh",
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Route",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 40989,
            "description": "Transition into another route while replacing the current URL, if possible.\nThis will replace the current history entry instead of adding a new one.\nBeside that, it is identical to `transitionTo` in all other respects. See\n'transitionTo' for additional information regarding multiple models.\nExample\n```javascript\nApp.Router.map(function() {\nthis.route(\"index\");\nthis.route(\"secret\");\n});\nApp.SecretRoute = Ember.Route.extend({\nafterModel: function() {\nif (!authorized()){\nthis.replaceWith('index');\n}\n}\n});\n```\ntransitioning to the route.\nattempted transition",
            "itemtype": "method",
            "name": "replaceWith",
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Route",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 41018,
            "description": "Sends an action to the router, which will delegate it to the currently\nactive route hierarchy per the bubbling rules explained under `actions`.\nExample\n```javascript\nApp.Router.map(function() {\nthis.route(\"index\");\n});\nApp.ApplicationRoute = Ember.Route.extend({\nactions: {\ntrack: function(arg) {\nconsole.log(arg, 'was clicked');\n}\n}\n});\nApp.IndexRoute = Ember.Route.extend({\nactions: {\ntrackIfDebug: function(arg) {\nif (debug) {\nthis.send('track', arg);\n}\n}\n}\n});\n```",
            "itemtype": "method",
            "name": "send",
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Route",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 41050,
            "description": "This hook is the entry point for router.js",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "setup",
            "params": [
                {
                    "name": "context",
                    "description": ""
                },
                {
                    "name": "transition",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Route",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 41100,
            "description": "This hook is the first of the route entry validation hooks\ncalled when an attempt is made to transition into a route\nor one of its children. It is called before `model` and\n`afterModel`, and is appropriate for cases when:\n\n1) A decision can be made to redirect elsewhere without\n   needing to resolve the model first.\n2) Any async operations need to occur first before the\n   model is attempted to be resolved.\n\nThis hook is provided the current `transition` attempt\nas a parameter, which can be used to `.abort()` the transition,\nsave it for a later `.retry()`, or retrieve values set\non it from a previous hook. You can also just call\n`this.transitionTo` to another route to implicitly\nabort the `transition`.\n\nYou can return a promise from this hook to pause the\ntransition until the promise resolves (or rejects). This could\nbe useful, for instance, for retrieving async code from\nthe server that is required to enter a route.\n\n```js\nApp.PostRoute = Ember.Route.extend({\n  beforeModel: function(transition) {\n    if (!App.Post) {\n      return Ember.$.getScript('/models/post.js');\n    }\n  }\n});\n```\n\nIf `App.Post` doesn't exist in the above example,\n`beforeModel` will use jQuery's `getScript`, which\nreturns a promise that resolves after the server has\nsuccessfully retrieved and executed the code from the\nserver. Note that if an error were to occur, it would\nbe passed to the `error` hook on `Ember.Route`, but\nit's also possible to handle errors specific to\n`beforeModel` right from within the hook (to distinguish\nfrom the shared error handling behavior of the `error`\nhook):\n\n```js\nApp.PostRoute = Ember.Route.extend({\n  beforeModel: function(transition) {\n    if (!App.Post) {\n      var self = this;\n      return Ember.$.getScript('post.js').then(null, function(e) {\n        self.transitionTo('help');\n\n        // Note that the above transitionTo will implicitly\n        // halt the transition. If you were to return\n        // nothing from this promise reject handler,\n        // according to promise semantics, that would\n        // convert the reject into a resolve and the\n        // transition would continue. To propagate the\n        // error so that it'd be handled by the `error`\n        // hook, you would have to either\n        return Ember.RSVP.reject(e);\n      });\n    }\n  }\n});\n```",
            "itemtype": "method",
            "name": "beforeModel",
            "params": [
                {
                    "name": "transition",
                    "description": "",
                    "type": "Transition"
                },
                {
                    "name": "queryParams",
                    "description": "the active query params for this route",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "if the value returned from this hook is\n  a promise, the transition will pause until the transition\n  resolves. Otherwise, non-promise return values are not\n  utilized in any way.",
                "type": "Promise"
            },
            "class": "Ember.Route",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 41177,
            "description": "This hook is called after this route's model has resolved.\nIt follows identical async/promise semantics to `beforeModel`\nbut is provided the route's resolved model in addition to\nthe `transition`, and is therefore suited to performing\nlogic that can only take place after the model has already\nresolved.\n\n```js\nApp.PostsRoute = Ember.Route.extend({\n  afterModel: function(posts, transition) {\n    if (posts.get('length') === 1) {\n      this.transitionTo('post.show', posts.get('firstObject'));\n    }\n  }\n});\n```\n\nRefer to documentation for `beforeModel` for a description\nof transition-pausing semantics when a promise is returned\nfrom this hook.",
            "itemtype": "method",
            "name": "afterModel",
            "params": [
                {
                    "name": "resolvedModel",
                    "description": "the value returned from `model`,\n  or its resolved value if it was a promise",
                    "type": "Object"
                },
                {
                    "name": "transition",
                    "description": "",
                    "type": "Transition"
                },
                {
                    "name": "queryParams",
                    "description": "the active query params for this handler",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "if the value returned from this hook is\n  a promise, the transition will pause until the transition\n  resolves. Otherwise, non-promise return values are not\n  utilized in any way.",
                "type": "Promise"
            },
            "class": "Ember.Route",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 41211,
            "description": "A hook you can implement to optionally redirect to another route.\n\nIf you call `this.transitionTo` from inside of this hook, this route\nwill not be entered in favor of the other hook.\n\n`redirect` and `afterModel` behave very similarly and are\ncalled almost at the same time, but they have an important\ndistinction in the case that, from one of these hooks, a\nredirect into a child route of this route occurs: redirects\nfrom `afterModel` essentially invalidate the current attempt\nto enter this route, and will result in this route's `beforeModel`,\n`model`, and `afterModel` hooks being fired again within\nthe new, redirecting transition. Redirects that occur within\nthe `redirect` hook, on the other hand, will _not_ cause\nthese hooks to be fired again the second time around; in\nother words, by the time the `redirect` hook has been called,\nboth the resolved model and attempted entry into this route\nare considered to be fully validated.",
            "itemtype": "method",
            "name": "redirect",
            "params": [
                {
                    "name": "model",
                    "description": "the model for this route",
                    "type": "Object"
                },
                {
                    "name": "transition",
                    "description": "the transition object associated with the current transition",
                    "type": "Transition"
                }
            ],
            "class": "Ember.Route",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 41237,
            "description": "Called when the context is changed by router.js.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "contextDidChange",
            "return": {
                "description": ""
            },
            "class": "Ember.Route",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 41247,
            "description": "A hook you can implement to convert the URL into the model for\nthis route.\n```js\nApp.Router.map(function() {\nthis.resource('post', {path: '/posts/:post_id'});\n});\n```\nThe model for the `post` route is `App.Post.find(params.post_id)`.\nBy default, if your route has a dynamic segment ending in `_id`:\nThe model class is determined from the segment (`post_id`'s\nclass is `App.Post`)\nThe find method is called on the model class with the value of\nthe dynamic segment.\nNote that for routes with dynamic segments, this hook is not always\nexecuted. If the route is entered through a transition (e.g. when\nusing the `link-to` Handlebars helper or the `transitionTo` method\nof routes), and a model context is already provided this hook\nis not called.\nA model context does not include a primitive string or number,\nwhich does cause the model hook to be called.\nRoutes without dynamic segments will always execute the model hook.\n```js\n// no dynamic segment, model hook always called\nthis.transitionTo('posts');\n// model passed in, so model hook not called\nthePost = store.find('post', 1);\nthis.transitionTo('post', thePost);\n// integer passed in, model hook is called\nthis.transitionTo('post', 1);\n```\nThis hook follows the asynchronous/promise semantics\ndescribed in the documentation for `beforeModel`. In particular,\nif a promise returned from `model` fails, the error will be\nhandled by the `error` hook on `Ember.Route`.\nExample\n```js\nApp.PostRoute = Ember.Route.extend({\nmodel: function(params) {\nreturn App.Post.find(params.post_id);\n}\n});\n```\na promise is returned, the transition will pause until\nthe promise resolves, and the resolved value of the promise\nwill be used as the model for this route.",
            "itemtype": "method",
            "name": "model",
            "params": [
                {
                    "name": "params",
                    "description": "the parameters extracted from the URL",
                    "type": "Object"
                },
                {
                    "name": "transition",
                    "description": "",
                    "type": "Transition"
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Route",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 41330,
            "access": "private",
            "tagname": "Router.js hook.",
            "itemtype": "method",
            "name": "deserialize",
            "params": [
                {
                    "name": "params",
                    "description": "the parameters extracted from the URL",
                    "type": "Object"
                },
                {
                    "name": "transition",
                    "description": "",
                    "type": "Transition"
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Route",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 41343,
            "description": "Description",
            "itemtype": "method",
            "name": "findModel",
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Route",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 41353,
            "description": "Store property provides a hook for data persistence libraries to inject themselves.\n\nBy default, this store property provides the exact same functionality previously\nin the model hook.\n\nCurrently, the required interface is:\n\n`store.find(modelName, findArguments)`",
            "itemtype": "method",
            "name": "store",
            "params": [
                {
                    "name": "store",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "Ember.Route",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 41372,
            "description": "Description",
            "itemtype": "method",
            "name": "find",
            "params": [
                {
                    "name": "name",
                    "description": ""
                },
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Route",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 41396,
            "description": "A hook you can implement to convert the route's model into parameters\nfor the URL.\n```js\nApp.Router.map(function() {\nthis.resource('post', {path: '/posts/:post_id'});\n});\nApp.PostRoute = Ember.Route.extend({\nmodel: function(params) {\n// the server returns `{ id: 12 }`\nreturn jQuery.getJSON(\"/posts/\" + params.post_id);\n},\nserialize: function(model) {\n// this will make the URL `/posts/12`\nreturn { post_id: model.id };\n}\n});\n```\nThe default `serialize` method will insert the model's `id` into the\nroute's dynamic segment (in this case, `:post_id`) if the segment contains '_id'.\nIf the route has multiple dynamic segments or does not contain '_id', `serialize`\nwill return `Ember.getProperties(model, params)`\nThis method is called when `transitionTo` is called with a context\nin order to populate the URL.\nroute (in the example, `['post_id']`.",
            "itemtype": "method",
            "name": "serialize",
            "params": [
                {
                    "name": "model",
                    "description": "the route's model",
                    "type": "Object"
                },
                {
                    "name": "params",
                    "description": "an Array of parameter names for the current",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "object"
            },
            "class": "Ember.Route",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 41441,
            "description": "A hook you can use to setup the controller for the current route.\nThis method is called with the controller for the current route and the\nmodel supplied by the `model` hook.\nBy default, the `setupController` hook sets the `model` property of\nthe controller to the `model`.\nIf you implement the `setupController` hook in your Route, it will\nprevent this default behavior. If you want to preserve that behavior\nwhen implementing your `setupController` function, make sure to call\n`_super`:\n```js\nApp.PhotosRoute = Ember.Route.extend({\nmodel: function() {\nreturn App.Photo.find();\n},\nsetupController: function (controller, model) {\n// Call _super for default behavior\nthis._super(controller, model);\n// Implement your custom setup after\nthis.controllerFor('application').set('showingPhotos', true);\n}\n});\n```\nThis means that your template will get a proxy for the model as its\ncontext, and you can act as though the model itself was the context.\nThe provided controller will be one resolved based on the name\nof this route.\nIf no explicit controller is defined, Ember will automatically create\nan appropriate controller for the model.\nif the model is an `Ember.Array` (including record arrays from Ember\nData), the controller is an `Ember.ArrayController`.\notherwise, the controller is an `Ember.ObjectController`.\nAs an example, consider the router:\n```js\nApp.Router.map(function() {\nthis.resource('post', {path: '/posts/:post_id'});\n});\n```\nFor the `post` route, a controller named `App.PostController` would\nbe used if it is defined. If it is not defined, an `Ember.ObjectController`\ninstance would be used.\nExample\n```js\nApp.PostRoute = Ember.Route.extend({\nsetupController: function(controller, model) {\ncontroller.set('model', model);\n}\n});\n```",
            "itemtype": "method",
            "name": "setupController",
            "params": [
                {
                    "name": "controller",
                    "description": "instance",
                    "type": "Controller"
                },
                {
                    "name": "context",
                    "description": ""
                },
                {
                    "name": "transition",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Route",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 41502,
            "description": "Returns the controller for a particular route or name.\nThe controller instance must already have been created, either through entering the\nassociated route or using `generateController`.\n```js\nApp.PostRoute = Ember.Route.extend({\nsetupController: function(controller, post) {\nthis._super(controller, post);\nthis.controllerFor('posts').set('currentPost', post);\n}\n});\n```",
            "itemtype": "method",
            "name": "controllerFor",
            "params": [
                {
                    "name": "name",
                    "description": "the name of the route or controller",
                    "type": "String"
                },
                {
                    "name": "_skipAssert",
                    "description": ""
                }
            ],
            "return": {
                "description": "controller"
            },
            "class": "Ember.Route",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 41542,
            "description": "Generates a controller for a route.\nIf the optional model is passed then the controller type is determined automatically,\ne.g., an ArrayController for arrays.\nExample\n```js\nApp.PostRoute = Ember.Route.extend({\nsetupController: function(controller, post) {\nthis._super(controller, post);\nthis.generateController('posts', post);\n}\n});\n```",
            "itemtype": "method",
            "name": "generateController",
            "params": [
                {
                    "name": "name",
                    "description": "the name of the controller",
                    "type": "String"
                },
                {
                    "name": "model",
                    "description": "the model to infer the type of the controller (optional)",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Route",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 41568,
            "description": "Returns the model of a parent (or any ancestor) route\nin a route hierarchy.  During a transition, all routes\nmust resolve a model object, and if a route\nneeds access to a parent route's model in order to\nresolve a model (or just reuse the model from a parent),\nit can call `this.modelFor(theNameOfParentRoute)` to\nretrieve it.\nExample\n```js\nApp.Router.map(function() {\nthis.resource('post', { path: '/post/:post_id' }, function() {\nthis.resource('comments');\n});\n});\nApp.CommentsRoute = Ember.Route.extend({\nafterModel: function() {\nthis.set('post', this.modelFor('post'));\n}\n});\n```",
            "itemtype": "method",
            "name": "modelFor",
            "params": [
                {
                    "name": "name",
                    "description": "the name of the route",
                    "type": "String"
                }
            ],
            "return": {
                "description": "LogicalExpression"
            },
            "class": "Ember.Route",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 41609,
            "description": "A hook you can use to render the template for the current route.\nThis method is called with the controller for the current route and the\nmodel supplied by the `model` hook. By default, it renders the route's\ntemplate, configured with the controller for the route.\nThis method can be overridden to set up and render additional or\nalternative templates.\n```js\nApp.PostsRoute = Ember.Route.extend({\nrenderTemplate: function(controller, model) {\nvar favController = this.controllerFor('favoritePost');\n// Render the `favoritePost` template into\n// the outlet `posts`, and display the `favoritePost`\n// controller.\nthis.render('favoritePost', {\noutlet: 'posts',\ncontroller: favController\n});\n}\n});\n```",
            "itemtype": "method",
            "name": "renderTemplate",
            "params": [
                {
                    "name": "controller",
                    "description": "the route's controller",
                    "type": "Object"
                },
                {
                    "name": "model",
                    "description": "the route's model",
                    "type": "Object"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Route",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 41639,
            "description": "`render` is used to render a template into a region of another template\n(indicated by an `{{outlet}}`). `render` is used both during the entry\nphase of routing (via the `renderTemplate` hook) and later in response to\nuser interaction.\nFor example, given the following minimal router and templates:\n```js\nRouter.map(function() {\nthis.resource('photos');\n});\n```\n```handlebars\n<!-- application.hbs -->\n<div class='something-in-the-app-hbs'>\n{{outlet \"anOutletName\"}}\n</div>\n```\n```handlebars\n<!-- photos.hbs -->\n<h1>Photos</h1>\n```\nYou can render `photos.hbs` into the `\"anOutletName\"` outlet of\n`application.hbs` by calling `render`:\n```js\n// posts route\nEmber.Route.extend({\nrenderTemplate: function(){\nthis.render('posts', {\ninto: 'application',\noutlet: 'anOutletName'\n})\n}\n});\n```\n`render` additionally allows you to supply which `view`, `controller`, and\n`model` objects should be loaded and associated with the rendered template.\n```js\n// posts route\nEmber.Route.extend({\nrenderTemplate: function(controller, model){\nthis.render('posts', {    // the template to render, referenced by name\ninto: 'application',    // the template to render into, referenced by name\noutlet: 'anOutletName', // the outlet inside `options.template` to render into.\nview: 'aViewName',      // the view to use for this template, referenced by name\ncontroller: 'someControllerName', // the controller to use for this template, referenced by name\nmodel: model            // the model to set on `options.controller`.\n})\n}\n});\n```\nThe string values provided for the template name, view, and controller\nwill eventually pass through to the resolver for lookup. See\nEmber.Resolver for how these are mapped to JavaScript objects in your\napplication.\nNot all options need to be passed to `render`. Default values will be used\nbased on the name of the route specified in the router or the Route's\n`controllerName`, `viewName` and and `templateName` properties.\nFor example:\n```js\n// router\nRouter.map(function() {\nthis.route('index');\nthis.resource('post', {path: '/posts/:post_id'});\n});\n```\n```js\n// post route\nPostRoute = App.Route.extend({\nrenderTemplate: function() {\nthis.render(); // all defaults apply\n}\n});\n```\nThe name of the `PostRoute`, defined by the router, is `post`.\nThe following equivalent default options will be applied when\nthe Route calls `render`:\n```js\n//\nthis.render('post', {  // the template name associated with 'post' Route\ninto: 'application', // the parent route to 'post' Route\noutlet: 'main',      // {{outlet}} and {{outlet 'main' are synonymous}},\nview: 'post',        // the view associated with the 'post' Route\ncontroller: 'post',  // the controller associated with the 'post' Route\n})\n```\nBy default the controller's `model` will be the route's model, so it does not\nneed to be passed unless you wish to change which model is being used.\nreferenced by name. Defaults to the parent template\nDefaults to 'main'\nreferenced by name. Defaults to the Route's paired controller\nDefaults to the return value of the Route's model hook",
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "name",
                    "description": "the name of the template to render",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Route",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 41784,
            "description": "Disconnects a view that has been rendered into an outlet.\nYou may pass any or all of the following options to `disconnectOutlet`:\n`outlet`: the name of the outlet to clear (default: 'main')\n`parentView`: the name of the view containing the outlet to clear\n(default: the view rendered by the parent route)\nExample:\n```js\nApp.ApplicationRoute = App.Route.extend({\nactions: {\nshowModal: function(evt) {\nthis.render(evt.modalName, {\noutlet: 'modal',\ninto: 'application'\n});\n},\nhideModal: function(evt) {\nthis.disconnectOutlet({\noutlet: 'modal',\nparentView: 'application'\n});\n}\n}\n});\n```\nAlternatively, you can pass the `outlet` name directly as a string.\nExample:\n```js\nhideModal: function(evt) {\nthis.disconnectOutlet('modal');\n}\n```",
            "itemtype": "method",
            "name": "disconnectOutlet",
            "params": [
                {
                    "name": "options",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Route",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 41833,
            "description": "Description",
            "itemtype": "method",
            "name": "willDestroy",
            "return": {
                "description": ""
            },
            "class": "Ember.Route",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 41842,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "teardownViews",
            "return": {
                "description": ""
            },
            "class": "Ember.Route",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 41871,
            "description": "Configuration hash for this route's queryParams. The possible\nconfiguration options and their defaults are as follows\n(assuming a query param whose URL key is `page`):\n\n```js\nqueryParams: {\n  page: {\n    // By default, controller query param properties don't\n    // cause a full transition when they are changed, but\n    // rather only cause the URL to update. Setting\n    // `refreshModel` to true will cause an \"in-place\"\n    // transition to occur, whereby the model hooks for\n    // this route (and any child routes) will re-fire, allowing\n    // you to reload models (e.g., from the server) using the\n    // updated query param values.\n    refreshModel: false,\n\n    // By default, changes to controller query param properties\n    // cause the URL to update via `pushState`, which means an\n    // item will be added to the browser's history, allowing\n    // you to use the back button to restore the app to the\n    // previous state before the query param property was changed.\n    // Setting `replace` to true will use `replaceState` (or its\n    // hash location equivalent), which causes no browser history\n    // item to be added. This options name and default value are\n    // the same as the `link-to` helper's `replace` option.\n    replace: false\n  }\n}\n```",
            "itemtype": "property",
            "name": "queryParams",
            "type": "Hash",
            "class": "Ember.Route",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 41960,
            "description": "Description",
            "itemtype": "method",
            "name": "active",
            "params": [
                {
                    "name": "controller",
                    "description": ""
                },
                {
                    "name": "prop",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Route",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 41970,
            "description": "Description",
            "itemtype": "method",
            "name": "allowOverrides",
            "params": [
                {
                    "name": "controller",
                    "description": ""
                },
                {
                    "name": "prop",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Route",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 41980,
            "description": "Description",
            "itemtype": "method",
            "name": "changingKeys",
            "params": [
                {
                    "name": "controller",
                    "description": ""
                },
                {
                    "name": "prop",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Route",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 42044,
            "description": "Description",
            "itemtype": "method",
            "name": "paramsFor",
            "params": [
                {
                    "name": "name",
                    "description": ""
                }
            ],
            "return": {
                "description": "params"
            },
            "class": "Ember.Route",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 42067,
            "description": "Description",
            "itemtype": "method",
            "name": "serializeQueryParamKey",
            "params": [
                {
                    "name": "controllerPropertyName",
                    "description": ""
                }
            ],
            "return": {
                "description": "controllerPropertyName"
            },
            "class": "Ember.Route",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 42077,
            "description": "Description",
            "itemtype": "method",
            "name": "serializeQueryParam",
            "params": [
                {
                    "name": "value",
                    "description": ""
                },
                {
                    "name": "urlKey",
                    "description": ""
                },
                {
                    "name": "defaultValueType",
                    "description": ""
                }
            ],
            "return": {
                "description": "BinaryExpression"
            },
            "class": "Ember.Route",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 42095,
            "description": "Description",
            "itemtype": "method",
            "name": "deserializeQueryParam",
            "params": [
                {
                    "name": "value",
                    "description": ""
                },
                {
                    "name": "urlKey",
                    "description": ""
                },
                {
                    "name": "defaultValueType",
                    "description": ""
                }
            ],
            "return": {
                "description": "value"
            },
            "class": "Ember.Route",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 42126,
            "description": "A hook you can use to reset controller values either when the model\nchanges or the route is exiting.\n\n```js\nApp.ArticlesRoute = Ember.Route.extend({\n  // ...\n\n  resetController: function (controller, isExiting, transition) {\n    if (isExiting) {\n      controller.set('page', 1);\n    }\n  }\n});\n```",
            "itemtype": "method",
            "name": "resetController",
            "params": [
                {
                    "name": "controller",
                    "description": "instance",
                    "type": "Controller"
                },
                {
                    "name": "isExiting",
                    "description": "",
                    "type": "Boolean"
                },
                {
                    "name": "transition",
                    "description": "",
                    "type": "Object"
                }
            ],
            "since": "1.7.0",
            "class": "Ember.Route",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 42152,
            "description": "Description",
            "itemtype": "method",
            "name": "parentRoute",
            "params": [
                {
                    "name": "route",
                    "description": ""
                }
            ],
            "return": {
                "description": "LogicalExpression"
            },
            "class": "Ember.Route",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 42163,
            "description": "Description",
            "itemtype": "method",
            "name": "handlerInfoFor",
            "params": [
                {
                    "name": "route",
                    "description": ""
                },
                {
                    "name": "handlerInfos",
                    "description": ""
                },
                {
                    "name": "_offset",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Route",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 42181,
            "description": "Description",
            "itemtype": "method",
            "name": "parentTemplate",
            "params": [
                {
                    "name": "route",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Route",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 42199,
            "description": "Description",
            "itemtype": "method",
            "name": "normalizeOptions",
            "params": [
                {
                    "name": "route",
                    "description": ""
                },
                {
                    "name": "name",
                    "description": ""
                },
                {
                    "name": "template",
                    "description": ""
                },
                {
                    "name": "options",
                    "description": ""
                }
            ],
            "return": {
                "description": "options"
            },
            "class": "Ember.Route",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 42247,
            "description": "Description",
            "itemtype": "method",
            "name": "setupView",
            "params": [
                {
                    "name": "view",
                    "description": ""
                },
                {
                    "name": "container",
                    "description": ""
                },
                {
                    "name": "options",
                    "description": ""
                }
            ],
            "return": {
                "description": "view"
            },
            "class": "Ember.Route",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 42280,
            "description": "Description",
            "itemtype": "method",
            "name": "appendView",
            "params": [
                {
                    "name": "route",
                    "description": ""
                },
                {
                    "name": "view",
                    "description": ""
                },
                {
                    "name": "options",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Route",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 42307,
            "description": "Description",
            "itemtype": "method",
            "name": "generateTopLevelTeardown",
            "params": [
                {
                    "name": "view",
                    "description": ""
                }
            ],
            "return": {
                "description": "FunctionExpression"
            },
            "class": "Ember.Route",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 42317,
            "description": "Description",
            "itemtype": "method",
            "name": "generateOutletTeardown",
            "params": [
                {
                    "name": "parentView",
                    "description": ""
                },
                {
                    "name": "outlet",
                    "description": ""
                }
            ],
            "return": {
                "description": "FunctionExpression"
            },
            "class": "Ember.Route",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 42328,
            "description": "Description",
            "itemtype": "method",
            "name": "getFullQueryParams",
            "params": [
                {
                    "name": "router",
                    "description": ""
                },
                {
                    "name": "state",
                    "description": ""
                }
            ],
            "return": {
                "description": "MemberExpression"
            },
            "class": "Ember.Route",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 42346,
            "description": "Description",
            "itemtype": "method",
            "name": "getQueryParamsFor",
            "params": [
                {
                    "name": "route",
                    "description": ""
                },
                {
                    "name": "state",
                    "description": ""
                }
            ],
            "return": {
                "description": "params"
            },
            "class": "Ember.Route",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 42379,
            "description": "Description",
            "itemtype": "method",
            "name": "copyDefaultValue",
            "params": [
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": "value"
            },
            "class": "Ember.Route",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 42448,
            "description": "The `location` property determines the type of URL's that your\napplication will use.\n\nThe following location types are currently available:\n\n* `hash`\n* `history`\n* `none`",
            "itemtype": "property",
            "name": "location",
            "default": "'hash'",
            "see": [
                "{Ember.Location}"
            ],
            "class": "Ember.Router",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 42464,
            "description": "Represents the URL of the root of the application, often '/'. This prefix is\nassumed on all routes defined on this router.",
            "itemtype": "property",
            "name": "rootURL",
            "default": "'/'",
            "class": "Ember.Router",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 42473,
            "description": "Description",
            "itemtype": "method",
            "name": "init",
            "return": {
                "description": ""
            },
            "class": "Ember.Router",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 42490,
            "description": "Represents the current URL.",
            "itemtype": "method",
            "name": "url",
            "return": {
                "description": "The current URL.",
                "type": "String"
            },
            "class": "Ember.Router",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 42500,
            "description": "Initializes the current router instance and sets up the change handling\nevent listeners used by the instances `location` implementation.\nA property named `initialURL` will be used to determine the initial URL.\nIf no value is found `/` will be used.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "startRouting",
            "return": {
                "description": ""
            },
            "class": "Ember.Router",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 42540,
            "description": "Handles updating the paths and notifying any listeners of the URL\nchange.\nTriggers the router level `didTransition` hook.",
            "access": "private",
            "tagname": "",
            "since": "1.2.0",
            "itemtype": "method",
            "name": "didTransition",
            "params": [
                {
                    "name": "infos",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Router",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 42566,
            "description": "Description",
            "itemtype": "method",
            "name": "handleURL",
            "params": [
                {
                    "name": "url",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Router",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 42582,
            "description": "Description",
            "itemtype": "method",
            "name": "transitionTo",
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Router",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 42604,
            "description": "Description",
            "itemtype": "method",
            "name": "intermediateTransitionTo",
            "return": {
                "description": ""
            },
            "class": "Ember.Router",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 42620,
            "description": "Description",
            "itemtype": "method",
            "name": "replaceWith",
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Router",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 42629,
            "description": "Description",
            "itemtype": "method",
            "name": "generate",
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Router",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 42639,
            "description": "Determines if the supplied route is currently active.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "isActive",
            "params": [
                {
                    "name": "routeName",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Router",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 42651,
            "description": "An alternative form of `isActive` that doesn't require\nmanual concatenation of the arguments into a single\narray.",
            "access": "private",
            "tagname": "",
            "since": "1.7.0",
            "itemtype": "method",
            "name": "isActiveIntent",
            "params": [
                {
                    "name": "routeName",
                    "description": ""
                },
                {
                    "name": "models",
                    "description": ""
                },
                {
                    "name": "queryParams",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Router",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 42668,
            "description": "Description",
            "itemtype": "method",
            "name": "send",
            "params": [
                {
                    "name": "name",
                    "description": ""
                },
                {
                    "name": "context",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Router",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 42679,
            "description": "Does this router instance have the given route.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "hasRoute",
            "params": [
                {
                    "name": "route",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Router",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 42690,
            "description": "Resets the state of the router by clearing the current route\nhandlers and deactivating them.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "reset",
            "return": {
                "description": ""
            },
            "class": "Ember.Router",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 42713,
            "description": "Description",
            "itemtype": "method",
            "name": "disconnectActiveView",
            "return": {
                "description": ""
            },
            "class": "Ember.Router",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 42788,
            "description": "Description",
            "itemtype": "method",
            "name": "doUpdateURL",
            "return": {
                "description": ""
            },
            "class": "Ember.Router",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 42797,
            "description": "Description",
            "itemtype": "method",
            "name": "updateURL",
            "params": [
                {
                    "name": "path",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Router",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 42809,
            "description": "Description",
            "itemtype": "method",
            "name": "doReplaceURL",
            "return": {
                "description": ""
            },
            "class": "Ember.Router",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 42818,
            "description": "Description",
            "itemtype": "method",
            "name": "replaceURL",
            "params": [
                {
                    "name": "path",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Router",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 42830,
            "description": "Description",
            "itemtype": "method",
            "name": "didTransition",
            "params": [
                {
                    "name": "infos",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Router",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 42908,
            "description": "Returns a merged query params meta object for a given route.\nUseful for asking a route what its known query params are.",
            "class": "Ember.Router",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 43016,
            "description": "Helper function for iterating root-ward, starting\nfrom (but not including) the provided `originRoute`.\nReturns true if the last callback fired requested\nto bubble upward.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "forEachRouteAbove",
            "params": [
                {
                    "name": "originRoute",
                    "description": ""
                },
                {
                    "name": "transition",
                    "description": ""
                },
                {
                    "name": "callback",
                    "description": ""
                }
            ],
            "return": {
                "description": "Literal"
            },
            "class": "Ember.Router",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 43055,
            "description": "Description",
            "itemtype": "method",
            "name": "willResolveModel",
            "params": [
                {
                    "name": "transition",
                    "description": ""
                },
                {
                    "name": "originRoute",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Router",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 43066,
            "description": "Description",
            "itemtype": "method",
            "name": "error",
            "params": [
                {
                    "name": "error",
                    "description": ""
                },
                {
                    "name": "transition",
                    "description": ""
                },
                {
                    "name": "originRoute",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Router",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 43098,
            "description": "Description",
            "itemtype": "method",
            "name": "loading",
            "params": [
                {
                    "name": "transition",
                    "description": ""
                },
                {
                    "name": "originRoute",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Router",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 43133,
            "description": "Description",
            "itemtype": "method",
            "name": "logError",
            "params": [
                {
                    "name": "error",
                    "description": ""
                },
                {
                    "name": "initialMessage",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Router",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 43155,
            "description": "Description",
            "itemtype": "method",
            "name": "findChildRouteName",
            "params": [
                {
                    "name": "parentRoute",
                    "description": ""
                },
                {
                    "name": "originatingChildRoute",
                    "description": ""
                },
                {
                    "name": "name",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Router",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 43177,
            "description": "Description",
            "itemtype": "method",
            "name": "routeHasBeenDefined",
            "params": [
                {
                    "name": "router",
                    "description": ""
                },
                {
                    "name": "name",
                    "description": ""
                }
            ],
            "return": {
                "description": "LogicalExpression"
            },
            "class": "Ember.Router",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 43190,
            "description": "Description",
            "itemtype": "method",
            "name": "triggerEvent",
            "params": [
                {
                    "name": "handlerInfos",
                    "description": ""
                },
                {
                    "name": "ignoreFailure",
                    "description": ""
                },
                {
                    "name": "args",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Router",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 43232,
            "description": "Description",
            "itemtype": "method",
            "name": "calculatePostTransitionState",
            "params": [
                {
                    "name": "emberRouter",
                    "description": ""
                },
                {
                    "name": "leafRouteName",
                    "description": ""
                },
                {
                    "name": "contexts",
                    "description": ""
                }
            ],
            "return": {
                "description": "state"
            },
            "class": "Ember.Router",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 43256,
            "description": "Description",
            "itemtype": "method",
            "name": "updatePaths",
            "params": [
                {
                    "name": "router",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Router",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 43291,
            "description": "The `Router.map` function allows you to define mappings from URLs to routes\nand resources in your application. These mappings are defined within the\nsupplied callback function using `this.resource` and `this.route`.\n```javascript\nApp.Router.map(function({\nthis.route('about');\nthis.resource('article');\n}));\n```\nFor more detailed examples please see\n[the guides](http://emberjs.com/guides/routing/defining-your-routes/).",
            "itemtype": "method",
            "name": "map",
            "params": [
                {
                    "name": "callback",
                    "description": ""
                }
            ],
            "return": {
                "description": "router"
            },
            "class": "Ember.Router",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 43343,
            "description": "Description",
            "itemtype": "method",
            "name": "intersectionMatches",
            "params": [
                {
                    "name": "a1",
                    "description": ""
                },
                {
                    "name": "a2",
                    "description": ""
                }
            ],
            "return": {
                "description": "Literal"
            },
            "class": "Ember.Router",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 43379,
            "description": "Description",
            "itemtype": "method",
            "name": "listenForTransitionErrors",
            "params": [
                {
                    "name": "transition",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Router",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 43396,
            "description": "Description",
            "itemtype": "method",
            "name": "resemblesURL",
            "params": [
                {
                    "name": "str",
                    "description": ""
                }
            ],
            "return": {
                "description": "LogicalExpression"
            },
            "class": "Ember.Router",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 43406,
            "description": "Description",
            "itemtype": "method",
            "name": "forEachQueryParam",
            "params": [
                {
                    "name": "router",
                    "description": ""
                },
                {
                    "name": "targetRouteName",
                    "description": ""
                },
                {
                    "name": "queryParams",
                    "description": ""
                },
                {
                    "name": "callback",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Router",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 43625,
            "description": "This will compare two javascript values of possibly different types.\nIt will tell you which one is greater than the other by returning:\n- -1 if the first is smaller than the second,\n- 0 if both are equal,\n- 1 if the first is greater than the second.\nThe order is calculated based on `Ember.ORDER_DEFINITION`, if types are different.\nIn case they have the same type an appropriate comparison for this type is made.\n```javascript\nEmber.compare('hello', 'hello');  // 0\nEmber.compare('abc', 'dfg');      // -1\nEmber.compare(2, 1);              // 1\n```",
            "params": [
                {
                    "name": "v",
                    "description": "First value to compare",
                    "type": "Object"
                },
                {
                    "name": "w",
                    "description": "Second value to compare",
                    "type": "Object"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Ember",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 43745,
            "description": "Description",
            "itemtype": "method",
            "name": "ArrayComputedProperty",
            "return": {
                "description": "ThisExpression"
            },
            "class": "Ember.Ember",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 43776,
            "description": "Description",
            "itemtype": "method",
            "name": "initialValue",
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Ember",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 43784,
            "description": "Description",
            "itemtype": "method",
            "name": "resetValue",
            "params": [
                {
                    "name": "array",
                    "description": ""
                }
            ],
            "return": {
                "description": "array"
            },
            "class": "Ember.Ember",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 43796,
            "description": "Description",
            "itemtype": "method",
            "name": "didChange",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                },
                {
                    "name": "keyName",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Ember",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 43807,
            "description": "Creates a computed property which operates on dependent arrays and\nis updated with \"one at a time\" semantics. When items are added or\nremoved from the dependent array(s) an array computed only operates\non the change instead of re-evaluating the entire array. This should\nreturn an array, if you'd like to use \"one at a time\" semantics and\ncompute some value other then an array look at\n`Ember.reduceComputed`.\nIf there are more than one arguments the first arguments are\nconsidered to be dependent property keys. The last argument is\nrequired to be an options object. The options object can have the\nfollowing three properties.\n`initialize` - An optional initialize function. Typically this will be used\nto set up state on the instanceMeta object.\n`removedItem` - A function that is called each time an element is\nremoved from the array.\n`addedItem` - A function that is called each time an element is\nadded to the array.\nThe `initialize` function has the following signature:\n```javascript\nfunction(array, changeMeta, instanceMeta)\n```\n`array` - The initial value of the arrayComputed, an empty array.\n`changeMeta` - An object which contains meta information about the\ncomputed. It contains the following properties:\n- `property` the computed property\n- `propertyName` the name of the property on the object\n`instanceMeta` - An object that can be used to store meta\ninformation needed for calculating your computed. For example a\nunique computed might use this to store the number of times a given\nelement is found in the dependent array.\nThe `removedItem` and `addedItem` functions both have the following signature:\n```javascript\nfunction(accumulatedValue, item, changeMeta, instanceMeta)\n```\n`accumulatedValue` - The value returned from the last time\n`removedItem` or `addedItem` was called or an empty array.\n`item` - the element added or removed from the array\n`changeMeta` - An object which contains meta information about the\nchange. It contains the following properties:\n- `property` the computed property\n- `propertyName` the name of the property on the object\n- `index` the index of the added or removed item\n- `item` the added or removed item: this is exactly the same as\nthe second arg\n- `arrayChanged` the array that triggered the change. Can be\nuseful when depending on multiple arrays.\nFor property changes triggered on an item property change (when\ndepKey is something like `someArray.@each.someProperty`),\n`changeMeta` will also contain the following property:\n- `previousValues` an object whose keys are the properties that changed on\nthe item, and whose values are the item's previous values.\n`previousValues` is important Ember coalesces item property changes via\nEmber.run.once. This means that by the time removedItem gets called, item has\nthe new values, but you may need the previous value (eg for sorting &\nfiltering).\n`instanceMeta` - An object that can be used to store meta\ninformation needed for calculating your computed. For example a\nunique computed might use this to store the number of times a given\nelement is found in the dependent array.\nThe `removedItem` and `addedItem` functions should return the accumulated\nvalue. It is acceptable to not return anything (ie return undefined)\nto invalidate the computation. This is generally not a good idea for\narrayComputed but it's used in eg max and min.\nExample\n```javascript\nEmber.computed.map = function(dependentKey, callback) {\nvar options = {\naddedItem: function(array, item, changeMeta, instanceMeta) {\nvar mapped = callback(item);\narray.insertAt(changeMeta.index, mapped);\nreturn array;\n},\nremovedItem: function(array, item, changeMeta, instanceMeta) {\narray.removeAt(changeMeta.index, 1);\nreturn array;\n}\n};\nreturn Ember.arrayComputed(dependentKey, options);\n};\n```",
            "itemtype": "method",
            "name": "arrayComputed",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "cp"
            },
            "class": "Ember.Ember",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 43956,
            "description": "Description",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                },
                {
                    "name": "key",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Ember",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 44019,
            "description": "Description",
            "itemtype": "method",
            "name": "ItemPropertyObserverContext",
            "params": [
                {
                    "name": "dependentArray",
                    "description": ""
                },
                {
                    "name": "index",
                    "description": ""
                },
                {
                    "name": "trackedArray",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DependentArraysObserver",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 44041,
            "description": "Description",
            "itemtype": "method",
            "name": "setValue",
            "params": [
                {
                    "name": "newValue",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DependentArraysObserver",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 44050,
            "description": "Description",
            "itemtype": "method",
            "name": "getValue",
            "return": {
                "description": "CallExpression"
            },
            "class": "DependentArraysObserver",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 44059,
            "description": "Description",
            "itemtype": "method",
            "name": "setupObservers",
            "params": [
                {
                    "name": "dependentArray",
                    "description": ""
                },
                {
                    "name": "dependentKey",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DependentArraysObserver",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 44079,
            "description": "Description",
            "itemtype": "method",
            "name": "teardownObservers",
            "params": [
                {
                    "name": "dependentArray",
                    "description": ""
                },
                {
                    "name": "dependentKey",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DependentArraysObserver",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 44099,
            "description": "Description",
            "itemtype": "method",
            "name": "suspendArrayObservers",
            "params": [
                {
                    "name": "callback",
                    "description": ""
                },
                {
                    "name": "binding",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DependentArraysObserver",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 44113,
            "description": "Description",
            "itemtype": "method",
            "name": "setupPropertyObservers",
            "params": [
                {
                    "name": "dependentKey",
                    "description": ""
                },
                {
                    "name": "itemPropertyKeys",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DependentArraysObserver",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 44138,
            "description": "Description",
            "itemtype": "method",
            "name": "teardownPropertyObservers",
            "params": [
                {
                    "name": "dependentKey",
                    "description": ""
                },
                {
                    "name": "itemPropertyKeys",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DependentArraysObserver",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 44171,
            "description": "Description",
            "itemtype": "method",
            "name": "createPropertyObserverContext",
            "params": [
                {
                    "name": "dependentArray",
                    "description": ""
                },
                {
                    "name": "index",
                    "description": ""
                },
                {
                    "name": "trackedArray",
                    "description": ""
                }
            ],
            "return": {
                "description": "observerContext"
            },
            "class": "DependentArraysObserver",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 44187,
            "description": "Description",
            "itemtype": "method",
            "name": "createPropertyObserver",
            "params": [
                {
                    "name": "observerContext",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DependentArraysObserver",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 44196,
            "description": "Description",
            "itemtype": "method",
            "name": "beforeObserver",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                },
                {
                    "name": "keyName",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "DependentArraysObserver",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 44206,
            "description": "Description",
            "itemtype": "method",
            "name": "observer",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                },
                {
                    "name": "keyName",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "DependentArraysObserver",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 44218,
            "description": "Description",
            "itemtype": "method",
            "name": "resetTransformations",
            "params": [
                {
                    "name": "dependentKey",
                    "description": ""
                },
                {
                    "name": "observerContexts",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DependentArraysObserver",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 44229,
            "description": "Description",
            "itemtype": "method",
            "name": "trackAdd",
            "params": [
                {
                    "name": "dependentKey",
                    "description": ""
                },
                {
                    "name": "index",
                    "description": ""
                },
                {
                    "name": "newItems",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DependentArraysObserver",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 44244,
            "description": "Description",
            "itemtype": "method",
            "name": "trackRemove",
            "params": [
                {
                    "name": "dependentKey",
                    "description": ""
                },
                {
                    "name": "index",
                    "description": ""
                },
                {
                    "name": "removedCount",
                    "description": ""
                }
            ],
            "return": {
                "description": "ArrayExpression"
            },
            "class": "DependentArraysObserver",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 44262,
            "description": "Description",
            "itemtype": "method",
            "name": "updateIndexes",
            "params": [
                {
                    "name": "trackedArray",
                    "description": ""
                },
                {
                    "name": "array",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DependentArraysObserver",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 44289,
            "description": "Description",
            "itemtype": "method",
            "name": "dependentArrayWillChange",
            "params": [
                {
                    "name": "dependentArray",
                    "description": ""
                },
                {
                    "name": "index",
                    "description": ""
                },
                {
                    "name": "removedCount",
                    "description": ""
                },
                {
                    "name": "addedCount",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DependentArraysObserver",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 44313,
            "description": "Description",
            "itemtype": "method",
            "name": "removeObservers",
            "params": [
                {
                    "name": "propertyKey",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DependentArraysObserver",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 44339,
            "description": "Description",
            "itemtype": "method",
            "name": "dependentArrayDidChange",
            "params": [
                {
                    "name": "dependentArray",
                    "description": ""
                },
                {
                    "name": "index",
                    "description": ""
                },
                {
                    "name": "removedCount",
                    "description": ""
                },
                {
                    "name": "addedCount",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DependentArraysObserver",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 44379,
            "description": "Description",
            "itemtype": "method",
            "name": "itemPropertyWillChange",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                },
                {
                    "name": "keyName",
                    "description": ""
                },
                {
                    "name": "array",
                    "description": ""
                },
                {
                    "name": "observerContext",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DependentArraysObserver",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 44404,
            "description": "Description",
            "itemtype": "method",
            "name": "itemPropertyDidChange",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                },
                {
                    "name": "keyName",
                    "description": ""
                },
                {
                    "name": "array",
                    "description": ""
                },
                {
                    "name": "observerContext",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DependentArraysObserver",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 44419,
            "description": "Description",
            "itemtype": "method",
            "name": "flushChanges",
            "return": {
                "description": ""
            },
            "class": "DependentArraysObserver",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 44443,
            "description": "Description",
            "itemtype": "method",
            "name": "normalizeIndex",
            "params": [
                {
                    "name": "index",
                    "description": ""
                },
                {
                    "name": "length",
                    "description": ""
                },
                {
                    "name": "newItemsOffset",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DependentArraysObserver",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 44461,
            "description": "Description",
            "itemtype": "method",
            "name": "normalizeRemoveCount",
            "params": [
                {
                    "name": "index",
                    "description": ""
                },
                {
                    "name": "length",
                    "description": ""
                },
                {
                    "name": "removedCount",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "DependentArraysObserver",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 44473,
            "description": "Description",
            "itemtype": "method",
            "name": "ChangeMeta",
            "params": [
                {
                    "name": "dependentArray",
                    "description": ""
                },
                {
                    "name": "item",
                    "description": ""
                },
                {
                    "name": "index",
                    "description": ""
                },
                {
                    "name": "propertyName",
                    "description": ""
                },
                {
                    "name": "property",
                    "description": ""
                },
                {
                    "name": "changedCount",
                    "description": ""
                },
                {
                    "name": "previousValues",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DependentArraysObserver",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 44499,
            "description": "Description",
            "itemtype": "method",
            "name": "addItems",
            "params": [
                {
                    "name": "dependentArray",
                    "description": ""
                },
                {
                    "name": "callbacks",
                    "description": ""
                },
                {
                    "name": "cp",
                    "description": ""
                },
                {
                    "name": "propertyName",
                    "description": ""
                },
                {
                    "name": "meta",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DependentArraysObserver",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 44516,
            "description": "Description",
            "itemtype": "method",
            "name": "reset",
            "params": [
                {
                    "name": "cp",
                    "description": ""
                },
                {
                    "name": "propertyName",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DependentArraysObserver",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 44539,
            "description": "Description",
            "itemtype": "method",
            "name": "partiallyRecomputeFor",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                },
                {
                    "name": "dependentKey",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "DependentArraysObserver",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 44555,
            "description": "Description",
            "itemtype": "method",
            "name": "ReduceComputedPropertyInstanceMeta",
            "params": [
                {
                    "name": "context",
                    "description": ""
                },
                {
                    "name": "propertyName",
                    "description": ""
                },
                {
                    "name": "initialValue",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DependentArraysObserver",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 44575,
            "description": "Description",
            "itemtype": "method",
            "name": "getValue",
            "return": {
                "description": ""
            },
            "class": "DependentArraysObserver",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 44589,
            "description": "Description",
            "itemtype": "method",
            "name": "setValue",
            "params": [
                {
                    "name": "newValue",
                    "description": ""
                },
                {
                    "name": "triggerObservers",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DependentArraysObserver",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 44631,
            "description": "Description",
            "itemtype": "method",
            "name": "ReduceComputedProperty",
            "params": [
                {
                    "name": "options",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ReduceComputedProperty",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 44651,
            "description": "Description",
            "itemtype": "method",
            "name": "recomputeOnce",
            "params": [
                {
                    "name": "propertyName",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ReduceComputedProperty",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 44663,
            "description": "Description",
            "itemtype": "method",
            "name": "recompute",
            "params": [
                {
                    "name": "propertyName",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ReduceComputedProperty",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 44722,
            "description": "Description",
            "itemtype": "method",
            "name": "func",
            "params": [
                {
                    "name": "propertyName",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ReduceComputedProperty",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 44739,
            "description": "Description",
            "itemtype": "method",
            "name": "defaultCallback",
            "params": [
                {
                    "name": "computedValue",
                    "description": ""
                }
            ],
            "return": {
                "description": "computedValue"
            },
            "class": "Ember.ReduceComputedProperty",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 44776,
            "description": "Description",
            "itemtype": "method",
            "name": "initialValue",
            "return": {
                "description": ""
            },
            "class": "Ember.ReduceComputedProperty",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 44790,
            "description": "Description",
            "itemtype": "method",
            "name": "resetValue",
            "params": [
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ReduceComputedProperty",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 44800,
            "description": "Description",
            "itemtype": "method",
            "name": "itemPropertyKey",
            "params": [
                {
                    "name": "dependentArrayKey",
                    "description": ""
                },
                {
                    "name": "itemPropertyKey",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ReduceComputedProperty",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 44812,
            "description": "Description",
            "itemtype": "method",
            "name": "clearItemPropertyKeys",
            "params": [
                {
                    "name": "dependentArrayKey",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ReduceComputedProperty",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 44825,
            "description": "Description",
            "itemtype": "method",
            "name": "property",
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ReduceComputedProperty",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 44844,
            "description": "Description",
            "itemtype": "method",
            "name": "addItemPropertyKey",
            "params": [
                {
                    "name": "itemPropertyKey",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ReduceComputedProperty",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 44866,
            "description": "Creates a computed property which operates on dependent arrays and\nis updated with \"one at a time\" semantics. When items are added or\nremoved from the dependent array(s) a reduce computed only operates\non the change instead of re-evaluating the entire array.\nIf there are more than one arguments the first arguments are\nconsidered to be dependent property keys. The last argument is\nrequired to be an options object. The options object can have the\nfollowing four properties:\n`initialValue` - A value or function that will be used as the initial\nvalue for the computed. If this property is a function the result of calling\nthe function will be used as the initial value. This property is required.\n`initialize` - An optional initialize function. Typically this will be used\nto set up state on the instanceMeta object.\n`removedItem` - A function that is called each time an element is removed\nfrom the array.\n`addedItem` - A function that is called each time an element is added to\nthe array.\nThe `initialize` function has the following signature:\n```javascript\nfunction(initialValue, changeMeta, instanceMeta)\n```\n`initialValue` - The value of the `initialValue` property from the\noptions object.\n`changeMeta` - An object which contains meta information about the\ncomputed. It contains the following properties:\n- `property` the computed property\n- `propertyName` the name of the property on the object\n`instanceMeta` - An object that can be used to store meta\ninformation needed for calculating your computed. For example a\nunique computed might use this to store the number of times a given\nelement is found in the dependent array.\nThe `removedItem` and `addedItem` functions both have the following signature:\n```javascript\nfunction(accumulatedValue, item, changeMeta, instanceMeta)\n```\n`accumulatedValue` - The value returned from the last time\n`removedItem` or `addedItem` was called or `initialValue`.\n`item` - the element added or removed from the array\n`changeMeta` - An object which contains meta information about the\nchange. It contains the following properties:\n- `property` the computed property\n- `propertyName` the name of the property on the object\n- `index` the index of the added or removed item\n- `item` the added or removed item: this is exactly the same as\nthe second arg\n- `arrayChanged` the array that triggered the change. Can be\nuseful when depending on multiple arrays.\nFor property changes triggered on an item property change (when\ndepKey is something like `someArray.@each.someProperty`),\n`changeMeta` will also contain the following property:\n- `previousValues` an object whose keys are the properties that changed on\nthe item, and whose values are the item's previous values.\n`previousValues` is important Ember coalesces item property changes via\nEmber.run.once. This means that by the time removedItem gets called, item has\nthe new values, but you may need the previous value (eg for sorting &\nfiltering).\n`instanceMeta` - An object that can be used to store meta\ninformation needed for calculating your computed. For example a\nunique computed might use this to store the number of times a given\nelement is found in the dependent array.\nThe `removedItem` and `addedItem` functions should return the accumulated\nvalue. It is acceptable to not return anything (ie return undefined)\nto invalidate the computation. This is generally not a good idea for\narrayComputed but it's used in eg max and min.\nNote that observers will be fired if either of these functions return a value\nthat differs from the accumulated value.  When returning an object that\nmutates in response to array changes, for example an array that maps\neverything from some other array (see `Ember.computed.map`), it is usually\nimportant that the *same* array be returned to avoid accidentally triggering observers.\nExample\n```javascript\nEmber.computed.max = function(dependentKey) {\nreturn Ember.reduceComputed(dependentKey, {\ninitialValue: -Infinity,\naddedItem: function(accumulatedValue, item, changeMeta, instanceMeta) {\nreturn Math.max(accumulatedValue, item);\n},\nremovedItem: function(accumulatedValue, item, changeMeta, instanceMeta) {\nif (item < accumulatedValue) {\nreturn accumulatedValue;\n}\n}\n});\n};\n```\nDependent keys may refer to `@this` to observe changes to the object itself,\nwhich must be array-like, rather than a property of the object.  This is\nmostly useful for array proxies, to ensure objects are retrieved via\n`objectAtContent`.  This is how you could sort items by properties defined on an item controller.\nExample\n```javascript\nApp.PeopleController = Ember.ArrayController.extend({\nitemController: 'person',\nsortedPeople: Ember.computed.sort('@this.@each.reversedName', function(personA, personB) {\n// `reversedName` isn't defined on Person, but we have access to it via\n// the item controller App.PersonController.  If we'd used\n// `content.@each.reversedName` above, we would be getting the objects\n// directly and not have access to `reversedName`.\n//\nvar reversedNameA = get(personA, 'reversedName'),\nreversedNameB = get(personB, 'reversedName');\nreturn Ember.compare(reversedNameA, reversedNameB);\n})\n});\nApp.PersonController = Ember.ObjectController.extend({\nreversedName: function() {\nreturn reverse(get(this, 'name'));\n}.property('name')\n});\n```\nDependent keys whose values are not arrays are treated as regular\ndependencies: when they change, the computed property is completely\nrecalculated.  It is sometimes useful to have dependent arrays with similar\nsemantics.  Dependent keys which end in `.[]` do not use \"one at a time\"\nsemantics.  When an item is added or removed from such a dependency, the\ncomputed property is completely recomputed.\nWhen the computed property is completely recomputed, the `accumulatedValue`\nis discarded, it starts with `initialValue` again, and each item is passed\nto `addedItem` in turn.\nExample\n```javascript\nEmber.Object.extend({\n// When `string` is changed, `computed` is completely recomputed.\nstring: 'a string',\n// When an item is added to `array`, `addedItem` is called.\narray: [],\n// When an item is added to `anotherArray`, `computed` is completely\n// recomputed.\nanotherArray: [],\ncomputed: Ember.reduceComputed('string', 'array', 'anotherArray.[]', {\naddedItem: addedItemCallback,\nremovedItem: removedItemCallback\n})\n});\n```",
            "itemtype": "method",
            "name": "reduceComputed",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "cp"
            },
            "class": "Ember.Ember",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 45063,
            "description": "A computed property that returns the sum of the value\nin the dependent array.",
            "since": "1.4.0",
            "itemtype": "method",
            "name": "sum",
            "params": [
                {
                    "name": "dependentKey",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Ember",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 45076,
            "description": "Description",
            "itemtype": "method",
            "name": "addedItem",
            "params": [
                {
                    "name": "accumulatedValue",
                    "description": ""
                },
                {
                    "name": "item",
                    "description": ""
                },
                {
                    "name": "changeMeta",
                    "description": ""
                },
                {
                    "name": "instanceMeta",
                    "description": ""
                }
            ],
            "return": {
                "description": "BinaryExpression"
            },
            "class": "Ember.Ember",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 45089,
            "description": "Description",
            "itemtype": "method",
            "name": "removedItem",
            "params": [
                {
                    "name": "accumulatedValue",
                    "description": ""
                },
                {
                    "name": "item",
                    "description": ""
                },
                {
                    "name": "changeMeta",
                    "description": ""
                },
                {
                    "name": "instanceMeta",
                    "description": ""
                }
            ],
            "return": {
                "description": "BinaryExpression"
            },
            "class": "Ember.Ember",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 45137,
            "description": "Description",
            "itemtype": "method",
            "name": "addedItem",
            "params": [
                {
                    "name": "accumulatedValue",
                    "description": ""
                },
                {
                    "name": "item",
                    "description": ""
                },
                {
                    "name": "changeMeta",
                    "description": ""
                },
                {
                    "name": "instanceMeta",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Ember",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 45150,
            "description": "Description",
            "itemtype": "method",
            "name": "removedItem",
            "params": [
                {
                    "name": "accumulatedValue",
                    "description": ""
                },
                {
                    "name": "item",
                    "description": ""
                },
                {
                    "name": "changeMeta",
                    "description": ""
                },
                {
                    "name": "instanceMeta",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Ember",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 45200,
            "description": "Description",
            "itemtype": "method",
            "name": "addedItem",
            "params": [
                {
                    "name": "accumulatedValue",
                    "description": ""
                },
                {
                    "name": "item",
                    "description": ""
                },
                {
                    "name": "changeMeta",
                    "description": ""
                },
                {
                    "name": "instanceMeta",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Ember",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 45213,
            "description": "Description",
            "itemtype": "method",
            "name": "removedItem",
            "params": [
                {
                    "name": "accumulatedValue",
                    "description": ""
                },
                {
                    "name": "item",
                    "description": ""
                },
                {
                    "name": "changeMeta",
                    "description": ""
                },
                {
                    "name": "instanceMeta",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Ember",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 45257,
            "description": "Description",
            "itemtype": "method",
            "name": "addedItem",
            "params": [
                {
                    "name": "array",
                    "description": ""
                },
                {
                    "name": "item",
                    "description": ""
                },
                {
                    "name": "changeMeta",
                    "description": ""
                },
                {
                    "name": "instanceMeta",
                    "description": ""
                }
            ],
            "return": {
                "description": "array"
            },
            "class": "Ember.Ember",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 45271,
            "description": "Description",
            "itemtype": "method",
            "name": "removedItem",
            "params": [
                {
                    "name": "array",
                    "description": ""
                },
                {
                    "name": "item",
                    "description": ""
                },
                {
                    "name": "changeMeta",
                    "description": ""
                },
                {
                    "name": "instanceMeta",
                    "description": ""
                }
            ],
            "return": {
                "description": "array"
            },
            "class": "Ember.Ember",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 45315,
            "description": "Description",
            "itemtype": "method",
            "name": "callback",
            "params": [
                {
                    "name": "item",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Ember",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 45334,
            "description": "Filters the array by the callback.\nThe callback method you provide should have the following signature.\n`item` is the current item in the iteration.\n```javascript\nfunction(item);\n```\n```javascript\nvar Hamster = Ember.Object.extend({\nremainingChores: Ember.computed.filter('chores', function(chore) {\nreturn !chore.done;\n})\n});\nvar hamster = Hamster.create({ \nchores: [\n{ name: 'cook', done: true },\n{ name: 'clean', done: true },\n{ name: 'write more unit tests', done: false }\n] \n});\nhamster.get('remainingChores'); // [{name: 'write more unit tests', done: false}]\n```",
            "itemtype": "method",
            "name": "filter",
            "params": [
                {
                    "name": "dependentKey",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Ember",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 45364,
            "description": "Description",
            "itemtype": "method",
            "name": "initialize",
            "params": [
                {
                    "name": "array",
                    "description": ""
                },
                {
                    "name": "changeMeta",
                    "description": ""
                },
                {
                    "name": "instanceMeta",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Ember",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 45376,
            "description": "Description",
            "itemtype": "method",
            "name": "addedItem",
            "params": [
                {
                    "name": "array",
                    "description": ""
                },
                {
                    "name": "item",
                    "description": ""
                },
                {
                    "name": "changeMeta",
                    "description": ""
                },
                {
                    "name": "instanceMeta",
                    "description": ""
                }
            ],
            "return": {
                "description": "array"
            },
            "class": "Ember.Ember",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 45396,
            "description": "Description",
            "itemtype": "method",
            "name": "removedItem",
            "params": [
                {
                    "name": "array",
                    "description": ""
                },
                {
                    "name": "item",
                    "description": ""
                },
                {
                    "name": "changeMeta",
                    "description": ""
                },
                {
                    "name": "instanceMeta",
                    "description": ""
                }
            ],
            "return": {
                "description": "array"
            },
            "class": "Ember.Ember",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 45445,
            "description": "Description",
            "params": [
                {
                    "name": "item",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Ember",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 45454,
            "description": "Description",
            "params": [
                {
                    "name": "item",
                    "description": ""
                }
            ],
            "return": {
                "description": "BinaryExpression"
            },
            "class": "Ember.Ember",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 45477,
            "description": "A computed property which returns a new array with all the unique\nelements from one or more dependent arrays.\nExample\n```javascript\nvar Hamster = Ember.Object.extend({\nuniqueFruits: Ember.computed.uniq('fruits')\n});\nvar hamster = Hamster.create({\nfruits: [\n'banana',\n'grape',\n'kale',\n'banana'\n]\n});\nhamster.get('uniqueFruits'); // ['banana', 'grape', 'kale']\n```\nunique elements from the dependent array",
            "itemtype": "method",
            "name": "uniq",
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Ember",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 45503,
            "description": "Description",
            "itemtype": "method",
            "name": "initialize",
            "params": [
                {
                    "name": "array",
                    "description": ""
                },
                {
                    "name": "changeMeta",
                    "description": ""
                },
                {
                    "name": "instanceMeta",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Ember",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 45515,
            "description": "Description",
            "itemtype": "method",
            "name": "addedItem",
            "params": [
                {
                    "name": "array",
                    "description": ""
                },
                {
                    "name": "item",
                    "description": ""
                },
                {
                    "name": "changeMeta",
                    "description": ""
                },
                {
                    "name": "instanceMeta",
                    "description": ""
                }
            ],
            "return": {
                "description": "array"
            },
            "class": "Ember.Ember",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 45535,
            "description": "Description",
            "itemtype": "method",
            "name": "removedItem",
            "params": [
                {
                    "name": "array",
                    "description": ""
                },
                {
                    "name": "item",
                    "description": ""
                },
                {
                    "name": "_",
                    "description": ""
                },
                {
                    "name": "instanceMeta",
                    "description": ""
                }
            ],
            "return": {
                "description": "array"
            },
            "class": "Ember.Ember",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 45568,
            "description": "A computed property which returns a new array with all the duplicated\nelements from two or more dependent arrays.\nExample\n```javascript\nvar obj = Ember.Object.createWithMixins({\nadaFriends: ['Charles Babbage', 'John Hobhouse', 'William King', 'Mary Somerville'],\ncharlesFriends: ['William King', 'Mary Somerville', 'Ada Lovelace', 'George Peacock'],\nfriendsInCommon: Ember.computed.intersect('adaFriends', 'charlesFriends')\n});\nobj.get('friendsInCommon'); // ['William King', 'Mary Somerville']\n```\nduplicated elements from the dependent arrays",
            "itemtype": "method",
            "name": "intersect",
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Ember",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 45588,
            "description": "Description",
            "itemtype": "method",
            "name": "initialize",
            "params": [
                {
                    "name": "array",
                    "description": ""
                },
                {
                    "name": "changeMeta",
                    "description": ""
                },
                {
                    "name": "instanceMeta",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Ember",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 45600,
            "description": "Description",
            "itemtype": "method",
            "name": "addedItem",
            "params": [
                {
                    "name": "array",
                    "description": ""
                },
                {
                    "name": "item",
                    "description": ""
                },
                {
                    "name": "changeMeta",
                    "description": ""
                },
                {
                    "name": "instanceMeta",
                    "description": ""
                }
            ],
            "return": {
                "description": "array"
            },
            "class": "Ember.Ember",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 45625,
            "description": "Description",
            "itemtype": "method",
            "name": "removedItem",
            "params": [
                {
                    "name": "array",
                    "description": ""
                },
                {
                    "name": "item",
                    "description": ""
                },
                {
                    "name": "changeMeta",
                    "description": ""
                },
                {
                    "name": "instanceMeta",
                    "description": ""
                }
            ],
            "return": {
                "description": "array"
            },
            "class": "Ember.Ember",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 45691,
            "description": "Description",
            "itemtype": "method",
            "name": "addedItem",
            "params": [
                {
                    "name": "array",
                    "description": ""
                },
                {
                    "name": "item",
                    "description": ""
                },
                {
                    "name": "changeMeta",
                    "description": ""
                },
                {
                    "name": "instanceMeta",
                    "description": ""
                }
            ],
            "return": {
                "description": "array"
            },
            "class": "Ember.Ember",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 45714,
            "description": "Description",
            "itemtype": "method",
            "name": "removedItem",
            "params": [
                {
                    "name": "array",
                    "description": ""
                },
                {
                    "name": "item",
                    "description": ""
                },
                {
                    "name": "changeMeta",
                    "description": ""
                },
                {
                    "name": "instanceMeta",
                    "description": ""
                }
            ],
            "return": {
                "description": "array"
            },
            "class": "Ember.Ember",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 45740,
            "description": "Description",
            "itemtype": "method",
            "name": "binarySearch",
            "params": [
                {
                    "name": "array",
                    "description": ""
                },
                {
                    "name": "item",
                    "description": ""
                },
                {
                    "name": "low",
                    "description": ""
                },
                {
                    "name": "high",
                    "description": ""
                }
            ],
            "return": {
                "description": "mid"
            },
            "class": "Ember.Ember",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 45794,
            "description": "A computed property which returns a new array with all the\nproperties from the first dependent array sorted based on a property\nor sort function.\nThe callback method you provide should have the following signature:\n```javascript\nfunction(itemA, itemB);\n```\n- `itemA` the first item to compare.\n- `itemB` the second item to compare.\nThis function should return negative number (e.g. `-1`) when `itemA` should come before\n`itemB`. It should return positive number (e.g. `1`) when `itemA` should come after\n`itemB`. If the `itemA` and `itemB` are equal this function should return `0`.\nTherefore, if this function is comparing some numeric values, simple `itemA - itemB` or\n`itemA.get( 'foo' ) - itemB.get( 'foo' )` can be used instead of series of `if`.\nExample\n```javascript\nvar ToDoList = Ember.Object.extend({\n// using standard ascending sort\ntodosSorting: ['name'],\nsortedTodos: Ember.computed.sort('todos', 'todosSorting'),\n// using descending sort\ntodosSortingDesc: ['name:desc'],\nsortedTodosDesc: Ember.computed.sort('todos', 'todosSortingDesc'),\n// using a custom sort function\npriorityTodos: Ember.computed.sort('todos', function(a, b){\nif (a.priority > b.priority) {\nreturn 1;\n} else if (a.priority < b.priority) {\nreturn -1;\n}\nreturn 0;\n})\n});\nvar todoList = ToDoList.create({todos: [\n{ name: 'Unit Test', priority: 2 },\n{ name: 'Documentation', priority: 3 },\n{ name: 'Release', priority: 1 }\n]});\ntodoList.get('sortedTodos');      // [{ name:'Documentation', priority:3 }, { name:'Release', priority:1 }, { name:'Unit Test', priority:2 }]\ntodoList.get('sortedTodosDesc');  // [{ name:'Unit Test', priority:2 }, { name:'Release', priority:1 }, { name:'Documentation', priority:3 }]\ntodoList.get('priorityTodos');    // [{ name:'Release', priority:1 }, { name:'Unit Test', priority:2 }, { name:'Documentation', priority:3 }]\n```\narray of sort properties (add `:desc` to the arrays sort properties to sort descending) or a function to use when sorting\non the sort property array or callback function",
            "itemtype": "method",
            "name": "sort",
            "params": [
                {
                    "name": "itemsKey",
                    "description": ""
                },
                {
                    "name": "sortDefinition",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Ember",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 45851,
            "description": "Description",
            "params": [
                {
                    "name": "array",
                    "description": ""
                },
                {
                    "name": "changeMeta",
                    "description": ""
                },
                {
                    "name": "instanceMeta",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Ember",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 45864,
            "description": "Description",
            "params": [
                {
                    "name": "array",
                    "description": ""
                },
                {
                    "name": "changeMeta",
                    "description": ""
                },
                {
                    "name": "instanceMeta",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Ember",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 45872,
            "description": "Description",
            "itemtype": "method",
            "name": "setupSortProperties",
            "return": {
                "description": ""
            },
            "class": "Ember.Ember",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 45906,
            "description": "Description",
            "itemtype": "method",
            "name": "updateSortPropertiesOnce",
            "return": {
                "description": ""
            },
            "class": "Ember.Ember",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 45915,
            "description": "Description",
            "itemtype": "method",
            "name": "updateSortProperties",
            "params": [
                {
                    "name": "propertyName",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Ember",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 45931,
            "description": "Description",
            "itemtype": "method",
            "name": "order",
            "params": [
                {
                    "name": "itemA",
                    "description": ""
                },
                {
                    "name": "itemB",
                    "description": ""
                }
            ],
            "return": {
                "description": "Literal"
            },
            "class": "Ember.Ember",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 45962,
            "description": "Description",
            "itemtype": "method",
            "name": "addedItem",
            "params": [
                {
                    "name": "array",
                    "description": ""
                },
                {
                    "name": "item",
                    "description": ""
                },
                {
                    "name": "changeMeta",
                    "description": ""
                },
                {
                    "name": "instanceMeta",
                    "description": ""
                }
            ],
            "return": {
                "description": "array"
            },
            "class": "Ember.Ember",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 45977,
            "description": "Description",
            "itemtype": "method",
            "name": "removedItem",
            "params": [
                {
                    "name": "array",
                    "description": ""
                },
                {
                    "name": "item",
                    "description": ""
                },
                {
                    "name": "changeMeta",
                    "description": ""
                },
                {
                    "name": "instanceMeta",
                    "description": ""
                }
            ],
            "return": {
                "description": "array"
            },
            "class": "Ember.Ember",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 46116,
            "description": "The controller used to wrap items, if any.",
            "itemtype": "property",
            "name": "itemController",
            "type": "String",
            "default": "null",
            "class": "Ember.ArrayController",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 46125,
            "description": "Return the name of the controller to wrap items, or `null` if items should\nbe returned directly.  The default implementation simply returns the\n`itemController` property, but subclasses can override this method to return\ndifferent controllers for different objects.\nFor example:\n```javascript\nApp.MyArrayController = Ember.ArrayController.extend({\nlookupItemController: function( object ) {\nif (object.get('isSpecial')) {\nreturn \"special\"; // use App.SpecialController\n} else {\nreturn \"regular\"; // use App.RegularController\n}\n}\n});\n```",
            "itemtype": "method",
            "name": "lookupItemController",
            "params": [
                {
                    "name": "object",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ArrayController",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 46150,
            "description": "Description",
            "itemtype": "method",
            "name": "objectAtContent",
            "params": [
                {
                    "name": "idx",
                    "description": ""
                }
            ],
            "return": {
                "description": "object"
            },
            "class": "Ember.ArrayController",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 46178,
            "description": "Description",
            "itemtype": "method",
            "name": "arrangedContentDidChange",
            "return": {
                "description": ""
            },
            "class": "Ember.ArrayController",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 46188,
            "description": "Description",
            "itemtype": "method",
            "name": "arrayContentDidChange",
            "params": [
                {
                    "name": "idx",
                    "description": ""
                },
                {
                    "name": "removedCnt",
                    "description": ""
                },
                {
                    "name": "addedCnt",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ArrayController",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 46217,
            "description": "Description",
            "itemtype": "method",
            "name": "init",
            "return": {
                "description": ""
            },
            "class": "Ember.ArrayController",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 46231,
            "description": "Flag to mark as being \"virtual\". Used to keep this instance\nfrom participating in the parentController hierarchy.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_isVirtual",
            "type": "Boolean",
            "class": "Ember.ArrayController",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 46241,
            "description": "Description",
            "itemtype": "method",
            "name": "controllerAt",
            "params": [
                {
                    "name": "idx",
                    "description": ""
                },
                {
                    "name": "object",
                    "description": ""
                },
                {
                    "name": "controllerClass",
                    "description": ""
                }
            ],
            "return": {
                "description": "subController"
            },
            "class": "Ember.ArrayController",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 46304,
            "description": "Description",
            "itemtype": "method",
            "name": "willDestroy",
            "return": {
                "description": ""
            },
            "class": "Ember.ArrayController",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 46416,
            "description": "Creates a clone of the passed object. This function can take just about\nany type of object and create a clone of it, including primitive values\n(which are not actually cloned because they are immutable).\nIf the passed object implements the `clone()` method, then this function\nwill simply call that method and return the result.",
            "params": [
                {
                    "name": "obj",
                    "description": "The object to clone",
                    "type": "Object"
                },
                {
                    "name": "deep",
                    "description": "If true, a deep copy of the object is made",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Ember",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 46443,
            "description": "Compares two objects, returning true if they are logically equal. This is\na deeper comparison than a simple triple equal. For sets it will compare the\ninternal objects. For any other object that implements `isEqual()` it will\nrespect that method.\n```javascript\nEmber.isEqual('hello', 'hello');  // true\nEmber.isEqual(1, 2);              // false\nEmber.isEqual([4, 2], [4, 2]);    // false\n```",
            "itemtype": "method",
            "name": "isEqual",
            "params": [
                {
                    "name": "a",
                    "description": "first object to compare",
                    "type": "Object"
                },
                {
                    "name": "b",
                    "description": "second object to compare",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "BinaryExpression"
            },
            "class": "Ember.Ember",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 46487,
            "description": "The `property` extension of Javascript's Function prototype is available\nwhen `Ember.EXTEND_PROTOTYPES` or `Ember.EXTEND_PROTOTYPES.Function` is\n`true`, which is the default.\nComputed properties allow you to treat a function like a property:\n```javascript\nMyApp.President = Ember.Object.extend({\nfirstName: '',\nlastName:  '',\nfullName: function() {\nreturn this.get('firstName') + ' ' + this.get('lastName');\n// Call this flag to mark the function as a property\n}.property()\n});\nvar president = MyApp.President.create({\nfirstName: \"Barack\",\nlastName: \"Obama\"\n});\npresident.get('fullName');    // \"Barack Obama\"\n```\nTreating a function like a property is useful because they can work with\nbindings, just like any other property.\nMany computed properties have dependencies on other properties. For\nexample, in the above example, the `fullName` property depends on\n`firstName` and `lastName` to determine its value. You can tell Ember\nabout these dependencies like this:\n```javascript\nMyApp.President = Ember.Object.extend({\nfirstName: '',\nlastName:  '',\nfullName: function() {\nreturn this.get('firstName') + ' ' + this.get('lastName');\n// Tell Ember.js that this computed property depends on firstName\n// and lastName\n}.property('firstName', 'lastName')\n});\n```\nMake sure you list these dependencies so Ember knows when to update\nbindings that connect to a computed property. Changing a dependency\nwill not immediately trigger an update of the computed property, but\nwill instead clear the cache so that it is updated when the next `get`\nis called on the property.\nSee [Ember.ComputedProperty](/api/classes/Ember.ComputedProperty.html), [Ember.computed](/api/#method_computed).",
            "itemtype": "method",
            "name": "property",
            "return": {
                "description": "CallExpression"
            },
            "class": "Function",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 46541,
            "description": "The `observes` extension of Javascript's Function prototype is available\nwhen `Ember.EXTEND_PROTOTYPES` or `Ember.EXTEND_PROTOTYPES.Function` is\ntrue, which is the default.\nYou can observe property changes simply by adding the `observes`\ncall to the end of your method declarations in classes that you write.\nFor example:\n```javascript\nEmber.Object.extend({\nvalueObserver: function() {\n// Executes whenever the \"value\" property changes\n}.observes('value')\n});\n```\nIn the future this method may become asynchronous. If you want to ensure\nsynchronous behavior, use `observesImmediately`.\nSee `Ember.observer`.",
            "itemtype": "method",
            "name": "observes",
            "return": {
                "description": "ThisExpression"
            },
            "class": "Function",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 46563,
            "description": "Description",
            "itemtype": "method",
            "name": "addWatchedProperty",
            "params": [
                {
                    "name": "obs",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Function",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 46581,
            "description": "The `observesImmediately` extension of Javascript's Function prototype is\navailable when `Ember.EXTEND_PROTOTYPES` or\n`Ember.EXTEND_PROTOTYPES.Function` is true, which is the default.\nYou can observe property changes simply by adding the `observesImmediately`\ncall to the end of your method declarations in classes that you write.\nFor example:\n```javascript\nEmber.Object.extend({\nvalueObserver: function() {\n// Executes immediately after the \"value\" property changes\n}.observesImmediately('value')\n});\n```\nIn the future, `observes` may become asynchronous. In this event,\n`observesImmediately` will maintain the synchronous behavior.\nSee `Ember.immediateObserver`.",
            "itemtype": "method",
            "name": "observesImmediately",
            "return": {
                "description": "CallExpression"
            },
            "class": "Function",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 46612,
            "description": "The `observesBefore` extension of Javascript's Function prototype is\navailable when `Ember.EXTEND_PROTOTYPES` or\n`Ember.EXTEND_PROTOTYPES.Function` is true, which is the default.\nYou can get notified when a property change is about to happen by\nby adding the `observesBefore` call to the end of your method\ndeclarations in classes that you write. For example:\n```javascript\nEmber.Object.extend({\nvalueObserver: function() {\n// Executes whenever the \"value\" property is about to change\n}.observesBefore('value')\n});\n```\nSee `Ember.beforeObserver`.",
            "itemtype": "method",
            "name": "observesBefore",
            "return": {
                "description": "ThisExpression"
            },
            "class": "Function",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 46632,
            "description": "Description",
            "itemtype": "method",
            "name": "addWatchedProperty",
            "params": [
                {
                    "name": "obs",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Function",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 46650,
            "description": "The `on` extension of Javascript's Function prototype is available\nwhen `Ember.EXTEND_PROTOTYPES` or `Ember.EXTEND_PROTOTYPES.Function` is\ntrue, which is the default.\nYou can listen for events simply by adding the `on` call to the end of\nyour method declarations in classes or mixins that you write. For example:\n```javascript\nEmber.Mixin.create({\ndoSomethingWithElement: function() {\n// Executes whenever the \"didInsertElement\" event fires\n}.on('didInsertElement')\n});\n```\nSee `Ember.on`.",
            "itemtype": "method",
            "name": "on",
            "return": {
                "description": "ThisExpression"
            },
            "class": "Function",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 46687,
            "description": "Description",
            "itemtype": "method",
            "name": "onerrorDefault",
            "params": [
                {
                    "name": "error",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Function",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 46744,
            "description": "See [Ember.String.fmt](/api/classes/Ember.String.html#method_fmt).",
            "itemtype": "method",
            "name": "fmt",
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.String",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 46754,
            "description": "See [Ember.String.w](/api/classes/Ember.String.html#method_w).",
            "itemtype": "method",
            "name": "w",
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.String",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 46764,
            "description": "See [Ember.String.loc](/api/classes/Ember.String.html#method_loc).",
            "itemtype": "method",
            "name": "loc",
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.String",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 46774,
            "description": "See [Ember.String.camelize](/api/classes/Ember.String.html#method_camelize).",
            "itemtype": "method",
            "name": "camelize",
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.String",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 46784,
            "description": "See [Ember.String.decamelize](/api/classes/Ember.String.html#method_decamelize).",
            "itemtype": "method",
            "name": "decamelize",
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.String",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 46794,
            "description": "See [Ember.String.dasherize](/api/classes/Ember.String.html#method_dasherize).",
            "itemtype": "method",
            "name": "dasherize",
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.String",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 46804,
            "description": "See [Ember.String.underscore](/api/classes/Ember.String.html#method_underscore).",
            "itemtype": "method",
            "name": "underscore",
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.String",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 46814,
            "description": "See [Ember.String.classify](/api/classes/Ember.String.html#method_classify).",
            "itemtype": "method",
            "name": "classify",
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.String",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 46824,
            "description": "See [Ember.String.capitalize](/api/classes/Ember.String.html#method_capitalize).",
            "itemtype": "method",
            "name": "capitalize",
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.String",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 46842,
            "description": "Returns all of the keys defined on an object or hash. This is useful\nwhen inspecting objects for debugging. On browsers that support it, this\nuses the native `Object.keys` implementation.",
            "itemtype": "method",
            "name": "keys",
            "params": [
                {
                    "name": "obj",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Array containing keys of obj",
                "type": "Array"
            },
            "class": "Ember.Ember",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 46854,
            "description": "Description",
            "itemtype": "method",
            "name": "pushPropertyName",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                },
                {
                    "name": "array",
                    "description": ""
                },
                {
                    "name": "key",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Ember",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 46882,
            "description": "Description",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                }
            ],
            "return": {
                "description": "ret"
            },
            "class": "Ember.Ember",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 46937,
            "description": "The collection of functions, keyed by name, available on this\n`ActionHandler` as action targets.\n\nThese functions will be invoked when a matching `{{action}}` is triggered\nfrom within a template and the application's current route is this route.\n\nActions can also be invoked from other parts of your application\nvia `ActionHandler#send`.\n\nThe `actions` hash will inherit action handlers from\nthe `actions` hash defined on extended parent classes\nor mixins rather than just replace the entire hash, e.g.:\n\n```js\nApp.CanDisplayBanner = Ember.Mixin.create({\n  actions: {\n    displayBanner: function(msg) {\n      // ...\n    }\n  }\n});\n\nApp.WelcomeRoute = Ember.Route.extend(App.CanDisplayBanner, {\n  actions: {\n    playMusic: function() {\n      // ...\n    }\n  }\n});\n\n// `WelcomeRoute`, when active, will be able to respond\n// to both actions, since the actions hash is merged rather\n// then replaced when extending mixins / parent classes.\nthis.send('displayBanner');\nthis.send('playMusic');\n```\n\nWithin a Controller, Route, View or Component's action handler,\nthe value of the `this` context is the Controller, Route, View or\nComponent object:\n\n```js\nApp.SongRoute = Ember.Route.extend({\n  actions: {\n    myAction: function() {\n      this.controllerFor(\"song\");\n      this.transitionTo(\"other.route\");\n      ...\n    }\n  }\n});\n```\n\nIt is also possible to call `this._super()` from within an\naction handler if it overrides a handler defined on a parent\nclass or mixin:\n\nTake for example the following routes:\n\n```js\nApp.DebugRoute = Ember.Mixin.create({\n  actions: {\n    debugRouteInformation: function() {\n      console.debug(\"trololo\");\n    }\n  }\n});\n\nApp.AnnoyingDebugRoute = Ember.Route.extend(App.DebugRoute, {\n  actions: {\n    debugRouteInformation: function() {\n      // also call the debugRouteInformation of mixed in App.DebugRoute\n      this._super();\n\n      // show additional annoyance\n      window.alert(...);\n    }\n  }\n});\n```\n\n## Bubbling\n\nBy default, an action will stop bubbling once a handler defined\non the `actions` hash handles it. To continue bubbling the action,\nyou must return `true` from the handler:\n\n```js\nApp.Router.map(function() {\n  this.resource(\"album\", function() {\n    this.route(\"song\");\n  });\n});\n\nApp.AlbumRoute = Ember.Route.extend({\n  actions: {\n    startPlaying: function() {\n    }\n  }\n});\n\nApp.AlbumSongRoute = Ember.Route.extend({\n  actions: {\n    startPlaying: function() {\n      // ...\n\n      if (actionShouldAlsoBeTriggeredOnParentRoute) {\n        return true;\n      }\n    }\n  }\n});\n```",
            "itemtype": "property",
            "name": "actions",
            "type": "Hash",
            "default": "null",
            "class": "Ember.ActionHandler",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 47057,
            "description": "Moves `actions` to `_actions` at extend time. Note that this currently\nmodifies the mixin themselves, which is technically dubious but\nis practically of little consequence. This may change in the future.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "willMergeMixin",
            "params": [
                {
                    "name": "props",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ActionHandler",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 47087,
            "description": "Triggers a named action on the `ActionHandler`. Any parameters\nsupplied after the `actionName` string will be passed as arguments\nto the action target function.\nIf the `ActionHandler` has its `target` property set, actions may\nbubble to the `target`. Bubbling happens when an `actionName` can\nnot be found in the `ActionHandler`'s `actions` hash or if the\naction target function returns `true`.\nExample\n```js\nApp.WelcomeRoute = Ember.Route.extend({\nactions: {\nplayTheme: function() {\nthis.send('playMusic', 'theme.mp3');\n},\nplayMusic: function(track) {\n// ...\n}\n}\n});\n```",
            "itemtype": "method",
            "name": "send",
            "params": [
                {
                    "name": "actionName",
                    "description": "The action to trigger",
                    "type": "String"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ActionHandler",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 47213,
            "description": "Your array must support the `length` property. Your replace methods should\nset this property whenever it changes.",
            "itemtype": "property",
            "name": "length",
            "type": "Number",
            "class": "Ember.Array",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 47221,
            "description": "Returns the object at the given `index`. If the given `index` is negative\nor is greater or equal than the array length, returns `undefined`.\nThis is one of the primitives you must implement to support `Ember.Array`.\nIf your object supports retrieving the value of an array item using `get()`\n(i.e. `myArray.get(0)`), then you do not need to implement this method\nyourself.\n```javascript\nvar arr = ['a', 'b', 'c', 'd'];\narr.objectAt(0);   // \"a\"\narr.objectAt(3);   // \"d\"\narr.objectAt(-1);  // undefined\narr.objectAt(4);   // undefined\narr.objectAt(5);   // undefined\n```",
            "itemtype": "method",
            "name": "objectAt",
            "params": [
                {
                    "name": "idx",
                    "description": "The index of the item to return.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Array",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 47245,
            "description": "This returns the objects at the specified indexes, using `objectAt`.\n```javascript\nvar arr = ['a', 'b', 'c', 'd'];\narr.objectsAt([0, 1, 2]);  // [\"a\", \"b\", \"c\"]\narr.objectsAt([2, 3, 4]);  // [\"c\", \"d\", undefined]\n```",
            "itemtype": "method",
            "name": "objectsAt",
            "params": [
                {
                    "name": "indexes",
                    "description": "An array of indexes of items to return.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Array",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 47262,
            "description": "Description",
            "itemtype": "method",
            "name": "nextObject",
            "params": [
                {
                    "name": "idx",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Array",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 47272,
            "description": "This is the handler for the special array content property. If you get\nthis property, it will return this. If you set this property to a new\narray, it will replace the current content.\n\nThis property overrides the default property defined in `Ember.Enumerable`.",
            "itemtype": "property",
            "name": "[]",
            "return": {
                "description": "this"
            },
            "class": "Ember.Array",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 47296,
            "description": "Description",
            "itemtype": "method",
            "name": "contains",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                }
            ],
            "return": {
                "description": "BinaryExpression"
            },
            "class": "Ember.Array",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 47307,
            "description": "Returns a new array that is a slice of the receiver. This implementation\nuses the observable array methods to retrieve the objects for the new\nslice.\n```javascript\nvar arr = ['red', 'green', 'blue'];\narr.slice(0);       // ['red', 'green', 'blue']\narr.slice(0, 2);    // ['red', 'green']\narr.slice(1, 100);  // ['green', 'blue']\n```",
            "itemtype": "method",
            "name": "slice",
            "params": [
                {
                    "name": "beginIndex",
                    "description": "(Optional) index to begin slicing from.",
                    "type": "Integer"
                },
                {
                    "name": "endIndex",
                    "description": "(Optional) index to end the slice at (but not included).",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "ret"
            },
            "class": "Ember.Array",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 47337,
            "description": "Returns the index of the given object's first occurrence.\nIf no `startAt` argument is given, the starting location to\nsearch is 0. If it's negative, will count backward from\nthe end of the array. Returns -1 if no match is found.\n```javascript\nvar arr = [\"a\", \"b\", \"c\", \"d\", \"a\"];\narr.indexOf(\"a\");       //  0\narr.indexOf(\"z\");       // -1\narr.indexOf(\"a\", 2);    //  4\narr.indexOf(\"a\", -1);   //  4\narr.indexOf(\"b\", 3);    // -1\narr.indexOf(\"a\", 100);  // -1\n```",
            "itemtype": "method",
            "name": "indexOf",
            "params": [
                {
                    "name": "object",
                    "description": "the item to search for",
                    "type": "Object"
                },
                {
                    "name": "startAt",
                    "description": "optional starting location to search, default 0",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "UnaryExpression"
            },
            "class": "Ember.Array",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 47368,
            "description": "Returns the index of the given object's last occurrence.\nIf no `startAt` argument is given, the search starts from\nthe last position. If it's negative, will count backward\nfrom the end of the array. Returns -1 if no match is found.\n```javascript\nvar arr = [\"a\", \"b\", \"c\", \"d\", \"a\"];\narr.lastIndexOf(\"a\");       //  4\narr.lastIndexOf(\"z\");       // -1\narr.lastIndexOf(\"a\", 2);    //  0\narr.lastIndexOf(\"a\", -1);   //  4\narr.lastIndexOf(\"b\", 3);    //  1\narr.lastIndexOf(\"a\", 100);  //  4\n```",
            "itemtype": "method",
            "name": "lastIndexOf",
            "params": [
                {
                    "name": "object",
                    "description": "the item to search for",
                    "type": "Object"
                },
                {
                    "name": "startAt",
                    "description": "optional starting location to search, default 0",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "UnaryExpression"
            },
            "class": "Ember.Array",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 47403,
            "description": "Adds an array observer to the receiving array. The array observer object\nnormally must implement two methods:\n`arrayWillChange(observedObj, start, removeCount, addCount)` - This method will be\ncalled just before the array is modified.\n`arrayDidChange(observedObj, start, removeCount, addCount)` - This method will be\ncalled just after the array is modified.\nBoth callbacks will be passed the observed object, starting index of the\nchange as well a a count of the items to be removed and added. You can use\nthese callbacks to optionally inspect the array during the change, clear\ncaches, or do any other bookkeeping necessary.\nIn addition to passing a target, you can also include an options hash\nwhich you can use to override the method names that will be invoked on the\ntarget.\n`willChange` and `didChange` option.",
            "itemtype": "method",
            "name": "addArrayObserver",
            "params": [
                {
                    "name": "target",
                    "description": "The observer object.",
                    "type": "Object"
                },
                {
                    "name": "opts",
                    "description": "Optional hash of configuration options including",
                    "type": "Hash"
                }
            ],
            "return": {
                "description": "ThisExpression"
            },
            "class": "Ember.Array",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 47435,
            "description": "Removes an array observer from the object if the observer is current\nregistered. Calling this method multiple times with the same object will\nhave no effect.\n`willChange` and `didChange` option.",
            "itemtype": "method",
            "name": "removeArrayObserver",
            "params": [
                {
                    "name": "target",
                    "description": "The object observing the array.",
                    "type": "Object"
                },
                {
                    "name": "opts",
                    "description": "Optional hash of configuration options including",
                    "type": "Hash"
                }
            ],
            "return": {
                "description": "ThisExpression"
            },
            "class": "Ember.Array",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 47457,
            "description": "Becomes true whenever the array currently has observers watching changes\non the array.",
            "itemtype": "property",
            "name": "hasArrayObservers",
            "type": "Boolean",
            "class": "Ember.Array",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 47467,
            "description": "If you are implementing an object that supports `Ember.Array`, call this\nmethod just before the array content changes to notify any observers and\ninvalidate any related properties. Pass the starting index of the change\nas well as a delta of the amounts to change.\npass `null` assumes 0\npass `null` assumes 0.",
            "itemtype": "method",
            "name": "arrayContentWillChange",
            "params": [
                {
                    "name": "startIdx",
                    "description": "The starting index in the array that will change.",
                    "type": "Number"
                },
                {
                    "name": "removeAmt",
                    "description": "The number of items that will be removed. If you",
                    "type": "Number"
                },
                {
                    "name": "addAmt",
                    "description": "The number of items that will be added. If you",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "ThisExpression"
            },
            "class": "Ember.Array",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 47510,
            "description": "If you are implementing an object that supports `Ember.Array`, call this\nmethod just after the array content changes to notify any observers and\ninvalidate any related properties. Pass the starting index of the change\nas well as a delta of the amounts to change.\npass `null` assumes 0\npass `null` assumes 0.",
            "itemtype": "method",
            "name": "arrayContentDidChange",
            "params": [
                {
                    "name": "startIdx",
                    "description": "The starting index in the array that did change.",
                    "type": "Number"
                },
                {
                    "name": "removeAmt",
                    "description": "The number of items that were removed. If you",
                    "type": "Number"
                },
                {
                    "name": "addAmt",
                    "description": "The number of items that were added. If you",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "ThisExpression"
            },
            "class": "Ember.Array",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 47565,
            "description": "Returns a special object that can be used to observe individual properties\non the array. Just get an equivalent property on this object and it will\nreturn an enumerable that maps automatically to the named key on the\nmember objects.\n\nIf you merely want to watch for any items being added or removed to the array,\nuse the `[]` property instead of `@each`.",
            "itemtype": "property",
            "name": "@each",
            "class": "Ember.Array",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 47612,
            "description": "Override to return the result of the comparison of the two parameters. The\ncompare method should return:\n\n- `-1` if `a < b`\n- `0` if `a == b`\n- `1` if `a > b`\n\nDefault implementation raises an exception.",
            "itemtype": "method",
            "name": "compare",
            "params": [
                {
                    "name": "a",
                    "description": "the first object to compare",
                    "type": "Object"
                },
                {
                    "name": "b",
                    "description": "the second object to compare",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the result of the comparison",
                "type": "Integer"
            },
            "class": "Ember.Comparable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 47656,
            "description": "The object to which actions from the view should be sent.\n\nFor example, when a Handlebars template uses the `{{action}}` helper,\nit will attempt to send the action to the view's controller's `target`.\n\nBy default, the value of the target property is set to the router, and\nis injected when a controller is instantiated. This injection is defined\nin Ember.Application#buildContainer, and is applied as part of the\napplications initialization process. It can also be set after a controller\nhas been instantiated, for instance when using the render helper in a\ntemplate, or when a controller is used as an `itemController`. In most\ncases the `target` property will automatically be set to the logical\nconsumer of actions for the controller.",
            "itemtype": "property",
            "name": "target",
            "default": "null",
            "class": "Ember.ControllerMixin",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 47682,
            "description": "The controller's current model. When retrieving or modifying a controller's\nmodel, this property should be used instead of the `content` property.",
            "itemtype": "property",
            "name": "model",
            "access": "public",
            "tagname": "",
            "class": "Ember.ControllerMixin",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 47691,
            "access": "private",
            "tagname": "",
            "class": "Ember.ControllerMixin",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 47696,
            "description": "Description",
            "itemtype": "method",
            "name": "deprecatedSendHandles",
            "params": [
                {
                    "name": "actionName",
                    "description": ""
                }
            ],
            "return": {
                "description": "UnaryExpression"
            },
            "class": "Ember.ControllerMixin",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 47706,
            "description": "Description",
            "itemtype": "method",
            "name": "deprecatedSend",
            "params": [
                {
                    "name": "actionName",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerMixin",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 47752,
            "access": "private",
            "tagname": "Moves `content` to `model`  at extend time if a `model` is not also specified.\nNote that this currently modifies the mixin themselves, which is technically\ndubious but is practically of little consequence. This may change in the\nfuture.",
            "since": "1.4.0",
            "itemtype": "method",
            "name": "willMergeMixin",
            "params": [
                {
                    "name": "props",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ControllerContentModelAliasDeprecation",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 47814,
            "description": "Override to return a copy of the receiver. Default implementation raises\nan exception.",
            "itemtype": "method",
            "name": "copy",
            "params": [
                {
                    "name": "deep",
                    "description": "if `true`, a deep copy of the object should be made",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "copy of receiver",
                "type": "Object"
            },
            "class": "Ember.Copyable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 47824,
            "description": "If the object implements `Ember.Freezable`, then this will return a new\ncopy if the object is not frozen and the receiver if the object is frozen.\nRaises an exception if you try to call this method on a object that does\nnot support freezing.\nYou should use this method whenever you want a copy of a freezable object\nsince a freezable object can simply return itself without actually\nconsuming more memory.",
            "itemtype": "method",
            "name": "frozenCopy",
            "return": {
                "description": ""
            },
            "class": "Ember.Copyable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 47856,
            "description": "Description",
            "itemtype": "method",
            "name": "asyncStart",
            "return": {
                "description": ""
            },
            "class": "Ember.Copyable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 47867,
            "description": "Description",
            "itemtype": "method",
            "name": "asyncEnd",
            "return": {
                "description": ""
            },
            "class": "Ember.Copyable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 47889,
            "description": "Description",
            "itemtype": "method",
            "name": "fail",
            "params": [
                {
                    "name": "callback",
                    "description": ""
                },
                {
                    "name": "label",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Copyable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 47912,
            "description": "Add handlers to be called when the Deferred object is resolved or rejected.",
            "itemtype": "method",
            "name": "then",
            "params": [
                {
                    "name": "resolve",
                    "description": "a callback function to be called when done",
                    "type": "Function"
                },
                {
                    "name": "reject",
                    "description": "a callback function to be called when failed",
                    "type": "Function"
                },
                {
                    "name": "label",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Deferred",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 47927,
            "description": "Description",
            "itemtype": "method",
            "name": "fulfillmentHandler",
            "params": [
                {
                    "name": "fulfillment",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Deferred",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 47944,
            "description": "Resolve a Deferred object and call any `doneCallbacks` with the given args.",
            "itemtype": "method",
            "name": "resolve",
            "params": [
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Deferred",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 47963,
            "description": "Reject a Deferred object and call any `failCallbacks` with the given args.",
            "itemtype": "method",
            "name": "reject",
            "params": [
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Deferred",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 48014,
            "description": "Description",
            "itemtype": "method",
            "name": "popCtx",
            "return": {
                "description": "ConditionalExpression"
            },
            "class": "Ember.Deferred",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 48023,
            "description": "Description",
            "itemtype": "method",
            "name": "pushCtx",
            "params": [
                {
                    "name": "ctx",
                    "description": ""
                }
            ],
            "return": {
                "description": "Literal"
            },
            "class": "Ember.Deferred",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 48034,
            "description": "Description",
            "itemtype": "method",
            "name": "iter",
            "params": [
                {
                    "name": "key",
                    "description": ""
                },
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": "i"
            },
            "class": "Ember.Deferred",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 48044,
            "description": "Description",
            "itemtype": "method",
            "name": "i",
            "params": [
                {
                    "name": "item",
                    "description": ""
                }
            ],
            "return": {
                "description": "ConditionalExpression"
            },
            "class": "Ember.Deferred",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 48097,
            "description": "Implement this method to make your class enumerable.\n\nThis method will be call repeatedly during enumeration. The index value\nwill always begin with 0 and increment monotonically. You don't have to\nrely on the index value to determine what object to return, but you should\nalways check the value and start from the beginning when you see the\nrequested index is 0.\n\nThe `previousObject` is the object that was returned from the last call\nto `nextObject` for the current iteration. This is a useful way to\nmanage iteration if you are tracing a linked list, for example.\n\nFinally the context parameter will always contain a hash you can use as\na \"scratchpad\" to maintain any other state you need in order to iterate\nproperly. The context object is reused and is not reset between\niterations so make sure you setup the context with a fresh state whenever\nthe index parameter is 0.\n\nGenerally iterators will continue to call `nextObject` until the index\nreaches the your current length-1. If you run out of data before this\ntime for some reason, you should simply return undefined.\n\nThe default implementation of this method simply looks up the index.\nThis works great on any Array-like objects.",
            "itemtype": "method",
            "name": "nextObject",
            "params": [
                {
                    "name": "index",
                    "description": "the current index of the iteration",
                    "type": "Number"
                },
                {
                    "name": "previousObject",
                    "description": "the value returned by the last call to\n  `nextObject`.",
                    "type": "Object"
                },
                {
                    "name": "context",
                    "description": "a context object you can use to maintain state.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the next object in the iteration or undefined",
                "type": "Object"
            },
            "class": "Ember.Enumerable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 48132,
            "description": "Helper method returns the first object from a collection. This is usually\nused by bindings and other parts of the framework to extract a single\nobject if the enumerable contains only one item.\n\nIf you override this method, you should implement it so that it will\nalways return the same value each time it is called. If your enumerable\ncontains only one object, this method should always return that object.\nIf your enumerable is empty, this method should return `undefined`.\n\n```javascript\nvar arr = [\"a\", \"b\", \"c\"];\narr.get('firstObject');  // \"a\"\n\nvar arr = [];\narr.get('firstObject');  // undefined\n```",
            "itemtype": "property",
            "name": "firstObject",
            "return": {
                "description": "the object or undefined",
                "type": "Object"
            },
            "class": "Ember.Enumerable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 48163,
            "description": "Helper method returns the last object from a collection. If your enumerable\ncontains only one object, this method should always return that object.\nIf your enumerable is empty, this method should return `undefined`.\n\n```javascript\nvar arr = [\"a\", \"b\", \"c\"];\narr.get('lastObject');  // \"c\"\n\nvar arr = [];\narr.get('lastObject');  // undefined\n```",
            "itemtype": "property",
            "name": "lastObject",
            "return": {
                "description": "the last object or undefined",
                "type": "Object"
            },
            "class": "Ember.Enumerable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 48191,
            "description": "Returns `true` if the passed object can be found in the receiver. The\ndefault version will iterate through the enumerable until the object\nis found. You may want to override this with a more efficient version.\n```javascript\nvar arr = [\"a\", \"b\", \"c\"];\narr.contains(\"a\"); // true\narr.contains(\"z\"); // false\n```",
            "itemtype": "method",
            "name": "contains",
            "params": [
                {
                    "name": "obj",
                    "description": "The object to search for.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "BinaryExpression"
            },
            "class": "Ember.Enumerable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 48208,
            "description": "Iterates through the enumerable, calling the passed function on each\nitem. This method corresponds to the `forEach()` method defined in\nJavaScript 1.6.\nThe callback method you provide should have the following signature (all\nparameters are optional):\n```javascript\nfunction(item, index, enumerable);\n```\n- `item` is the current item in the iteration.\n- `index` is the current index in the iteration.\n- `enumerable` is the enumerable object itself.\nNote that in addition to a callback, you can also pass an optional target\nobject that will be set as `this` on the context. This is a good way\nto give your iterator function access to the current object.",
            "itemtype": "method",
            "name": "forEach",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to execute",
                    "type": "Function"
                },
                {
                    "name": "target",
                    "description": ""
                }
            ],
            "return": {
                "description": "ThisExpression"
            },
            "class": "Ember.Enumerable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 48244,
            "description": "Alias for `mapBy`",
            "itemtype": "method",
            "name": "getEach",
            "params": [
                {
                    "name": "key",
                    "description": "name of the property",
                    "type": "String"
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Enumerable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 48254,
            "description": "Sets the value on the named property for each member. This is more\nefficient than using other methods defined on this helper. If the object\nimplements Ember.Observable, the value will be changed to `set(),` otherwise\nit will be set directly. `null` objects are skipped.",
            "itemtype": "method",
            "name": "setEach",
            "params": [
                {
                    "name": "key",
                    "description": "The key to set",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The object to set",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Enumerable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 48270,
            "description": "Maps all of the items in the enumeration to another value, returning\na new array. This method corresponds to `map()` defined in JavaScript 1.6.\nThe callback method you provide should have the following signature (all\nparameters are optional):\n```javascript\nfunction(item, index, enumerable);\n```\n- `item` is the current item in the iteration.\n- `index` is the current index in the iteration.\n- `enumerable` is the enumerable object itself.\nIt should return the mapped value.\nNote that in addition to a callback, you can also pass an optional target\nobject that will be set as `this` on the context. This is a good way\nto give your iterator function access to the current object.",
            "itemtype": "method",
            "name": "map",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to execute",
                    "type": "Function"
                },
                {
                    "name": "target",
                    "description": ""
                }
            ],
            "return": {
                "description": "ret"
            },
            "class": "Ember.Enumerable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 48298,
            "description": "Similar to map, this specialized function returns the value of the named\nproperty on all items in the enumeration.",
            "itemtype": "method",
            "name": "mapBy",
            "params": [
                {
                    "name": "key",
                    "description": "name of the property",
                    "type": "String"
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Enumerable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 48311,
            "description": "Similar to map, this specialized function returns the value of the named\nproperty on all items in the enumeration.",
            "itemtype": "method",
            "name": "mapProperty",
            "params": [
                {
                    "name": "key",
                    "description": "name of the property",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The mapped array.",
                "type": "Array"
            },
            "deprecated": true,
            "deprecationMessage": "Use `mapBy` instead",
            "class": "Ember.Enumerable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 48323,
            "description": "Returns an array with all of the items in the enumeration that the passed\nfunction returns true for. This method corresponds to `filter()` defined in\nJavaScript 1.6.\nThe callback method you provide should have the following signature (all\nparameters are optional):\n```javascript\nfunction(item, index, enumerable);\n```\n- `item` is the current item in the iteration.\n- `index` is the current index in the iteration.\n- `enumerable` is the enumerable object itself.\nIt should return the `true` to include the item in the results, `false`\notherwise.\nNote that in addition to a callback, you can also pass an optional target\nobject that will be set as `this` on the context. This is a good way\nto give your iterator function access to the current object.",
            "itemtype": "method",
            "name": "filter",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to execute",
                    "type": "Function"
                },
                {
                    "name": "target",
                    "description": ""
                }
            ],
            "return": {
                "description": "ret"
            },
            "class": "Ember.Enumerable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 48353,
            "description": "Returns an array with all of the items in the enumeration where the passed\nfunction returns false for. This method is the inverse of filter().\nThe callback method you provide should have the following signature (all\nparameters are optional):\n```javascript\nfunction(item, index, enumerable);\n```\n- *item* is the current item in the iteration.\n- *index* is the current index in the iteration\n- *enumerable* is the enumerable object itself.\nIt should return the a falsey value to include the item in the results.\nNote that in addition to a callback, you can also pass an optional target\nobject that will be set as \"this\" on the context. This is a good way\nto give your iterator function access to the current object.",
            "itemtype": "method",
            "name": "reject",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to execute",
                    "type": "Function"
                },
                {
                    "name": "target",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Enumerable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 48379,
            "description": "Returns an array with just the items with the matched property. You\ncan pass an optional second argument with the target value. Otherwise\nthis will match any property that evaluates to `true`.",
            "itemtype": "method",
            "name": "filterBy",
            "params": [
                {
                    "name": "key",
                    "description": "the property to test",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Enumerable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 48392,
            "description": "Returns an array with just the items with the matched property. You\ncan pass an optional second argument with the target value. Otherwise\nthis will match any property that evaluates to `true`.",
            "itemtype": "method",
            "name": "filterProperty",
            "params": [
                {
                    "name": "key",
                    "description": "the property to test",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "optional value to test against.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "filtered array",
                "type": "Array"
            },
            "deprecated": true,
            "deprecationMessage": "Use `filterBy` instead",
            "class": "Ember.Enumerable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 48405,
            "description": "Returns an array with the items that do not have truthy values for\nkey.  You can pass an optional second argument with the target value.  Otherwise\nthis will match any property that evaluates to false.",
            "itemtype": "method",
            "name": "rejectBy",
            "params": [
                {
                    "name": "key",
                    "description": "the property to test",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Enumerable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 48415,
            "description": "Description",
            "itemtype": "method",
            "name": "hasValue",
            "params": [
                {
                    "name": "item",
                    "description": ""
                }
            ],
            "return": {
                "description": "UnaryExpression"
            },
            "class": "Ember.Enumerable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 48428,
            "description": "Returns an array with the items that do not have truthy values for\nkey.  You can pass an optional second argument with the target value.  Otherwise\nthis will match any property that evaluates to false.",
            "itemtype": "method",
            "name": "rejectProperty",
            "params": [
                {
                    "name": "key",
                    "description": "the property to test",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "optional value to test against.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "rejected array",
                "type": "Array"
            },
            "deprecated": true,
            "deprecationMessage": "Use `rejectBy` instead",
            "class": "Ember.Enumerable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 48441,
            "description": "Returns the first item in the array for which the callback returns true.\nThis method works similar to the `filter()` method defined in JavaScript 1.6\nexcept that it will stop working on the array once a match is found.\nThe callback method you provide should have the following signature (all\nparameters are optional):\n```javascript\nfunction(item, index, enumerable);\n```\n- `item` is the current item in the iteration.\n- `index` is the current index in the iteration.\n- `enumerable` is the enumerable object itself.\nIt should return the `true` to include the item in the results, `false`\notherwise.\nNote that in addition to a callback, you can also pass an optional target\nobject that will be set as `this` on the context. This is a good way\nto give your iterator function access to the current object.",
            "itemtype": "method",
            "name": "find",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to execute",
                    "type": "Function"
                },
                {
                    "name": "target",
                    "description": ""
                }
            ],
            "return": {
                "description": "ret"
            },
            "class": "Ember.Enumerable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 48479,
            "description": "Returns the first item with a property matching the passed value. You\ncan pass an optional second argument with the target value. Otherwise\nthis will match any property that evaluates to `true`.\nThis method works much like the more generic `find()` method.",
            "itemtype": "method",
            "name": "findBy",
            "params": [
                {
                    "name": "key",
                    "description": "the property to test",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Enumerable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 48493,
            "description": "Returns the first item with a property matching the passed value. You\ncan pass an optional second argument with the target value. Otherwise\nthis will match any property that evaluates to `true`.\n\nThis method works much like the more generic `find()` method.",
            "itemtype": "method",
            "name": "findProperty",
            "params": [
                {
                    "name": "key",
                    "description": "the property to test",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "optional value to test against.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "found item or `undefined`",
                "type": "Object"
            },
            "deprecated": true,
            "deprecationMessage": "Use `findBy` instead",
            "class": "Ember.Enumerable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 48508,
            "description": "Returns `true` if the passed function returns true for every item in the\nenumeration. This corresponds with the `every()` method in JavaScript 1.6.\nThe callback method you provide should have the following signature (all\nparameters are optional):\n```javascript\nfunction(item, index, enumerable);\n```\n- `item` is the current item in the iteration.\n- `index` is the current index in the iteration.\n- `enumerable` is the enumerable object itself.\nIt should return the `true` or `false`.\nNote that in addition to a callback, you can also pass an optional target\nobject that will be set as `this` on the context. This is a good way\nto give your iterator function access to the current object.\nExample Usage:\n```javascript\nif (people.every(isEngineer)) { Paychecks.addBigBonus(); }\n```",
            "itemtype": "method",
            "name": "every",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to execute",
                    "type": "Function"
                },
                {
                    "name": "target",
                    "description": ""
                }
            ],
            "return": {
                "description": "UnaryExpression"
            },
            "class": "Ember.Enumerable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 48538,
            "itemtype": "method",
            "name": "everyBy",
            "params": [
                {
                    "name": "key",
                    "description": "the property to test",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "optional value to test against.",
                    "type": "String",
                    "optional": true
                }
            ],
            "deprecated": true,
            "deprecationMessage": "Use `isEvery` instead",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Ember.Enumerable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 48547,
            "itemtype": "method",
            "name": "everyProperty",
            "params": [
                {
                    "name": "key",
                    "description": "the property to test",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "optional value to test against.",
                    "type": "String",
                    "optional": true
                }
            ],
            "deprecated": true,
            "deprecationMessage": "Use `isEvery` instead",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Ember.Enumerable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 48556,
            "description": "Returns `true` if the passed property resolves to `true` for all items in\nthe enumerable. This method is often simpler/faster than using a callback.",
            "since": "1.3.0",
            "itemtype": "method",
            "name": "isEvery",
            "params": [
                {
                    "name": "key",
                    "description": "the property to test",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Enumerable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 48569,
            "description": "Returns `true` if the passed function returns true for any item in the\nenumeration. This corresponds with the `some()` method in JavaScript 1.6.\nThe callback method you provide should have the following signature (all\nparameters are optional):\n```javascript\nfunction(item, index, enumerable);\n```\n- `item` is the current item in the iteration.\n- `index` is the current index in the iteration.\n- `enumerable` is the enumerable object itself.\nIt should return the `true` to include the item in the results, `false`\notherwise.\nNote that in addition to a callback, you can also pass an optional target\nobject that will be set as `this` on the context. This is a good way\nto give your iterator function access to the current object.\nUsage Example:\n```javascript\nif (people.any(isManager)) { Paychecks.addBiggerBonus(); }\n```",
            "itemtype": "method",
            "name": "any",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to execute",
                    "type": "Function"
                },
                {
                    "name": "target",
                    "description": ""
                }
            ],
            "return": {
                "description": "found"
            },
            "class": "Ember.Enumerable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 48614,
            "description": "Returns `true` if the passed function returns true for any item in the\nenumeration. This corresponds with the `some()` method in JavaScript 1.6.\n\nThe callback method you provide should have the following signature (all\nparameters are optional):\n\n```javascript\nfunction(item, index, enumerable);\n```\n\n- `item` is the current item in the iteration.\n- `index` is the current index in the iteration.\n- `enumerable` is the enumerable object itself.\n\nIt should return the `true` to include the item in the results, `false`\notherwise.\n\nNote that in addition to a callback, you can also pass an optional target\nobject that will be set as `this` on the context. This is a good way\nto give your iterator function access to the current object.\n\nUsage Example:\n\n```javascript\nif (people.some(isManager)) { Paychecks.addBiggerBonus(); }\n```",
            "itemtype": "method",
            "name": "some",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to execute",
                    "type": "Function"
                },
                {
                    "name": "target",
                    "description": "The target object to use",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "`true` if the passed function returns `true` for any item",
                "type": "Boolean"
            },
            "deprecated": true,
            "deprecationMessage": "Use `any` instead",
            "class": "Ember.Enumerable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 48650,
            "description": "Returns `true` if the passed property resolves to `true` for any item in\nthe enumerable. This method is often simpler/faster than using a callback.",
            "since": "1.3.0",
            "itemtype": "method",
            "name": "isAny",
            "params": [
                {
                    "name": "key",
                    "description": "the property to test",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Enumerable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 48663,
            "itemtype": "method",
            "name": "anyBy",
            "params": [
                {
                    "name": "key",
                    "description": "the property to test",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "optional value to test against.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "`true` if the passed function returns `true` for any item",
                "type": "Boolean"
            },
            "deprecated": true,
            "deprecationMessage": "Use `isAny` instead",
            "class": "Ember.Enumerable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 48672,
            "itemtype": "method",
            "name": "someProperty",
            "params": [
                {
                    "name": "key",
                    "description": "the property to test",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "optional value to test against.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "`true` if the passed function returns `true` for any item",
                "type": "Boolean"
            },
            "deprecated": true,
            "deprecationMessage": "Use `isAny` instead",
            "class": "Ember.Enumerable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 48681,
            "description": "This will combine the values of the enumerator into a single value. It\nis a useful way to collect a summary value from an enumeration. This\ncorresponds to the `reduce()` method defined in JavaScript 1.8.\nThe callback method you provide should have the following signature (all\nparameters are optional):\n```javascript\nfunction(previousValue, item, index, enumerable);\n```\n- `previousValue` is the value returned by the last call to the iterator.\n- `item` is the current item in the iteration.\n- `index` is the current index in the iteration.\n- `enumerable` is the enumerable object itself.\nReturn the new cumulative value.\nIn addition to the callback you can also pass an `initialValue`. An error\nwill be raised if you do not pass an initial value and the enumerator is\nempty.\nNote that unlike the other methods, this method does not allow you to\npass a target object to set as this for the callback. It's part of the\nspec. Sorry.",
            "itemtype": "method",
            "name": "reduce",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to execute",
                    "type": "Function"
                },
                {
                    "name": "initialValue",
                    "description": "Initial value for the reduce",
                    "type": "Object"
                },
                {
                    "name": "reducerProperty",
                    "description": "internal use only.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "ret"
            },
            "class": "Ember.Enumerable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 48719,
            "description": "Invokes the named method on every object in the receiver that\nimplements it. This method corresponds to the implementation in\nPrototype 1.6.",
            "itemtype": "method",
            "name": "invoke",
            "params": [
                {
                    "name": "methodName",
                    "description": "the name of the method",
                    "type": "String"
                }
            ],
            "return": {
                "description": "ret"
            },
            "class": "Ember.Enumerable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 48741,
            "description": "Simply converts the enumerable into a genuine array. The order is not\nguaranteed. Corresponds to the method implemented by Prototype.",
            "itemtype": "method",
            "name": "toArray",
            "return": {
                "description": "ret"
            },
            "class": "Ember.Enumerable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 48753,
            "description": "Returns a copy of the array with all null and undefined elements removed.\n```javascript\nvar arr = [\"a\", null, \"c\", undefined];\narr.compact();  // [\"a\", \"c\"]\n```",
            "itemtype": "method",
            "name": "compact",
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Enumerable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 48766,
            "description": "Returns a new enumerable that excludes the passed value. The default\nimplementation returns an array regardless of the receiver type unless\nthe receiver does not contain the value.\n```javascript\nvar arr = [\"a\", \"b\", \"a\", \"c\"];\narr.without(\"a\");  // [\"b\", \"c\"]\n```",
            "itemtype": "method",
            "name": "without",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "ret"
            },
            "class": "Ember.Enumerable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 48787,
            "description": "Returns a new enumerable that contains only unique values. The default\nimplementation returns an array regardless of the receiver type.\n```javascript\nvar arr = [\"a\", \"a\", \"b\", \"b\"];\narr.uniq();  // [\"a\", \"b\"]\n```",
            "itemtype": "method",
            "name": "uniq",
            "return": {
                "description": "ret"
            },
            "class": "Ember.Enumerable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 48805,
            "description": "This property will trigger anytime the enumerable's content changes.\nYou can observe this property to be notified of changes to the enumerables\ncontent.\n\nFor plain enumerables, this property is read only. `Array` overrides\nthis method.",
            "itemtype": "property",
            "name": "[]",
            "type": "Array",
            "return": {
                "description": "this"
            },
            "class": "Ember.Enumerable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 48825,
            "description": "Registers an enumerable observer. Must implement `Ember.EnumerableObserver`\nmixin.",
            "itemtype": "method",
            "name": "addEnumerableObserver",
            "params": [
                {
                    "name": "target",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "opts",
                    "description": ""
                }
            ],
            "return": {
                "description": "ThisExpression"
            },
            "class": "Ember.Enumerable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 48845,
            "description": "Removes a registered enumerable observer.",
            "itemtype": "method",
            "name": "removeEnumerableObserver",
            "params": [
                {
                    "name": "target",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "opts",
                    "description": ""
                }
            ],
            "return": {
                "description": "ThisExpression"
            },
            "class": "Ember.Enumerable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 48864,
            "description": "Becomes true whenever the array currently has observers watching changes\non the array.",
            "itemtype": "property",
            "name": "hasEnumerableObservers",
            "type": "Boolean",
            "class": "Ember.Enumerable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 48876,
            "description": "Invoke this method just before the contents of your enumerable will\nchange. You can either omit the parameters completely or pass the objects\nto be removed or added if available or just a count.\nbe removed or the number of items to be removed.\nadded or the number of items to be added.",
            "chainable": 1,
            "itemtype": "method",
            "name": "enumerableContentWillChange",
            "params": [
                {
                    "name": "removing",
                    "description": ""
                },
                {
                    "name": "adding",
                    "description": ""
                }
            ],
            "return": {
                "description": "ThisExpression"
            },
            "class": "Ember.Enumerable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 48912,
            "description": "Invoke this method when the contents of your enumerable has changed.\nThis will notify any observers watching for content changes. If you are\nimplementing an ordered enumerable (such as an array), also pass the\nstart and end values where the content changed so that it can be used to\nnotify range observers.\nbe removed or the number of items to be removed.\nbe added or the number of items to be added.",
            "chainable": 1,
            "itemtype": "method",
            "name": "enumerableContentDidChange",
            "params": [
                {
                    "name": "removing",
                    "description": ""
                },
                {
                    "name": "adding",
                    "description": ""
                }
            ],
            "return": {
                "description": "ThisExpression"
            },
            "class": "Ember.Enumerable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 48949,
            "description": "Converts the enumerable into an array and sorts by the keys\nspecified in the argument.\nYou may provide multiple arguments to sort by multiple properties.",
            "since": "1.2.0",
            "itemtype": "method",
            "name": "sortBy",
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Enumerable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 49025,
            "description": "Subscribes to a named event with given function.\n```javascript\nperson.on('didLoad', function() {\n// fired once the person has loaded\n});\n```\nAn optional target can be passed in as the 2nd argument that will\nbe set as the \"this\" for the callback. This is a good way to give your\nfunction access to the object triggering the event. When the target\nparameter is used the callback becomes the third argument.",
            "itemtype": "method",
            "name": "on",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the event",
                    "type": "String"
                },
                {
                    "name": "target",
                    "description": ""
                },
                {
                    "name": "method",
                    "description": "The callback to execute",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "ThisExpression"
            },
            "class": "Ember.Evented",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 49047,
            "description": "Subscribes a function to a named event and then cancels the subscription\nafter the first time the event is triggered. It is good to use ``one`` when\nyou only care about the first time an event has taken place.\nThis function takes an optional 2nd argument that will become the \"this\"\nvalue for the callback. If this argument is passed then the 3rd argument\nbecomes the function.",
            "itemtype": "method",
            "name": "one",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the event",
                    "type": "String"
                },
                {
                    "name": "target",
                    "description": ""
                },
                {
                    "name": "method",
                    "description": "The callback to execute",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "ThisExpression"
            },
            "class": "Ember.Evented",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 49070,
            "description": "Triggers a named event for the object. Any additional arguments\nwill be passed as parameters to the functions that are subscribed to the\nevent.\n```javascript\nperson.on('didEat', function(food) {\nconsole.log('person ate some ' + food);\n});\nperson.trigger('didEat', 'broccoli');\n// outputs: person ate some broccoli\n```",
            "itemtype": "method",
            "name": "trigger",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the event",
                    "type": "String"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Evented",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 49096,
            "description": "Cancels subscription for given name, target, and method.",
            "itemtype": "method",
            "name": "off",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the event",
                    "type": "String"
                },
                {
                    "name": "target",
                    "description": "The target of the subscription",
                    "type": "Object"
                },
                {
                    "name": "method",
                    "description": "The function of the subscription",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "ThisExpression"
            },
            "class": "Ember.Evented",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 49109,
            "description": "Checks to see if object has any subscriptions for named event.",
            "itemtype": "method",
            "name": "has",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the event",
                    "type": "String"
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Evented",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 49191,
            "description": "Set to `true` when the object is frozen. Use this property to detect\nwhether your object is frozen or not.",
            "itemtype": "property",
            "name": "isFrozen",
            "type": "Boolean",
            "class": "Ember.Freezable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 49200,
            "description": "Freezes the object. Once this method has been called the object should\nno longer allow any properties to be edited.",
            "itemtype": "method",
            "name": "freeze",
            "return": {
                "description": "ThisExpression"
            },
            "class": "Ember.Freezable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 49272,
            "description": "__Required.__ You must implement this method to apply this mixin.\n\nThis is one of the primitives you must implement to support `Ember.Array`.\nYou should replace amt objects started at idx with the objects in the\npassed array. You should also call `this.enumerableContentDidChange()`",
            "itemtype": "method",
            "name": "replace",
            "params": [
                {
                    "name": "idx",
                    "description": "Starting index in the array to replace. If\n  idx >= length, then append to the end of the array.",
                    "type": "Number"
                },
                {
                    "name": "amt",
                    "description": "Number of elements that should be removed from\n  the array, starting at *idx*.",
                    "type": "Number"
                },
                {
                    "name": "objects",
                    "description": "An array of zero or more objects that should be\n  inserted into the array at *idx*",
                    "type": "Array"
                }
            ],
            "class": "Ember.MutableArray",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 49289,
            "description": "Remove all elements from the array. This is useful if you\nwant to reuse an existing array without having to recreate it.\n```javascript\nvar colors = [\"red\", \"green\", \"blue\"];\ncolor.length();   //  3\ncolors.clear();   //  []\ncolors.length();  //  0\n```",
            "itemtype": "method",
            "name": "clear",
            "return": {
                "description": "ThisExpression"
            },
            "class": "Ember.MutableArray",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 49308,
            "description": "This will use the primitive `replace()` method to insert an object at the\nspecified index.\n```javascript\nvar colors = [\"red\", \"green\", \"blue\"];\ncolors.insertAt(2, \"yellow\");  // [\"red\", \"green\", \"yellow\", \"blue\"]\ncolors.insertAt(5, \"orange\");  // Error: Index out of range\n```",
            "itemtype": "method",
            "name": "insertAt",
            "params": [
                {
                    "name": "idx",
                    "description": "index of insert the object at.",
                    "type": "Number"
                },
                {
                    "name": "object",
                    "description": "object to insert",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "ThisExpression"
            },
            "class": "Ember.MutableArray",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 49327,
            "description": "Remove an object at the specified index using the `replace()` primitive\nmethod. You can pass either a single index, or a start and a length.\nIf you pass a start and length that is beyond the\nlength this method will throw an `OUT_OF_RANGE_EXCEPTION`.\n```javascript\nvar colors = [\"red\", \"green\", \"blue\", \"yellow\", \"orange\"];\ncolors.removeAt(0);     // [\"green\", \"blue\", \"yellow\", \"orange\"]\ncolors.removeAt(2, 2);  // [\"green\", \"blue\"]\ncolors.removeAt(4, 2);  // Error: Index out of range\n```",
            "itemtype": "method",
            "name": "removeAt",
            "params": [
                {
                    "name": "start",
                    "description": "index, start of range",
                    "type": "Number"
                },
                {
                    "name": "len",
                    "description": "length of passing range",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "ThisExpression"
            },
            "class": "Ember.MutableArray",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 49358,
            "description": "Push the object onto the end of the array. Works just like `push()` but it\nis KVO-compliant.\n```javascript\nvar colors = [\"red\", \"green\"];\ncolors.pushObject(\"black\");     // [\"red\", \"green\", \"black\"]\ncolors.pushObject([\"yellow\"]);  // [\"red\", \"green\", [\"yellow\"]]\n```",
            "itemtype": "method",
            "name": "pushObject",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                }
            ],
            "return": {
                "description": "obj"
            },
            "class": "Ember.MutableArray",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 49375,
            "description": "Add the objects in the passed numerable to the end of the array. Defers\nnotifying observers of the change until all objects are added.\n```javascript\nvar colors = [\"red\"];\ncolors.pushObjects([\"yellow\", \"orange\"]);  // [\"red\", \"yellow\", \"orange\"]\n```",
            "itemtype": "method",
            "name": "pushObjects",
            "params": [
                {
                    "name": "objects",
                    "description": ""
                }
            ],
            "return": {
                "description": "ThisExpression"
            },
            "class": "Ember.MutableArray",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 49394,
            "description": "Pop object from array or nil if none are left. Works just like `pop()` but\nit is KVO-compliant.\n```javascript\nvar colors = [\"red\", \"green\", \"blue\"];\ncolors.popObject();   // \"blue\"\nconsole.log(colors);  // [\"red\", \"green\"]\n```",
            "itemtype": "method",
            "name": "popObject",
            "return": {
                "description": "ret"
            },
            "class": "Ember.MutableArray",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 49414,
            "description": "Shift an object from start of array or nil if none are left. Works just\nlike `shift()` but it is KVO-compliant.\n```javascript\nvar colors = [\"red\", \"green\", \"blue\"];\ncolors.shiftObject();  // \"red\"\nconsole.log(colors);   // [\"green\", \"blue\"]\n```",
            "itemtype": "method",
            "name": "shiftObject",
            "return": {
                "description": "ret"
            },
            "class": "Ember.MutableArray",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 49432,
            "description": "Unshift an object to start of array. Works just like `unshift()` but it is\nKVO-compliant.\n```javascript\nvar colors = [\"red\"];\ncolors.unshiftObject(\"yellow\");    // [\"yellow\", \"red\"]\ncolors.unshiftObject([\"black\"]);   // [[\"black\"], \"yellow\", \"red\"]\n```",
            "itemtype": "method",
            "name": "unshiftObject",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                }
            ],
            "return": {
                "description": "obj"
            },
            "class": "Ember.MutableArray",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 49449,
            "description": "Adds the named objects to the beginning of the array. Defers notifying\nobservers until all objects have been added.\n```javascript\nvar colors = [\"red\"];\ncolors.unshiftObjects([\"black\", \"white\"]);   // [\"black\", \"white\", \"red\"]\ncolors.unshiftObjects(\"yellow\"); // Type Error: 'undefined' is not a function\n```",
            "itemtype": "method",
            "name": "unshiftObjects",
            "params": [
                {
                    "name": "objects",
                    "description": ""
                }
            ],
            "return": {
                "description": "ThisExpression"
            },
            "class": "Ember.MutableArray",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 49466,
            "description": "Reverse objects in the array. Works just like `reverse()` but it is\nKVO-compliant.",
            "itemtype": "method",
            "name": "reverseObjects",
            "return": {
                "description": "ThisExpression"
            },
            "class": "Ember.MutableArray",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 49480,
            "description": "Replace all the the receiver's content with content of the argument.\nIf argument is an empty array receiver will be cleared.\n```javascript\nvar colors = [\"red\", \"green\", \"blue\"];\ncolors.setObjects([\"black\", \"white\"]);  // [\"black\", \"white\"]\ncolors.setObjects([]);                  // []\n```\nthe content of the receiver",
            "itemtype": "method",
            "name": "setObjects",
            "params": [
                {
                    "name": "objects",
                    "description": ""
                }
            ],
            "return": {
                "description": "ThisExpression"
            },
            "class": "Ember.MutableArray",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 49505,
            "description": "Remove all occurances of an object in the array.\n```javascript\nvar cities = [\"Chicago\", \"Berlin\", \"Lima\", \"Chicago\"];\ncities.removeObject(\"Chicago\");  // [\"Berlin\", \"Lima\"]\ncities.removeObject(\"Lima\");     // [\"Berlin\"]\ncities.removeObject(\"Tokyo\")     // [\"Berlin\"]\n```",
            "itemtype": "method",
            "name": "removeObject",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                }
            ],
            "return": {
                "description": "ThisExpression"
            },
            "class": "Ember.MutableArray",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 49526,
            "description": "Push the object onto the end of the array if it is not already\npresent in the array.\n```javascript\nvar cities = [\"Chicago\", \"Berlin\"];\ncities.addObject(\"Lima\");    // [\"Chicago\", \"Berlin\", \"Lima\"]\ncities.addObject(\"Berlin\");  // [\"Chicago\", \"Berlin\", \"Lima\"]\n```",
            "itemtype": "method",
            "name": "addObject",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                }
            ],
            "return": {
                "description": "ThisExpression"
            },
            "class": "Ember.MutableArray",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 49602,
            "description": "__Required.__ You must implement this method to apply this mixin.\n\nAttempts to add the passed object to the receiver if the object is not\nalready present in the collection. If the object is present, this method\nhas no effect.\n\nIf the passed object is of a type not supported by the receiver,\nthen this method should raise an exception.",
            "itemtype": "method",
            "name": "addObject",
            "params": [
                {
                    "name": "object",
                    "description": "The object to add to the enumerable.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the passed object",
                "type": "Object"
            },
            "class": "Ember.MutableEnumerable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 49618,
            "description": "Adds each object in the passed enumerable to the receiver.",
            "itemtype": "method",
            "name": "addObjects",
            "params": [
                {
                    "name": "objects",
                    "description": ""
                }
            ],
            "return": {
                "description": "ThisExpression"
            },
            "class": "Ember.MutableEnumerable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 49631,
            "description": "__Required.__ You must implement this method to apply this mixin.\n\nAttempts to remove the passed object from the receiver collection if the\nobject is present in the collection. If the object is not present,\nthis method has no effect.\n\nIf the passed object is of a type not supported by the receiver,\nthen this method should raise an exception.",
            "itemtype": "method",
            "name": "removeObject",
            "params": [
                {
                    "name": "object",
                    "description": "The object to remove from the enumerable.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the passed object",
                "type": "Object"
            },
            "class": "Ember.MutableEnumerable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 49648,
            "description": "Removes each object in the passed enumerable from the receiver.",
            "itemtype": "method",
            "name": "removeObjects",
            "params": [
                {
                    "name": "objects",
                    "description": ""
                }
            ],
            "return": {
                "description": "ThisExpression"
            },
            "class": "Ember.MutableEnumerable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 49763,
            "description": "Retrieves the value of a property from the object.\nThis method is usually similar to using `object[keyName]` or `object.keyName`,\nhowever it supports both computed properties and the unknownProperty\nhandler.\nBecause `get` unifies the syntax for accessing all these kinds\nof properties, it can make many refactorings easier, such as replacing a\nsimple property with a computed property, or vice versa.\n### Computed Properties\nComputed properties are methods defined with the `property` modifier\ndeclared at the end, such as:\n```javascript\nfullName: function() {\nreturn this.get('firstName') + ' ' + this.get('lastName');\n}.property('firstName', 'lastName')\n```\nWhen you call `get` on a computed property, the function will be\ncalled and the return value will be returned instead of the function\nitself.\n### Unknown Properties\nLikewise, if you try to call `get` on a property whose value is\n`undefined`, the `unknownProperty()` method will be called on the object.\nIf this method returns any value other than `undefined`, it will be returned\ninstead. This allows you to implement \"virtual\" properties that are\nnot defined upfront.",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "keyName",
                    "description": "The property to retrieve",
                    "type": "String"
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Observable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 49796,
            "description": "To get multiple properties at once, call `getProperties`\nwith a list of strings or an array:\n```javascript\nrecord.getProperties('firstName', 'lastName', 'zipCode');\n// { firstName: 'John', lastName: 'Doe', zipCode: '10011' }\n```\nis equivalent to:\n```javascript\nrecord.getProperties(['firstName', 'lastName', 'zipCode']);\n// { firstName: 'John', lastName: 'Doe', zipCode: '10011' }\n```",
            "itemtype": "method",
            "name": "getProperties",
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Observable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 49815,
            "description": "Sets the provided key or path to the value.\nThis method is generally very similar to calling `object[key] = value` or\n`object.key = value`, except that it provides support for computed\nproperties, the `setUnknownProperty()` method and property observers.\n### Computed Properties\nIf you try to set a value on a key that has a computed property handler\ndefined (see the `get()` method for an example), then `set()` will call\nthat method, passing both the value and key instead of simply changing\nthe value itself. This is useful for those times when you need to\nimplement a property that is composed of one or more member\nproperties.\n### Unknown Properties\nIf you try to set a value on a key that is undefined in the target\nobject, then the `setUnknownProperty()` handler will be called instead. This\ngives you an opportunity to implement complex \"virtual\" properties that\nare not predefined on the object. If `setUnknownProperty()` returns\nundefined, then `set()` will simply set the value on the object.\n### Property Observers\nIn addition to changing the property, `set()` will also register a property\nchange with the object. Unless you have placed this call inside of a\n`beginPropertyChanges()` and `endPropertyChanges(),` any \"local\" observers\n(i.e. observer methods declared on the same object), will be called\nimmediately. Any \"remote\" observers (i.e. observer methods declared on\nanother object) will be placed in a queue and called at a later time in a\ncoalesced manner.\n### Chaining\nIn addition to property changes, `set()` returns the value of the object\nitself so you can do chaining like this:\n```javascript\nrecord.set('firstName', 'Charles').set('lastName', 'Jolley');\n```",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "keyName",
                    "description": "The property to set",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The value to set or `null`.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "ThisExpression"
            },
            "class": "Ember.Observable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 49858,
            "description": "Sets a list of properties at once. These properties are set inside\na single `beginPropertyChanges` and `endPropertyChanges` batch, so\nobservers will be buffered.\n```javascript\nrecord.setProperties({ firstName: 'Charles', lastName: 'Jolley' });\n```",
            "itemtype": "method",
            "name": "setProperties",
            "params": [
                {
                    "name": "hash",
                    "description": "the hash of keys and values to set",
                    "type": "Hash"
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Observable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 49873,
            "description": "Begins a grouping of property changes.\nYou can use this method to group property changes so that notifications\nwill not be sent until the changes are finished. If you plan to make a\nlarge number of changes to an object at one time, you should call this\nmethod at the beginning of the changes to begin deferring change\nnotifications. When you are done making changes, call\n`endPropertyChanges()` to deliver the deferred change notifications and end\ndeferring.",
            "itemtype": "method",
            "name": "beginPropertyChanges",
            "return": {
                "description": "ThisExpression"
            },
            "class": "Ember.Observable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 49890,
            "description": "Ends a grouping of property changes.\nYou can use this method to group property changes so that notifications\nwill not be sent until the changes are finished. If you plan to make a\nlarge number of changes to an object at one time, you should call\n`beginPropertyChanges()` at the beginning of the changes to defer change\nnotifications. When you are done making changes, call this method to\ndeliver the deferred change notifications and end deferring.",
            "itemtype": "method",
            "name": "endPropertyChanges",
            "return": {
                "description": "ThisExpression"
            },
            "class": "Ember.Observable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 49906,
            "description": "Notify the observer system that a property is about to change.\nSometimes you need to change a value directly or indirectly without\nactually calling `get()` or `set()` on it. In this case, you can use this\nmethod and `propertyDidChange()` instead. Calling these two methods\ntogether will notify all observers that the property has potentially\nchanged value.\nNote that you must always call `propertyWillChange` and `propertyDidChange`\nas a pair. If you do not, it may get the property change groups out of\norder and cause notifications to be delivered more often than you would\nlike.",
            "itemtype": "method",
            "name": "propertyWillChange",
            "params": [
                {
                    "name": "keyName",
                    "description": "The property key that is about to change.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "ThisExpression"
            },
            "class": "Ember.Observable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 49926,
            "description": "Notify the observer system that a property has just changed.\nSometimes you need to change a value directly or indirectly without\nactually calling `get()` or `set()` on it. In this case, you can use this\nmethod and `propertyWillChange()` instead. Calling these two methods\ntogether will notify all observers that the property has potentially\nchanged value.\nNote that you must always call `propertyWillChange` and `propertyDidChange`\nas a pair. If you do not, it may get the property change groups out of\norder and cause notifications to be delivered more often than you would\nlike.",
            "itemtype": "method",
            "name": "propertyDidChange",
            "params": [
                {
                    "name": "keyName",
                    "description": "The property key that has just changed.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "ThisExpression"
            },
            "class": "Ember.Observable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 49946,
            "description": "Convenience method to call `propertyWillChange` and `propertyDidChange` in\nsuccession.",
            "itemtype": "method",
            "name": "notifyPropertyChange",
            "params": [
                {
                    "name": "keyName",
                    "description": "The property key to be notified about.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "ThisExpression"
            },
            "class": "Ember.Observable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 49959,
            "description": "Description",
            "itemtype": "method",
            "name": "addBeforeObserver",
            "params": [
                {
                    "name": "key",
                    "description": ""
                },
                {
                    "name": "target",
                    "description": ""
                },
                {
                    "name": "method",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Observable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 49971,
            "description": "Adds an observer on a property.\nThis is the core method used to register an observer for a property.\nOnce you call this method, any time the key's value is set, your observer\nwill be notified. Note that the observers are triggered any time the\nvalue is set, regardless of whether it has actually changed. Your\nobserver should be prepared to handle that.\nYou can also pass an optional context parameter to this method. The\ncontext will be passed to your observer method whenever it is triggered.\nNote that if you add the same target/method pair on a key multiple times\nwith different context parameters, your observer will only be called once\nwith the last context you passed.\n### Observer Methods\nObserver methods you pass should generally have the following signature if\nyou do not pass a `context` parameter:\n```javascript\nfooDidChange: function(sender, key, value, rev) { };\n```\nThe sender is the object that changed. The key is the property that\nchanges. The value property is currently reserved and unused. The rev\nis the last property revision of the object when it changed, which you can\nuse to detect if the key value has really changed or not.\nIf you pass a `context` parameter, the context will be passed before the\nrevision like so:\n```javascript\nfooDidChange: function(sender, key, value, context, rev) { };\n```\nUsually you will not need the value, context or revision parameters at\nthe end. In this case, it is common to write observer methods that take\nonly a sender and key value as parameters or, if you aren't interested in\nany of these values, to write an observer that has no parameters at all.",
            "itemtype": "method",
            "name": "addObserver",
            "params": [
                {
                    "name": "key",
                    "description": "The key to observer",
                    "type": "String"
                },
                {
                    "name": "target",
                    "description": "The target object to invoke",
                    "type": "Object"
                },
                {
                    "name": "method",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Observable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 50012,
            "description": "Remove an observer you have previously registered on this object. Pass\nthe same key, target, and method you passed to `addObserver()` and your\ntarget will no longer receive notifications.",
            "itemtype": "method",
            "name": "removeObserver",
            "params": [
                {
                    "name": "key",
                    "description": "The key to observer",
                    "type": "String"
                },
                {
                    "name": "target",
                    "description": "The target object to invoke",
                    "type": "Object"
                },
                {
                    "name": "method",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Observable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 50026,
            "description": "Returns `true` if the object currently has observers registered for a\nparticular key. You can use this method to potentially defer performing\nan expensive action until someone begins observing a particular property\non the object.",
            "itemtype": "method",
            "name": "hasObserverFor",
            "params": [
                {
                    "name": "key",
                    "description": "Key to check",
                    "type": "String"
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Observable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 50039,
            "description": "Retrieves the value of a property, or a default value in the case that the\nproperty returns `undefined`.\n```javascript\nperson.getWithDefault('lastName', 'Doe');\n```",
            "itemtype": "method",
            "name": "getWithDefault",
            "params": [
                {
                    "name": "keyName",
                    "description": "The name of the property to retrieve",
                    "type": "String"
                },
                {
                    "name": "defaultValue",
                    "description": "The value to return if the property value is undefined",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Observable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 50054,
            "description": "Set the value of a property to the current value plus some amount.\n```javascript\nperson.incrementProperty('age');\nteam.incrementProperty('score', 2);\n```",
            "itemtype": "method",
            "name": "incrementProperty",
            "params": [
                {
                    "name": "keyName",
                    "description": "The name of the property to increment",
                    "type": "String"
                },
                {
                    "name": "increment",
                    "description": "The amount to increment by. Defaults to 1",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Observable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 50072,
            "description": "Set the value of a property to the current value minus some amount.\n```javascript\nplayer.decrementProperty('lives');\norc.decrementProperty('health', 5);\n```",
            "itemtype": "method",
            "name": "decrementProperty",
            "params": [
                {
                    "name": "keyName",
                    "description": "The name of the property to decrement",
                    "type": "String"
                },
                {
                    "name": "decrement",
                    "description": "The amount to decrement by. Defaults to 1",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Observable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 50090,
            "description": "Set the value of a boolean property to the opposite of it's\ncurrent value.\n```javascript\nstarship.toggleProperty('warpDriveEngaged');\n```",
            "itemtype": "method",
            "name": "toggleProperty",
            "params": [
                {
                    "name": "keyName",
                    "description": "The name of the property to toggle",
                    "type": "String"
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Observable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 50105,
            "description": "Returns the cached value of a computed property, if it exists.\nThis allows you to inspect the value of a computed property\nwithout accidentally invoking it if it is intended to be\ngenerated lazily.",
            "itemtype": "method",
            "name": "cacheFor",
            "params": [
                {
                    "name": "keyName",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Observable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 50119,
            "description": "Description",
            "itemtype": "method",
            "name": "observersForKey",
            "params": [
                {
                    "name": "keyName",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Observable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 50233,
            "description": "If the proxied promise is rejected this will contain the reason\nprovided.",
            "itemtype": "property",
            "name": "reason",
            "default": "null",
            "class": "Ember.PromiseProxyMixin",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 50242,
            "description": "Once the proxied promise has settled this will become `false`.",
            "itemtype": "property",
            "name": "isPending",
            "default": "true",
            "class": "Ember.PromiseProxyMixin",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 50250,
            "description": "Once the proxied promise has settled this will become `true`.",
            "itemtype": "property",
            "name": "isSettled",
            "default": "false",
            "class": "Ember.PromiseProxyMixin",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 50258,
            "description": "Will become `true` if the proxied promise is rejected.",
            "itemtype": "property",
            "name": "isRejected",
            "default": "false",
            "class": "Ember.PromiseProxyMixin",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 50266,
            "description": "Will become `true` if the proxied promise is fulfilled.",
            "itemtype": "property",
            "name": "isFulfilled",
            "default": "false",
            "class": "Ember.PromiseProxyMixin",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 50274,
            "description": "The promise whose fulfillment value is being proxied by this object.\n\nThis property must be specified upon creation, and should not be\nchanged once created.\n\nExample:\n\n```javascript\nEmber.ObjectController.extend(Ember.PromiseProxyMixin).create({\n  promise: <thenable>\n});\n```",
            "itemtype": "property",
            "name": "promise",
            "class": "Ember.PromiseProxyMixin",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 50298,
            "description": "An alias to the proxied promise's `then`.\n\nSee RSVP.Promise.then.",
            "itemtype": "method",
            "name": "then",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "",
                "type": "RSVP.Promise"
            },
            "class": "Ember.PromiseProxyMixin",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 50309,
            "description": "An alias to the proxied promise's `catch`.\n\nSee RSVP.Promise.catch.",
            "itemtype": "method",
            "name": "catch",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "",
                "type": "RSVP.Promise"
            },
            "since": "1.3.0",
            "class": "Ember.PromiseProxyMixin",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 50321,
            "description": "An alias to the proxied promise's `finally`.\n\nSee RSVP.Promise.finally.",
            "itemtype": "method",
            "name": "finally",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "",
                "type": "RSVP.Promise"
            },
            "since": "1.3.0",
            "class": "Ember.PromiseProxyMixin",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 50335,
            "description": "Description",
            "itemtype": "method",
            "name": "promiseAlias",
            "params": [
                {
                    "name": "name",
                    "description": ""
                }
            ],
            "return": {
                "description": "FunctionExpression"
            },
            "class": "Ember.PromiseProxyMixin",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 50427,
            "description": "Specifies which properties dictate the arrangedContent's sort order.\n\nWhen specifying multiple properties the sorting will use properties\nfrom the `sortProperties` array prioritized from first to last.",
            "itemtype": "property",
            "name": "sortProperties",
            "type": "Array",
            "class": "Ember.SortableMixin",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 50437,
            "description": "Specifies the arrangedContent's sort direction.\nSorts the content in ascending order by default. Set to `false` to\nuse descending order.",
            "itemtype": "property",
            "name": "sortAscending",
            "type": "Boolean",
            "default": "true",
            "class": "Ember.SortableMixin",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 50447,
            "description": "The function used to compare two values. You can override this if you\nwant to do custom comparisons. Functions must be of the type expected by\nArray#sort, i.e.\n  return 0 if the two parameters are equal,\n  return a negative value if the first parameter is smaller than the second or\n  return a positive value otherwise:\n\n```javascript\nfunction(x,y) { // These are assumed to be integers\n  if (x === y)\n    return 0;\n  return x < y ? -1 : 1;\n}\n```",
            "itemtype": "property",
            "name": "sortFunction",
            "type": "{Function}",
            "default": "Ember.compare",
            "class": "Ember.SortableMixin",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 50469,
            "description": "Description",
            "itemtype": "method",
            "name": "orderBy",
            "params": [
                {
                    "name": "item1",
                    "description": ""
                },
                {
                    "name": "item2",
                    "description": ""
                }
            ],
            "return": {
                "description": "result"
            },
            "class": "Ember.SortableMixin",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 50496,
            "description": "Description",
            "itemtype": "method",
            "name": "destroy",
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.SortableMixin",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 50518,
            "description": "Overrides the default arrangedContent from arrayProxy in order to sort by sortFunction.\nAlso sets up observers for each sortProperty on each item in the content Array.",
            "itemtype": "property",
            "name": "arrangedContent",
            "class": "Ember.SortableMixin",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 50581,
            "description": "Description",
            "itemtype": "method",
            "name": "contentArrayWillChange",
            "params": [
                {
                    "name": "array",
                    "description": ""
                },
                {
                    "name": "idx",
                    "description": ""
                },
                {
                    "name": "removedCount",
                    "description": ""
                },
                {
                    "name": "addedCount",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.SortableMixin",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 50610,
            "description": "Description",
            "itemtype": "method",
            "name": "contentArrayDidChange",
            "params": [
                {
                    "name": "array",
                    "description": ""
                },
                {
                    "name": "idx",
                    "description": ""
                },
                {
                    "name": "removedCount",
                    "description": ""
                },
                {
                    "name": "addedCount",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.SortableMixin",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 50638,
            "description": "Description",
            "itemtype": "method",
            "name": "insertItemSorted",
            "params": [
                {
                    "name": "item",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.SortableMixin",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 50652,
            "description": "Description",
            "itemtype": "method",
            "name": "contentItemSortPropertyDidChange",
            "params": [
                {
                    "name": "item",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.SortableMixin",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 50756,
            "description": "Send an `action` with an `actionContext` to a `target`. The action, actionContext\nand target will be retrieved from properties of the object. For example:\n```javascript\nApp.SaveButtonView = Ember.View.extend(Ember.TargetActionSupport, {\ntarget: Ember.computed.alias('controller'),\naction: 'save',\nactionContext: Ember.computed.alias('context'),\nclick: function() {\nthis.triggerAction(); // Sends the `save` action, along with the current context\n// to the current controller\n}\n});\n```\nThe `target`, `action`, and `actionContext` can be provided as properties of\nan optional object argument to `triggerAction` as well.\n```javascript\nApp.SaveButtonView = Ember.View.extend(Ember.TargetActionSupport, {\nclick: function() {\nthis.triggerAction({\naction: 'save',\ntarget: this.get('controller'),\nactionContext: this.get('context')\n}); // Sends the `save` action, along with the current context\n// to the current controller\n}\n});\n```\nThe `actionContext` defaults to the object you are mixing `TargetActionSupport` into.\nBut `target` and `action` must be specified either as properties or with the argument\nto `triggerAction`, or a combination:\n```javascript\nApp.SaveButtonView = Ember.View.extend(Ember.TargetActionSupport, {\ntarget: Ember.computed.alias('controller'),\nclick: function() {\nthis.triggerAction({\naction: 'save'\n}); // Sends the `save` action, along with a reference to `this`,\n// to the current controller\n}\n});\n```",
            "itemtype": "method",
            "name": "triggerAction",
            "params": [
                {
                    "name": "opts",
                    "description": "(optional, with the optional keys action, target and/or actionContext)",
                    "type": "Hash"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.TargetActionSupport",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 50808,
            "description": "Description",
            "itemtype": "method",
            "name": "args",
            "params": [
                {
                    "name": "options",
                    "description": ""
                },
                {
                    "name": "actionName",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.TargetActionSupport",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 50926,
            "description": "The content array. Must be an object that implements `Ember.Array` and/or\n`Ember.MutableArray.`",
            "itemtype": "property",
            "name": "content",
            "type": "Ember.Array",
            "class": "Ember.ArrayProxy",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 50935,
            "description": "The array that the proxy pretends to be. In the default `ArrayProxy`\nimplementation, this and `content` are the same. Subclasses of `ArrayProxy`\ncan override this property to provide things like sorting and filtering.",
            "itemtype": "property",
            "name": "arrangedContent",
            "class": "Ember.ArrayProxy",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 50944,
            "description": "Should actually retrieve the object at the specified index from the\ncontent. You can override this method in subclasses to transform the\ncontent item to something new.\nThis method will only be called if content is non-`null`.",
            "itemtype": "method",
            "name": "objectAtContent",
            "params": [
                {
                    "name": "idx",
                    "description": "The index to retrieve.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ArrayProxy",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 50957,
            "description": "Should actually replace the specified objects on the content array.\nYou can override this method in subclasses to transform the content item\ninto something new.\nThis method will only be called if content is non-`null`.\nobjects.",
            "itemtype": "method",
            "name": "replaceContent",
            "params": [
                {
                    "name": "idx",
                    "description": "The starting index",
                    "type": "Number"
                },
                {
                    "name": "amt",
                    "description": "The number of items to remove from the content.",
                    "type": "Number"
                },
                {
                    "name": "objects",
                    "description": "Optional array of objects to insert or null if no",
                    "type": "Array"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ArrayProxy",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 50973,
            "description": "Invoked when the content property is about to change. Notifies observers that the\nentire array content will change.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_contentWillChange",
            "class": "Ember.ArrayProxy",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 50998,
            "description": "Invoked when the content property changes. Notifies observers that the\nentire array content has changed.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_contentDidChange",
            "class": "Ember.ArrayProxy",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 51079,
            "description": "Description",
            "itemtype": "method",
            "name": "objectAt",
            "params": [
                {
                    "name": "idx",
                    "description": ""
                }
            ],
            "return": {
                "description": "LogicalExpression"
            },
            "class": "Ember.ArrayProxy",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 51102,
            "description": "Description",
            "itemtype": "method",
            "name": "replace",
            "return": {
                "description": ""
            },
            "class": "Ember.ArrayProxy",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 51121,
            "description": "Description",
            "itemtype": "method",
            "name": "insertAt",
            "params": [
                {
                    "name": "idx",
                    "description": ""
                },
                {
                    "name": "object",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ArrayProxy",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 51136,
            "description": "Description",
            "itemtype": "method",
            "name": "removeAt",
            "params": [
                {
                    "name": "start",
                    "description": ""
                },
                {
                    "name": "len",
                    "description": ""
                }
            ],
            "return": {
                "description": "ThisExpression"
            },
            "class": "Ember.ArrayProxy",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 51174,
            "description": "Description",
            "itemtype": "method",
            "name": "pushObject",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                }
            ],
            "return": {
                "description": "obj"
            },
            "class": "Ember.ArrayProxy",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 51185,
            "description": "Description",
            "itemtype": "method",
            "name": "pushObjects",
            "params": [
                {
                    "name": "objects",
                    "description": ""
                }
            ],
            "return": {
                "description": "ThisExpression"
            },
            "class": "Ember.ArrayProxy",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 51199,
            "description": "Description",
            "itemtype": "method",
            "name": "setObjects",
            "params": [
                {
                    "name": "objects",
                    "description": ""
                }
            ],
            "return": {
                "description": "ThisExpression"
            },
            "class": "Ember.ArrayProxy",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 51213,
            "description": "Description",
            "itemtype": "method",
            "name": "unshiftObject",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                }
            ],
            "return": {
                "description": "obj"
            },
            "class": "Ember.ArrayProxy",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 51224,
            "description": "Description",
            "itemtype": "method",
            "name": "unshiftObjects",
            "params": [
                {
                    "name": "objects",
                    "description": ""
                }
            ],
            "return": {
                "description": "ThisExpression"
            },
            "class": "Ember.ArrayProxy",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 51235,
            "description": "Description",
            "itemtype": "method",
            "name": "slice",
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ArrayProxy",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 51245,
            "description": "Description",
            "itemtype": "method",
            "name": "arrangedContentArrayWillChange",
            "params": [
                {
                    "name": "item",
                    "description": ""
                },
                {
                    "name": "idx",
                    "description": ""
                },
                {
                    "name": "removedCnt",
                    "description": ""
                },
                {
                    "name": "addedCnt",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ArrayProxy",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 51258,
            "description": "Description",
            "itemtype": "method",
            "name": "arrangedContentArrayDidChange",
            "params": [
                {
                    "name": "item",
                    "description": ""
                },
                {
                    "name": "idx",
                    "description": ""
                },
                {
                    "name": "removedCnt",
                    "description": ""
                },
                {
                    "name": "addedCnt",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ArrayProxy",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 51271,
            "description": "Description",
            "itemtype": "method",
            "name": "init",
            "return": {
                "description": ""
            },
            "class": "Ember.ArrayProxy",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 51282,
            "description": "Description",
            "itemtype": "method",
            "name": "willDestroy",
            "return": {
                "description": ""
            },
            "class": "Ember.ArrayProxy",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 51370,
            "description": "Description",
            "itemtype": "method",
            "name": "makeCtor",
            "return": {
                "description": "Class"
            },
            "class": "Ember.ArrayProxy",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 51383,
            "description": "Description",
            "itemtype": "method",
            "name": "Class",
            "return": {
                "description": ""
            },
            "class": "Ember.ArrayProxy",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 51487,
            "description": "Description",
            "itemtype": "method",
            "name": "willReopen",
            "return": {
                "description": ""
            },
            "class": "Ember.ArrayProxy",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 51502,
            "description": "Description",
            "itemtype": "method",
            "name": "proto",
            "return": {
                "description": "MemberExpression"
            },
            "class": "Ember.ArrayProxy",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 51529,
            "description": "Description",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "Literal"
            },
            "class": "Ember.CoreObject",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 51537,
            "description": "Description",
            "itemtype": "method",
            "name": "reopen",
            "return": {
                "description": "ThisExpression"
            },
            "class": "Ember.CoreObject",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 51552,
            "description": "An overridable method called when objects are instantiated. By default,\ndoes nothing unless it is overridden during class definition.\nExample:\n```javascript\nApp.Person = Ember.Object.extend({\ninit: function() {\nalert('Name is ' + this.get('name'));\n}\n});\nvar steve = App.Person.create({\nname: \"Steve\"\n});\n// alerts 'Name is Steve'.\n```\nNOTE: If you do override `init` for a framework class like `Ember.View` or\n`Ember.ArrayController`, be sure to call `this._super()` in your\n`init` declaration! If you don't, Ember may not have an opportunity to\ndo important setup work, and you'll see strange behavior in your\napplication.",
            "itemtype": "method",
            "name": "init",
            "return": {
                "description": ""
            },
            "class": "Ember.CoreObject",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 51577,
            "description": "Defines the properties that will be concatenated from the superclass\n(instead of overridden).\n\nBy default, when you extend an Ember class a property defined in\nthe subclass overrides a property with the same name that is defined\nin the superclass. However, there are some cases where it is preferable\nto build up a property's value by combining the superclass' property\nvalue with the subclass' value. An example of this in use within Ember\nis the `classNames` property of `Ember.View`.\n\nHere is some sample code showing the difference between a concatenated\nproperty and a normal one:\n\n```javascript\nApp.BarView = Ember.View.extend({\n  someNonConcatenatedProperty: ['bar'],\n  classNames: ['bar']\n});\n\nApp.FooBarView = App.BarView.extend({\n  someNonConcatenatedProperty: ['foo'],\n  classNames: ['foo']\n});\n\nvar fooBarView = App.FooBarView.create();\nfooBarView.get('someNonConcatenatedProperty'); // ['foo']\nfooBarView.get('classNames'); // ['ember-view', 'bar', 'foo']\n```\n\nThis behavior extends to object creation as well. Continuing the\nabove example:\n\n```javascript\nvar view = App.FooBarView.create({\n  someNonConcatenatedProperty: ['baz'],\n  classNames: ['baz']\n})\nview.get('someNonConcatenatedProperty'); // ['baz']\nview.get('classNames'); // ['ember-view', 'bar', 'foo', 'baz']\n```\nAdding a single property that is not an array will just add it in the array:\n\n```javascript\nvar view = App.FooBarView.create({\n  classNames: 'baz'\n})\nview.get('classNames'); // ['ember-view', 'bar', 'foo', 'baz']\n```\n\nUsing the `concatenatedProperties` property, we can tell to Ember that mix\nthe content of the properties.\n\nIn `Ember.View` the `classNameBindings` and `attributeBindings` properties\nare also concatenated, in addition to `classNames`.\n\nThis feature is available for you to use throughout the Ember object model,\nalthough typical app developers are likely to use it infrequently. Since\nit changes expectations about behavior of properties, you should properly\ndocument its usage in each individual concatenated property (to not\nmislead your users to think they can override the property in a subclass).",
            "itemtype": "property",
            "name": "concatenatedProperties",
            "type": "Array",
            "default": "null",
            "class": "Ember.CoreObject",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 51645,
            "description": "Destroyed object property flag.\n\nif this property is `true` the observers and bindings were already\nremoved by the effect of calling the `destroy()` method.",
            "itemtype": "property",
            "name": "isDestroyed",
            "default": "false",
            "class": "Ember.CoreObject",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 51656,
            "description": "Destruction scheduled flag. The `destroy()` method has been called.\n\nThe object stays intact until the end of the run loop at which point\nthe `isDestroyed` flag is set.",
            "itemtype": "property",
            "name": "isDestroying",
            "default": "false",
            "class": "Ember.CoreObject",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 51667,
            "description": "Destroys an object by setting the `isDestroyed` flag and removing its\nmetadata, which effectively destroys observers and bindings.\nIf you try to set a property on a destroyed object, an exception will be\nraised.\nNote that destruction is scheduled for the end of the run loop and does not\nhappen immediately.  It will set an isDestroying flag immediately.",
            "itemtype": "method",
            "name": "destroy",
            "return": {
                "description": "ThisExpression"
            },
            "class": "Ember.CoreObject",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 51686,
            "description": "Override to implement teardown.",
            "itemtype": "method",
            "name": "willDestroy",
            "class": "Ember.CoreObject",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 51693,
            "description": "Invoked by the run loop to actually destroy the object. This is\nscheduled for execution by the `destroy` method.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_scheduledDestroy",
            "class": "Ember.CoreObject",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 51706,
            "description": "Description",
            "itemtype": "method",
            "name": "bind",
            "params": [
                {
                    "name": "to",
                    "description": ""
                },
                {
                    "name": "from",
                    "description": ""
                }
            ],
            "return": {
                "description": "from"
            },
            "class": "Ember.CoreObject",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 51719,
            "description": "Returns a string representation which attempts to provide more information\nthan Javascript's `toString` typically does, in a generic way for all Ember\nobjects.\n```javascript\nApp.Person = Em.Object.extend()\nperson = App.Person.create()\nperson.toString() //=> \"<App.Person:ember1024>\"\n```\nIf the object's class is not defined on an Ember namespace, it will\nindicate it is a subclass of the registered superclass:\n```javascript\nStudent = App.Person.extend()\nstudent = Student.create()\nstudent.toString() //=> \"<(subclass of App.Person):ember1025>\"\n```\nIf the method `toStringExtension` is defined, its return value will be\nincluded in the output.\n```javascript\nApp.Teacher = App.Person.extend({\ntoStringExtension: function() {\nreturn this.get('fullName');\n}\n});\nteacher = App.Teacher.create()\nteacher.toString(); //=> \"<App.Teacher:ember1026:Tom Dale>\"\n```",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "ret"
            },
            "class": "Ember.CoreObject",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 51760,
            "description": "Description",
            "itemtype": "method",
            "name": "makeToString",
            "params": [
                {
                    "name": "ret",
                    "description": ""
                }
            ],
            "return": {
                "description": "FunctionExpression"
            },
            "class": "Ember.CoreObject",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 51786,
            "description": "Creates a new subclass.\n```javascript\nApp.Person = Ember.Object.extend({\nsay: function(thing) {\nalert(thing);\n}\n});\n```\nThis defines a new subclass of Ember.Object: `App.Person`. It contains one method: `say()`.\nYou can also create a subclass from any existing class by calling its `extend()`  method. For example, you might want to create a subclass of Ember's built-in `Ember.View` class:\n```javascript\nApp.PersonView = Ember.View.extend({\ntagName: 'li',\nclassNameBindings: ['isAdministrator']\n});\n```\nWhen defining a subclass, you can override methods but still access the implementation of your parent class by calling the special `_super()` method:\n```javascript\nApp.Person = Ember.Object.extend({\nsay: function(thing) {\nvar name = this.get('name');\nalert(name + ' says: ' + thing);\n}\n});\nApp.Soldier = App.Person.extend({\nsay: function(thing) {\nthis._super(thing + \", sir!\");\n},\nmarch: function(numberOfHours) {\nalert(this.get('name') + ' marches for ' + numberOfHours + ' hours.')\n}\n});\nvar yehuda = App.Soldier.create({\nname: \"Yehuda Katz\"\n});\nyehuda.say(\"Yes\");  // alerts \"Yehuda Katz says: Yes, sir!\"\n```\nThe `create()` on line #17 creates an *instance* of the `App.Soldier` class. The `extend()` on line #8 creates a *subclass* of `App.Person`. Any instance of the `App.Person` class will *not* have the `march()` method.\nYou can also pass `Mixin` classes to add additional properties to the subclass.\n```javascript\nApp.Person = Ember.Object.extend({\nsay: function(thing) {\nalert(this.get('name') + ' says: ' + thing);\n}\n});\nApp.SingingMixin = Mixin.create({\nsing: function(thing){\nalert(this.get('name') + ' sings: la la la ' + thing);\n}\n});\nApp.BroadwayStar = App.Person.extend(App.SingingMixin, {\ndance: function() {\nalert(this.get('name') + ' dances: tap tap tap tap ');\n}\n});\n```\nThe `App.BroadwayStar` class contains three methods: `say()`, `sing()`, and `dance()`.",
            "static": 1,
            "itemtype": "method",
            "name": "extend",
            "return": {
                "description": "Class"
            },
            "class": "Ember.CoreObject",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 51870,
            "description": "Equivalent to doing `extend(arguments).create()`.\nIf possible use the normal `create` method instead.",
            "static": 1,
            "itemtype": "method",
            "name": "createWithMixins",
            "return": {
                "description": "NewExpression"
            },
            "class": "Ember.CoreObject",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 51890,
            "description": "Creates an instance of a class. Accepts either no arguments, or an object\ncontaining values to initialize the newly instantiated object with.\n```javascript\nApp.Person = Ember.Object.extend({\nhelloWorld: function() {\nalert(\"Hi, my name is \" + this.get('name'));\n}\n});\nvar tom = App.Person.create({\nname: 'Tom Dale'\n});\ntom.helloWorld(); // alerts \"Hi, my name is Tom Dale\".\n```\n`create` will call the `init` function if defined during\n`Ember.AnyObject.extend`\nIf no arguments are passed to `create`, it will not set values to the new\ninstance during initialization:\n```javascript\nvar noName = App.Person.create();\nnoName.helloWorld(); // alerts undefined\n```\nNOTE: For performance reasons, you cannot declare methods or computed\nproperties during `create`. You should instead declare methods and computed\nproperties when using `extend` or use the `createWithMixins` shorthand.",
            "static": 1,
            "itemtype": "method",
            "name": "create",
            "return": {
                "description": "NewExpression"
            },
            "class": "Ember.CoreObject",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 51932,
            "description": "Augments a constructor's prototype with additional\nproperties and functions:\n```javascript\nMyObject = Ember.Object.extend({\nname: 'an object'\n});\no = MyObject.create();\no.get('name'); // 'an object'\nMyObject.reopen({\nsay: function(msg){\nconsole.log(msg);\n}\n})\no2 = MyObject.create();\no2.say(\"hello\"); // logs \"hello\"\no.say(\"goodbye\"); // logs \"goodbye\"\n```\nTo add functions and properties to the constructor itself,\nsee `reopenClass`",
            "itemtype": "method",
            "name": "reopen",
            "return": {
                "description": "ThisExpression"
            },
            "class": "Ember.CoreObject",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 51970,
            "description": "Augments a constructor's own properties and functions:\n```javascript\nMyObject = Ember.Object.extend({\nname: 'an object'\n});\nMyObject.reopenClass({\ncanBuild: false\n});\nMyObject.canBuild; // false\no = MyObject.create();\n```\nIn other words, this creates static properties and functions for the class. These are only available on the class\nand not on any instance of that class.\n```javascript\nApp.Person = Ember.Object.extend({\nname : \"\",\nsayHello : function(){\nalert(\"Hello. My name is \" + this.get('name'));\n}\n});\nApp.Person.reopenClass({\nspecies : \"Homo sapiens\",\ncreatePerson: function(newPersonsName){\nreturn App.Person.create({\nname:newPersonsName\n});\n}\n});\nvar tom = App.Person.create({\nname : \"Tom Dale\"\n});\nvar yehuda = App.Person.createPerson(\"Yehuda Katz\");\ntom.sayHello(); // \"Hello. My name is Tom Dale\"\nyehuda.sayHello(); // \"Hello. My name is Yehuda Katz\"\nalert(App.Person.species); // \"Homo sapiens\"\n```\nNote that `species` and `createPerson` are *not* valid on the `tom` and `yehuda`\nvariables. They are only valid on `App.Person`.\nTo add functions and properties to instances of\na constructor by extending the constructor's prototype\nsee `reopen`",
            "itemtype": "method",
            "name": "reopenClass",
            "return": {
                "description": "ThisExpression"
            },
            "class": "Ember.CoreObject",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 52029,
            "description": "Description",
            "itemtype": "method",
            "name": "detect",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                }
            ],
            "return": {
                "description": "Literal"
            },
            "class": "Ember.CoreObject",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 52044,
            "description": "Description",
            "itemtype": "method",
            "name": "detectInstance",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                }
            ],
            "return": {
                "description": "BinaryExpression"
            },
            "class": "Ember.CoreObject",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 52054,
            "description": "In some cases, you may want to annotate computed properties with additional\nmetadata about how they function or what values they operate on. For\nexample, computed property functions may close over variables that are then\nno longer available for introspection.\nYou can pass a hash of these values to a computed property like this:\n```javascript\nperson: function() {\nvar personId = this.get('personId');\nreturn App.Person.create({ id: personId });\n}.property().meta({ type: App.Person })\n```\nOnce you've done this, you can retrieve the values saved to the computed\nproperty from your class like this:\n```javascript\nMyClass.metaForProperty('person');\n```\nThis will return the original hash that was passed to `meta()`.",
            "itemtype": "method",
            "name": "metaForProperty",
            "params": [
                {
                    "name": "key",
                    "description": "property name",
                    "type": "String"
                }
            ],
            "return": {
                "description": "LogicalExpression"
            },
            "class": "Ember.CoreObject",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 52104,
            "description": "Iterate over each computed property for the class, passing its name\nand any associated metadata (see `metaForProperty`) to the callback.",
            "itemtype": "method",
            "name": "eachComputedProperty",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "binding",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.CoreObject",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 52137,
            "description": "Description",
            "itemtype": "method",
            "name": "didDefineProperty",
            "params": [
                {
                    "name": "proto",
                    "description": ""
                },
                {
                    "name": "key",
                    "description": ""
                },
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.CoreObject",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 52172,
            "description": "Description",
            "itemtype": "method",
            "name": "init",
            "return": {
                "description": ""
            },
            "class": "Ember.CoreObject",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 52184,
            "description": "Description",
            "itemtype": "method",
            "name": "promise",
            "params": [
                {
                    "name": "callback",
                    "description": ""
                },
                {
                    "name": "binding",
                    "description": ""
                }
            ],
            "return": {
                "description": "deferred"
            },
            "class": "Ember.CoreObject",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 52236,
            "description": "Description",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "content",
                    "description": ""
                },
                {
                    "name": "keyName",
                    "description": ""
                },
                {
                    "name": "owner",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.CoreObject",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 52251,
            "description": "Description",
            "itemtype": "method",
            "name": "objectAt",
            "params": [
                {
                    "name": "idx",
                    "description": ""
                }
            ],
            "return": {
                "description": "LogicalExpression"
            },
            "class": "Ember.CoreObject",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 52271,
            "description": "Description",
            "itemtype": "method",
            "name": "addObserverForContentKey",
            "params": [
                {
                    "name": "content",
                    "description": ""
                },
                {
                    "name": "keyName",
                    "description": ""
                },
                {
                    "name": "proxy",
                    "description": ""
                },
                {
                    "name": "idx",
                    "description": ""
                },
                {
                    "name": "loc",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.CoreObject",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 52301,
            "description": "Description",
            "itemtype": "method",
            "name": "removeObserverForContentKey",
            "params": [
                {
                    "name": "content",
                    "description": ""
                },
                {
                    "name": "keyName",
                    "description": ""
                },
                {
                    "name": "proxy",
                    "description": ""
                },
                {
                    "name": "idx",
                    "description": ""
                },
                {
                    "name": "loc",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.CoreObject",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 52341,
            "description": "Description",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "content",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.EachProxy",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 52359,
            "description": "You can directly access mapped properties by simply requesting them.\nThe `unknownProperty` handler will generate an EachArray of each item.",
            "itemtype": "method",
            "name": "unknownProperty",
            "params": [
                {
                    "name": "keyName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "*"
                }
            ],
            "return": {
                "description": "ret"
            },
            "class": "Ember.EachProxy",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 52379,
            "description": "Description",
            "itemtype": "method",
            "name": "arrayWillChange",
            "params": [
                {
                    "name": "content",
                    "description": ""
                },
                {
                    "name": "idx",
                    "description": ""
                },
                {
                    "name": "removedCnt",
                    "description": ""
                },
                {
                    "name": "addedCnt",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.EachProxy",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 52406,
            "description": "Description",
            "itemtype": "method",
            "name": "arrayDidChange",
            "params": [
                {
                    "name": "content",
                    "description": ""
                },
                {
                    "name": "idx",
                    "description": ""
                },
                {
                    "name": "removedCnt",
                    "description": ""
                },
                {
                    "name": "addedCnt",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.EachProxy",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 52436,
            "description": "Description",
            "itemtype": "method",
            "name": "didAddListener",
            "params": [
                {
                    "name": "eventName",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.EachProxy",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 52448,
            "description": "Description",
            "itemtype": "method",
            "name": "didRemoveListener",
            "params": [
                {
                    "name": "eventName",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.EachProxy",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 52464,
            "description": "Description",
            "itemtype": "method",
            "name": "beginObservingContentKey",
            "params": [
                {
                    "name": "keyName",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.EachProxy",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 52483,
            "description": "Description",
            "itemtype": "method",
            "name": "stopObservingContentKey",
            "params": [
                {
                    "name": "keyName",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.EachProxy",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 52498,
            "description": "Description",
            "itemtype": "method",
            "name": "contentKeyWillChange",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                },
                {
                    "name": "keyName",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.EachProxy",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 52509,
            "description": "Description",
            "itemtype": "method",
            "name": "contentKeyDidChange",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                },
                {
                    "name": "keyName",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.EachProxy",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 52543,
            "description": "Detects when a specific package of Ember (e.g. 'Ember.Handlebars')\nhas fully loaded and is available for extension.\nThe provided `callback` will be called with the `name` passed\nresolved from a string into the object:\n``` javascript\nEmber.onLoad('Ember.Handlebars' function(hbars) {\nhbars.registerHelper(...);\n});\n```",
            "itemtype": "method",
            "name": "onLoad",
            "params": [
                {
                    "name": "name",
                    "description": "name of hook",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "callback to be called",
                    "type": "Function"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Ember",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 52635,
            "description": "Description",
            "itemtype": "method",
            "name": "init",
            "return": {
                "description": ""
            },
            "class": "Ember.Namespace",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 52645,
            "description": "Description",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "MemberExpression"
            },
            "class": "Ember.Namespace",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 52658,
            "description": "Description",
            "itemtype": "method",
            "name": "nameClasses",
            "return": {
                "description": ""
            },
            "class": "Ember.Namespace",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 52667,
            "description": "Description",
            "itemtype": "method",
            "name": "destroy",
            "return": {
                "description": ""
            },
            "class": "Ember.Namespace",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 52690,
            "description": "Description",
            "itemtype": "method",
            "name": "byName",
            "params": [
                {
                    "name": "name",
                    "description": ""
                }
            ],
            "return": {
                "description": "MemberExpression"
            },
            "class": "Ember.Namespace",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 52709,
            "description": "Description",
            "itemtype": "method",
            "name": "processNamespace",
            "params": [
                {
                    "name": "paths",
                    "description": ""
                },
                {
                    "name": "root",
                    "description": ""
                },
                {
                    "name": "seen",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Namespace",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 52757,
            "description": "Description",
            "itemtype": "method",
            "name": "tryIsNamespace",
            "params": [
                {
                    "name": "lookup",
                    "description": ""
                },
                {
                    "name": "prop",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Namespace",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 52773,
            "description": "Description",
            "itemtype": "method",
            "name": "findNamespaces",
            "return": {
                "description": ""
            },
            "class": "Ember.Namespace",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 52801,
            "description": "Description",
            "itemtype": "method",
            "name": "superClassString",
            "params": [
                {
                    "name": "mixin",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Namespace",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 52817,
            "description": "Description",
            "itemtype": "method",
            "name": "classToString",
            "return": {
                "description": "ret"
            },
            "class": "Ember.Namespace",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 52846,
            "description": "Description",
            "itemtype": "method",
            "name": "processAllNamespaces",
            "return": {
                "description": ""
            },
            "class": "Ember.Namespace",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 52871,
            "description": "Description",
            "itemtype": "method",
            "name": "makeToString",
            "params": [
                {
                    "name": "ret",
                    "description": ""
                }
            ],
            "return": {
                "description": "FunctionExpression"
            },
            "class": "Ember.Namespace",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 52930,
            "description": "Description",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "key",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.NativeArray",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 52942,
            "description": "Description",
            "itemtype": "method",
            "name": "objectAt",
            "params": [
                {
                    "name": "idx",
                    "description": ""
                }
            ],
            "return": {
                "description": "MemberExpression"
            },
            "class": "Ember.NativeArray",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 52953,
            "description": "Description",
            "itemtype": "method",
            "name": "replace",
            "params": [
                {
                    "name": "idx",
                    "description": ""
                },
                {
                    "name": "amt",
                    "description": ""
                },
                {
                    "name": "objects",
                    "description": ""
                }
            ],
            "return": {
                "description": "ThisExpression"
            },
            "class": "Ember.NativeArray",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 52983,
            "description": "Description",
            "itemtype": "method",
            "name": "unknownProperty",
            "params": [
                {
                    "name": "key",
                    "description": ""
                },
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": "ret"
            },
            "class": "Ember.NativeArray",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 53000,
            "description": "Description",
            "itemtype": "method",
            "name": "indexOf",
            "params": [
                {
                    "name": "object",
                    "description": ""
                },
                {
                    "name": "startAt",
                    "description": ""
                }
            ],
            "return": {
                "description": "UnaryExpression"
            },
            "class": "Ember.NativeArray",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 53020,
            "description": "Description",
            "itemtype": "method",
            "name": "lastIndexOf",
            "params": [
                {
                    "name": "object",
                    "description": ""
                },
                {
                    "name": "startAt",
                    "description": ""
                }
            ],
            "return": {
                "description": "UnaryExpression"
            },
            "class": "Ember.NativeArray",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 53040,
            "description": "Description",
            "itemtype": "method",
            "name": "copy",
            "params": [
                {
                    "name": "deep",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.NativeArray",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 53065,
            "description": "Creates an `Ember.NativeArray` from an Array like object.\nDoes not modify the original object. Ember.A is not needed if\n`Ember.EXTEND_PROTOTYPES` is `true` (the default value). However,\nit is recommended that you use Ember.A when creating addons for\nember or when you can not guarantee that `Ember.EXTEND_PROTOTYPES`\nwill be `true`.\nExample\n```js\nvar Pagination = Ember.CollectionView.extend({\ntagName: 'ul',\nclassNames: ['pagination'],\ninit: function() {\nthis._super();\nif (!this.get('content')) {\nthis.set('content', Ember.A());\n}\n}\n});\n```",
            "itemtype": "method",
            "name": "A",
            "params": [
                {
                    "name": "arr",
                    "description": ""
                }
            ],
            "return": {
                "description": "ConditionalExpression"
            },
            "class": "Ember.Ember",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 53095,
            "description": "Activates the mixin on the Array.prototype if not already applied. Calling\nthis method more than once is safe. This will be called when ember is loaded\nunless you have `Ember.EXTEND_PROTOTYPES` or `Ember.EXTEND_PROTOTYPES.Array`\nset to `false`.\nExample\n```js\nif (Ember.EXTEND_PROTOTYPES === true || Ember.EXTEND_PROTOTYPES.Array) {\nEmber.NativeArray.activate();\n}\n```",
            "static": 1,
            "itemtype": "method",
            "name": "activate",
            "return": {
                "description": ""
            },
            "class": "Ember.NativeArray",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 53114,
            "description": "Description",
            "params": [
                {
                    "name": "arr",
                    "description": ""
                }
            ],
            "return": {
                "description": "LogicalExpression"
            },
            "class": "Ember.NativeArray",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 53154,
            "description": "Description",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "Literal"
            },
            "class": "Ember.Object",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 53190,
            "description": "Description",
            "itemtype": "method",
            "name": "contentPropertyWillChange",
            "params": [
                {
                    "name": "content",
                    "description": ""
                },
                {
                    "name": "contentKey",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Object",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 53203,
            "description": "Description",
            "itemtype": "method",
            "name": "contentPropertyDidChange",
            "params": [
                {
                    "name": "content",
                    "description": ""
                },
                {
                    "name": "contentKey",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Object",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 53284,
            "description": "The object whose properties will be forwarded.",
            "itemtype": "property",
            "name": "content",
            "type": "Ember.Object",
            "default": "null",
            "class": "Ember.ObjectProxy",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 53300,
            "description": "Description",
            "itemtype": "method",
            "name": "willWatchProperty",
            "params": [
                {
                    "name": "key",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ObjectProxy",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 53312,
            "description": "Description",
            "itemtype": "method",
            "name": "didUnwatchProperty",
            "params": [
                {
                    "name": "key",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ObjectProxy",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 53324,
            "description": "Description",
            "itemtype": "method",
            "name": "unknownProperty",
            "params": [
                {
                    "name": "key",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ObjectProxy",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 53337,
            "description": "Description",
            "itemtype": "method",
            "name": "setUnknownProperty",
            "params": [
                {
                    "name": "key",
                    "description": ""
                },
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.ObjectProxy",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 53493,
            "description": "This property will change as the number of objects in the set changes.",
            "itemtype": "property",
            "name": "length",
            "type": "number",
            "default": "0",
            "class": "Ember.Set",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 53502,
            "description": "Clears the set. This is useful if you want to reuse an existing set\nwithout having to recreate it.\n```javascript\nvar colors = new Ember.Set([\"red\", \"green\", \"blue\"]);\ncolors.length;  // 3\ncolors.clear();\ncolors.length;  // 0\n```",
            "itemtype": "method",
            "name": "clear",
            "return": {
                "description": "ThisExpression"
            },
            "class": "Ember.Set",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 53541,
            "description": "Returns true if the passed object is also an enumerable that contains the\nsame objects as the receiver.\n```javascript\nvar colors = [\"red\", \"green\", \"blue\"],\nsame_colors = new Ember.Set(colors);\nsame_colors.isEqual(colors);               // true\nsame_colors.isEqual([\"purple\", \"brown\"]);  // false\n```",
            "itemtype": "method",
            "name": "isEqual",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                }
            ],
            "return": {
                "description": "Literal"
            },
            "class": "Ember.Set",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 53568,
            "description": "Adds an object to the set. Only non-`null` objects can be added to a set\nand those can only be added once. If the object is already in the set or\nthe passed value is null this method will have no effect.\n\nThis is an alias for `Ember.MutableEnumerable.addObject()`.\n\n```javascript\nvar colors = new Ember.Set();\ncolors.add(\"blue\");     // [\"blue\"]\ncolors.add(\"blue\");     // [\"blue\"]\ncolors.add(\"red\");      // [\"blue\", \"red\"]\ncolors.add(null);       // [\"blue\", \"red\"]\ncolors.add(undefined);  // [\"blue\", \"red\"]\n```",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "obj",
                    "description": "The object to add.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The set itself.",
                "type": "Ember.Set"
            },
            "class": "Ember.Set",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 53590,
            "description": "Removes the object from the set if it is found. If you pass a `null` value\nor an object that is already not in the set, this method will have no\neffect. This is an alias for `Ember.MutableEnumerable.removeObject()`.\n\n```javascript\nvar colors = new Ember.Set([\"red\", \"green\", \"blue\"]);\ncolors.remove(\"red\");     // [\"blue\", \"green\"]\ncolors.remove(\"purple\");  // [\"blue\", \"green\"]\ncolors.remove(null);      // [\"blue\", \"green\"]\n```",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "obj",
                    "description": "The object to remove",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The set itself.",
                "type": "Ember.Set"
            },
            "class": "Ember.Set",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 53608,
            "description": "Removes the last element from the set and returns it, or `null` if it's empty.\n```javascript\nvar colors = new Ember.Set([\"green\", \"blue\"]);\ncolors.pop();  // \"blue\"\ncolors.pop();  // \"green\"\ncolors.pop();  // null\n```",
            "itemtype": "method",
            "name": "pop",
            "return": {
                "description": "obj"
            },
            "class": "Ember.Set",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 53626,
            "description": "Inserts the given object on to the end of the set. It returns\nthe set itself.\n\nThis is an alias for `Ember.MutableEnumerable.addObject()`.\n\n```javascript\nvar colors = new Ember.Set();\ncolors.push(\"red\");   // [\"red\"]\ncolors.push(\"green\"); // [\"red\", \"green\"]\ncolors.push(\"blue\");  // [\"red\", \"green\", \"blue\"]\n```",
            "itemtype": "method",
            "name": "push",
            "return": {
                "description": "The set itself.",
                "type": "Ember.Set"
            },
            "class": "Ember.Set",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 53644,
            "description": "Removes the last element from the set and returns it, or `null` if it's empty.\n\nThis is an alias for `Ember.Set.pop()`.\n\n```javascript\nvar colors = new Ember.Set([\"green\", \"blue\"]);\ncolors.shift();  // \"blue\"\ncolors.shift();  // \"green\"\ncolors.shift();  // null\n```",
            "itemtype": "method",
            "name": "shift",
            "return": {
                "description": "The removed object from the set or null.",
                "type": "Object"
            },
            "class": "Ember.Set",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 53661,
            "description": "Inserts the given object on to the end of the set. It returns\nthe set itself.\n\nThis is an alias of `Ember.Set.push()`\n\n```javascript\nvar colors = new Ember.Set();\ncolors.unshift(\"red\");    // [\"red\"]\ncolors.unshift(\"green\");  // [\"red\", \"green\"]\ncolors.unshift(\"blue\");   // [\"red\", \"green\", \"blue\"]\n```",
            "itemtype": "method",
            "name": "unshift",
            "return": {
                "description": "The set itself.",
                "type": "Ember.Set"
            },
            "class": "Ember.Set",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 53679,
            "description": "Adds each object in the passed enumerable to the set.\n\nThis is an alias of `Ember.MutableEnumerable.addObjects()`\n\n```javascript\nvar colors = new Ember.Set();\ncolors.addEach([\"red\", \"green\", \"blue\"]);  // [\"red\", \"green\", \"blue\"]\n```",
            "itemtype": "method",
            "name": "addEach",
            "params": [
                {
                    "name": "objects",
                    "description": "the objects to add.",
                    "type": "Ember.Enumerable"
                }
            ],
            "return": {
                "description": "The set itself.",
                "type": "Ember.Set"
            },
            "class": "Ember.Set",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 53695,
            "description": "Removes each object in the passed enumerable to the set.\n\nThis is an alias of `Ember.MutableEnumerable.removeObjects()`\n\n```javascript\nvar colors = new Ember.Set([\"red\", \"green\", \"blue\"]);\ncolors.removeEach([\"red\", \"blue\"]);  //  [\"green\"]\n```",
            "itemtype": "method",
            "name": "removeEach",
            "params": [
                {
                    "name": "objects",
                    "description": "the objects to remove.",
                    "type": "Ember.Enumerable"
                }
            ],
            "return": {
                "description": "The set itself.",
                "type": "Ember.Set"
            },
            "class": "Ember.Set",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 53715,
            "description": "Description",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "items",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Set",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 53727,
            "description": "Description",
            "itemtype": "method",
            "name": "nextObject",
            "params": [
                {
                    "name": "idx",
                    "description": ""
                }
            ],
            "return": {
                "description": "MemberExpression"
            },
            "class": "Ember.Set",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 53748,
            "description": "Description",
            "itemtype": "method",
            "name": "addObject",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                }
            ],
            "return": {
                "description": "ThisExpression"
            },
            "class": "Ember.Set",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 53782,
            "description": "Description",
            "itemtype": "method",
            "name": "removeObject",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                }
            ],
            "return": {
                "description": "ThisExpression"
            },
            "class": "Ember.Set",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 53827,
            "description": "Description",
            "itemtype": "method",
            "name": "contains",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                }
            ],
            "return": {
                "description": "BinaryExpression"
            },
            "class": "Ember.Set",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 53837,
            "description": "Description",
            "itemtype": "method",
            "name": "copy",
            "return": {
                "description": "ret"
            },
            "class": "Ember.Set",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 53852,
            "description": "Description",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Set",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 53886,
            "description": "Description",
            "itemtype": "method",
            "name": "fmt",
            "params": [
                {
                    "name": "str",
                    "description": ""
                },
                {
                    "name": "formats",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Set",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 53907,
            "description": "Description",
            "itemtype": "method",
            "name": "loc",
            "params": [
                {
                    "name": "str",
                    "description": ""
                },
                {
                    "name": "formats",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Set",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 53923,
            "description": "Description",
            "itemtype": "method",
            "name": "w",
            "params": [
                {
                    "name": "str",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Set",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 53933,
            "description": "Description",
            "itemtype": "method",
            "name": "decamelize",
            "params": [
                {
                    "name": "str",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Set",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 53943,
            "description": "Description",
            "itemtype": "method",
            "name": "dasherize",
            "params": [
                {
                    "name": "str",
                    "description": ""
                }
            ],
            "return": {
                "description": "ret"
            },
            "class": "Ember.Set",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 53964,
            "description": "Description",
            "itemtype": "method",
            "name": "camelize",
            "params": [
                {
                    "name": "str",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Set",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 53978,
            "description": "Description",
            "itemtype": "method",
            "name": "classify",
            "params": [
                {
                    "name": "str",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Set",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 53996,
            "description": "Description",
            "itemtype": "method",
            "name": "underscore",
            "params": [
                {
                    "name": "str",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Set",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 54007,
            "description": "Description",
            "itemtype": "method",
            "name": "capitalize",
            "params": [
                {
                    "name": "str",
                    "description": ""
                }
            ],
            "return": {
                "description": "BinaryExpression"
            },
            "class": "Ember.Set",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 54017,
            "description": "Defines the hash of localized strings for the current language. Used by\nthe `Ember.String.loc()` helper. To localize, add string values to this\nhash.",
            "itemtype": "property",
            "name": "STRINGS",
            "type": "Hash",
            "class": "Ember.Ember",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 54038,
            "description": "Apply formatting options to the string. This will look for occurrences\nof \"%@\" in your string and substitute them with the arguments you pass into\nthis method. If you want to control the specific order of replacement,\nyou can add a number after the key as well to indicate which argument\nyou want to insert.\n\nOrdered insertions are most useful when building loc strings where values\nyou need to insert may appear in different orders.\n\n```javascript\n\"Hello %@ %@\".fmt('John', 'Doe');     // \"Hello John Doe\"\n\"Hello %@2, %@1\".fmt('John', 'Doe');  // \"Hello Doe, John\"\n```",
            "itemtype": "method",
            "name": "fmt",
            "params": [
                {
                    "name": "str",
                    "description": "The string to format",
                    "type": "String"
                },
                {
                    "name": "formats",
                    "description": "An array of parameters to interpolate into string.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "formatted string",
                "type": "String"
            },
            "class": "Ember.String",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 54060,
            "description": "Formats the passed string, but first looks up the string in the localized\nstrings hash. This is a convenient way to localize text. See\n`Ember.String.fmt()` for more information on formatting.\n\nNote that it is traditional but not required to prefix localized string\nkeys with an underscore or other character so you can easily identify\nlocalized strings.\n\n```javascript\nEmber.STRINGS = {\n  '_Hello World': 'Bonjour le monde',\n  '_Hello %@ %@': 'Bonjour %@ %@'\n};\n\nEmber.String.loc(\"_Hello World\");  // 'Bonjour le monde';\nEmber.String.loc(\"_Hello %@ %@\", [\"John\", \"Smith\"]);  // \"Bonjour John Smith\";\n```",
            "itemtype": "method",
            "name": "loc",
            "params": [
                {
                    "name": "str",
                    "description": "The string to format",
                    "type": "String"
                },
                {
                    "name": "formats",
                    "description": "Optional array of parameters to interpolate into string.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "formatted string",
                "type": "String"
            },
            "class": "Ember.String",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 54086,
            "description": "Splits a string into separate units separated by spaces, eliminating any\nempty strings in the process. This is a convenience method for split that\nis mostly useful when applied to the `String.prototype`.\n\n```javascript\nEmber.String.w(\"alpha beta gamma\").forEach(function(key) {\n  console.log(key);\n});\n\n// > alpha\n// > beta\n// > gamma\n```",
            "itemtype": "method",
            "name": "w",
            "params": [
                {
                    "name": "str",
                    "description": "The string to split",
                    "type": "String"
                }
            ],
            "return": {
                "description": "array containing the split strings",
                "type": "Array"
            },
            "class": "Ember.String",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 54107,
            "description": "Converts a camelized string into all lower case separated by underscores.\n\n```javascript\n'innerHTML'.decamelize();           // 'inner_html'\n'action_name'.decamelize();        // 'action_name'\n'css-class-name'.decamelize();     // 'css-class-name'\n'my favorite items'.decamelize();  // 'my favorite items'\n```",
            "itemtype": "method",
            "name": "decamelize",
            "params": [
                {
                    "name": "str",
                    "description": "The string to decamelize.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the decamelized string.",
                "type": "String"
            },
            "class": "Ember.String",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 54123,
            "description": "Replaces underscores, spaces, or camelCase with dashes.\n\n```javascript\n'innerHTML'.dasherize();          // 'inner-html'\n'action_name'.dasherize();        // 'action-name'\n'css-class-name'.dasherize();     // 'css-class-name'\n'my favorite items'.dasherize();  // 'my-favorite-items'\n```",
            "itemtype": "method",
            "name": "dasherize",
            "params": [
                {
                    "name": "str",
                    "description": "The string to dasherize.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the dasherized string.",
                "type": "String"
            },
            "class": "Ember.String",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 54139,
            "description": "Returns the lowerCamelCase form of a string.\n\n```javascript\n'innerHTML'.camelize();          // 'innerHTML'\n'action_name'.camelize();        // 'actionName'\n'css-class-name'.camelize();     // 'cssClassName'\n'my favorite items'.camelize();  // 'myFavoriteItems'\n'My Favorite Items'.camelize();  // 'myFavoriteItems'\n```",
            "itemtype": "method",
            "name": "camelize",
            "params": [
                {
                    "name": "str",
                    "description": "The string to camelize.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the camelized string.",
                "type": "String"
            },
            "class": "Ember.String",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 54156,
            "description": "Returns the UpperCamelCase form of a string.\n\n```javascript\n'innerHTML'.classify();          // 'InnerHTML'\n'action_name'.classify();        // 'ActionName'\n'css-class-name'.classify();     // 'CssClassName'\n'my favorite items'.classify();  // 'MyFavoriteItems'\n```",
            "itemtype": "method",
            "name": "classify",
            "params": [
                {
                    "name": "str",
                    "description": "the string to classify",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the classified string",
                "type": "String"
            },
            "class": "Ember.String",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 54172,
            "description": "More general than decamelize. Returns the lower\\_case\\_and\\_underscored\nform of a string.\n\n```javascript\n'innerHTML'.underscore();          // 'inner_html'\n'action_name'.underscore();        // 'action_name'\n'css-class-name'.underscore();     // 'css_class_name'\n'my favorite items'.underscore();  // 'my_favorite_items'\n```",
            "itemtype": "method",
            "name": "underscore",
            "params": [
                {
                    "name": "str",
                    "description": "The string to underscore.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the underscored string.",
                "type": "String"
            },
            "class": "Ember.String",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 54189,
            "description": "Returns the Capitalized form of a string\n\n```javascript\n'innerHTML'.capitalize()         // 'InnerHTML'\n'action_name'.capitalize()       // 'Action_name'\n'css-class-name'.capitalize()    // 'Css-class-name'\n'my favorite items'.capitalize() // 'My favorite items'\n```",
            "itemtype": "method",
            "name": "capitalize",
            "params": [
                {
                    "name": "str",
                    "description": "The string to capitalize.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The capitalized string.",
                "type": "String"
            },
            "class": "Ember.String",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 54227,
            "description": "Description",
            "itemtype": "method",
            "name": "Operation",
            "params": [
                {
                    "name": "type",
                    "description": ""
                },
                {
                    "name": "count",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.String",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 54263,
            "description": "Track that an item was added to the tracked array.",
            "itemtype": "method",
            "name": "addItem",
            "params": [
                {
                    "name": "index",
                    "description": "The index of the item in the tracked array.",
                    "type": "Number"
                },
                {
                    "name": "match",
                    "description": "`true` iff the item is included in the subarray.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "returnValue"
            },
            "class": "Ember.SubArray",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 54313,
            "description": "Track that an item was removed from the tracked array.\nwas not in the subarray.",
            "itemtype": "method",
            "name": "removeItem",
            "params": [
                {
                    "name": "index",
                    "description": "The index of the item in the tracked array.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "returnValue"
            },
            "class": "Ember.SubArray",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 54396,
            "description": "Description",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.SubArray",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 54452,
            "description": "Track that `newItems` were added to the tracked array at `index`.",
            "itemtype": "method",
            "name": "addItems",
            "params": [
                {
                    "name": "index",
                    "description": ""
                },
                {
                    "name": "newItems",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.TrackedArray",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 54493,
            "description": "Track that `count` items were removed at `index`.",
            "itemtype": "method",
            "name": "removeItems",
            "params": [
                {
                    "name": "index",
                    "description": ""
                },
                {
                    "name": "count",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.TrackedArray",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 54523,
            "description": "Apply all operations, reducing them to retain:n, for `n`, the number of\nitems in the array.\n`callback` will be called for each operation and will be passed the following arguments:\n{array} items The items for the given operation\n{number} offset The computed offset of the items, ie the index in the\narray of the first item for this operation.\n{string} operation The type of the operation.  One of\n`Ember.TrackedArray.{RETAIN, DELETE, INSERT}`",
            "itemtype": "method",
            "name": "apply",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.TrackedArray",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 54552,
            "description": "Return an `ArrayOperationMatch` for the operation that contains the item at `index`.",
            "itemtype": "method",
            "name": "_findArrayOperation",
            "params": [
                {
                    "name": "index",
                    "description": "the index of the item whose operation information\nshould be returned.",
                    "type": "Number"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Ember.TrackedArray",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 54701,
            "description": "Description",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.TrackedArray",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 54715,
            "description": "Internal data structure to represent an array operation.",
            "access": "private",
            "tagname": "`Ember.TrackedArray.{RETAIN, INSERT, DELETE}`\nINSERT include their items, DELETE does not.",
            "itemtype": "method",
            "name": "ArrayOperation",
            "params": [
                {
                    "name": "operation",
                    "description": ""
                },
                {
                    "name": "count",
                    "description": "The number of items in this operation.",
                    "type": "Number"
                },
                {
                    "name": "items",
                    "description": "The items of the operation, if included.  RETAIN and",
                    "type": "Array"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.TrackedArray",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 54732,
            "description": "Internal data structure used to include information when looking up operations\nby item index.",
            "access": "private",
            "tagname": "require a split for a new operation type.\nwith respect to the tracked array.  The index of the last item can be computed\nfrom `rangeStart` and `operation.count`.",
            "itemtype": "method",
            "name": "ArrayOperationMatch",
            "params": [
                {
                    "name": "operation",
                    "description": "",
                    "type": "ArrayOperation"
                },
                {
                    "name": "index",
                    "description": "The index of `operation` in the array of operations.",
                    "type": "Number"
                },
                {
                    "name": "split",
                    "description": "Whether or not the item index searched for would",
                    "type": "Boolean"
                },
                {
                    "name": "rangeStart",
                    "description": "The index of the first item in the operation,",
                    "type": "Number"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.TrackedArray",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 54803,
            "description": "This callback will be called whenever an async operation is about to start.\n\nOverride this to call your framework's methods that handle async\noperations.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "asyncStart",
            "class": "Ember.Test.Adapter",
            "module": "ember",
            "submodule": "ember-testing",
            "namespace": "Ember.Test"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 54814,
            "description": "This callback will be called whenever an async operation has completed.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "asyncEnd",
            "class": "Ember.Test.Adapter",
            "module": "ember",
            "submodule": "ember-testing",
            "namespace": "Ember.Test"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 54822,
            "description": "Override this method with your testing framework's false assertion.\nThis function is called whenever an exception occurs causing the testing\npromise to fail.\nQUnit example:\n```javascript\nexception: function(error) {\nok(false, error);\n};\n```",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "exception",
            "params": [
                {
                    "name": "error",
                    "description": "The exception to be raised.",
                    "type": "String"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Test.Adapter",
            "module": "ember",
            "submodule": "ember-testing",
            "namespace": "Ember.Test"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 54860,
            "description": "Description",
            "itemtype": "method",
            "name": "asyncStart",
            "return": {
                "description": ""
            },
            "class": "Ember.Test.QUnitAdapter",
            "module": "ember",
            "submodule": "ember-testing",
            "namespace": "Ember.Test"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 54868,
            "description": "Description",
            "itemtype": "method",
            "name": "asyncEnd",
            "return": {
                "description": ""
            },
            "class": "Ember.Test.QUnitAdapter",
            "module": "ember",
            "submodule": "ember-testing",
            "namespace": "Ember.Test"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 54876,
            "description": "Description",
            "itemtype": "method",
            "name": "exception",
            "params": [
                {
                    "name": "error",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Test.QUnitAdapter",
            "module": "ember",
            "submodule": "ember-testing",
            "namespace": "Ember.Test"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 54906,
            "description": "Description",
            "itemtype": "method",
            "name": "currentRouteName",
            "params": [
                {
                    "name": "app",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Test.QUnitAdapter",
            "module": "ember",
            "submodule": "ember-testing"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 54918,
            "description": "Description",
            "itemtype": "method",
            "name": "currentPath",
            "params": [
                {
                    "name": "app",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Test.QUnitAdapter",
            "module": "ember",
            "submodule": "ember-testing"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 54930,
            "description": "Description",
            "itemtype": "method",
            "name": "currentURL",
            "params": [
                {
                    "name": "app",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Test.QUnitAdapter",
            "module": "ember",
            "submodule": "ember-testing"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 54942,
            "description": "Description",
            "itemtype": "method",
            "name": "visit",
            "params": [
                {
                    "name": "app",
                    "description": ""
                },
                {
                    "name": "url",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Test.QUnitAdapter",
            "module": "ember",
            "submodule": "ember-testing"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 54964,
            "description": "Description",
            "itemtype": "method",
            "name": "click",
            "params": [
                {
                    "name": "app",
                    "description": ""
                },
                {
                    "name": "selector",
                    "description": ""
                },
                {
                    "name": "context",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Test.QUnitAdapter",
            "module": "ember",
            "submodule": "ember-testing"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 54998,
            "description": "Description",
            "itemtype": "method",
            "name": "triggerEvent",
            "params": [
                {
                    "name": "app",
                    "description": ""
                },
                {
                    "name": "selector",
                    "description": ""
                },
                {
                    "name": "context",
                    "description": ""
                },
                {
                    "name": "type",
                    "description": ""
                },
                {
                    "name": "options",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Test.QUnitAdapter",
            "module": "ember",
            "submodule": "ember-testing"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 55039,
            "description": "Description",
            "itemtype": "method",
            "name": "keyEvent",
            "params": [
                {
                    "name": "app",
                    "description": ""
                },
                {
                    "name": "selector",
                    "description": ""
                },
                {
                    "name": "context",
                    "description": ""
                },
                {
                    "name": "type",
                    "description": ""
                },
                {
                    "name": "keyCode",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Test.QUnitAdapter",
            "module": "ember",
            "submodule": "ember-testing"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 55059,
            "description": "Description",
            "itemtype": "method",
            "name": "fillIn",
            "params": [
                {
                    "name": "app",
                    "description": ""
                },
                {
                    "name": "selector",
                    "description": ""
                },
                {
                    "name": "context",
                    "description": ""
                },
                {
                    "name": "text",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Test.QUnitAdapter",
            "module": "ember",
            "submodule": "ember-testing"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 55081,
            "description": "Description",
            "itemtype": "method",
            "name": "findWithAssert",
            "params": [
                {
                    "name": "app",
                    "description": ""
                },
                {
                    "name": "selector",
                    "description": ""
                },
                {
                    "name": "context",
                    "description": ""
                }
            ],
            "return": {
                "description": "$el"
            },
            "class": "Ember.Test.QUnitAdapter",
            "module": "ember",
            "submodule": "ember-testing"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 55097,
            "description": "Description",
            "itemtype": "method",
            "name": "find",
            "params": [
                {
                    "name": "app",
                    "description": ""
                },
                {
                    "name": "selector",
                    "description": ""
                },
                {
                    "name": "context",
                    "description": ""
                }
            ],
            "return": {
                "description": "$el"
            },
            "class": "Ember.Test.QUnitAdapter",
            "module": "ember",
            "submodule": "ember-testing"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 55113,
            "description": "Description",
            "itemtype": "method",
            "name": "andThen",
            "params": [
                {
                    "name": "app",
                    "description": ""
                },
                {
                    "name": "callback",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Test.QUnitAdapter",
            "module": "ember",
            "submodule": "ember-testing"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 55124,
            "description": "Description",
            "itemtype": "method",
            "name": "wait",
            "params": [
                {
                    "name": "app",
                    "description": ""
                },
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Test.QUnitAdapter",
            "module": "ember",
            "submodule": "ember-testing"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 55170,
            "description": "Loads a route, sets up any controllers, and renders any templates associated\nwith the route as though a real user had triggered the route change while\nusing your app.\n\nExample:\n\n```javascript\nvisit('posts/index').then(function() {\n  // assert something\n});\n```",
            "itemtype": "method",
            "name": "visit",
            "params": [
                {
                    "name": "url",
                    "description": "the name of the route",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "RSVP.Promise"
            },
            "class": "Ember.Test.QUnitAdapter",
            "module": "ember",
            "submodule": "ember-testing"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 55189,
            "description": "Clicks an element and triggers any actions triggered by the element's `click`\nevent.\n\nExample:\n\n```javascript\nclick('.some-jQuery-selector').then(function() {\n  // assert something\n});\n```",
            "itemtype": "method",
            "name": "click",
            "params": [
                {
                    "name": "selector",
                    "description": "jQuery selector for finding element on the DOM",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "RSVP.Promise"
            },
            "class": "Ember.Test.QUnitAdapter",
            "module": "ember",
            "submodule": "ember-testing"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 55207,
            "description": "Simulates a key event, e.g. `keypress`, `keydown`, `keyup` with the desired keyCode\n\nExample:\n\n```javascript\nkeyEvent('.some-jQuery-selector', 'keypress', 13).then(function() {\n // assert something\n});\n```",
            "itemtype": "method",
            "name": "keyEvent",
            "params": [
                {
                    "name": "selector",
                    "description": "jQuery selector for finding element on the DOM",
                    "type": "String"
                },
                {
                    "name": "type",
                    "description": "the type of key event, e.g. `keypress`, `keydown`, `keyup`",
                    "type": "String"
                },
                {
                    "name": "keyCode",
                    "description": "the keyCode of the simulated key event",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "RSVP.Promise"
            },
            "since": "1.5.0",
            "class": "Ember.Test.QUnitAdapter",
            "module": "ember",
            "submodule": "ember-testing"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 55227,
            "description": "Fills in an input element with some text.\n\nExample:\n\n```javascript\nfillIn('#email', 'you@example.com').then(function() {\n  // assert something\n});\n```",
            "itemtype": "method",
            "name": "fillIn",
            "params": [
                {
                    "name": "selector",
                    "description": "jQuery selector finding an input element on the DOM\nto fill text with",
                    "type": "String"
                },
                {
                    "name": "text",
                    "description": "text to place inside the input element",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "RSVP.Promise"
            },
            "class": "Ember.Test.QUnitAdapter",
            "module": "ember",
            "submodule": "ember-testing"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 55246,
            "description": "Finds an element in the context of the app's container element. A simple alias\nfor `app.$(selector)`.\n\nExample:\n\n```javascript\nvar $el = find('.my-selector');\n```",
            "itemtype": "method",
            "name": "find",
            "params": [
                {
                    "name": "selector",
                    "description": "jQuery string selector for element lookup",
                    "type": "String"
                }
            ],
            "return": {
                "description": "jQuery object representing the results of the query",
                "type": "Object"
            },
            "class": "Ember.Test.QUnitAdapter",
            "module": "ember",
            "submodule": "ember-testing"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 55262,
            "description": "Like `find`, but throws an error if the element selector returns no results.\n\nExample:\n\n```javascript\nvar $el = findWithAssert('.doesnt-exist'); // throws error\n```",
            "itemtype": "method",
            "name": "findWithAssert",
            "params": [
                {
                    "name": "selector",
                    "description": "jQuery selector string for finding an element within\nthe DOM",
                    "type": "String"
                }
            ],
            "return": {
                "description": "jQuery object representing the results of the query",
                "type": "Object"
            },
            "throws": {
                "description": "throws error if jQuery object returned has a length of 0",
                "type": "Error"
            },
            "class": "Ember.Test.QUnitAdapter",
            "module": "ember",
            "submodule": "ember-testing"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 55279,
            "description": "Causes the run loop to process any pending events. This is used to ensure that\nany async operations from other helpers (or your assertions) have been processed.\n\nThis is most often used as the return value for the helper functions (see 'click',\n'fillIn','visit',etc).\n\nExample:\n\n```javascript\nEmber.Test.registerAsyncHelper('loginUser', function(app, username, password) {\n  visit('secured/path/here')\n  .fillIn('#username', username)\n  .fillIn('#password', username)\n  .click('.submit')\n\n  return app.testHelpers.wait();\n});",
            "itemtype": "method",
            "name": "wait",
            "params": [
                {
                    "name": "value",
                    "description": "The value to be returned.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "RSVP.Promise"
            },
            "class": "Ember.Test.QUnitAdapter",
            "module": "ember",
            "submodule": "ember-testing"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 55306,
            "description": "Returns the currently active route name.\n\n    Example:\n\n    ```javascript\n    function validateRouteName(){\n    equal(currentRouteName(), 'some.path', \"correct route was transitioned into.\");\n    }\n\n    visit('/some/path').then(validateRouteName)\n    ```",
            "itemtype": "method",
            "name": "currentRouteName",
            "return": {
                "description": "The name of the currently active route.",
                "type": "Object"
            },
            "since": "1.5.0",
            "class": "Ember.Test.QUnitAdapter",
            "module": "ember",
            "submodule": "ember-testing"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 55325,
            "description": "Returns the current path.\n\n    Example:\n\n    ```javascript\n    function validateURL(){\n    equal(currentPath(), 'some.path.index', \"correct path was transitioned into.\");\n    }\n\n    click('#some-link-id').then(validateURL);\n    ```",
            "itemtype": "method",
            "name": "currentPath",
            "return": {
                "description": "The currently active path.",
                "type": "Object"
            },
            "since": "1.5.0",
            "class": "Ember.Test.QUnitAdapter",
            "module": "ember",
            "submodule": "ember-testing"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 55344,
            "description": "Returns the current URL.\n\n    Example:\n\n    ```javascript\n    function validateURL(){\n    equal(currentURL(), '/some/path', \"correct URL was transitioned into.\");\n    }\n\n    click('#some-link-id').then(validateURL);\n    ```",
            "itemtype": "method",
            "name": "currentURL",
            "return": {
                "description": "The currently active URL.",
                "type": "Object"
            },
            "since": "1.5.0",
            "class": "Ember.Test.QUnitAdapter",
            "module": "ember",
            "submodule": "ember-testing"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 55363,
            "description": "Triggers the given DOM event on the element identified by the provided selector.\n\nExample:\n\n```javascript\ntriggerEvent('#some-elem-id', 'blur');\n```\n\nThis is actually used internally by the `keyEvent` helper like so:\n\n```javascript\ntriggerEvent('#some-elem-id', 'keypress', { keyCode: 13 });\n```",
            "itemtype": "method",
            "name": "triggerEvent",
            "params": [
                {
                    "name": "selector",
                    "description": "jQuery selector for finding element on the DOM",
                    "type": "String"
                },
                {
                    "name": "context",
                    "description": "jQuery selector that will limit the selector\n                         argument to find only within the context's children",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "type",
                    "description": "The event type to be triggered.",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "The options to be passed to jQuery.Event.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "RSVP.Promise"
            },
            "since": "1.5.0",
            "class": "Ember.Test.QUnitAdapter",
            "module": "ember",
            "submodule": "ember-testing"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 55402,
            "description": "Description",
            "itemtype": "method",
            "name": "initialize",
            "params": [
                {
                    "name": "container",
                    "description": ""
                },
                {
                    "name": "application",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Test.QUnitAdapter",
            "module": "ember",
            "submodule": "ember-testing"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 55429,
            "description": "Description",
            "itemtype": "method",
            "name": "incrementAjaxPendingRequests",
            "params": [
                {
                    "name": "_",
                    "description": ""
                },
                {
                    "name": "xhr",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Test.QUnitAdapter",
            "module": "ember",
            "submodule": "ember-testing"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 55441,
            "description": "Description",
            "itemtype": "method",
            "name": "decrementAjaxPendingRequests",
            "params": [
                {
                    "name": "_",
                    "description": ""
                },
                {
                    "name": "xhr",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Test.QUnitAdapter",
            "module": "ember",
            "submodule": "ember-testing"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 55457,
            "description": "Sets Ember up for testing. This is useful to perform\nbasic setup steps in order to unit test.\nUse `App.setupForTesting` to perform integration tests (full\napplication testing).",
            "return": {
                "description": ""
            },
            "since": "1.5.0",
            "class": "Ember.Test.QUnitAdapter",
            "module": "ember",
            "submodule": "ember-testing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 55499,
            "description": "This method creates a checkbox and triggers the click event to fire the\npassed in handler. It is used to correct for a bug in older versions\nof jQuery (e.g 1.8.3).",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "testCheckboxClick",
            "params": [
                {
                    "name": "handler",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Test.QUnitAdapter",
            "module": "ember",
            "submodule": "ember-testing"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 55530,
            "description": "Description",
            "itemtype": "method",
            "name": "trigger",
            "return": {
                "description": ""
            },
            "class": "Ember.Test.QUnitAdapter",
            "module": "ember",
            "submodule": "ember-testing"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 55583,
            "description": "Hash containing all known test helpers.",
            "itemtype": "property",
            "name": "_helpers",
            "access": "private",
            "tagname": "",
            "since": "1.7.0",
            "class": "Ember.Test",
            "module": "ember",
            "submodule": "ember-testing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 55592,
            "description": "`registerHelper` is used to register a test helper that will be injected\nwhen `App.injectTestHelpers` is called.\nThe helper method will always be called with the current Application as\nthe first parameter.\nFor example:\n```javascript\nEmber.Test.registerHelper('boot', function(app) {\nEmber.run(app, app.advanceReadiness);\n});\n```\nThis helper can later be called without arguments because it will be\ncalled with `app` as the first parameter.\n```javascript\nApp = Ember.Application.create();\nApp.injectTestHelpers();\nboot();\n```",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "registerHelper",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the helper method to add.",
                    "type": "String"
                },
                {
                    "name": "helperMethod",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Test",
            "module": "ember",
            "submodule": "ember-testing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 55623,
            "description": "`registerAsyncHelper` is used to register an async test helper that will be injected\nwhen `App.injectTestHelpers` is called.\nThe helper method will always be called with the current Application as\nthe first parameter.\nFor example:\n```javascript\nEmber.Test.registerAsyncHelper('boot', function(app) {\nEmber.run(app, app.advanceReadiness);\n});\n```\nThe advantage of an async helper is that it will not run\nuntil the last async helper has completed.  All async helpers\nafter it will wait for it complete before running.\nFor example:\n```javascript\nEmber.Test.registerAsyncHelper('deletePost', function(app, postId) {\nclick('.delete-' + postId);\n});\n// ... in your test\nvisit('/post/2');\ndeletePost(2);\nvisit('/post/3');\ndeletePost(3);\n```",
            "access": "public",
            "tagname": "",
            "since": "1.2.0",
            "itemtype": "method",
            "name": "registerAsyncHelper",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the helper method to add.",
                    "type": "String"
                },
                {
                    "name": "helperMethod",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Test",
            "module": "ember",
            "submodule": "ember-testing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 55662,
            "description": "Remove a previously added helper method.\nExample:\n```javascript\nEmber.Test.unregisterHelper('wait');\n```",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "unregisterHelper",
            "params": [
                {
                    "name": "name",
                    "description": "The helper to remove.",
                    "type": "String"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Test",
            "module": "ember",
            "submodule": "ember-testing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 55678,
            "description": "Used to register callbacks to be fired whenever `App.injectTestHelpers`\nis called.\nThe callback will receive the current application as an argument.\nExample:\n```javascript\nEmber.Test.onInjectHelpers(function() {\nEmber.$(document).ajaxSend(function() {\nTest.pendingAjaxRequests++;\n});\nEmber.$(document).ajaxComplete(function() {\nTest.pendingAjaxRequests--;\n});\n});\n```",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "onInjectHelpers",
            "params": [
                {
                    "name": "callback",
                    "description": "The function to be called.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Test",
            "module": "ember",
            "submodule": "ember-testing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 55702,
            "description": "This returns a thenable tailored for testing.  It catches failed\n`onSuccess` callbacks and invokes the `Ember.Test.adapter.exception`\ncallback in the last chained then.\nThis method should be returned by async helpers such as `wait`.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "promise",
            "params": [
                {
                    "name": "resolver",
                    "description": "The function used to resolve the promise.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "NewExpression"
            },
            "class": "Ember.Test",
            "module": "ember",
            "submodule": "ember-testing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 55716,
            "description": "Used to allow ember-testing to communicate with a specific testing\nframework.\n\nYou can manually set it before calling `App.setupForTesting()`.\n\nExample:\n\n```javascript\nEmber.Test.adapter = MyCustomAdapter.create()\n```\n\nIf you do not set it, ember-testing will default to `Ember.Test.QUnitAdapter`.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "adapter",
            "type": "{Class} The adapter to be used.",
            "default": "Ember.Test.QUnitAdapter",
            "class": "Ember.Test",
            "module": "ember",
            "submodule": "ember-testing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 55737,
            "description": "Replacement for `Ember.RSVP.resolve`\nThe only difference is this uses\nan instance of `Ember.Test.Promise`",
            "access": "public",
            "tagname": "",
            "since": "1.2.0",
            "itemtype": "method",
            "name": "resolve",
            "params": [
                {
                    "name": "val",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Test",
            "module": "ember",
            "submodule": "ember-testing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 55753,
            "description": "This allows ember-testing to play nicely with other asynchronous\nevents, such as an application that is waiting for a CSS3\ntransition or an IndexDB transaction.\nFor example:\n```javascript\nEmber.Test.registerWaiter(function() {\nreturn myPendingTransactions() == 0;\n});\n```\nThe `context` argument allows you to optionally specify the `this`\nwith which your callback will be invoked.\nFor example:\n```javascript\nEmber.Test.registerWaiter(MyDB, MyDB.hasPendingTransactions);\n```",
            "access": "public",
            "tagname": "",
            "since": "1.2.0",
            "itemtype": "method",
            "name": "registerWaiter",
            "params": [
                {
                    "name": "context",
                    "description": "(optional)",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Test",
            "module": "ember",
            "submodule": "ember-testing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 55786,
            "description": "`unregisterWaiter` is used to unregister a callback that was\nregistered with `registerWaiter`.",
            "access": "public",
            "tagname": "",
            "since": "1.2.0",
            "itemtype": "method",
            "name": "unregisterWaiter",
            "params": [
                {
                    "name": "context",
                    "description": "(optional)",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Test",
            "module": "ember",
            "submodule": "ember-testing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 55810,
            "description": "Description",
            "itemtype": "method",
            "name": "helper",
            "params": [
                {
                    "name": "app",
                    "description": ""
                },
                {
                    "name": "name",
                    "description": ""
                }
            ],
            "return": {
                "description": "FunctionExpression"
            },
            "class": "Ember.Test",
            "module": "ember",
            "submodule": "ember-testing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 55851,
            "description": "Description",
            "itemtype": "method",
            "name": "run",
            "params": [
                {
                    "name": "fn",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Test",
            "module": "ember",
            "submodule": "ember-testing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 55866,
            "description": "This property contains the testing helpers for the current application. These\nare created once you call `injectTestHelpers` on your `Ember.Application`\ninstance. The included helpers are also available on the `window` object by\ndefault, but can be used from this object on the individual application also.",
            "itemtype": "property",
            "name": "testHelpers",
            "type": "{Object}",
            "default": "{}",
            "class": "Ember.Test",
            "module": "ember",
            "submodule": "ember-testing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 55878,
            "description": "This property will contain the original methods that were registered\non the `helperContainer` before `injectTestHelpers` is called.\n\nWhen `removeTestHelpers` is called, these methods are restored to the\n`helperContainer`.",
            "itemtype": "property",
            "name": "originalMethods",
            "type": "{Object}",
            "default": "{}",
            "access": "private",
            "tagname": "",
            "since": "1.3.0",
            "class": "Ember.Test",
            "module": "ember",
            "submodule": "ember-testing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 55894,
            "description": "This property indicates whether or not this application is currently in\ntesting mode. This is set when `setupForTesting` is called on the current\napplication.",
            "itemtype": "property",
            "name": "testing",
            "type": "{Boolean}",
            "default": "false",
            "since": "1.3.0",
            "class": "Ember.Test",
            "module": "ember",
            "submodule": "ember-testing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 55906,
            "description": "This hook defers the readiness of the application, so that you can start\nthe app when your tests are ready to run. It also sets the router's\nlocation to 'none', so that the window's location will not be modified\n(preventing both accidental leaking of state between tests and interference\nwith your testing framework).\nExample:\n```\nApp.setupForTesting();\n```",
            "itemtype": "method",
            "name": "setupForTesting",
            "return": {
                "description": ""
            },
            "class": "Ember.Test",
            "module": "ember",
            "submodule": "ember-testing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 55929,
            "description": "This will be used as the container to inject the test helpers into. By\ndefault the helpers are injected into `window`.",
            "itemtype": "property",
            "name": "helperContainer",
            "type": "{Object} The object to be used for test helpers.",
            "default": "window",
            "since": "1.2.0",
            "class": "Ember.Test",
            "module": "ember",
            "submodule": "ember-testing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 55940,
            "description": "This injects the test helpers into the `helperContainer` object. If an object is provided\nit will be used as the helperContainer. If `helperContainer` is not set it will default\nto `window`. If a function of the same name has already been defined it will be cached\n(so that it can be reset if the helper is removed with `unregisterHelper` or\n`removeTestHelpers`).\nAny callbacks registered with `onInjectHelpers` will be called once the\nhelpers have been injected.\nExample:\n```\nApp.injectTestHelpers();\n```",
            "itemtype": "method",
            "name": "injectTestHelpers",
            "params": [
                {
                    "name": "helperContainer",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Test",
            "module": "ember",
            "submodule": "ember-testing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 55971,
            "description": "This removes all helpers that have been registered, and resets and functions\nthat were overridden by the helpers.\nExample:\n```javascript\nApp.removeTestHelpers();\n```",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "removeTestHelpers",
            "return": {
                "description": ""
            },
            "class": "Ember.Test",
            "module": "ember",
            "submodule": "ember-testing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 55994,
            "description": "Description",
            "itemtype": "method",
            "name": "protoWrap",
            "params": [
                {
                    "name": "proto",
                    "description": ""
                },
                {
                    "name": "name",
                    "description": ""
                },
                {
                    "name": "callback",
                    "description": ""
                },
                {
                    "name": "isAsync",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Test",
            "module": "ember",
            "submodule": "ember-testing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 56004,
            "description": "Description",
            "itemtype": "method",
            "name": "name",
            "return": {
                "description": ""
            },
            "class": "Ember.Test",
            "module": "ember",
            "submodule": "ember-testing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 56021,
            "description": "Description",
            "itemtype": "method",
            "name": "Promise",
            "return": {
                "description": ""
            },
            "class": "Ember.Test",
            "module": "ember",
            "submodule": "ember-testing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 56037,
            "description": "Description",
            "itemtype": "method",
            "name": "then",
            "params": [
                {
                    "name": "onSuccess",
                    "description": ""
                },
                {
                    "name": "onFailure",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Test",
            "module": "ember",
            "submodule": "ember-testing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 56057,
            "description": "Description",
            "itemtype": "method",
            "name": "isolate",
            "params": [
                {
                    "name": "fn",
                    "description": ""
                },
                {
                    "name": "val",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Test",
            "module": "ember",
            "submodule": "ember-testing",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 56125,
            "description": "Alias for jQuery",
            "itemtype": "method",
            "name": "$",
            "class": "Ember.Ember",
            "module": "ember",
            "submodule": "ember-views"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 56178,
            "access": "private",
            "tagname": "Moves `templateName` to `layoutName` and `template` to `layout` at extend\ntime if a layout is not also specified.\nNote that this currently modifies the mixin themselves, which is technically\ndubious but is practically of little consequence. This may change in the\nfuture.",
            "since": "1.4.0",
            "itemtype": "method",
            "name": "willMergeMixin",
            "params": [
                {
                    "name": "props",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ComponentTemplateDeprecation",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 56276,
            "itemtype": "property",
            "name": "target",
            "class": "Ember.ViewTargetActionSupport",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 56280,
            "itemtype": "property",
            "name": "actionContext",
            "class": "Ember.ViewTargetActionSupport",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 56325,
            "description": "The set of events names (and associated handler function names) to be setup\nand dispatched by the `EventDispatcher`. Custom events can added to this list at setup\ntime, generally via the `Ember.Application.customEvents` hash. Only override this\ndefault set to prevent the EventDispatcher from listening on some events all together.\n\nThis set will be modified by `setup` to also include any events added at that time.",
            "itemtype": "property",
            "name": "events",
            "type": "Object",
            "class": "Ember.EventDispatcher",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 56366,
            "description": "The root DOM element to which event listeners should be attached. Event\nlisteners will be attached to the document unless this is overridden.\n\nCan be specified as a DOMElement or a selector string.\n\nThe default body is a string since this may be evaluated before document.body\nexists in the DOM.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "rootElement",
            "type": "DOMElement",
            "default": "'body'",
            "class": "Ember.EventDispatcher",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 56382,
            "description": "It enables events to be dispatched to the view's `eventManager.` When present,\nthis object takes precedence over handling of events on the view itself.\n\nNote that most Ember applications do not use this feature. If your app also\ndoes not use it, consider setting this property to false to gain some performance\nimprovement by allowing the EventDispatcher to skip the search for the\n`eventManager` on the view tree.\n\n```javascript\nvar EventDispatcher = Em.EventDispatcher.extend({\n  events: {\n      click       : 'click',\n      focusin     : 'focusIn',\n      focusout    : 'focusOut',\n      change      : 'change'\n  },\n  canDispatchToEventManager: false\n});\ncontainer.register('event_dispatcher:main', EventDispatcher);\n```",
            "itemtype": "property",
            "name": "canDispatchToEventManager",
            "type": "boolean",
            "default": "'true'",
            "since": "1.7.0",
            "class": "Ember.EventDispatcher",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 56411,
            "description": "Sets up event listeners for standard browser events.\nThis will be called after the browser sends a `DOMContentReady` event. By\ndefault, it will set up all of the listeners on the document body. If you\nwould like to register the listeners on a different element, set the event\ndispatcher's `root` property.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "setup",
            "params": [
                {
                    "name": "addedEvents",
                    "description": "",
                    "type": "Hash"
                },
                {
                    "name": "rootElement",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.EventDispatcher",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 56449,
            "description": "Registers an event listener on the rootElement. If the given event is\ntriggered, the provided event handler will be triggered on the target view.\nIf the target view does not implement the event handler, or if the handler\nreturns `false`, the parent view will be called. The event will continue to\nbubble to each successive parent view until it reaches the top.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "setupHandler",
            "params": [
                {
                    "name": "rootElement",
                    "description": "",
                    "type": "Element"
                },
                {
                    "name": "event",
                    "description": "the browser-originated event to listen to",
                    "type": "String"
                },
                {
                    "name": "eventName",
                    "description": "the name of the method to call on the view",
                    "type": "String"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.EventDispatcher",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 56529,
            "description": "Description",
            "itemtype": "method",
            "name": "destroy",
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.EventDispatcher",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 56540,
            "description": "Description",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "Literal"
            },
            "class": "Ember.EventDispatcher",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 56629,
            "description": "Description",
            "itemtype": "method",
            "name": "ClassSet",
            "return": {
                "description": ""
            },
            "class": "Ember.EventDispatcher",
            "module": "ember",
            "submodule": "ember-views"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 56640,
            "description": "Description",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "string",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.EventDispatcher",
            "module": "ember",
            "submodule": "ember-views"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 56653,
            "description": "Description",
            "itemtype": "method",
            "name": "toDOM",
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.EventDispatcher",
            "module": "ember",
            "submodule": "ember-views"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 56666,
            "description": "Description",
            "itemtype": "method",
            "name": "stripTagName",
            "params": [
                {
                    "name": "tagName",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.EventDispatcher",
            "module": "ember",
            "submodule": "ember-views"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 56687,
            "description": "Description",
            "itemtype": "method",
            "name": "escapeAttribute",
            "params": [
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.EventDispatcher",
            "module": "ember",
            "submodule": "ember-views"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 56704,
            "description": "Description",
            "itemtype": "method",
            "name": "escapeChar",
            "params": [
                {
                    "name": "chr",
                    "description": ""
                }
            ],
            "return": {
                "description": "LogicalExpression"
            },
            "class": "Ember.EventDispatcher",
            "module": "ember",
            "submodule": "ember-views"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 56762,
            "description": "An internal set used to de-dupe class names when `addClass()` is\nused. After each call to `addClass()`, the `classes` property\nwill be updated.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "elementClasses",
            "type": "Array",
            "default": "null",
            "class": "Ember.RenderBuffer",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 56774,
            "description": "Array of class names which will be applied in the class attribute.\n\nYou can use `setClasses()` to set this property directly. If you\nuse `addClass()`, it will be maintained for you.",
            "itemtype": "property",
            "name": "classes",
            "type": "Array",
            "default": "null",
            "class": "Ember.RenderBuffer",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 56786,
            "description": "The id in of the element, to be applied in the id attribute.\n\nYou should not set this property yourself, rather, you should use\nthe `id()` method of `Ember.RenderBuffer`.",
            "itemtype": "property",
            "name": "elementId",
            "type": "String",
            "default": "null",
            "class": "Ember.RenderBuffer",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 56798,
            "description": "A hash keyed on the name of the attribute and whose value will be\napplied to that attribute. For example, if you wanted to apply a\n`data-view=\"Foo.bar\"` property to an element, you would set the\nelementAttributes hash to `{'data-view':'Foo.bar'}`.\n\nYou should not maintain this hash yourself, rather, you should use\nthe `attr()` method of `Ember.RenderBuffer`.",
            "itemtype": "property",
            "name": "elementAttributes",
            "type": "Hash",
            "default": "{}",
            "class": "Ember.RenderBuffer",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 56813,
            "description": "A hash keyed on the name of the properties and whose value will be\napplied to that property. For example, if you wanted to apply a\n`checked=true` property to an element, you would set the\nelementProperties hash to `{'checked':true}`.\n\nYou should not maintain this hash yourself, rather, you should use\nthe `prop()` method of `Ember.RenderBuffer`.",
            "itemtype": "property",
            "name": "elementProperties",
            "type": "Hash",
            "default": "{}",
            "class": "Ember.RenderBuffer",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 56828,
            "description": "The tagname of the element an instance of `Ember.RenderBuffer` represents.\n\nUsually, this gets set as the first parameter to `Ember.RenderBuffer`. For\nexample, if you wanted to create a `p` tag, then you would call\n\n```javascript\nEmber.RenderBuffer('p')\n```",
            "itemtype": "property",
            "name": "elementTag",
            "type": "String",
            "default": "null",
            "class": "Ember.RenderBuffer",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 56844,
            "description": "A hash keyed on the name of the style attribute and whose value will\nbe applied to that attribute. For example, if you wanted to apply a\n`background-color:black;` style to an element, you would set the\nelementStyle hash to `{'background-color':'black'}`.\n\nYou should not maintain this hash yourself, rather, you should use\nthe `style()` method of `Ember.RenderBuffer`.",
            "itemtype": "property",
            "name": "elementStyle",
            "type": "Hash",
            "default": "{}",
            "class": "Ember.RenderBuffer",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 56859,
            "description": "Adds a string of HTML to the `RenderBuffer`.",
            "chainable": 1,
            "itemtype": "method",
            "name": "push",
            "params": [
                {
                    "name": "string",
                    "description": "HTML to push into the buffer",
                    "type": "String"
                }
            ],
            "return": {
                "description": "ThisExpression"
            },
            "class": "Ember.RenderBuffer",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 56871,
            "description": "Adds a class to the buffer, which will be rendered to the class attribute.",
            "chainable": 1,
            "itemtype": "method",
            "name": "addClass",
            "params": [
                {
                    "name": "className",
                    "description": "Class name to add to the buffer",
                    "type": "String"
                }
            ],
            "return": {
                "description": "ThisExpression"
            },
            "class": "Ember.RenderBuffer",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 56887,
            "description": "Description",
            "itemtype": "method",
            "name": "setClasses",
            "params": [
                {
                    "name": "classNames",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.RenderBuffer",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 56901,
            "description": "Sets the elementID to be used for the element.",
            "chainable": 1,
            "itemtype": "method",
            "name": "id",
            "params": [
                {
                    "name": "id",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "ThisExpression"
            },
            "class": "Ember.RenderBuffer",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 56916,
            "description": "Adds an attribute which will be rendered to the element.",
            "chainable": 1,
            "itemtype": "method",
            "name": "attr",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the attribute",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The value to add to the attribute",
                    "type": "String"
                }
            ],
            "return": {
                "description": "ThisExpression"
            },
            "class": "Ember.RenderBuffer",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 56936,
            "description": "Remove an attribute from the list of attributes to render.",
            "chainable": 1,
            "itemtype": "method",
            "name": "removeAttr",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the attribute",
                    "type": "String"
                }
            ],
            "return": {
                "description": "ThisExpression"
            },
            "class": "Ember.RenderBuffer",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 56950,
            "description": "Adds a property which will be rendered to the element.",
            "chainable": 1,
            "itemtype": "method",
            "name": "prop",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the property",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The value to add to the property",
                    "type": "String"
                }
            ],
            "return": {
                "description": "ThisExpression"
            },
            "class": "Ember.RenderBuffer",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 56970,
            "description": "Remove an property from the list of properties to render.",
            "chainable": 1,
            "itemtype": "method",
            "name": "removeProp",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the property",
                    "type": "String"
                }
            ],
            "return": {
                "description": "ThisExpression"
            },
            "class": "Ember.RenderBuffer",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 56984,
            "description": "Adds a style to the style attribute which will be rendered to the element.",
            "chainable": 1,
            "itemtype": "method",
            "name": "style",
            "params": [
                {
                    "name": "name",
                    "description": "Name of the style",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "ThisExpression"
            },
            "class": "Ember.RenderBuffer",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 56999,
            "description": "Description",
            "itemtype": "method",
            "name": "begin",
            "params": [
                {
                    "name": "tagName",
                    "description": ""
                }
            ],
            "return": {
                "description": "ThisExpression"
            },
            "class": "Ember.RenderBuffer",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 57010,
            "description": "Description",
            "itemtype": "method",
            "name": "pushOpeningTag",
            "return": {
                "description": ""
            },
            "class": "Ember.RenderBuffer",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 57089,
            "description": "Description",
            "itemtype": "method",
            "name": "pushClosingTag",
            "return": {
                "description": ""
            },
            "class": "Ember.RenderBuffer",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 57099,
            "description": "Description",
            "itemtype": "method",
            "name": "currentTagName",
            "return": {
                "description": "MemberExpression"
            },
            "class": "Ember.RenderBuffer",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 57108,
            "description": "Description",
            "itemtype": "method",
            "name": "generateElement",
            "return": {
                "description": "element"
            },
            "class": "Ember.RenderBuffer",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 57177,
            "description": "of this buffer",
            "itemtype": "method",
            "name": "element",
            "return": {
                "description": "MemberExpression"
            },
            "class": "Ember.RenderBuffer",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 57192,
            "description": "Generates the HTML content for this buffer.",
            "itemtype": "method",
            "name": "string",
            "return": {
                "description": ""
            },
            "class": "Ember.RenderBuffer",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 57210,
            "description": "Description",
            "itemtype": "method",
            "name": "innerString",
            "return": {
                "description": "MemberExpression"
            },
            "class": "Ember.RenderBuffer",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 57258,
            "description": "Description",
            "itemtype": "method",
            "name": "findChildById",
            "params": [
                {
                    "name": "element",
                    "description": ""
                },
                {
                    "name": "id",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.RenderBuffer",
            "module": "ember",
            "submodule": "ember-views"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 57276,
            "description": "Description",
            "itemtype": "method",
            "name": "setInnerHTMLWithoutFix",
            "params": [
                {
                    "name": "element",
                    "description": ""
                },
                {
                    "name": "html",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.RenderBuffer",
            "module": "ember",
            "submodule": "ember-views"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 57325,
            "description": "Description",
            "itemtype": "method",
            "name": "canSetInnerHTML",
            "params": [
                {
                    "name": "tagName",
                    "description": ""
                }
            ],
            "return": {
                "description": "canSet"
            },
            "class": "Ember.RenderBuffer",
            "module": "ember",
            "submodule": "ember-views"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 57350,
            "description": "Description",
            "itemtype": "method",
            "name": "setInnerHTML",
            "params": [
                {
                    "name": "element",
                    "description": ""
                },
                {
                    "name": "html",
                    "description": ""
                }
            ],
            "return": {
                "description": "element"
            },
            "class": "Ember.RenderBuffer",
            "module": "ember",
            "submodule": "ember-views"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 57382,
            "description": "Description",
            "itemtype": "method",
            "name": "isSimpleClick",
            "params": [
                {
                    "name": "event",
                    "description": ""
                }
            ],
            "return": {
                "description": "LogicalExpression"
            },
            "class": "Ember.RenderBuffer",
            "module": "ember",
            "submodule": "ember-views"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 57572,
            "description": "A list of items to be displayed by the `Ember.CollectionView`.",
            "itemtype": "property",
            "name": "content",
            "type": "Ember.Array",
            "default": "null",
            "class": "Ember.CollectionView",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 57581,
            "description": "This provides metadata about what kind of empty view class this\ncollection would like if it is being instantiated from another\nsystem (like Handlebars)",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "emptyViewClass",
            "class": "Ember.CollectionView",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 57591,
            "description": "An optional view to display if content is set to an empty array.",
            "itemtype": "property",
            "name": "emptyView",
            "type": "Ember.View",
            "default": "null",
            "class": "Ember.CollectionView",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 57600,
            "itemtype": "property",
            "name": "itemViewClass",
            "type": "Ember.View",
            "default": "Ember.View",
            "class": "Ember.CollectionView",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 57607,
            "description": "Setup a CollectionView",
            "itemtype": "method",
            "name": "init",
            "return": {
                "description": "ret"
            },
            "class": "Ember.CollectionView",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 57618,
            "description": "Invoked when the content property is about to change. Notifies observers that the\nentire array content will change.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_contentWillChange",
            "class": "Ember.CollectionView",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 57633,
            "description": "Check to make sure that the content has changed, and if so,\nupdate the children directly. This is always scheduled\nasynchronously, to allow the element to be created before\nbindings have synchronized and vice versa.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_contentDidChange",
            "class": "Ember.CollectionView",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 57654,
            "description": "Ensure that the content implements Ember.Array",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_assertArrayLike",
            "class": "Ember.CollectionView",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 57664,
            "description": "Removes the content and content observers.",
            "itemtype": "method",
            "name": "destroy",
            "return": {
                "description": "ThisExpression"
            },
            "class": "Ember.CollectionView",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 57682,
            "description": "Called when a mutation to the underlying content array will occur.\nThis method will remove any views that are no longer in the underlying\ncontent array.\nInvokes whenever the content array itself will change.",
            "itemtype": "method",
            "name": "arrayWillChange",
            "params": [
                {
                    "name": "content",
                    "description": "the managed collection of objects",
                    "type": "Array"
                },
                {
                    "name": "start",
                    "description": "the index at which the changes will occurr",
                    "type": "Number"
                },
                {
                    "name": "removedCount",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.CollectionView",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 57723,
            "description": "Called when a mutation to the underlying content array occurs.\nThis method will replay that mutation against the views that compose the\n`Ember.CollectionView`, ensuring that the view reflects the model.\nThis array observer is added in `contentDidChange`.",
            "itemtype": "method",
            "name": "arrayDidChange",
            "params": [
                {
                    "name": "content",
                    "description": "the managed collection of objects",
                    "type": "Array"
                },
                {
                    "name": "start",
                    "description": "the index at which the changes occurred",
                    "type": "Number"
                },
                {
                    "name": "removed",
                    "description": "number of object removed from content",
                    "type": "Number"
                },
                {
                    "name": "added",
                    "description": "number of object added to content",
                    "type": "Number"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.CollectionView",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 57783,
            "description": "Instantiates a view to be added to the childViews array during view\ninitialization. You generally will not call this method directly unless\nyou are overriding `createChildViews()`. Note that this method will\nautomatically configure the correct settings on the new view instance to\nact as a child of the parent.\nThe tag name for the view will be set to the tagName of the viewClass\npassed in.",
            "itemtype": "method",
            "name": "createChildView",
            "params": [
                {
                    "name": "view",
                    "description": ""
                },
                {
                    "name": "attrs",
                    "description": ""
                }
            ],
            "return": {
                "description": "view"
            },
            "class": "Ember.CollectionView",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 57810,
            "description": "A map of parent tags to their default child tags. You can add\nadditional parent tags if you want collection views that use\na particular parent tag to default to a child tag.",
            "itemtype": "property",
            "name": "CONTAINER_MAP",
            "type": "Hash",
            "static": 1,
            "final": 1,
            "class": "Ember.CollectionView",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 57950,
            "description": "Description",
            "itemtype": "method",
            "name": "init",
            "return": {
                "description": ""
            },
            "class": "Ember.Component",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 57962,
            "description": "Description",
            "itemtype": "method",
            "name": "defaultLayout",
            "params": [
                {
                    "name": "context",
                    "description": ""
                },
                {
                    "name": "options",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Component",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 57973,
            "description": "A components template property is set by passing a block\nduring its invocation. It is executed within the parent context.\n\nExample:\n\n```handlebars\n{{#my-component}}\n  // something that is run in the context\n  // of the parent context\n{{/my-component}}\n```\n\nSpecifying a template directly to a component is deprecated without\nalso specifying the layout property.",
            "deprecated": true,
            "itemtype": "property",
            "name": "template",
            "class": "Ember.Component",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 58003,
            "description": "Specifying a components `templateName` is deprecated without also\nproviding the `layout` or `layoutName` properties.",
            "deprecated": true,
            "itemtype": "property",
            "name": "templateName",
            "class": "Ember.Component",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 58013,
            "description": "Description",
            "itemtype": "method",
            "name": "cloneKeywords",
            "return": {
                "description": "ObjectExpression"
            },
            "class": "Ember.Component",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 58045,
            "description": "If the component is currently inserted into the DOM of a parent view, this\nproperty will point to the controller of the parent view.",
            "itemtype": "property",
            "name": "targetObject",
            "type": "Ember.Controller",
            "default": "null",
            "class": "Ember.Component",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 58058,
            "description": "Triggers a named action on the controller context where the component is used if\nthis controller has registered for notifications of the action.\nFor example a component for playing or pausing music may translate click events\ninto action notifications of \"play\" or \"stop\" depending on some internal state\nof the component:\n```javascript\nApp.PlayButtonComponent = Ember.Component.extend({\nclick: function(){\nif (this.get('isPlaying')) {\nthis.sendAction('play');\n} else {\nthis.sendAction('stop');\n}\n}\n});\n```\nWhen used inside a template these component actions are configured to\ntrigger actions in the outer application context:\n```handlebars\n{{! application.hbs }}\n{{play-button play=\"musicStarted\" stop=\"musicStopped\"}}\n```\nWhen the component receives a browser `click` event it translate this\ninteraction into application-specific semantics (\"play\" or \"stop\") and\ntriggers the specified action name on the controller for the template\nwhere the component is used:\n```javascript\nApp.ApplicationController = Ember.Controller.extend({\nactions: {\nmusicStarted: function(){\n// called when the play button is clicked\n// and the music started playing\n},\nmusicStopped: function(){\n// called when the play button is clicked\n// and the music stopped playing\n}\n}\n});\n```\nIf no action name is passed to `sendAction` a default name of \"action\"\nis assumed.\n```javascript\nApp.NextButtonComponent = Ember.Component.extend({\nclick: function(){\nthis.sendAction();\n}\n});\n```\n```handlebars\n{{! application.hbs }}\n{{next-button action=\"playNextSongInAlbum\"}}\n```\n```javascript\nApp.ApplicationController = Ember.Controller.extend({\nactions: {\nplayNextSongInAlbum: function(){\n...\n}\n}\n});\n```",
            "itemtype": "method",
            "name": "sendAction",
            "params": [
                {
                    "name": "action",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Component",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 58345,
            "description": "Description",
            "itemtype": "method",
            "name": "willWatchProperty",
            "params": [
                {
                    "name": "prop",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ContainerView",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 58358,
            "description": "Description",
            "itemtype": "method",
            "name": "init",
            "return": {
                "description": ""
            },
            "class": "Ember.ContainerView",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 58394,
            "description": "Description",
            "itemtype": "method",
            "name": "replace",
            "params": [
                {
                    "name": "idx",
                    "description": ""
                },
                {
                    "name": "removedCount",
                    "description": ""
                },
                {
                    "name": "addedViews",
                    "description": ""
                }
            ],
            "return": {
                "description": "ThisExpression"
            },
            "class": "Ember.ContainerView",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 58424,
            "description": "Description",
            "itemtype": "method",
            "name": "objectAt",
            "params": [
                {
                    "name": "idx",
                    "description": ""
                }
            ],
            "return": {
                "description": "MemberExpression"
            },
            "class": "Ember.ContainerView",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 58438,
            "description": "Instructs each child view to render to the passed render buffer.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "buffer",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ContainerView",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 58453,
            "description": "When a child view is removed, destroy its element so that\nit is removed from the DOM.\nThe array observer that triggers this action is set up in the\n`renderToBuffer` method.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "childViewsWillChange",
            "params": [
                {
                    "name": "views",
                    "description": ""
                },
                {
                    "name": "start",
                    "description": "the start position of the mutation",
                    "type": "Number"
                },
                {
                    "name": "removed",
                    "description": "the number of child views removed",
                    "type": "Number"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ContainerView",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 58476,
            "description": "Description",
            "itemtype": "method",
            "name": "removeChild",
            "params": [
                {
                    "name": "child",
                    "description": ""
                }
            ],
            "return": {
                "description": "ThisExpression"
            },
            "class": "Ember.ContainerView",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 58487,
            "description": "When a child view is added, make sure the DOM gets updated appropriately.\nIf the view has already rendered an element, we tell the child view to\ncreate an element and insert it into the DOM. If the enclosing container\nview has already written to a buffer, but not yet converted that buffer\ninto an element, we insert the string representation of the child into the\nappropriate place in the buffer.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "childViewsDidChange",
            "params": [
                {
                    "name": "views",
                    "description": ""
                },
                {
                    "name": "start",
                    "description": "the start position of the mutation",
                    "type": "Number"
                },
                {
                    "name": "removed",
                    "description": "the number of child views removed",
                    "type": "Number"
                },
                {
                    "name": "added",
                    "description": "the number of child views added",
                    "type": "Number"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ContainerView",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 58511,
            "description": "Description",
            "itemtype": "method",
            "name": "initializeViews",
            "params": [
                {
                    "name": "views",
                    "description": ""
                },
                {
                    "name": "parentView",
                    "description": ""
                },
                {
                    "name": "templateData",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ContainerView",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 58562,
            "description": "Description",
            "itemtype": "method",
            "name": "childViewsDidChange",
            "params": [
                {
                    "name": "parentView",
                    "description": ""
                },
                {
                    "name": "views",
                    "description": ""
                },
                {
                    "name": "start",
                    "description": ""
                },
                {
                    "name": "added",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ContainerView",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 58577,
            "description": "Description",
            "itemtype": "method",
            "name": "childViewsWillChange",
            "params": [
                {
                    "name": "view",
                    "description": ""
                },
                {
                    "name": "views",
                    "description": ""
                },
                {
                    "name": "start",
                    "description": ""
                },
                {
                    "name": "removed",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ContainerView",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 58592,
            "description": "Description",
            "itemtype": "method",
            "name": "childViewsDidChange",
            "params": [
                {
                    "name": "view",
                    "description": ""
                },
                {
                    "name": "views",
                    "description": ""
                },
                {
                    "name": "start",
                    "description": ""
                },
                {
                    "name": "added",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ContainerView",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 58605,
            "description": "Description",
            "itemtype": "method",
            "name": "ensureChildrenAreInDOM",
            "params": [
                {
                    "name": "view",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ContainerView",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 58637,
            "description": "Description",
            "itemtype": "method",
            "name": "insertViewCollection",
            "params": [
                {
                    "name": "view",
                    "description": ""
                },
                {
                    "name": "viewCollection",
                    "description": ""
                },
                {
                    "name": "previous",
                    "description": ""
                },
                {
                    "name": "buffer",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.ContainerView",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 58708,
            "description": "Description",
            "itemtype": "method",
            "name": "init",
            "return": {
                "description": ""
            },
            "class": "Ember.CoreView",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 58722,
            "description": "If the view is currently inserted into the DOM of a parent view, this\nproperty will point to the parent of the view.",
            "itemtype": "property",
            "name": "parentView",
            "type": "Ember.View",
            "default": "null",
            "class": "Ember.CoreView",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 58752,
            "description": "Description",
            "itemtype": "method",
            "name": "instrumentDetails",
            "params": [
                {
                    "name": "hash",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.CoreView",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 58764,
            "description": "Invoked by the view system when this view needs to produce an HTML\nrepresentation. This method will create a new render buffer, if needed,\nthen apply any default attributes, such as class names and visibility.\nFinally, the `render()` method is invoked, which is responsible for\ndoing the bulk of the rendering.\nYou should not need to override this method; instead, implement the\n`template` property, or if you need more control, override the `render`\nmethod.\npassed, a default buffer, using the current view's `tagName`, will\nbe used.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "renderToBuffer",
            "params": [
                {
                    "name": "buffer",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.CoreView",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 58812,
            "description": "Override the default event firing from `Ember.Evented` to\nalso call methods with the given name.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "trigger",
            "return": {
                "description": ""
            },
            "class": "Ember.CoreView",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 58833,
            "description": "Description",
            "itemtype": "method",
            "name": "deprecatedSendHandles",
            "params": [
                {
                    "name": "actionName",
                    "description": ""
                }
            ],
            "return": {
                "description": "UnaryExpression"
            },
            "class": "Ember.CoreView",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 58843,
            "description": "Description",
            "itemtype": "method",
            "name": "deprecatedSend",
            "params": [
                {
                    "name": "actionName",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.CoreView",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 58857,
            "description": "Description",
            "itemtype": "method",
            "name": "has",
            "params": [
                {
                    "name": "name",
                    "description": ""
                }
            ],
            "return": {
                "description": "LogicalExpression"
            },
            "class": "Ember.CoreView",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 58867,
            "description": "Description",
            "itemtype": "method",
            "name": "destroy",
            "return": {
                "description": "ThisExpression"
            },
            "class": "Ember.CoreView",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 58913,
            "description": "Description",
            "itemtype": "method",
            "name": "cloneStates",
            "params": [
                {
                    "name": "from",
                    "description": ""
                }
            ],
            "return": {
                "description": "into"
            },
            "class": "Ember.CoreView",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 58964,
            "description": "Description",
            "itemtype": "method",
            "name": "appendChild",
            "return": {
                "description": ""
            },
            "class": "Ember.CoreView",
            "module": "ember",
            "submodule": "ember-views"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 58973,
            "description": "Description",
            "itemtype": "method",
            "name": "$",
            "return": {
                "description": "undefined"
            },
            "class": "Ember.CoreView",
            "module": "ember",
            "submodule": "ember-views"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 58982,
            "description": "Description",
            "itemtype": "method",
            "name": "getElement",
            "return": {
                "description": "Literal"
            },
            "class": "Ember.CoreView",
            "module": "ember",
            "submodule": "ember-views"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 58992,
            "description": "Description",
            "itemtype": "method",
            "name": "handleEvent",
            "return": {
                "description": "Literal"
            },
            "class": "Ember.CoreView",
            "module": "ember",
            "submodule": "ember-views"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 59001,
            "description": "Description",
            "itemtype": "method",
            "name": "destroyElement",
            "params": [
                {
                    "name": "view",
                    "description": ""
                }
            ],
            "return": {
                "description": "view"
            },
            "class": "Ember.CoreView",
            "module": "ember",
            "submodule": "ember-views"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 59016,
            "description": "Description",
            "itemtype": "method",
            "name": "renderToBufferIfNeeded",
            "return": {
                "description": "Literal"
            },
            "class": "Ember.CoreView",
            "module": "ember",
            "submodule": "ember-views"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 59048,
            "description": "Description",
            "itemtype": "method",
            "name": "appendChild",
            "return": {
                "description": ""
            },
            "class": "Ember.CoreView",
            "module": "ember",
            "submodule": "ember-views"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 59056,
            "description": "Description",
            "itemtype": "method",
            "name": "rerender",
            "return": {
                "description": ""
            },
            "class": "Ember.CoreView",
            "module": "ember",
            "submodule": "ember-views"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 59064,
            "description": "Description",
            "itemtype": "method",
            "name": "destroyElement",
            "return": {
                "description": ""
            },
            "class": "Ember.CoreView",
            "module": "ember",
            "submodule": "ember-views"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 59072,
            "description": "Description",
            "itemtype": "method",
            "name": "empty",
            "return": {
                "description": ""
            },
            "class": "Ember.CoreView",
            "module": "ember",
            "submodule": "ember-views"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 59081,
            "description": "Description",
            "itemtype": "method",
            "name": "setElement",
            "return": {
                "description": ""
            },
            "class": "Ember.CoreView",
            "module": "ember",
            "submodule": "ember-views"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 59090,
            "description": "Description",
            "itemtype": "method",
            "name": "renderToBufferIfNeeded",
            "return": {
                "description": "Literal"
            },
            "class": "Ember.CoreView",
            "module": "ember",
            "submodule": "ember-views"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 59128,
            "description": "Description",
            "itemtype": "method",
            "name": "$",
            "params": [
                {
                    "name": "view",
                    "description": ""
                },
                {
                    "name": "sel",
                    "description": ""
                }
            ],
            "return": {
                "description": "ConditionalExpression"
            },
            "class": "Ember.CoreView",
            "module": "ember",
            "submodule": "ember-views"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 59140,
            "description": "Description",
            "itemtype": "method",
            "name": "getElement",
            "params": [
                {
                    "name": "view",
                    "description": ""
                }
            ],
            "return": {
                "description": "MemberExpression"
            },
            "class": "Ember.CoreView",
            "module": "ember",
            "submodule": "ember-views"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 59153,
            "description": "Description",
            "itemtype": "method",
            "name": "setElement",
            "params": [
                {
                    "name": "view",
                    "description": ""
                },
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": "value"
            },
            "class": "Ember.CoreView",
            "module": "ember",
            "submodule": "ember-views"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 59172,
            "description": "Description",
            "itemtype": "method",
            "name": "rerender",
            "params": [
                {
                    "name": "view",
                    "description": ""
                }
            ],
            "return": {
                "description": "view"
            },
            "class": "Ember.CoreView",
            "module": "ember",
            "submodule": "ember-views"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 59191,
            "description": "Description",
            "itemtype": "method",
            "name": "destroyElement",
            "params": [
                {
                    "name": "view",
                    "description": ""
                }
            ],
            "return": {
                "description": "view"
            },
            "class": "Ember.CoreView",
            "module": "ember",
            "submodule": "ember-views"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 59208,
            "description": "Description",
            "itemtype": "method",
            "name": "empty",
            "params": [
                {
                    "name": "view",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.CoreView",
            "module": "ember",
            "submodule": "ember-views"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 59226,
            "description": "Description",
            "itemtype": "method",
            "name": "handleEvent",
            "params": [
                {
                    "name": "view",
                    "description": ""
                },
                {
                    "name": "eventName",
                    "description": ""
                },
                {
                    "name": "evt",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.CoreView",
            "module": "ember",
            "submodule": "ember-views"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 59244,
            "description": "Description",
            "itemtype": "method",
            "name": "invokeObserver",
            "params": [
                {
                    "name": "target",
                    "description": ""
                },
                {
                    "name": "observer",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.CoreView",
            "module": "ember",
            "submodule": "ember-views"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 59278,
            "description": "Description",
            "itemtype": "method",
            "name": "$",
            "params": [
                {
                    "name": "view",
                    "description": ""
                },
                {
                    "name": "sel",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.CoreView",
            "module": "ember",
            "submodule": "ember-views"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 59296,
            "description": "Description",
            "itemtype": "method",
            "name": "rerender",
            "params": [
                {
                    "name": "view",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.CoreView",
            "module": "ember",
            "submodule": "ember-views"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 59309,
            "description": "Description",
            "itemtype": "method",
            "name": "appendChild",
            "params": [
                {
                    "name": "view",
                    "description": ""
                },
                {
                    "name": "childView",
                    "description": ""
                },
                {
                    "name": "options",
                    "description": ""
                }
            ],
            "return": {
                "description": "childView"
            },
            "class": "Ember.CoreView",
            "module": "ember",
            "submodule": "ember-views"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 59334,
            "description": "Description",
            "itemtype": "method",
            "name": "destroyElement",
            "params": [
                {
                    "name": "view",
                    "description": ""
                }
            ],
            "return": {
                "description": "view"
            },
            "class": "Ember.CoreView",
            "module": "ember",
            "submodule": "ember-views"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 59348,
            "description": "Description",
            "itemtype": "method",
            "name": "empty",
            "return": {
                "description": ""
            },
            "class": "Ember.CoreView",
            "module": "ember",
            "submodule": "ember-views"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 59360,
            "description": "Description",
            "itemtype": "method",
            "name": "renderToBufferIfNeeded",
            "params": [
                {
                    "name": "view",
                    "description": ""
                },
                {
                    "name": "buffer",
                    "description": ""
                }
            ],
            "return": {
                "description": "Literal"
            },
            "class": "Ember.CoreView",
            "module": "ember",
            "submodule": "ember-views"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 59373,
            "description": "Description",
            "itemtype": "method",
            "name": "insertElement",
            "return": {
                "description": ""
            },
            "class": "Ember.CoreView",
            "module": "ember",
            "submodule": "ember-views"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 59382,
            "description": "Description",
            "itemtype": "method",
            "name": "setElement",
            "params": [
                {
                    "name": "view",
                    "description": ""
                },
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": "value"
            },
            "class": "Ember.CoreView",
            "module": "ember",
            "submodule": "ember-views"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 59400,
            "description": "Description",
            "itemtype": "method",
            "name": "invokeObserver",
            "params": [
                {
                    "name": "target",
                    "description": ""
                },
                {
                    "name": "observer",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.CoreView",
            "module": "ember",
            "submodule": "ember-views"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 59435,
            "description": "Description",
            "itemtype": "method",
            "name": "enter",
            "params": [
                {
                    "name": "view",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.CoreView",
            "module": "ember",
            "submodule": "ember-views"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 59456,
            "description": "Description",
            "itemtype": "method",
            "name": "exit",
            "params": [
                {
                    "name": "view",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.CoreView",
            "module": "ember",
            "submodule": "ember-views"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 59468,
            "description": "Description",
            "itemtype": "method",
            "name": "insertElement",
            "params": [
                {
                    "name": "view",
                    "description": ""
                },
                {
                    "name": "fn",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.CoreView",
            "module": "ember",
            "submodule": "ember-views"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 59502,
            "description": "Description",
            "itemtype": "method",
            "name": "insertElement",
            "params": [
                {
                    "name": "view",
                    "description": ""
                },
                {
                    "name": "fn",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.CoreView",
            "module": "ember",
            "submodule": "ember-views"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 59525,
            "description": "Description",
            "itemtype": "method",
            "name": "renderToBufferIfNeeded",
            "params": [
                {
                    "name": "view",
                    "description": ""
                },
                {
                    "name": "buffer",
                    "description": ""
                }
            ],
            "return": {
                "description": "Literal"
            },
            "class": "Ember.CoreView",
            "module": "ember",
            "submodule": "ember-views"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 59539,
            "description": "Description",
            "itemtype": "method",
            "name": "setElement",
            "params": [
                {
                    "name": "view",
                    "description": ""
                },
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": "value"
            },
            "class": "Ember.CoreView",
            "module": "ember",
            "submodule": "ember-views"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 59616,
            "description": "Description",
            "itemtype": "method",
            "name": "nullViewsBuffer",
            "params": [
                {
                    "name": "view",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.CoreView",
            "module": "ember",
            "submodule": "ember-views"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 59627,
            "description": "Description",
            "itemtype": "method",
            "name": "clearCachedElement",
            "params": [
                {
                    "name": "view",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.CoreView",
            "module": "ember",
            "submodule": "ember-views"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 59651,
            "description": "Description",
            "itemtype": "method",
            "name": "replace",
            "params": [
                {
                    "name": "idx",
                    "description": ""
                },
                {
                    "name": "removedCount",
                    "description": ""
                },
                {
                    "name": "addedViews",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.CoreView",
            "module": "ember",
            "submodule": "ember-views"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 59674,
            "description": "Global hash of shared templates. This will automatically be populated\nby the build tools so that you can store your Handlebars templates in\nseparate files that get loaded into JavaScript at buildtime.",
            "itemtype": "property",
            "name": "TEMPLATES",
            "type": "Hash",
            "class": "Ember.Ember",
            "module": "ember",
            "submodule": "ember-views"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 60277,
            "itemtype": "property",
            "name": "isView",
            "type": "Boolean",
            "default": "true",
            "static": 1,
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 60289,
            "description": "The name of the template to lookup if no template is provided.\n\nBy default `Ember.View` will lookup a template with this name in\n`Ember.TEMPLATES` (a shared global object).",
            "itemtype": "property",
            "name": "templateName",
            "type": "String",
            "default": "null",
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 60301,
            "description": "The name of the layout to lookup if no layout is provided.\n\nBy default `Ember.View` will lookup a template with this name in\n`Ember.TEMPLATES` (a shared global object).",
            "itemtype": "property",
            "name": "layoutName",
            "type": "String",
            "default": "null",
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 60313,
            "description": "Used to identify this view during debugging",
            "itemtype": "property",
            "name": "instrumentDisplay",
            "type": "String",
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 60325,
            "description": "The template used to render the view. This should be a function that\naccepts an optional context parameter and returns a string of HTML that\nwill be inserted into the DOM relative to its parent view.\n\nIn general, you should set the `templateName` property instead of setting\nthe template yourself.",
            "itemtype": "property",
            "name": "template",
            "type": "Function",
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 60347,
            "description": "The controller managing this view. If this property is set, it will be\nmade available for use by the template.",
            "itemtype": "property",
            "name": "controller",
            "type": "Object",
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 60359,
            "description": "A view may contain a layout. A layout is a regular template but\nsupersedes the `template` property during rendering. It is the\nresponsibility of the layout template to retrieve the `template`\nproperty from the view (or alternatively, call `Handlebars.helpers.yield`,\n`{{yield}}`) to render it in the correct location.\n\nThis is useful for a view that has a shared wrapper, but which delegates\nthe rendering of the contents of the wrapper to the `template` property\non a subclass.",
            "itemtype": "property",
            "name": "layout",
            "type": "Function",
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 60387,
            "description": "Description",
            "itemtype": "method",
            "name": "templateForName",
            "params": [
                {
                    "name": "name",
                    "description": ""
                },
                {
                    "name": "type",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 60407,
            "description": "The object from which templates should access properties.\n\nThis object will be passed to the template function each time the render\nmethod is called, but it is up to the individual function to decide what\nto do with it.\n\nBy default, this will be the view's controller.",
            "itemtype": "property",
            "name": "context",
            "type": "Object",
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 60428,
            "description": "Private copy of the view's template context. This can be set directly\nby Handlebars without triggering the observer that causes the view\nto be re-rendered.\n\nThe context of a view is looked up as follows:\n\n1. Supplied context (usually by Handlebars)\n2. Specified controller\n3. `parentView`'s context (for a child of a ContainerView)\n\nThe code in Handlebars that overrides the `_context` property first\nchecks to see whether the view has a specified controller. This is\nsomething of a hack and should be revisited.",
            "itemtype": "property",
            "name": "_context",
            "access": "private",
            "tagname": "",
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 60461,
            "description": "If a value that affects template rendering changes, the view should be\nre-rendered to reflect the new value.",
            "itemtype": "method",
            "name": "_contextDidChange",
            "access": "private",
            "tagname": "",
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 60472,
            "description": "If `false`, the view will appear hidden in DOM.",
            "itemtype": "property",
            "name": "isVisible",
            "type": "Boolean",
            "default": "null",
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 60481,
            "description": "Array of child views. You should never edit this array directly.\nInstead, use `appendChild` and `removeFromParent`.",
            "itemtype": "property",
            "name": "childViews",
            "type": "Array",
            "default": "[]",
            "access": "private",
            "tagname": "",
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 60512,
            "description": "Return the nearest ancestor that is an instance of the provided\nclass.",
            "deprecated": true,
            "itemtype": "method",
            "name": "nearestInstanceOf",
            "params": [
                {
                    "name": "klass",
                    "description": "Subclass of Ember.View (or Ember.View itself)",
                    "type": "Class"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 60530,
            "description": "Return the nearest ancestor that is an instance of the provided\nclass or mixin.\nor an instance of Ember.Mixin.",
            "itemtype": "method",
            "name": "nearestOfType",
            "params": [
                {
                    "name": "klass",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 60550,
            "description": "Return the nearest ancestor that has a given property.",
            "itemtype": "method",
            "name": "nearestWithProperty",
            "params": [
                {
                    "name": "property",
                    "description": "A property name",
                    "type": "String"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 60565,
            "description": "Return the nearest ancestor whose parent is an instance of\n`klass`.",
            "itemtype": "method",
            "name": "nearestChildOf",
            "params": [
                {
                    "name": "klass",
                    "description": "Subclass of Ember.View (or Ember.View itself)",
                    "type": "Class"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 60581,
            "description": "When the parent view changes, recursively invalidate `controller`",
            "itemtype": "method",
            "name": "_parentViewDidChange",
            "access": "private",
            "tagname": "",
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 60607,
            "description": "Description",
            "itemtype": "method",
            "name": "cloneKeywords",
            "return": {
                "description": "keywords"
            },
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 60623,
            "description": "Called on your view when it should push strings of HTML into a\n`Ember.RenderBuffer`. Most users will want to override the `template`\nor `templateName` properties instead of this method.\nBy default, `Ember.View` will look for a function in the `template`\nproperty and invoke it with the value of `context`. The value of\n`context` will be the view's controller unless you override it.",
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "buffer",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 60668,
            "description": "Renders the view again. This will work regardless of whether the\nview is already in the DOM or not. If the view is in the DOM, the\nrendering process will be deferred to give bindings a chance\nto synchronize.\nIf children were added during the rendering process using `appendChild`,\n`rerender` will remove them, because they will be added again\nif needed by the next `render`.\nIn general, if the display of your view changes, you should modify\nthe DOM element directly instead of manually calling `rerender`, which can\nbe slow.",
            "itemtype": "method",
            "name": "rerender",
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 60686,
            "description": "Description",
            "itemtype": "method",
            "name": "clearRenderedChildren",
            "return": {
                "description": ""
            },
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 60706,
            "description": "Iterates over the view's `classNameBindings` array, inserts the value\nof the specified property into the `classNames` array, then creates an\nobserver to update the view's element if the bound property ever changes\nin the future.",
            "itemtype": "method",
            "name": "_applyClassNameBindings",
            "access": "private",
            "tagname": "",
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 60735,
            "description": "Description",
            "itemtype": "method",
            "name": "observer",
            "return": {
                "description": ""
            },
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 60792,
            "description": "Iterates through the view's attribute bindings, sets up observers for each,\nthen applies the current value of the attributes to the passed render buffer.",
            "itemtype": "method",
            "name": "_applyAttributeBindings",
            "params": [
                {
                    "name": "buffer",
                    "description": "",
                    "type": "Ember.RenderBuffer"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 60830,
            "description": "Description",
            "itemtype": "method",
            "name": "observer",
            "return": {
                "description": ""
            },
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 60846,
            "description": "We're using setUnknownProperty as a hook to setup attributeBinding observers for\nproperties that aren't defined on a view at initialization time.\n\nNote: setUnknownProperty will only be called once for each property.",
            "itemtype": "method",
            "name": "setUnknownProperty",
            "params": [
                {
                    "name": "key",
                    "description": ""
                },
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 60869,
            "description": "Given a property name, returns a dasherized version of that\nproperty name if the property evaluates to a non-falsy value.\n\nFor example, if the view has property `isUrgent` that evaluates to true,\npassing `isUrgent` to this method will return `\"is-urgent\"`.",
            "itemtype": "method",
            "name": "_classStringForProperty",
            "params": [
                {
                    "name": "property",
                    "description": ""
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 60896,
            "description": "Returns the current DOM element for the view.",
            "itemtype": "property",
            "name": "element",
            "type": "DOMElement",
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 60910,
            "description": "Returns a jQuery object for this view's element. If you pass in a selector\nstring, this method will return a jQuery object, using the current element\nas its buffer.\nFor example, calling `view.$('li')` will return a jQuery object containing\nall of the `li` elements inside the DOM element of this view.",
            "itemtype": "method",
            "name": "$",
            "params": [
                {
                    "name": "sel",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 60924,
            "description": "Description",
            "itemtype": "method",
            "name": "mutateChildViews",
            "params": [
                {
                    "name": "callback",
                    "description": ""
                }
            ],
            "return": {
                "description": "ThisExpression"
            },
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 60943,
            "description": "Description",
            "itemtype": "method",
            "name": "forEachChildView",
            "params": [
                {
                    "name": "callback",
                    "description": ""
                }
            ],
            "return": {
                "description": "ThisExpression"
            },
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 60965,
            "description": "Appends the view's element to the specified parent element.\nIf the view does not have an HTML representation yet, `createElement()`\nwill be called automatically.\nNote that this method just schedules the view to be appended; the DOM\nelement will not be appended to the given element until all bindings have\nfinished synchronizing.\nThis is not typically a function that you will need to call directly when\nbuilding your application. You might consider using `Ember.ContainerView`\ninstead. If you do need to use `appendTo`, be sure that the target element\nyou are providing is associated with an `Ember.Application` and does not\nhave an ancestor element that is associated with an Ember view.",
            "itemtype": "method",
            "name": "appendTo",
            "params": [
                {
                    "name": "target",
                    "description": ""
                }
            ],
            "return": {
                "description": "ThisExpression"
            },
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 60993,
            "description": "Replaces the content of the specified parent element with this view's\nelement. If the view does not have an HTML representation yet,\n`createElement()` will be called automatically.\nNote that this method just schedules the view to be appended; the DOM\nelement will not be appended to the given element until all bindings have\nfinished synchronizing",
            "itemtype": "method",
            "name": "replaceIn",
            "params": [
                {
                    "name": "target",
                    "description": ""
                }
            ],
            "return": {
                "description": "ThisExpression"
            },
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 61016,
            "description": "Schedules a DOM operation to occur during the next render phase. This\nensures that all bindings have finished synchronizing before the view is\nrendered.\n\nTo use, pass a function that performs a DOM operation.\n\nBefore your function is called, this view and all child views will receive\nthe `willInsertElement` event. After your function is invoked, this view\nand all of its child views will receive the `didInsertElement` event.\n\n```javascript\nview._insertElementLater(function() {\n  this.createElement();\n  this.$().appendTo('body');\n});\n```",
            "itemtype": "method",
            "name": "_insertElementLater",
            "params": [
                {
                    "name": "fn",
                    "description": "the function that inserts the element into the DOM",
                    "type": "Function"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 61047,
            "description": "Appends the view's element to the document body. If the view does\nnot have an HTML representation yet, `createElement()` will be called\nautomatically.\nIf your application uses the `rootElement` property, you must append\nthe view within that element. Rendering views outside of the `rootElement`\nis not supported.\nNote that this method just schedules the view to be appended; the DOM\nelement will not be appended to the document body until all bindings have\nfinished synchronizing.",
            "itemtype": "method",
            "name": "append",
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 61064,
            "description": "Removes the view's element from the element to which it is attached.",
            "itemtype": "method",
            "name": "remove",
            "return": {
                "description": ""
            },
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 61083,
            "description": "Attempts to discover the element in the parent element. The default\nimplementation looks for an element with an ID of `elementId` (or the\nview's guid if `elementId` is null). You can override this method to\nprovide your own form of lookup. For example, if you want to discover your\nelement using a CSS class name instead of an ID.",
            "itemtype": "method",
            "name": "findElementInParentElement",
            "params": [
                {
                    "name": "parentElem",
                    "description": ""
                }
            ],
            "return": {
                "description": "LogicalExpression"
            },
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 61098,
            "description": "Creates a DOM representation of the view and all of its\nchild views by recursively calling the `render()` method.\nAfter the element has been created, `didInsertElement` will\nbe called on this view and all of its child views.",
            "itemtype": "method",
            "name": "createElement",
            "return": {
                "description": "ThisExpression"
            },
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 61115,
            "description": "Called when a view is going to insert an element into the DOM.",
            "itemtype": "event",
            "name": "willInsertElement",
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 61122,
            "description": "Called when the element of the view has been inserted into the DOM\nor after the view was re-rendered. Override this function to do any\nset up that requires an element in the document body.",
            "itemtype": "event",
            "name": "didInsertElement",
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 61131,
            "description": "Called when the view is about to rerender, but before anything has\nbeen torn down. This is a good opportunity to tear down any manual\nobservers you have installed based on the DOM state",
            "itemtype": "event",
            "name": "willClearRender",
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 61140,
            "description": "Run this callback on the current view (unless includeSelf is false) and recursively on child views.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "invokeRecursively",
            "params": [
                {
                    "name": "fn",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "includeSelf",
                    "description": "Includes itself if true.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 61167,
            "description": "Description",
            "itemtype": "method",
            "name": "triggerRecursively",
            "params": [
                {
                    "name": "eventName",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 61192,
            "description": "Description",
            "itemtype": "method",
            "name": "viewHierarchyCollection",
            "return": {
                "description": "viewCollection"
            },
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 61210,
            "description": "Destroys any existing element along with the element for any child views\nas well. If the view does not currently have a element, then this method\nwill do nothing.\nIf you implement `willDestroyElement()` on your view, then this method will\nbe invoked on your view before your element is destroyed to give you a\nchance to clean up any event handlers, etc.\nIf you write a `willDestroyElement()` handler, you can assume that your\n`didInsertElement()` handler was called earlier for the same element.\nYou should not call or override this method yourself, but you may\nwant to implement the above callbacks.",
            "itemtype": "method",
            "name": "destroyElement",
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 61228,
            "description": "Called when the element of the view is going to be destroyed. Override\nthis function to do any teardown that requires an element, like removing\nevent listeners.",
            "itemtype": "event",
            "name": "willDestroyElement",
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 61237,
            "description": "Triggers the `willDestroyElement` event (which invokes the\n`willDestroyElement()` method if it exists) on this view and all child\nviews.\n\nBefore triggering `willDestroyElement`, it first triggers the\n`willClearRender` event recursively.",
            "itemtype": "method",
            "name": "_notifyWillDestroyElement",
            "access": "private",
            "tagname": "",
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 61255,
            "description": "If this view's element changes, we need to invalidate the caches of our\nchild views so that we do not retain references to DOM elements that are\nno longer needed.",
            "itemtype": "method",
            "name": "_elementDidChange",
            "access": "private",
            "tagname": "",
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 61267,
            "description": "Called when the parentView property has changed.",
            "itemtype": "event",
            "name": "parentViewDidChange",
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 61276,
            "description": "Description",
            "itemtype": "method",
            "name": "instrumentDetails",
            "params": [
                {
                    "name": "hash",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 61295,
            "description": "Description",
            "itemtype": "method",
            "name": "renderToBufferIfNeeded",
            "params": [
                {
                    "name": "buffer",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 61305,
            "description": "Description",
            "itemtype": "method",
            "name": "beforeRender",
            "params": [
                {
                    "name": "buffer",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 61316,
            "description": "Description",
            "itemtype": "method",
            "name": "afterRender",
            "params": [
                {
                    "name": "buffer",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 61326,
            "description": "Description",
            "itemtype": "method",
            "name": "applyAttributesToBuffer",
            "params": [
                {
                    "name": "buffer",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 61365,
            "description": "Tag name for the view's outer element. The tag name is only used when an\nelement is first created. If you change the `tagName` for an element, you\nmust destroy and recreate the view element.\n\nBy default, the render buffer will use a `<div>` tag for views.",
            "itemtype": "property",
            "name": "tagName",
            "type": "String",
            "default": "null",
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 61381,
            "description": "The WAI-ARIA role of the control represented by this view. For example, a\nbutton may have a role of type 'button', or a pane may have a role of\ntype 'alertdialog'. This property is used by assistive software to help\nvisually challenged users navigate rich web applications.\n\nThe full list of valid WAI-ARIA roles is available at:\n[http://www.w3.org/TR/wai-aria/roles#roles_categorization](http://www.w3.org/TR/wai-aria/roles#roles_categorization)",
            "itemtype": "property",
            "name": "ariaRole",
            "type": "String",
            "default": "null",
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 61396,
            "description": "Standard CSS class names to apply to the view's outer element. This\nproperty automatically inherits any class names defined by the view's\nsuperclasses as well.",
            "itemtype": "property",
            "name": "classNames",
            "type": "Array",
            "default": "['ember-view']",
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 61407,
            "description": "A list of properties of the view to apply as class names. If the property\nis a string value, the value of that string will be applied as a class\nname.\n\n```javascript\n// Applies the 'high' class to the view element\nEmber.View.extend({\n  classNameBindings: ['priority']\n  priority: 'high'\n});\n```\n\nIf the value of the property is a Boolean, the name of that property is\nadded as a dasherized class name.\n\n```javascript\n// Applies the 'is-urgent' class to the view element\nEmber.View.extend({\n  classNameBindings: ['isUrgent']\n  isUrgent: true\n});\n```\n\nIf you would prefer to use a custom value instead of the dasherized\nproperty name, you can pass a binding like this:\n\n```javascript\n// Applies the 'urgent' class to the view element\nEmber.View.extend({\n  classNameBindings: ['isUrgent:urgent']\n  isUrgent: true\n});\n```\n\nThis list of properties is inherited from the view's superclasses as well.",
            "itemtype": "property",
            "name": "classNameBindings",
            "type": "Array",
            "default": "[]",
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 61450,
            "description": "A list of properties of the view to apply as attributes. If the property is\na string value, the value of that string will be applied as the attribute.\n\n```javascript\n// Applies the type attribute to the element\n// with the value \"button\", like <div type=\"button\">\nEmber.View.extend({\n  attributeBindings: ['type'],\n  type: 'button'\n});\n```\n\nIf the value of the property is a Boolean, the name of that property is\nadded as an attribute.\n\n```javascript\n// Renders something like <div enabled=\"enabled\">\nEmber.View.extend({\n  attributeBindings: ['enabled'],\n  enabled: true\n});\n```",
            "itemtype": "property",
            "name": "attributeBindings",
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 61482,
            "description": "Setup a view, but do not finish waking it up.\nconfigure `childViews`\nregister the view with the global views hash, which is used for event\ndispatch",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "init",
            "return": {
                "description": ""
            },
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 61506,
            "description": "Description",
            "itemtype": "method",
            "name": "appendChild",
            "params": [
                {
                    "name": "view",
                    "description": ""
                },
                {
                    "name": "options",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 61517,
            "description": "Removes the child view from the parent view.",
            "itemtype": "method",
            "name": "removeChild",
            "params": [
                {
                    "name": "view",
                    "description": ""
                }
            ],
            "return": {
                "description": "ThisExpression"
            },
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 61542,
            "description": "Removes all children from the `parentView`.",
            "itemtype": "method",
            "name": "removeAllChildren",
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 61553,
            "description": "Description",
            "itemtype": "method",
            "name": "destroyAllChildren",
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 61564,
            "description": "Removes the view from its `parentView`, if one is found. Otherwise\ndoes nothing.",
            "itemtype": "method",
            "name": "removeFromParent",
            "return": {
                "description": "ThisExpression"
            },
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 61580,
            "description": "You must call `destroy` on a view to destroy the view (and all of its\nchild views). This will remove the view from any parent node, then make\nsure that the DOM element managed by the view can be released by the\nmemory manager.",
            "itemtype": "method",
            "name": "destroy",
            "return": {
                "description": "ThisExpression"
            },
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 61615,
            "description": "Instantiates a view to be added to the childViews array during view\ninitialization. You generally will not call this method directly unless\nyou are overriding `createChildViews()`. Note that this method will\nautomatically configure the correct settings on the new view instance to\nact as a child of the parent.",
            "itemtype": "method",
            "name": "createChildView",
            "params": [
                {
                    "name": "view",
                    "description": ""
                },
                {
                    "name": "attrs",
                    "description": ""
                }
            ],
            "return": {
                "description": "view"
            },
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 61675,
            "description": "When the view's `isVisible` property changes, toggle the visibility\nelement of the actual DOM element.",
            "itemtype": "method",
            "name": "_isVisibleDidChange",
            "access": "private",
            "tagname": "",
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 61743,
            "description": "Description",
            "itemtype": "method",
            "name": "clearBuffer",
            "return": {
                "description": ""
            },
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 61751,
            "description": "Description",
            "itemtype": "method",
            "name": "transitionTo",
            "params": [
                {
                    "name": "state",
                    "description": ""
                },
                {
                    "name": "children",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 61783,
            "description": "Handle events from `Ember.EventDispatcher`",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "handleEvent",
            "params": [
                {
                    "name": "eventName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "evt",
                    "description": "",
                    "type": "Event"
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 61795,
            "description": "Description",
            "itemtype": "method",
            "name": "registerObserver",
            "params": [
                {
                    "name": "root",
                    "description": ""
                },
                {
                    "name": "path",
                    "description": ""
                },
                {
                    "name": "target",
                    "description": ""
                },
                {
                    "name": "observer",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 61814,
            "description": "Description",
            "itemtype": "method",
            "name": "scheduledObserver",
            "return": {
                "description": ""
            },
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 61863,
            "description": "Description",
            "itemtype": "method",
            "name": "notifyMutationListeners",
            "return": {
                "description": ""
            },
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 61873,
            "description": "Description",
            "itemtype": "method",
            "name": "prepend",
            "params": [
                {
                    "name": "view",
                    "description": ""
                },
                {
                    "name": "html",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 61885,
            "description": "Description",
            "itemtype": "method",
            "name": "after",
            "params": [
                {
                    "name": "view",
                    "description": ""
                },
                {
                    "name": "html",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 61897,
            "description": "Description",
            "itemtype": "method",
            "name": "html",
            "params": [
                {
                    "name": "view",
                    "description": ""
                },
                {
                    "name": "html",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 61909,
            "description": "Description",
            "itemtype": "method",
            "name": "replace",
            "params": [
                {
                    "name": "view",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 61926,
            "description": "Description",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "view",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 61937,
            "description": "Description",
            "itemtype": "method",
            "name": "empty",
            "params": [
                {
                    "name": "view",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 61955,
            "description": "Parse a path and return an object which holds the parsed properties.\n\nFor example a path like \"content.isEnabled:enabled:disabled\" will return the\nfollowing object:\n\n```javascript\n{\n  path: \"content.isEnabled\",\n  className: \"enabled\",\n  falsyClassName: \"disabled\",\n  classNames: \":enabled:disabled\"\n}\n```",
            "itemtype": "method",
            "name": "_parsePropertyPath",
            "static": 1,
            "access": "private",
            "tagname": "",
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 61998,
            "description": "Get the class name for a given value, based on the path, optional\n`className` and optional `falsyClassName`.\n\n- if a `className` or `falsyClassName` has been specified:\n  - if the value is truthy and `className` has been specified,\n    `className` is returned\n  - if the value is falsy and `falsyClassName` has been specified,\n    `falsyClassName` is returned\n  - otherwise `null` is returned\n- if the value is `true`, the dasherized last part of the supplied path\n  is returned\n- if the value is not `false`, `undefined` or `null`, the `value`\n  is returned\n- if none of the above rules apply, `null` is returned",
            "itemtype": "method",
            "name": "_classStringForValue",
            "params": [
                {
                    "name": "path",
                    "description": ""
                },
                {
                    "name": "val",
                    "description": ""
                },
                {
                    "name": "className",
                    "description": ""
                },
                {
                    "name": "falsyClassName",
                    "description": ""
                }
            ],
            "static": 1,
            "access": "private",
            "tagname": "",
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 62064,
            "description": "Description",
            "itemtype": "method",
            "name": "addMutationListener",
            "params": [
                {
                    "name": "callback",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 62074,
            "description": "Description",
            "itemtype": "method",
            "name": "removeMutationListener",
            "params": [
                {
                    "name": "callback",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 62084,
            "description": "Description",
            "itemtype": "method",
            "name": "notifyMutationListeners",
            "return": {
                "description": ""
            },
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 62093,
            "description": "Global views hash",
            "itemtype": "property",
            "name": "views",
            "static": 1,
            "type": "Hash",
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 62109,
            "description": "Description",
            "itemtype": "method",
            "name": "applyAttributeBindings",
            "params": [
                {
                    "name": "elem",
                    "description": ""
                },
                {
                    "name": "name",
                    "description": ""
                },
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 62152,
            "description": "Description",
            "itemtype": "method",
            "name": "ViewCollection",
            "params": [
                {
                    "name": "initialViews",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 62166,
            "description": "Description",
            "itemtype": "method",
            "name": "trigger",
            "params": [
                {
                    "name": "eventName",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 62180,
            "description": "Description",
            "itemtype": "method",
            "name": "triggerRecursively",
            "params": [
                {
                    "name": "eventName",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 62193,
            "description": "Description",
            "itemtype": "method",
            "name": "invokeRecursively",
            "params": [
                {
                    "name": "fn",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 62208,
            "description": "Description",
            "itemtype": "method",
            "name": "transitionTo",
            "params": [
                {
                    "name": "state",
                    "description": ""
                },
                {
                    "name": "children",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 62222,
            "description": "Description",
            "itemtype": "method",
            "name": "push",
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 62233,
            "description": "Description",
            "itemtype": "method",
            "name": "objectAt",
            "params": [
                {
                    "name": "idx",
                    "description": ""
                }
            ],
            "return": {
                "description": "MemberExpression"
            },
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 62243,
            "description": "Description",
            "itemtype": "method",
            "name": "forEach",
            "params": [
                {
                    "name": "callback",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 62254,
            "description": "Description",
            "itemtype": "method",
            "name": "clear",
            "return": {
                "description": ""
            },
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 62293,
            "description": "Description",
            "itemtype": "method",
            "name": "generateRemovedClass",
            "params": [
                {
                    "name": "className",
                    "description": ""
                }
            ],
            "return": {
                "description": "ObjectExpression"
            },
            "class": "Ember.View",
            "module": "ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 62335,
            "description": "Description",
            "itemtype": "method",
            "name": "K",
            "return": {
                "description": ""
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 62381,
            "description": "Description",
            "itemtype": "method",
            "name": "Metamorph",
            "params": [
                {
                    "name": "html",
                    "description": ""
                }
            ],
            "return": {
                "description": "self"
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 62408,
            "description": "Description",
            "return": {
                "description": "BinaryExpression"
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 62416,
            "description": "Description",
            "return": {
                "description": "BinaryExpression"
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 62429,
            "description": "Description",
            "return": {
                "description": "BinaryExpression"
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 62447,
            "description": "Description",
            "params": [
                {
                    "name": "morph",
                    "description": ""
                },
                {
                    "name": "outerToo",
                    "description": ""
                }
            ],
            "return": {
                "description": "range"
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 62469,
            "description": "Description",
            "params": [
                {
                    "name": "html",
                    "description": ""
                },
                {
                    "name": "outerToo",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 62490,
            "access": "public",
            "tagname": "Remove this object (including starting and ending\nplaceholders).",
            "return": {
                "description": ""
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 62505,
            "description": "Description",
            "params": [
                {
                    "name": "node",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 62518,
            "description": "Description",
            "params": [
                {
                    "name": "html",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 62534,
            "description": "Description",
            "params": [
                {
                    "name": "html",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 62570,
            "description": "Description",
            "itemtype": "method",
            "name": "findChildById",
            "params": [
                {
                    "name": "element",
                    "description": ""
                },
                {
                    "name": "id",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 62588,
            "description": "Description",
            "itemtype": "method",
            "name": "setInnerHTML",
            "params": [
                {
                    "name": "element",
                    "description": ""
                },
                {
                    "name": "html",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 62619,
            "description": "Given a parent node and some HTML, generate a set of nodes. Return the first\nnode, which will allow us to traverse the rest using nextSibling.\nWe need to do this because innerHTML in IE does not really parse the nodes.",
            "itemtype": "method",
            "name": "firstNodeFor",
            "params": [
                {
                    "name": "parentNode",
                    "description": ""
                },
                {
                    "name": "html",
                    "description": ""
                }
            ],
            "return": {
                "description": "element"
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 62661,
            "description": "In some cases, Internet Explorer can create an anonymous node in\nthe hierarchy with no tagName. You can create this scenario via:\n    div = document.createElement(\"div\");\n    div.innerHTML = \"<table>&shy<script></script><tr><td>hi</td></tr></table>\";\n    div.firstChild.firstChild.tagName //=> \"\"\nIf our script markers are inside such a node, we need to find that\nnode and use *it* as the marker.",
            "itemtype": "method",
            "name": "realNode",
            "params": [
                {
                    "name": "start",
                    "description": ""
                }
            ],
            "return": {
                "description": "start"
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 62681,
            "description": "When automatically adding a tbody, Internet Explorer inserts the\ntbody immediately before the first <tr>. Other browsers create it\nbefore the first node, no matter what.\nThis means the the following code:\n    div = document.createElement(\"div\");\n    div.innerHTML = \"<table><script id='first'></script><tr><td>hi</td></tr><script id='last'></script></table>\nGenerates the following DOM in IE:\n    + div\n      + table\n        - script id='first'\n        + tbody\n          + tr\n            + td\n              - \"hi\"\n          - script id='last'\nWhich means that the two script tags, even though they were\ninserted at the same point in the hierarchy in the original\nHTML, now have different parents.\nThis code reparents the first script tag by making it the tbody's\nfirst child.",
            "itemtype": "method",
            "name": "fixParentage",
            "params": [
                {
                    "name": "start",
                    "description": ""
                },
                {
                    "name": "end",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 62713,
            "description": "Description",
            "params": [
                {
                    "name": "html",
                    "description": ""
                },
                {
                    "name": "outerToo",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 62779,
            "description": "Description",
            "return": {
                "description": ""
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 62792,
            "description": "Description",
            "params": [
                {
                    "name": "parentNode",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 62808,
            "description": "Description",
            "params": [
                {
                    "name": "html",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 62835,
            "description": "Description",
            "params": [
                {
                    "name": "html",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 62857,
            "description": "Description",
            "itemtype": "method",
            "name": "html",
            "params": [
                {
                    "name": "html",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 62872,
            "description": "Description",
            "itemtype": "method",
            "name": "replaceWith",
            "params": [
                {
                    "name": "html",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 62891,
            "description": "Description",
            "itemtype": "method",
            "name": "isRemoved",
            "return": {
                "description": "LogicalExpression"
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 62903,
            "description": "Description",
            "itemtype": "method",
            "name": "checkRemoved",
            "return": {
                "description": ""
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 62930,
            "description": "Description",
            "itemtype": "method",
            "name": "isArray",
            "params": [
                {
                    "name": "test",
                    "description": ""
                }
            ],
            "return": {
                "description": "BinaryExpression"
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 62957,
            "description": "Description",
            "itemtype": "method",
            "name": "StaticSegment",
            "params": [
                {
                    "name": "string",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 62965,
            "description": "Description",
            "itemtype": "method",
            "name": "eachChar",
            "params": [
                {
                    "name": "callback",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 62980,
            "description": "Description",
            "itemtype": "method",
            "name": "regex",
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 62989,
            "description": "Description",
            "itemtype": "method",
            "name": "generate",
            "return": {
                "description": "MemberExpression"
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 62999,
            "description": "Description",
            "itemtype": "method",
            "name": "DynamicSegment",
            "params": [
                {
                    "name": "name",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 63007,
            "description": "Description",
            "itemtype": "method",
            "name": "eachChar",
            "params": [
                {
                    "name": "callback",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 63017,
            "description": "Description",
            "itemtype": "method",
            "name": "regex",
            "return": {
                "description": "Literal"
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 63026,
            "description": "Description",
            "itemtype": "method",
            "name": "generate",
            "params": [
                {
                    "name": "params",
                    "description": ""
                }
            ],
            "return": {
                "description": "MemberExpression"
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 63037,
            "description": "Description",
            "itemtype": "method",
            "name": "StarSegment",
            "params": [
                {
                    "name": "name",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 63045,
            "description": "Description",
            "itemtype": "method",
            "name": "eachChar",
            "params": [
                {
                    "name": "callback",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 63055,
            "description": "Description",
            "itemtype": "method",
            "name": "regex",
            "return": {
                "description": "Literal"
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 63064,
            "description": "Description",
            "itemtype": "method",
            "name": "generate",
            "params": [
                {
                    "name": "params",
                    "description": ""
                }
            ],
            "return": {
                "description": "MemberExpression"
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 63075,
            "description": "Description",
            "itemtype": "method",
            "name": "EpsilonSegment",
            "return": {
                "description": ""
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 63082,
            "description": "Description",
            "itemtype": "method",
            "name": "eachChar",
            "return": {
                "description": ""
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 63088,
            "description": "Description",
            "itemtype": "method",
            "name": "regex",
            "return": {
                "description": "Literal"
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 63094,
            "description": "Description",
            "itemtype": "method",
            "name": "generate",
            "return": {
                "description": "Literal"
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 63102,
            "description": "Description",
            "itemtype": "method",
            "name": "parse",
            "params": [
                {
                    "name": "route",
                    "description": ""
                },
                {
                    "name": "names",
                    "description": ""
                },
                {
                    "name": "types",
                    "description": ""
                }
            ],
            "return": {
                "description": "results"
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 63156,
            "description": "Description",
            "itemtype": "method",
            "name": "State",
            "params": [
                {
                    "name": "charSpec",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 63168,
            "description": "Description",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "charSpec",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 63187,
            "description": "Description",
            "itemtype": "method",
            "name": "put",
            "params": [
                {
                    "name": "charSpec",
                    "description": ""
                }
            ],
            "return": {
                "description": "state"
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 63218,
            "description": "Description",
            "itemtype": "method",
            "name": "match",
            "params": [
                {
                    "name": "ch",
                    "description": ""
                }
            ],
            "return": {
                "description": "returned"
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 63247,
            "description": ", debug: function() {\n  var charSpec = this.charSpec,\n      debug = \"[\",\n      chars = charSpec.validChars || charSpec.invalidChars;\n\n  if (charSpec.invalidChars) { debug += \"^\"; }\n  debug += chars;\n  debug += \"]\";\n\n  if (charSpec.repeat) { debug += \"+\"; }\n\n  return debug;\n}",
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 63264,
            "description": "function debug(log) {\n  console.log(log);\n}\n\nfunction debugState(state) {\n  return state.nextStates.map(function(n) {\n    if (n.nextStates.length === 0) { return \"( \" + n.debug() + \" [accepting] )\"; }\n    return \"( \" + n.debug() + \" <then> \" + n.nextStates.map(function(s) { return s.debug() }).join(\" or \") + \" )\";\n  }).join(\", \")\n}",
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 63287,
            "description": "Description",
            "itemtype": "method",
            "name": "sortSolutions",
            "params": [
                {
                    "name": "states",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 63309,
            "description": "Description",
            "itemtype": "method",
            "name": "recognizeChar",
            "params": [
                {
                    "name": "states",
                    "description": ""
                },
                {
                    "name": "ch",
                    "description": ""
                }
            ],
            "return": {
                "description": "nextStates"
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 63329,
            "description": "Description",
            "itemtype": "method",
            "name": "F",
            "return": {
                "description": ""
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 63339,
            "description": "Description",
            "itemtype": "method",
            "name": "RecognizeResults",
            "params": [
                {
                    "name": "queryParams",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 63356,
            "description": "Description",
            "itemtype": "method",
            "name": "findHandler",
            "params": [
                {
                    "name": "state",
                    "description": ""
                },
                {
                    "name": "path",
                    "description": ""
                },
                {
                    "name": "queryParams",
                    "description": ""
                }
            ],
            "return": {
                "description": "result"
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 63382,
            "description": "Description",
            "itemtype": "method",
            "name": "addSegment",
            "params": [
                {
                    "name": "currentState",
                    "description": ""
                },
                {
                    "name": "segment",
                    "description": ""
                }
            ],
            "return": {
                "description": "currentState"
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 63401,
            "description": "Description",
            "itemtype": "method",
            "name": "RouteRecognizer",
            "return": {
                "description": ""
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 63413,
            "description": "Description",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "routes",
                    "description": ""
                },
                {
                    "name": "options",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 63471,
            "description": "Description",
            "itemtype": "method",
            "name": "handlersFor",
            "params": [
                {
                    "name": "name",
                    "description": ""
                }
            ],
            "return": {
                "description": "result"
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 63488,
            "description": "Description",
            "itemtype": "method",
            "name": "hasRoute",
            "params": [
                {
                    "name": "name",
                    "description": ""
                }
            ],
            "return": {
                "description": "UnaryExpression"
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 63498,
            "description": "Description",
            "itemtype": "method",
            "name": "generate",
            "params": [
                {
                    "name": "name",
                    "description": ""
                },
                {
                    "name": "params",
                    "description": ""
                }
            ],
            "return": {
                "description": "output"
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 63529,
            "description": "Description",
            "itemtype": "method",
            "name": "generateQueryString",
            "params": [
                {
                    "name": "params",
                    "description": ""
                },
                {
                    "name": "handlers",
                    "description": ""
                }
            ],
            "return": {
                "description": "BinaryExpression"
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 63568,
            "description": "Description",
            "itemtype": "method",
            "name": "parseQueryString",
            "params": [
                {
                    "name": "queryString",
                    "description": ""
                }
            ],
            "return": {
                "description": "queryParams"
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 63604,
            "description": "Description",
            "itemtype": "method",
            "name": "recognize",
            "params": [
                {
                    "name": "path",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 63669,
            "description": "Description",
            "itemtype": "method",
            "name": "Target",
            "params": [
                {
                    "name": "path",
                    "description": ""
                },
                {
                    "name": "matcher",
                    "description": ""
                },
                {
                    "name": "delegate",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 63684,
            "description": "Description",
            "itemtype": "method",
            "name": "to",
            "params": [
                {
                    "name": "target",
                    "description": ""
                },
                {
                    "name": "callback",
                    "description": ""
                }
            ],
            "return": {
                "description": "ThisExpression"
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 63708,
            "description": "Description",
            "itemtype": "method",
            "name": "Matcher",
            "params": [
                {
                    "name": "target",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 63721,
            "description": "Description",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "path",
                    "description": ""
                },
                {
                    "name": "handler",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 63732,
            "description": "Description",
            "itemtype": "method",
            "name": "addChild",
            "params": [
                {
                    "name": "path",
                    "description": ""
                },
                {
                    "name": "target",
                    "description": ""
                },
                {
                    "name": "callback",
                    "description": ""
                },
                {
                    "name": "delegate",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 63755,
            "description": "Description",
            "itemtype": "method",
            "name": "generateMatch",
            "params": [
                {
                    "name": "startingPath",
                    "description": ""
                },
                {
                    "name": "matcher",
                    "description": ""
                },
                {
                    "name": "delegate",
                    "description": ""
                }
            ],
            "return": {
                "description": "FunctionExpression"
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 63775,
            "description": "Description",
            "itemtype": "method",
            "name": "addRoute",
            "params": [
                {
                    "name": "routeArray",
                    "description": ""
                },
                {
                    "name": "path",
                    "description": ""
                },
                {
                    "name": "handler",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 63794,
            "description": "Description",
            "itemtype": "method",
            "name": "eachRoute",
            "params": [
                {
                    "name": "baseRoute",
                    "description": ""
                },
                {
                    "name": "matcher",
                    "description": ""
                },
                {
                    "name": "callback",
                    "description": ""
                },
                {
                    "name": "binding",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 63820,
            "description": "Description",
            "params": [
                {
                    "name": "callback",
                    "description": ""
                },
                {
                    "name": "addRouteCallback",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 63849,
            "description": "Description",
            "itemtype": "method",
            "name": "HandlerInfo",
            "params": [
                {
                    "name": "_props",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 63870,
            "description": "Description",
            "itemtype": "method",
            "name": "initialize",
            "return": {
                "description": ""
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 63877,
            "description": "Description",
            "itemtype": "method",
            "name": "log",
            "params": [
                {
                    "name": "payload",
                    "description": ""
                },
                {
                    "name": "message",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 63890,
            "description": "Description",
            "itemtype": "method",
            "name": "promiseLabel",
            "params": [
                {
                    "name": "label",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 63900,
            "description": "Description",
            "itemtype": "method",
            "name": "getUnresolved",
            "return": {
                "description": "ThisExpression"
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 63909,
            "description": "Description",
            "itemtype": "method",
            "name": "serialize",
            "return": {
                "description": "LogicalExpression"
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 63918,
            "description": "Description",
            "itemtype": "method",
            "name": "resolve",
            "params": [
                {
                    "name": "shouldContinue",
                    "description": ""
                },
                {
                    "name": "payload",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 63943,
            "description": "Description",
            "itemtype": "method",
            "name": "runBeforeModelHook",
            "params": [
                {
                    "name": "payload",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 63956,
            "description": "Description",
            "itemtype": "method",
            "name": "runAfterModelHook",
            "params": [
                {
                    "name": "payload",
                    "description": ""
                },
                {
                    "name": "resolvedModel",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 63979,
            "description": "Description",
            "itemtype": "method",
            "name": "runSharedModelHook",
            "params": [
                {
                    "name": "payload",
                    "description": ""
                },
                {
                    "name": "hookName",
                    "description": ""
                },
                {
                    "name": "args",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 64007,
            "description": "Description",
            "itemtype": "method",
            "name": "checkForAbort",
            "params": [
                {
                    "name": "shouldContinue",
                    "description": ""
                },
                {
                    "name": "promiseValue",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 64022,
            "description": "Description",
            "itemtype": "method",
            "name": "stashResolvedModel",
            "params": [
                {
                    "name": "payload",
                    "description": ""
                },
                {
                    "name": "resolvedModel",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 64034,
            "description": "Description",
            "itemtype": "method",
            "name": "becomeResolved",
            "params": [
                {
                    "name": "payload",
                    "description": ""
                },
                {
                    "name": "resolvedContext",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 64058,
            "description": "Description",
            "itemtype": "method",
            "name": "shouldSupercede",
            "params": [
                {
                    "name": "other",
                    "description": ""
                }
            ],
            "return": {
                "description": "LogicalExpression"
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 64080,
            "description": "Description",
            "itemtype": "method",
            "name": "paramsMatch",
            "params": [
                {
                    "name": "a",
                    "description": ""
                },
                {
                    "name": "b",
                    "description": ""
                }
            ],
            "return": {
                "description": "Literal"
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 64125,
            "description": "Description",
            "itemtype": "method",
            "name": "handlerInfoFactory",
            "params": [
                {
                    "name": "name",
                    "description": ""
                },
                {
                    "name": "props",
                    "description": ""
                }
            ],
            "return": {
                "description": "handlerInfo"
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 64151,
            "description": "Description",
            "itemtype": "method",
            "name": "resolve",
            "params": [
                {
                    "name": "shouldContinue",
                    "description": ""
                },
                {
                    "name": "payload",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 64166,
            "description": "Description",
            "itemtype": "method",
            "name": "getUnresolved",
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 64196,
            "description": "Description",
            "itemtype": "method",
            "name": "getModel",
            "params": [
                {
                    "name": "payload",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 64207,
            "description": "Description",
            "itemtype": "method",
            "name": "initialize",
            "params": [
                {
                    "name": "props",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 64218,
            "access": "private",
            "tagname": "Serializes a handler using its custom `serialize` method or\nby a default that looks up the expected property name from\nthe dynamic segment.",
            "itemtype": "method",
            "name": "serialize",
            "params": [
                {
                    "name": "_model",
                    "description": ""
                }
            ],
            "return": {
                "description": "object"
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 64270,
            "description": "Description",
            "itemtype": "method",
            "name": "initialize",
            "params": [
                {
                    "name": "props",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 64280,
            "description": "Description",
            "itemtype": "method",
            "name": "getModel",
            "params": [
                {
                    "name": "payload",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 64330,
            "description": "Description",
            "itemtype": "method",
            "name": "Router",
            "return": {
                "description": ""
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 64342,
            "description": "The main entry point into the router. The API is essentially\nthe same as the `map` method in `route-recognizer`.\nThis method extracts the String handler at the last `.to()`\ncall and uses it as the name of the whole route.",
            "itemtype": "method",
            "name": "map",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 64363,
            "description": "Description",
            "itemtype": "method",
            "name": "hasRoute",
            "params": [
                {
                    "name": "route",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 64373,
            "description": "Description",
            "itemtype": "method",
            "name": "queryParamsTransition",
            "params": [
                {
                    "name": "changelist",
                    "description": ""
                },
                {
                    "name": "wasTransitioning",
                    "description": ""
                },
                {
                    "name": "oldState",
                    "description": ""
                },
                {
                    "name": "newState",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 64418,
            "description": "Description",
            "itemtype": "method",
            "name": "transitionByIntent",
            "params": [
                {
                    "name": "intent",
                    "description": ""
                },
                {
                    "name": "isIntermediate",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 64483,
            "description": "Clears the current and target route handlers and triggers exit\non each of them starting at the leaf and traversing up through\nits ancestors.",
            "itemtype": "method",
            "name": "reset",
            "return": {
                "description": ""
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 64504,
            "description": "var handler = handlerInfo.handler;\nThe entry point for handling a change to the URL (usually\nvia the back and forward button).\nReturns an Array of handlers and the parameters associated\nwith those parameters.",
            "itemtype": "method",
            "name": "handleURL",
            "params": [
                {
                    "name": "url",
                    "description": "a URL to process",
                    "type": "String"
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 64523,
            "description": "Hook point for updating the URL.",
            "itemtype": "method",
            "name": "updateURL",
            "return": {
                "description": ""
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 64532,
            "description": "Hook point for replacing the current URL, i.e. with replaceState\nBy default this behaves the same as `updateURL`",
            "itemtype": "method",
            "name": "replaceURL",
            "params": [
                {
                    "name": "url",
                    "description": "a URL to update to",
                    "type": "String"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 64543,
            "description": "Transition into the specified named route.\nIf necessary, trigger the exit callback on any handlers\nthat are no longer represented by the target route.",
            "itemtype": "method",
            "name": "transitionTo",
            "params": [
                {
                    "name": "name",
                    "description": "the name of the route",
                    "type": "String"
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 64555,
            "description": "Description",
            "itemtype": "method",
            "name": "intermediateTransitionTo",
            "params": [
                {
                    "name": "name",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 64565,
            "description": "Description",
            "itemtype": "method",
            "name": "refresh",
            "params": [
                {
                    "name": "pivotHandler",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 64591,
            "description": "Identical to `transitionTo` except that the current URL will be replaced\nif possible.\nThis method is intended primarily for use with `replaceState`.",
            "itemtype": "method",
            "name": "replaceWith",
            "params": [
                {
                    "name": "name",
                    "description": "the name of the route",
                    "type": "String"
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 64603,
            "description": "Take a named route and context objects and generate a\nURL.\na URL for",
            "itemtype": "method",
            "name": "generate",
            "params": [
                {
                    "name": "handlerName",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 64633,
            "description": "Description",
            "itemtype": "method",
            "name": "applyIntent",
            "params": [
                {
                    "name": "handlerName",
                    "description": ""
                },
                {
                    "name": "contexts",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 64650,
            "description": "Description",
            "itemtype": "method",
            "name": "isActiveIntent",
            "params": [
                {
                    "name": "handlerName",
                    "description": ""
                },
                {
                    "name": "contexts",
                    "description": ""
                },
                {
                    "name": "queryParams",
                    "description": ""
                }
            ],
            "return": {
                "description": "LogicalExpression"
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 64709,
            "description": "Description",
            "itemtype": "method",
            "name": "isActive",
            "params": [
                {
                    "name": "handlerName",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 64720,
            "description": "Description",
            "itemtype": "method",
            "name": "trigger",
            "params": [
                {
                    "name": "name",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 64731,
            "description": "Hook point for logging transition status updates.",
            "params": [
                {
                    "name": "message",
                    "description": "The message to log.",
                    "type": "String"
                }
            ],
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 64748,
            "access": "private",
            "tagname": "Fires queryParamsDidChange event",
            "itemtype": "method",
            "name": "fireQueryParamDidChange",
            "params": [
                {
                    "name": "router",
                    "description": ""
                },
                {
                    "name": "newState",
                    "description": ""
                },
                {
                    "name": "queryParamChangelist",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 64770,
            "access": "private",
            "tagname": "Takes an Array of `HandlerInfo`s, figures out which ones are\nexiting, entering, or changing contexts, and calls the\nproper handler hooks.\nFor example, consider the following tree of handlers. Each handler is\nfollowed by the URL segment it handles.\n```\n|~index (\"/\")\n| |~posts (\"/posts\")\n| | |-showPost (\"/:id\")\n| | |-newPost (\"/new\")\n| | |-editPost (\"/edit\")\n| |~about (\"/about/:id\")\n```\nConsider the following transitions:\n1. A URL transition to `/posts/1`.\n1. Triggers the `*model` callbacks on the\n`index`, `posts`, and `showPost` handlers\n2. Triggers the `enter` callback on the same\n3. Triggers the `setup` callback on the same\n2. A direct transition to `newPost`\n1. Triggers the `exit` callback on `showPost`\n2. Triggers the `enter` callback on `newPost`\n3. Triggers the `setup` callback on `newPost`\n3. A direct transition to `about` with a specified\ncontext object\n1. Triggers the `exit` callback on `newPost`\nand `posts`\n2. Triggers the `serialize` callback on `about`\n3. Triggers the `enter` callback on `about`\n4. Triggers the `setup` callback on `about`",
            "itemtype": "method",
            "name": "setupContexts",
            "params": [
                {
                    "name": "router",
                    "description": ""
                },
                {
                    "name": "newState",
                    "description": "",
                    "type": "TransitionState"
                },
                {
                    "name": "transition",
                    "description": "",
                    "type": "Router"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 64846,
            "access": "private",
            "tagname": "Helper method used by setupContexts. Handles errors or redirects\nthat may happen in enter/setup.",
            "itemtype": "method",
            "name": "handlerEnteredOrUpdated",
            "params": [
                {
                    "name": "currentHandlerInfos",
                    "description": ""
                },
                {
                    "name": "handlerInfo",
                    "description": ""
                },
                {
                    "name": "enter",
                    "description": ""
                },
                {
                    "name": "transition",
                    "description": ""
                }
            ],
            "return": {
                "description": "Literal"
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 64881,
            "access": "private",
            "tagname": "This function is called when transitioning from one URL to\nanother to determine which handlers are no longer active,\nwhich handlers are newly active, and which handlers remain\nactive but have their context changed.\nTake a list of old handlers and new handlers and partition\nthem into four buckets:\nunchanged: the handler was active in both the old and\nnew URL, and its context remains the same\nupdated context: the handler was active in both the\nold and new URL, but its context changed. The handler's\n`setup` method, if any, will be called with the new\ncontext.\nexited: the handler was active in the old URL, but is\nno longer active.\nentered: the handler was not active in the old URL, but\nis now active.\nThe PartitionedHandlers structure has four fields:\n`updatedContext`: a list of `HandlerInfo` objects that\nrepresent handlers that remain active but have a changed\ncontext\n`entered`: a list of `HandlerInfo` objects that represent\nhandlers that are newly active\n`exited`: a list of `HandlerInfo` objects that are no\nlonger active.\n`unchanged`: a list of `HanderInfo` objects that remain active.\ninformation for the previous URL (or `[]` if this is the\nfirst handled transition)\ninformation for the new URL",
            "itemtype": "method",
            "name": "partitionHandlers",
            "params": [
                {
                    "name": "oldState",
                    "description": ""
                },
                {
                    "name": "newState",
                    "description": ""
                }
            ],
            "return": {
                "description": "handlers"
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 64957,
            "description": "Description",
            "itemtype": "method",
            "name": "updateURL",
            "params": [
                {
                    "name": "transition",
                    "description": ""
                },
                {
                    "name": "state",
                    "description": ""
                },
                {
                    "name": "inputUrl",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 64997,
            "access": "private",
            "tagname": "Updates the URL (if necessary) and calls `setupContexts`\nto update the router's array of `currentHandlerInfos`.",
            "itemtype": "method",
            "name": "finalizeTransition",
            "params": [
                {
                    "name": "transition",
                    "description": ""
                },
                {
                    "name": "newState",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 65052,
            "access": "private",
            "tagname": "Begins and returns a Transition based on the provided\narguments. Accepts arguments in the form of both URL\ntransitions and named transitions.\nreplaceWith, or handleURL",
            "itemtype": "method",
            "name": "doTransition",
            "params": [
                {
                    "name": "router",
                    "description": "",
                    "type": "Router"
                },
                {
                    "name": "args",
                    "description": ""
                },
                {
                    "name": "isIntermediate",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 65106,
            "description": "Description",
            "itemtype": "method",
            "name": "handlerInfosEqual",
            "params": [
                {
                    "name": "handlerInfos",
                    "description": ""
                },
                {
                    "name": "otherHandlerInfos",
                    "description": ""
                }
            ],
            "return": {
                "description": "Literal"
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 65126,
            "description": "Description",
            "itemtype": "method",
            "name": "finalizeQueryParamChange",
            "params": [
                {
                    "name": "router",
                    "description": ""
                },
                {
                    "name": "resolvedHandlers",
                    "description": ""
                },
                {
                    "name": "newQueryParams",
                    "description": ""
                },
                {
                    "name": "transition",
                    "description": ""
                }
            ],
            "return": {
                "description": "finalQueryParams"
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 65169,
            "description": "Description",
            "itemtype": "method",
            "name": "notifyExistingHandlers",
            "params": [
                {
                    "name": "router",
                    "description": ""
                },
                {
                    "name": "newState",
                    "description": ""
                },
                {
                    "name": "newTransition",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 65200,
            "description": "Description",
            "params": [
                {
                    "name": "name",
                    "description": ""
                }
            ],
            "return": {
                "description": "Literal"
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 65232,
            "description": "Description",
            "itemtype": "method",
            "name": "TransitionIntent",
            "params": [
                {
                    "name": "props",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 65270,
            "description": "Description",
            "itemtype": "method",
            "name": "initialize",
            "params": [
                {
                    "name": "props",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 65283,
            "description": "Description",
            "itemtype": "method",
            "name": "applyToState",
            "params": [
                {
                    "name": "oldState",
                    "description": ""
                },
                {
                    "name": "recognizer",
                    "description": ""
                },
                {
                    "name": "getHandler",
                    "description": ""
                },
                {
                    "name": "isIntermediate",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 65304,
            "description": "Description",
            "itemtype": "method",
            "name": "applyToHandlers",
            "params": [
                {
                    "name": "oldState",
                    "description": ""
                },
                {
                    "name": "handlers",
                    "description": ""
                },
                {
                    "name": "getHandler",
                    "description": ""
                },
                {
                    "name": "targetRouteName",
                    "description": ""
                },
                {
                    "name": "isIntermediate",
                    "description": ""
                },
                {
                    "name": "checkingIfActive",
                    "description": ""
                }
            ],
            "return": {
                "description": "newState"
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 65398,
            "description": "Description",
            "itemtype": "method",
            "name": "invalidateChildren",
            "params": [
                {
                    "name": "handlerInfos",
                    "description": ""
                },
                {
                    "name": "invalidateIndex",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 65412,
            "description": "Description",
            "itemtype": "method",
            "name": "getHandlerInfoForDynamicSegment",
            "params": [
                {
                    "name": "name",
                    "description": ""
                },
                {
                    "name": "handler",
                    "description": ""
                },
                {
                    "name": "names",
                    "description": ""
                },
                {
                    "name": "objects",
                    "description": ""
                },
                {
                    "name": "oldHandlerInfo",
                    "description": ""
                },
                {
                    "name": "targetRouteName",
                    "description": ""
                },
                {
                    "name": "i",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 65464,
            "description": "Description",
            "itemtype": "method",
            "name": "createParamHandlerInfo",
            "params": [
                {
                    "name": "name",
                    "description": ""
                },
                {
                    "name": "handler",
                    "description": ""
                },
                {
                    "name": "names",
                    "description": ""
                },
                {
                    "name": "objects",
                    "description": ""
                },
                {
                    "name": "oldHandlerInfo",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 65522,
            "description": "Description",
            "itemtype": "method",
            "name": "initialize",
            "params": [
                {
                    "name": "props",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 65532,
            "description": "Description",
            "itemtype": "method",
            "name": "applyToState",
            "params": [
                {
                    "name": "oldState",
                    "description": ""
                },
                {
                    "name": "recognizer",
                    "description": ""
                },
                {
                    "name": "getHandler",
                    "description": ""
                }
            ],
            "return": {
                "description": "newState"
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 65583,
            "description": "Promise reject reasons passed to promise rejection\nhandlers for failed transitions.",
            "itemtype": "method",
            "name": "UnrecognizedURLError",
            "params": [
                {
                    "name": "message",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 65605,
            "description": "Description",
            "itemtype": "method",
            "name": "TransitionState",
            "params": [
                {
                    "name": "other",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 65622,
            "description": "Description",
            "itemtype": "method",
            "name": "promiseLabel",
            "params": [
                {
                    "name": "label",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 65639,
            "description": "Description",
            "itemtype": "method",
            "name": "resolve",
            "params": [
                {
                    "name": "shouldContinue",
                    "description": ""
                },
                {
                    "name": "payload",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 65665,
            "description": "Description",
            "itemtype": "method",
            "name": "innerShouldContinue",
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 65680,
            "description": "Description",
            "itemtype": "method",
            "name": "handleError",
            "params": [
                {
                    "name": "error",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 65700,
            "description": "Description",
            "itemtype": "method",
            "name": "proceed",
            "params": [
                {
                    "name": "resolvedHandlerInfo",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 65727,
            "description": "Description",
            "itemtype": "method",
            "name": "resolveOneHandlerInfo",
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 65763,
            "access": "private",
            "tagname": "A Transition is a thennable (a promise-like object) that represents\nan attempt to transition to another route. It can be aborted, either\nexplicitly via `abort` or by attempting another transition while a\nprevious one is still underway. An aborted transition can also\nbe `retry()`d later.",
            "itemtype": "method",
            "name": "Transition",
            "params": [
                {
                    "name": "router",
                    "description": ""
                },
                {
                    "name": "intent",
                    "description": ""
                },
                {
                    "name": "state",
                    "description": ""
                },
                {
                    "name": "error",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 65824,
            "description": "Description",
            "itemtype": "method",
            "name": "checkForAbort",
            "return": {
                "description": ""
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 65853,
            "description": "Description",
            "itemtype": "method",
            "name": "isExiting",
            "params": [
                {
                    "name": "handler",
                    "description": ""
                }
            ],
            "return": {
                "description": "Literal"
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 65870,
            "access": "public",
            "tagname": "The Transition's internal promise. Calling `.then` on this property\nis that same as calling `.then` on the Transition object itself, but\nthis property is exposed for when you want to pass around a\nTransition's promise, but not the Transition object itself, since\nTransition object can be externally `abort`ed, while the promise\ncannot.",
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 65882,
            "access": "public",
            "tagname": "Custom state can be stored on a Transition's `data` object.\nThis can be useful for decorating a Transition within an earlier\nhook and shared with a later hook. Properties set on `data` will\nbe copied to new transitions generated by calling `retry` on this\ntransition.",
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 65893,
            "access": "public",
            "tagname": "A standard promise hook that resolves if the transition\nsucceeds and rejects if it fails/redirects/aborts.\nForwards to the internal `promise` property which you can\nuse in situations where you want to pass around a thennable,\nbut not the Transition itself.\nUseful for tooling.",
            "itemtype": "method",
            "name": "then",
            "params": [
                {
                    "name": "onFulfilled",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "onRejected",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "label",
                    "description": "optional string for labeling the promise.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 65911,
            "access": "public",
            "tagname": "Forwards to the internal `promise` property which you can\nuse in situations where you want to pass around a thennable,\nbut not the Transition itself.\nUseful for tooling.",
            "params": [
                {
                    "name": "onRejection",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "label",
                    "description": "optional string for labeling the promise.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 65925,
            "access": "public",
            "tagname": "Forwards to the internal `promise` property which you can\nuse in situations where you want to pass around a thennable,\nbut not the Transition itself.\nUseful for tooling.",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "label",
                    "description": "optional string for labeling the promise.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 65939,
            "access": "public",
            "tagname": "Aborts the Transition. Note you can also implicitly abort a transition\nby initiating another transition while a previous one is underway.",
            "itemtype": "method",
            "name": "abort",
            "return": {
                "description": "ThisExpression"
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 65956,
            "access": "public",
            "tagname": "Retries a previously-aborted transition (making sure to abort the\ntransition if it's still active). Returns a new transition that\nrepresents the new attempt to transition.",
            "itemtype": "method",
            "name": "retry",
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 65970,
            "access": "public",
            "tagname": "Sets the URL-changing method to be employed at the end of a\nsuccessful transition. By default, a new Transition will just\nuse `updateURL`, but passing 'replace' to this method will\ncause the URL to update using 'replaceWith' instead. Omitting\na parameter will disable the URL change, allowing for transitions\nthat don't update the URL at completion (this is also used for\nhandleURL, since the URL has already changed before the\ntransition took place).\nat the end of a transition. Accepted values are 'replace',\nfalsy values, or any other non-falsy value (which is\ninterpreted as an updateURL transition).",
            "itemtype": "method",
            "name": "method",
            "params": [
                {
                    "name": "method",
                    "description": "the type of URL-changing method to use",
                    "type": "String"
                }
            ],
            "return": {
                "description": "ThisExpression"
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 65992,
            "access": "public",
            "tagname": "Fires an event on the current list of resolved/resolving\nhandlers within this transition. Useful for firing events\non route hierarchies that haven't fully been entered yet.\nNote: This method is also aliased as `send`",
            "itemtype": "method",
            "name": "trigger",
            "params": [
                {
                    "name": "ignoreFailure",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 66013,
            "access": "public",
            "tagname": "Transitions are aborted and their promises rejected\nwhen redirects occur; this method returns a promise\nthat will follow any redirects that occur and fulfill\nwith the value fulfilled by any redirecting transitions\nthat occur.\nvalue that the final redirecting transition fulfills with",
            "itemtype": "method",
            "name": "followRedirects",
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 66034,
            "description": "Description",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "BinaryExpression"
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 66043,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "log",
            "params": [
                {
                    "name": "message",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 66057,
            "access": "private",
            "tagname": "Logs and returns a TransitionAborted error.",
            "itemtype": "method",
            "name": "logAbort",
            "params": [
                {
                    "name": "transition",
                    "description": ""
                }
            ],
            "return": {
                "description": "NewExpression"
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 66069,
            "description": "Description",
            "itemtype": "method",
            "name": "TransitionAborted",
            "params": [
                {
                    "name": "message",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 66092,
            "description": "Description",
            "params": [
                {
                    "name": "x",
                    "description": ""
                }
            ],
            "return": {
                "description": "BinaryExpression"
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 66106,
            "description": "Description",
            "itemtype": "method",
            "name": "merge",
            "params": [
                {
                    "name": "hash",
                    "description": ""
                },
                {
                    "name": "other",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 66120,
            "description": "Description",
            "itemtype": "method",
            "name": "F",
            "return": {
                "description": ""
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 66130,
            "access": "private",
            "tagname": "Extracts query params from the end of an array",
            "itemtype": "method",
            "name": "extractQueryParams",
            "params": [
                {
                    "name": "array",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 66167,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "log",
            "params": [
                {
                    "name": "router",
                    "description": ""
                },
                {
                    "name": "sequence",
                    "description": ""
                },
                {
                    "name": "msg",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 66187,
            "description": "Description",
            "itemtype": "method",
            "name": "bind",
            "params": [
                {
                    "name": "context",
                    "description": ""
                },
                {
                    "name": "fn",
                    "description": ""
                }
            ],
            "return": {
                "description": "FunctionExpression"
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 66204,
            "description": "Description",
            "itemtype": "method",
            "name": "isParam",
            "params": [
                {
                    "name": "object",
                    "description": ""
                }
            ],
            "return": {
                "description": "LogicalExpression"
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 66215,
            "description": "Description",
            "itemtype": "method",
            "name": "forEach",
            "params": [
                {
                    "name": "array",
                    "description": ""
                },
                {
                    "name": "callback",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 66227,
            "description": "Description",
            "itemtype": "method",
            "name": "trigger",
            "params": [
                {
                    "name": "router",
                    "description": ""
                },
                {
                    "name": "handlerInfos",
                    "description": ""
                },
                {
                    "name": "ignoreFailure",
                    "description": ""
                },
                {
                    "name": "args",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 66270,
            "description": "Description",
            "itemtype": "method",
            "name": "getChangelist",
            "params": [
                {
                    "name": "oldObject",
                    "description": ""
                },
                {
                    "name": "newObject",
                    "description": ""
                }
            ],
            "return": {
                "description": "LogicalExpression"
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 66330,
            "description": "Description",
            "itemtype": "method",
            "name": "promiseLabel",
            "params": [
                {
                    "name": "label",
                    "description": ""
                }
            ],
            "return": {
                "description": "BinaryExpression"
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 66341,
            "description": "Description",
            "itemtype": "method",
            "name": "subclass",
            "params": [
                {
                    "name": "parentConstructor",
                    "description": ""
                },
                {
                    "name": "proto",
                    "description": ""
                }
            ],
            "return": {
                "description": "C"
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 66349,
            "description": "Description",
            "itemtype": "method",
            "name": "C",
            "params": [
                {
                    "name": "props",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 66364,
            "description": "Description",
            "itemtype": "method",
            "name": "resolveHook",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                },
                {
                    "name": "hookName",
                    "description": ""
                }
            ],
            "return": {
                "description": "LogicalExpression"
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 66378,
            "description": "Description",
            "itemtype": "method",
            "name": "callHook",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                },
                {
                    "name": "hookName",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 66390,
            "description": "Description",
            "itemtype": "method",
            "name": "applyHook",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                },
                {
                    "name": "_hookName",
                    "description": ""
                },
                {
                    "name": "args",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 66446,
            "description": "Description",
            "itemtype": "method",
            "name": "async",
            "params": [
                {
                    "name": "callback",
                    "description": ""
                },
                {
                    "name": "arg",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 66457,
            "description": "Description",
            "itemtype": "method",
            "name": "on",
            "return": {
                "description": ""
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 66466,
            "description": "Description",
            "itemtype": "method",
            "name": "off",
            "return": {
                "description": ""
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 66570,
            "description": "Description",
            "itemtype": "method",
            "name": "noop",
            "return": {
                "description": ""
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 66583,
            "description": "Description",
            "itemtype": "method",
            "name": "getThen",
            "params": [
                {
                    "name": "promise",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 66598,
            "description": "Description",
            "itemtype": "method",
            "name": "tryThen",
            "params": [
                {
                    "name": "then",
                    "description": ""
                },
                {
                    "name": "value",
                    "description": ""
                },
                {
                    "name": "fulfillmentHandler",
                    "description": ""
                },
                {
                    "name": "rejectionHandler",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 66615,
            "description": "Description",
            "itemtype": "method",
            "name": "handleForeignThenable",
            "params": [
                {
                    "name": "promise",
                    "description": ""
                },
                {
                    "name": "thenable",
                    "description": ""
                },
                {
                    "name": "then",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 66648,
            "description": "Description",
            "itemtype": "method",
            "name": "handleOwnThenable",
            "params": [
                {
                    "name": "promise",
                    "description": ""
                },
                {
                    "name": "thenable",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 66673,
            "description": "Description",
            "itemtype": "method",
            "name": "handleMaybeThenable",
            "params": [
                {
                    "name": "promise",
                    "description": ""
                },
                {
                    "name": "maybeThenable",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 66698,
            "description": "Description",
            "itemtype": "method",
            "name": "resolve",
            "params": [
                {
                    "name": "promise",
                    "description": ""
                },
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 66715,
            "description": "Description",
            "itemtype": "method",
            "name": "publishRejection",
            "params": [
                {
                    "name": "promise",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 66729,
            "description": "Description",
            "itemtype": "method",
            "name": "fulfill",
            "params": [
                {
                    "name": "promise",
                    "description": ""
                },
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 66751,
            "description": "Description",
            "itemtype": "method",
            "name": "reject",
            "params": [
                {
                    "name": "promise",
                    "description": ""
                },
                {
                    "name": "reason",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 66766,
            "description": "Description",
            "itemtype": "method",
            "name": "subscribe",
            "params": [
                {
                    "name": "parent",
                    "description": ""
                },
                {
                    "name": "child",
                    "description": ""
                },
                {
                    "name": "onFulfillment",
                    "description": ""
                },
                {
                    "name": "onRejection",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 66790,
            "description": "Description",
            "itemtype": "method",
            "name": "publish",
            "params": [
                {
                    "name": "promise",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 66822,
            "description": "Description",
            "itemtype": "method",
            "name": "ErrorObject",
            "return": {
                "description": ""
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 66833,
            "description": "Description",
            "itemtype": "method",
            "name": "tryCatch",
            "params": [
                {
                    "name": "callback",
                    "description": ""
                },
                {
                    "name": "detail",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 66849,
            "description": "Description",
            "itemtype": "method",
            "name": "invokeCallback",
            "params": [
                {
                    "name": "settled",
                    "description": ""
                },
                {
                    "name": "promise",
                    "description": ""
                },
                {
                    "name": "callback",
                    "description": ""
                },
                {
                    "name": "detail",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 66896,
            "description": "Description",
            "itemtype": "method",
            "name": "initializePromise",
            "params": [
                {
                    "name": "promise",
                    "description": ""
                },
                {
                    "name": "resolver",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 66937,
            "description": "Description",
            "itemtype": "method",
            "name": "AllSettled",
            "params": [
                {
                    "name": "Constructor",
                    "description": ""
                },
                {
                    "name": "entries",
                    "description": ""
                },
                {
                    "name": "label",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.State",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 66956,
            "description": "`RSVP.allSettled` is similar to `RSVP.all`, but instead of implementing\na fail-fast method, it waits until all the promises have returned and\nshows you all the results. This is useful if you want to handle multiple\npromises' failure states together as a set.\nReturns a promise that is fulfilled when all the given promises have been\nsettled. The return promise is fulfilled with an array of the states of\nthe promises passed into the `promises` array argument.\nEach state object will either indicate fulfillment or rejection, and\nprovide the corresponding value or reason. The states will take one of\nthe following formats:\n```javascript\n{ state: 'fulfilled', value: value }\nor\n{ state: 'rejected', reason: reason }\n```\nExample:\n```javascript\nvar promise1 = RSVP.Promise.resolve(1);\nvar promise2 = RSVP.Promise.reject(new Error('2'));\nvar promise3 = RSVP.Promise.reject(new Error('3'));\nvar promises = [ promise1, promise2, promise3 ];\nRSVP.allSettled(promises).then(function(array){\n// array == [\n//   { state: 'fulfilled', value: 1 },\n//   { state: 'rejected', reason: Error },\n//   { state: 'rejected', reason: Error }\n// ]\n// Note that for the second item, reason.message will be '2', and for the\n// third item, reason.message will be '3'.\n}, function(error) {\n// Not run. (This block would only be called if allSettled had failed,\n// for instance if passed an incorrect argument type.)\n});\n```",
            "static": "Useful for tooling.\nstates of the constituent promises.",
            "params": [
                {
                    "name": "entries",
                    "description": ""
                },
                {
                    "name": "label",
                    "description": "- optional string that describes the promise.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "MemberExpression"
            },
            "class": "Ember.RSVP",
            "module": "ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 67009,
            "description": "This is a convenient alias for `RSVP.Promise.all`.",
            "static": "for tooling.",
            "params": [
                {
                    "name": "array",
                    "description": "Array of promises.",
                    "type": "Array"
                },
                {
                    "name": "label",
                    "description": "An optional label. This is useful",
                    "type": "String"
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.RSVP",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 67028,
            "description": "Description",
            "params": [
                {
                    "name": "callback",
                    "description": ""
                },
                {
                    "name": "arg",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.RSVP",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 67055,
            "description": "Description",
            "itemtype": "method",
            "name": "useNextTick",
            "return": {
                "description": "FunctionExpression"
            },
            "class": "Ember.RSVP",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 67066,
            "description": "Description",
            "itemtype": "method",
            "name": "useMutationObserver",
            "return": {
                "description": "FunctionExpression"
            },
            "class": "Ember.RSVP",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 67083,
            "description": "Description",
            "itemtype": "method",
            "name": "useMessageChannel",
            "return": {
                "description": "FunctionExpression"
            },
            "class": "Ember.RSVP",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 67096,
            "description": "Description",
            "itemtype": "method",
            "name": "useSetTimeout",
            "return": {
                "description": "FunctionExpression"
            },
            "class": "Ember.RSVP",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 67108,
            "description": "Description",
            "itemtype": "method",
            "name": "flush",
            "return": {
                "description": ""
            },
            "class": "Ember.RSVP",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 67152,
            "description": "Description",
            "itemtype": "method",
            "name": "configure",
            "params": [
                {
                    "name": "name",
                    "description": ""
                },
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.RSVP",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 67184,
            "description": "`RSVP.defer` returns an object similar to jQuery's `$.Deferred`.\n`RSVP.defer` should be used when porting over code reliant on `$.Deferred`'s\ninterface. New code should use the `RSVP.Promise` constructor instead.\nThe object returned from `RSVP.defer` is a plain object with three properties:\npromise - an `RSVP.Promise`.\nreject - a function that causes the `promise` property on this object to\nbecome rejected\nresolve - a function that causes the `promise` property on this object to\nbecome fulfilled.\nExample:\n```javascript\nvar deferred = RSVP.defer();\ndeferred.resolve(\"Success!\");\ndefered.promise.then(function(value){\n// value here is \"Success!\"\n});\n```",
            "static": "Useful for tooling.",
            "params": [
                {
                    "name": "label",
                    "description": "optional string for labeling the promise.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "deferred"
            },
            "class": "Ember.RSVP",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 67234,
            "description": "Description",
            "itemtype": "method",
            "name": "makeSettledResult",
            "params": [
                {
                    "name": "state",
                    "description": ""
                },
                {
                    "name": "position",
                    "description": ""
                },
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.RSVP",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 67257,
            "description": "Description",
            "itemtype": "method",
            "name": "Enumerator",
            "params": [
                {
                    "name": "Constructor",
                    "description": ""
                },
                {
                    "name": "input",
                    "description": ""
                },
                {
                    "name": "abortOnReject",
                    "description": ""
                },
                {
                    "name": "label",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.RSVP",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 67367,
            "description": "Description",
            "itemtype": "method",
            "name": "indexOf",
            "params": [
                {
                    "name": "callbacks",
                    "description": ""
                },
                {
                    "name": "callback",
                    "description": ""
                }
            ],
            "return": {
                "description": "UnaryExpression"
            },
            "class": "Ember.RSVP",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 67382,
            "description": "Description",
            "itemtype": "method",
            "name": "callbacksFor",
            "params": [
                {
                    "name": "object",
                    "description": ""
                }
            ],
            "return": {
                "description": "callbacks"
            },
            "class": "Ember.RSVP",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 67403,
            "description": "`RSVP.EventTarget.mixin` extends an object with EventTarget methods. For\nExample:\n```javascript\nvar object = {};\nRSVP.EventTarget.mixin(object);\nobject.on('finished', function(event) {\n// handle event\n});\nobject.trigger('finished', { detail: value });\n```\n`EventTarget.mixin` also works with prototypes:\n```javascript\nvar Person = function() {};\nRSVP.EventTarget.mixin(Person.prototype);\nvar yehuda = new Person();\nvar tom = new Person();\nyehuda.on('poke', function(event) {\nconsole.log('Yehuda says OW');\n});\ntom.on('poke', function(event) {\nconsole.log('Tom says OW');\n});\nyehuda.trigger('poke');\ntom.trigger('poke');\n```",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "mixin",
            "params": [
                {
                    "name": "object",
                    "description": "object to extend with EventTarget methods",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "object"
            },
            "class": "Ember.RSVP.EventTarget",
            "module": "ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 67443,
            "description": "Registers a callback to be executed when `eventName` is triggered\n```javascript\nobject.on('event', function(eventInfo){\n// handle the event\n});\nobject.trigger('event');\n```",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "on",
            "params": [
                {
                    "name": "eventName",
                    "description": "name of the event to listen for",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "function to be called when the event is triggered.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "RSVP.EventTarget",
            "module": "ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 67472,
            "description": "You can use `off` to stop firing a particular callback for an event:\n```javascript\nfunction doStuff() { // do stuff! }\nobject.on('stuff', doStuff);\nobject.trigger('stuff'); // doStuff will be called\n// Unregister ONLY the doStuff callback\nobject.off('stuff', doStuff);\nobject.trigger('stuff'); // doStuff will NOT be called\n```\nIf you don't pass a `callback` argument to `off`, ALL callbacks for the\nevent will not be executed when the event fires. For example:\n```javascript\nvar callback1 = function(){};\nvar callback2 = function(){};\nobject.on('stuff', callback1);\nobject.on('stuff', callback2);\nobject.trigger('stuff'); // callback1 and callback2 will be executed.\nobject.off('stuff');\nobject.trigger('stuff'); // callback1 and callback2 will not be executed!\n```",
            "access": "private",
            "tagname": "given will be removed from the event's callback queue. If no `callback`\nargument is given, all callbacks will be removed from the event's callback\nqueue.",
            "itemtype": "method",
            "name": "off",
            "params": [
                {
                    "name": "eventName",
                    "description": "event to stop listening to",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "optional argument. If given, only the function",
                    "type": "Function"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "RSVP.EventTarget",
            "module": "ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 67518,
            "description": "Use `trigger` to fire custom events. For example:\n```javascript\nobject.on('foo', function(){\nconsole.log('foo event happened!');\n});\nobject.trigger('foo');\n// 'foo event happened!' logged to the console\n```\nYou can also pass a value as a second argument to `trigger` that will be\npassed as an argument to all event listeners for the event:\n```javascript\nobject.on('foo', function(value){\nconsole.log(value.name);\n});\nobject.trigger('foo', { name: 'bar' });\n// 'bar' logged to the console\n```",
            "access": "private",
            "tagname": "the given `eventName`",
            "itemtype": "method",
            "name": "trigger",
            "params": [
                {
                    "name": "eventName",
                    "description": "name of the event to be triggered",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "optional value to be passed to any event handlers for",
                    "type": "Any"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "RSVP.EventTarget",
            "module": "ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 67565,
            "description": "`RSVP.filter` is similar to JavaScript's native `filter` method, except that it\nwaits for all promises to become fulfilled before running the `filterFn` on\neach item in given to `promises`. `RSVP.filter` returns a promise that will\nbecome fulfilled with the result of running `filterFn` on the values the\npromises become fulfilled with.\nFor example:\n```javascript\nvar promise1 = RSVP.resolve(1);\nvar promise2 = RSVP.resolve(2);\nvar promise3 = RSVP.resolve(3);\nvar promises = [promise1, promise2, promise3];\nvar filterFn = function(item){\nreturn item > 1;\n};\nRSVP.filter(promises, filterFn).then(function(result){\n// result is [ 2, 3 ]\n});\n```\nIf any of the `promises` given to `RSVP.filter` are rejected, the first promise\nthat is rejected will be given as an argument to the returned promise's\nrejection handler. For example:\n```javascript\nvar promise1 = RSVP.resolve(1);\nvar promise2 = RSVP.reject(new Error('2'));\nvar promise3 = RSVP.reject(new Error('3'));\nvar promises = [ promise1, promise2, promise3 ];\nvar filterFn = function(item){\nreturn item > 1;\n};\nRSVP.filter(promises, filterFn).then(function(array){\n// Code here never runs because there are rejected promises!\n}, function(reason) {\n// reason.message === '2'\n});\n```\n`RSVP.filter` will also wait for any promises returned from `filterFn`.\nFor instance, you may want to fetch a list of users then return a subset\nof those users based on some asynchronous operation:\n```javascript\nvar alice = { name: 'alice' };\nvar bob   = { name: 'bob' };\nvar users = [ alice, bob ];\nvar promises = users.map(function(user){\nreturn RSVP.resolve(user);\n});\nvar filterFn = function(user){\n// Here, Alice has permissions to create a blog post, but Bob does not.\nreturn getPrivilegesForUser(user).then(function(privs){\nreturn privs.can_create_blog_post === true;\n});\n};\nRSVP.filter(promises, filterFn).then(function(users){\n// true, because the server told us only Alice can create a blog post.\nusers.length === 1;\n// false, because Alice is the only user present in `users`\nusers[0] === bob;\n});\n```",
            "static": "filter the final results.\ntooling.",
            "params": [
                {
                    "name": "promises",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "filterFn",
                    "description": "- function to be called on each resolved value to",
                    "type": "Function"
                },
                {
                    "name": "label",
                    "description": "optional string describing the promise. Useful for",
                    "type": "String"
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.RSVP",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 67674,
            "description": "Description",
            "itemtype": "method",
            "name": "HashSettled",
            "params": [
                {
                    "name": "Constructor",
                    "description": ""
                },
                {
                    "name": "object",
                    "description": ""
                },
                {
                    "name": "label",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.RSVP",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 67694,
            "description": "`RSVP.hashSettled` is similar to `RSVP.allSettled`, but takes an object\ninstead of an array for its `promises` argument.\nUnlike `RSVP.all` or `RSVP.hash`, which implement a fail-fast method,\nbut like `RSVP.allSettled`, `hashSettled` waits until all the\nconstituent promises have returned and then shows you all the results\nwith their states and values/reasons. This is useful if you want to\nhandle multiple promises' failure states together as a set.\nReturns a promise that is fulfilled when all the given promises have been\nsettled, or rejected if the passed parameters are invalid.\nThe returned promise is fulfilled with a hash that has the same key names as\nthe `promises` object argument. If any of the values in the object are not\npromises, they will be copied over to the fulfilled object and marked with state\n'fulfilled'.\nExample:\n```javascript\nvar promises = {\nmyPromise: RSVP.Promise.resolve(1),\nyourPromise: RSVP.Promise.resolve(2),\ntheirPromise: RSVP.Promise.resolve(3),\nnotAPromise: 4\n};\nRSVP.hashSettled(promises).then(function(hash){\n// hash here is an object that looks like:\n// {\n//   myPromise: { state: 'fulfilled', value: 1 },\n//   yourPromise: { state: 'fulfilled', value: 2 },\n//   theirPromise: { state: 'fulfilled', value: 3 },\n//   notAPromise: { state: 'fulfilled', value: 4 }\n// }\n});\n```\nIf any of the `promises` given to `RSVP.hash` are rejected, the state will\nbe set to 'rejected' and the reason for rejection provided.\nExample:\n```javascript\nvar promises = {\nmyPromise: RSVP.Promise.resolve(1),\nrejectedPromise: RSVP.Promise.reject(new Error('rejection')),\nanotherRejectedPromise: RSVP.Promise.reject(new Error('more rejection')),\n};\nRSVP.hashSettled(promises).then(function(hash){\n// hash here is an object that looks like:\n// {\n//   myPromise:              { state: 'fulfilled', value: 1 },\n//   rejectedPromise:        { state: 'rejected', reason: Error },\n//   anotherRejectedPromise: { state: 'rejected', reason: Error },\n// }\n// Note that for rejectedPromise, reason.message == 'rejection',\n// and for anotherRejectedPromise, reason.message == 'more rejection'.\n});\n```\nAn important note: `RSVP.hashSettled` is intended for plain JavaScript objects that\nare just a set of keys and values. `RSVP.hashSettled` will NOT preserve prototype\nchains.\nExample:\n```javascript\nfunction MyConstructor(){\nthis.example = RSVP.Promise.resolve('Example');\n}\nMyConstructor.prototype = {\nprotoProperty: RSVP.Promise.resolve('Proto Property')\n};\nvar myObject = new MyConstructor();\nRSVP.hashSettled(myObject).then(function(hash){\n// protoProperty will not be present, instead you will just have an\n// object that looks like:\n// {\n//   example: { state: 'fulfilled', value: 'Example' }\n// }\n//\n// hash.hasOwnProperty('protoProperty'); // false\n// 'undefined' === typeof hash.protoProperty\n});\n```\nUseful for tooling.\nhave been settled.",
            "static": 1,
            "params": [
                {
                    "name": "object",
                    "description": ""
                },
                {
                    "name": "label",
                    "description": "optional string that describes the promise.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "MemberExpression"
            },
            "class": "Ember.RSVP",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 67788,
            "description": "`RSVP.hash` is similar to `RSVP.all`, but takes an object instead of an array\nfor its `promises` argument.\nReturns a promise that is fulfilled when all the given promises have been\nfulfilled, or rejected if any of them become rejected. The returned promise\nis fulfilled with a hash that has the same key names as the `promises` object\nargument. If any of the values in the object are not promises, they will\nsimply be copied over to the fulfilled object.\nExample:\n```javascript\nvar promises = {\nmyPromise: RSVP.resolve(1),\nyourPromise: RSVP.resolve(2),\ntheirPromise: RSVP.resolve(3),\nnotAPromise: 4\n};\nRSVP.hash(promises).then(function(hash){\n// hash here is an object that looks like:\n// {\n//   myPromise: 1,\n//   yourPromise: 2,\n//   theirPromise: 3,\n//   notAPromise: 4\n// }\n});\n````\nIf any of the `promises` given to `RSVP.hash` are rejected, the first promise\nthat is rejected will be given as the reason to the rejection handler.\nExample:\n```javascript\nvar promises = {\nmyPromise: RSVP.resolve(1),\nrejectedPromise: RSVP.reject(new Error('rejectedPromise')),\nanotherRejectedPromise: RSVP.reject(new Error('anotherRejectedPromise')),\n};\nRSVP.hash(promises).then(function(hash){\n// Code here never runs because there are rejected promises!\n}, function(reason) {\n// reason.message === 'rejectedPromise'\n});\n```\nAn important note: `RSVP.hash` is intended for plain JavaScript objects that\nare just a set of keys and values. `RSVP.hash` will NOT preserve prototype\nchains.\nExample:\n```javascript\nfunction MyConstructor(){\nthis.example = RSVP.resolve('Example');\n}\nMyConstructor.prototype = {\nprotoProperty: RSVP.resolve('Proto Property')\n};\nvar myObject = new MyConstructor();\nRSVP.hash(myObject).then(function(hash){\n// protoProperty will not be present, instead you will just have an\n// object that looks like:\n// {\n//   example: 'Example'\n// }\n//\n// hash.hasOwnProperty('protoProperty'); // false\n// 'undefined' === typeof hash.protoProperty\n});\n```",
            "static": "Useful for tooling.\nhave been fulfilled, or rejected if any of them become rejected.",
            "params": [
                {
                    "name": "object",
                    "description": ""
                },
                {
                    "name": "label",
                    "description": "optional string that describes the promise.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "MemberExpression"
            },
            "class": "Ember.RSVP",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 67873,
            "description": "Description",
            "params": [
                {
                    "name": "eventName",
                    "description": ""
                },
                {
                    "name": "promise",
                    "description": ""
                },
                {
                    "name": "child",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.RSVP",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 67911,
            "description": "`RSVP.map` is similar to JavaScript's native `map` method, except that it\nwaits for all promises to become fulfilled before running the `mapFn` on\neach item in given to `promises`. `RSVP.map` returns a promise that will\nbecome fulfilled with the result of running `mapFn` on the values the promises\nbecome fulfilled with.\nFor example:\n```javascript\nvar promise1 = RSVP.resolve(1);\nvar promise2 = RSVP.resolve(2);\nvar promise3 = RSVP.resolve(3);\nvar promises = [ promise1, promise2, promise3 ];\nvar mapFn = function(item){\nreturn item + 1;\n};\nRSVP.map(promises, mapFn).then(function(result){\n// result is [ 2, 3, 4 ]\n});\n```\nIf any of the `promises` given to `RSVP.map` are rejected, the first promise\nthat is rejected will be given as an argument to the returned promise's\nrejection handler. For example:\n```javascript\nvar promise1 = RSVP.resolve(1);\nvar promise2 = RSVP.reject(new Error('2'));\nvar promise3 = RSVP.reject(new Error('3'));\nvar promises = [ promise1, promise2, promise3 ];\nvar mapFn = function(item){\nreturn item + 1;\n};\nRSVP.map(promises, mapFn).then(function(array){\n// Code here never runs because there are rejected promises!\n}, function(reason) {\n// reason.message === '2'\n});\n```\n`RSVP.map` will also wait if a promise is returned from `mapFn`. For example,\nsay you want to get all comments from a set of blog posts, but you need\nthe blog posts first because they contain a url to those comments.\n```javscript\nvar mapFn = function(blogPost){\n// getComments does some ajax and returns an RSVP.Promise that is fulfilled\n// with some comments data\nreturn getComments(blogPost.comments_url);\n};\n// getBlogPosts does some ajax and returns an RSVP.Promise that is fulfilled\n// with some blog post data\nRSVP.map(getBlogPosts(), mapFn).then(function(comments){\n// comments is the result of asking the server for the comments\n// of all blog posts returned from getBlogPosts()\n});\n```",
            "static": 1,
            "params": [
                {
                    "name": "promises",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "mapFn",
                    "description": "function to be called on each fulfilled promise.",
                    "type": "Function"
                },
                {
                    "name": "label",
                    "description": "optional string for labeling the promise.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.RSVP",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 68001,
            "description": "Description",
            "itemtype": "method",
            "name": "Result",
            "return": {
                "description": ""
            },
            "class": "Ember.RSVP",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 68013,
            "description": "Description",
            "itemtype": "method",
            "name": "getThen",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.RSVP",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 68029,
            "description": "Description",
            "itemtype": "method",
            "name": "tryApply",
            "params": [
                {
                    "name": "f",
                    "description": ""
                },
                {
                    "name": "s",
                    "description": ""
                },
                {
                    "name": "a",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.RSVP",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 68046,
            "description": "Description",
            "itemtype": "method",
            "name": "makeObject",
            "params": [
                {
                    "name": "_",
                    "description": ""
                },
                {
                    "name": "argumentNames",
                    "description": ""
                }
            ],
            "return": {
                "description": "obj"
            },
            "class": "Ember.RSVP",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 68072,
            "description": "Description",
            "itemtype": "method",
            "name": "arrayResult",
            "params": [
                {
                    "name": "_",
                    "description": ""
                }
            ],
            "return": {
                "description": "args"
            },
            "class": "Ember.RSVP",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 68089,
            "description": "Description",
            "itemtype": "method",
            "name": "wrapThenable",
            "params": [
                {
                    "name": "then",
                    "description": ""
                },
                {
                    "name": "promise",
                    "description": ""
                }
            ],
            "return": {
                "description": "ObjectExpression"
            },
            "class": "Ember.RSVP",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 68098,
            "description": "Description",
            "itemtype": "method",
            "name": "then",
            "params": [
                {
                    "name": "onFulFillment",
                    "description": ""
                },
                {
                    "name": "onRejection",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.RSVP",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 68111,
            "description": "`RSVP.denodeify` takes a 'node-style' function and returns a function that\nwill return an `RSVP.Promise`. You can use `denodeify` in Node.js or the\nbrowser when you'd prefer to use promises over using callbacks. For example,\n`denodeify` transforms the following:\n```javascript\nvar fs = require('fs');\nfs.readFile('myfile.txt', function(err, data){\nif (err) return handleError(err);\nhandleData(data);\n});\n```\ninto:\n```javascript\nvar fs = require('fs');\nvar readFile = RSVP.denodeify(fs.readFile);\nreadFile('myfile.txt').then(handleData, handleError);\n```\nIf the node function has multiple success parameters, then `denodeify`\njust returns the first one:\n```javascript\nvar request = RSVP.denodeify(require('request'));\nrequest('http://example.com').then(function(res) {\n// ...\n});\n```\nHowever, if you need all success parameters, setting `denodeify`'s\nsecond parameter to `true` causes it to return all success parameters\nas an array:\n```javascript\nvar request = RSVP.denodeify(require('request'), true);\nrequest('http://example.com').then(function(result) {\n// result[0] -> res\n// result[1] -> body\n});\n```\nOr if you pass it an array with names it returns the parameters as a hash:\n```javascript\nvar request = RSVP.denodeify(require('request'), ['res', 'body']);\nrequest('http://example.com').then(function(result) {\n// result.res\n// result.body\n});\n```\nSometimes you need to retain the `this`:\n```javascript\nvar app = require('express')();\nvar render = RSVP.denodeify(app.render.bind(app));\n```\nThe denodified function inherits from the original function. It works in all\nenvironments, except IE 10 and below. Consequently all properties of the original\nfunction are available to you. However, any properties you change on the\ndenodeified function won't be changed on the original function. Example:\n```javascript\nvar request = RSVP.denodeify(require('request')),\ncookieJar = request.jar(); // <- Inheritance is used here\nrequest('http://example.com', {jar: cookieJar}).then(function(res) {\n// cookieJar.cookies holds now the cookies returned by example.com\n});\n```\nUsing `denodeify` makes it easier to compose asynchronous operations instead\nof using callbacks. For example, instead of:\n```javascript\nvar fs = require('fs');\nfs.readFile('myfile.txt', function(err, data){\nif (err) { ... } // Handle error\nfs.writeFile('myfile2.txt', data, function(err){\nif (err) { ... } // Handle error\nconsole.log('done')\n});\n});\n```\nyou can chain the operations together using `then` from the returned promise:\n```javascript\nvar fs = require('fs');\nvar readFile = RSVP.denodeify(fs.readFile);\nvar writeFile = RSVP.denodeify(fs.writeFile);\nreadFile('myfile.txt').then(function(data){\nreturn writeFile('myfile2.txt', data);\n}).then(function(){\nconsole.log('done')\n}).catch(function(error){\n// Handle error\n});\n```",
            "static": 1,
            "params": [
                {
                    "name": "nodeFunc",
                    "description": "a 'node-style' function that takes a callback as",
                    "type": "Function"
                },
                {
                    "name": "options",
                    "description": ""
                }
            ],
            "return": {
                "description": "fn"
            },
            "class": "Ember.RSVP",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 68213,
            "description": "Description",
            "itemtype": "method",
            "name": "fn",
            "return": {
                "description": ""
            },
            "class": "Ember.RSVP",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 68244,
            "description": "Description",
            "itemtype": "method",
            "name": "l",
            "params": [
                {
                    "name": "err",
                    "description": ""
                },
                {
                    "name": "val",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.RSVP",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 68276,
            "description": "Description",
            "itemtype": "method",
            "name": "handleValueInput",
            "params": [
                {
                    "name": "promise",
                    "description": ""
                },
                {
                    "name": "args",
                    "description": ""
                },
                {
                    "name": "nodeFunc",
                    "description": ""
                },
                {
                    "name": "self",
                    "description": ""
                }
            ],
            "return": {
                "description": "promise"
            },
            "class": "Ember.RSVP",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 68293,
            "description": "Description",
            "itemtype": "method",
            "name": "handlePromiseInput",
            "params": [
                {
                    "name": "promise",
                    "description": ""
                },
                {
                    "name": "args",
                    "description": ""
                },
                {
                    "name": "nodeFunc",
                    "description": ""
                },
                {
                    "name": "self",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.RSVP",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 68312,
            "description": "Description",
            "itemtype": "method",
            "name": "needsPromiseInput",
            "params": [
                {
                    "name": "arg",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.RSVP",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 68338,
            "description": "Description",
            "itemtype": "method",
            "name": "PromiseHash",
            "params": [
                {
                    "name": "Constructor",
                    "description": ""
                },
                {
                    "name": "object",
                    "description": ""
                },
                {
                    "name": "label",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.RSVP",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 68415,
            "description": "Description",
            "itemtype": "method",
            "name": "needsResolver",
            "return": {
                "description": ""
            },
            "class": "Ember.RSVP",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 68424,
            "description": "Description",
            "itemtype": "method",
            "name": "needsNew",
            "return": {
                "description": ""
            },
            "class": "Ember.RSVP",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 68558,
            "description": "The primary way of interacting with a promise is through its `then` method,\nwhich registers callbacks to receive either a promise's eventual value or the\nreason why the promise cannot be fulfilled.\n```js\nfindUser().then(function(user){\n// user is available\n}, function(reason){\n// user is unavailable, and you are given the reason why\n});\n```\nChaining\n--------\nThe return value of `then` is itself a promise.  This second, 'downstream'\npromise is resolved with the return value of the first promise's fulfillment\nor rejection handler, or rejected if the handler throws an exception.\n```js\nfindUser().then(function (user) {\nreturn user.name;\n}, function (reason) {\nreturn 'default name';\n}).then(function (userName) {\n// If `findUser` fulfilled, `userName` will be the user's name, otherwise it\n// will be `'default name'`\n});\nfindUser().then(function (user) {\nthrow new Error('Found user, but still unhappy');\n}, function (reason) {\nthrow new Error('`findUser` rejected and we're unhappy');\n}).then(function (value) {\n// never reached\n}, function (reason) {\n// if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.\n// If `findUser` rejected, `reason` will be '`findUser` rejected and we're unhappy'.\n});\n```\nIf the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.\n```js\nfindUser().then(function (user) {\nthrow new PedagogicalException('Upstream error');\n}).then(function (value) {\n// never reached\n}).then(function (value) {\n// never reached\n}, function (reason) {\n// The `PedgagocialException` is propagated all the way down to here\n});\n```\nAssimilation\n------------\nSometimes the value you want to propagate to a downstream promise can only be\nretrieved asynchronously. This can be achieved by returning a promise in the\nfulfillment or rejection handler. The downstream promise will then be pending\nuntil the returned promise is settled. This is called *assimilation*.\n```js\nfindUser().then(function (user) {\nreturn findCommentsByAuthor(user);\n}).then(function (comments) {\n// The user's comments are now available\n});\n```\nIf the assimliated promise rejects, then the downstream promise will also reject.\n```js\nfindUser().then(function (user) {\nreturn findCommentsByAuthor(user);\n}).then(function (comments) {\n// If `findCommentsByAuthor` fulfills, we'll have the value here\n}, function (reason) {\n// If `findCommentsByAuthor` rejects, we'll have the reason here\n});\n```\nSimple Example\n--------------\nSynchronous Example\n```javascript\nvar result;\ntry {\nresult = findResult();\n// success\n} catch(reason) {\n// failure\n}\n```\nErrback Example\n```js\nfindResult(function(result, err){\nif (err) {\n// failure\n} else {\n// success\n}\n});\n```\nPromise Example;\n```javascript\nfindResult().then(function(result){\n// success\n}, function(reason){\n// failure\n});\n```\nAdvanced Example\n--------------\nSynchronous Example\n```javascript\nvar author, books;\ntry {\nauthor = findAuthor();\nbooks  = findBooksByAuthor(author);\n// success\n} catch(reason) {\n// failure\n}\n```\nErrback Example\n```js\nfunction foundBooks(books) {\n}\nfunction failure(reason) {\n}\nfindAuthor(function(author, err){\nif (err) {\nfailure(err);\n// failure\n} else {\ntry {\nfindBoooksByAuthor(author, function(books, err) {\nif (err) {\nfailure(err);\n} else {\ntry {\nfoundBooks(books);\n} catch(reason) {\nfailure(reason);\n}\n}\n});\n} catch(error) {\nfailure(err);\n}\n// success\n}\n});\n```\nPromise Example;\n```javascript\nfindAuthor().\nthen(findBooksByAuthor).\nthen(function(books){\n// found books\n}).catch(function(reason){\n// something went wrong\n});\n```\nUseful for tooling.",
            "itemtype": "method",
            "name": "then",
            "params": [
                {
                    "name": "onFulfillment",
                    "description": ""
                },
                {
                    "name": "onRejection",
                    "description": ""
                },
                {
                    "name": "label",
                    "description": "optional string for labeling the promise.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "child"
            },
            "class": "Ember.RSVP.Promise",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 68751,
            "description": "`catch` is simply sugar for `then(undefined, onRejection)` which makes it the same\nas the catch block of a try/catch statement.\n```js\nfunction findAuthor(){\nthrow new Error('couldn't find that author');\n}\n// synchronous\ntry {\nfindAuthor();\n} catch(reason) {\n// something went wrong\n}\n// async with promises\nfindAuthor().catch(function(reason){\n// something went wrong\n});\n```\nUseful for tooling.",
            "params": [
                {
                    "name": "onRejection",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "label",
                    "description": "optional string for labeling the promise.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.RSVP.Promise",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 68778,
            "description": "`finally` will be invoked regardless of the promise's fate just as native\ntry/catch/finally behaves\nSynchronous example:\n```js\nfindAuthor() {\nif (Math.random() > 0.5) {\nthrow new Error();\n}\nreturn new Author();\n}\ntry {\nreturn findAuthor(); // succeed or fail\n} catch(error) {\nreturn findOtherAuther();\n} finally {\n// always runs\n// doesn't affect the return value\n}\n```\nAsynchronous example:\n```js\nfindAuthor().catch(function(reason){\nreturn findOtherAuther();\n}).finally(function(){\n// author was either found, or not\n});\n```\nUseful for tooling.",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "label",
                    "description": "optional string for labeling the promise.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.RSVP.Promise",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 68832,
            "description": "`RSVP.Promise.all` accepts an array of promises, and returns a new promise which\nis fulfilled with an array of fulfillment values for the passed promises, or\nrejected with the reason of the first passed promise to be rejected. It casts all\nelements of the passed iterable to promises as it runs this algorithm.\nExample:\n```javascript\nvar promise1 = RSVP.resolve(1);\nvar promise2 = RSVP.resolve(2);\nvar promise3 = RSVP.resolve(3);\nvar promises = [ promise1, promise2, promise3 ];\nRSVP.Promise.all(promises).then(function(array){\n// The array here would be [ 1, 2, 3 ];\n});\n```\nIf any of the `promises` given to `RSVP.all` are rejected, the first promise\nthat is rejected will be given as an argument to the returned promises's\nrejection handler. For example:\nExample:\n```javascript\nvar promise1 = RSVP.resolve(1);\nvar promise2 = RSVP.reject(new Error(\"2\"));\nvar promise3 = RSVP.reject(new Error(\"3\"));\nvar promises = [ promise1, promise2, promise3 ];\nRSVP.Promise.all(promises).then(function(array){\n// Code here never runs because there are rejected promises!\n}, function(error) {\n// error.message === \"2\"\n});\n```",
            "static": 1,
            "params": [
                {
                    "name": "entries",
                    "description": "array of promises",
                    "type": "Array"
                },
                {
                    "name": "label",
                    "description": "optional string for labeling the promise.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "MemberExpression"
            },
            "class": "Ember.RSVP.Promise",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 68886,
            "description": "`RSVP.Promise.race` returns a new promise which is settled in the same way as the\nfirst passed promise to settle.\nExample:\n```javascript\nvar promise1 = new RSVP.Promise(function(resolve, reject){\nsetTimeout(function(){\nresolve('promise 1');\n}, 200);\n});\nvar promise2 = new RSVP.Promise(function(resolve, reject){\nsetTimeout(function(){\nresolve('promise 2');\n}, 100);\n});\nRSVP.Promise.race([promise1, promise2]).then(function(result){\n// result === 'promise 2' because it was resolved before promise1\n// was resolved.\n});\n```\n`RSVP.Promise.race` is deterministic in that only the state of the first\nsettled promise matters. For example, even if other promises given to the\n`promises` array argument are resolved, but the first settled promise has\nbecome rejected before the other promises became fulfilled, the returned\npromise will become rejected:\n```javascript\nvar promise1 = new RSVP.Promise(function(resolve, reject){\nsetTimeout(function(){\nresolve('promise 1');\n}, 200);\n});\nvar promise2 = new RSVP.Promise(function(resolve, reject){\nsetTimeout(function(){\nreject(new Error('promise 2'));\n}, 100);\n});\nRSVP.Promise.race([promise1, promise2]).then(function(result){\n// Code here never runs\n}, function(reason){\n// reason.message === 'promise 2' because promise 2 became rejected before\n// promise 1 became fulfilled\n});\n```\nAn example real-world use case is implementing timeouts:\n```javascript\nRSVP.Promise.race([ajax('foo.json'), timeout(5000)])\n```",
            "static": "Useful for tooling.\npromise to settle.",
            "params": [
                {
                    "name": "entries",
                    "description": ""
                },
                {
                    "name": "label",
                    "description": "optional string for describing the promise returned.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "promise"
            },
            "class": "Ember.RSVP.Promise",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 68953,
            "description": "Description",
            "itemtype": "method",
            "name": "onFulfillment",
            "params": [
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.RSVP.Promise",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 68963,
            "description": "Description",
            "itemtype": "method",
            "name": "onRejection",
            "params": [
                {
                    "name": "reason",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.RSVP.Promise",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 68987,
            "description": "`RSVP.Promise.reject` returns a promise rejected with the passed `reason`.\nIt is shorthand for the following:\n```javascript\nvar promise = new RSVP.Promise(function(resolve, reject){\nreject(new Error('WHOOPS'));\n});\npromise.then(function(value){\n// Code here doesn't run because the promise is rejected!\n}, function(reason){\n// reason.message === 'WHOOPS'\n});\n```\nInstead of writing the above, your code now simply becomes the following:\n```javascript\nvar promise = RSVP.Promise.reject(new Error('WHOOPS'));\npromise.then(function(value){\n// Code here doesn't run because the promise is rejected!\n}, function(reason){\n// reason.message === 'WHOOPS'\n});\n```",
            "static": "Useful for tooling.",
            "params": [
                {
                    "name": "reason",
                    "description": "value that the returned promise will be rejected with.",
                    "type": "Any"
                },
                {
                    "name": "label",
                    "description": "optional string for identifying the returned promise.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "promise"
            },
            "class": "Ember.RSVP.Promise",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 69030,
            "description": "`RSVP.Promise.resolve` returns a promise that will become resolved with the\npassed `value`. It is shorthand for the following:\n```javascript\nvar promise = new RSVP.Promise(function(resolve, reject){\nresolve(1);\n});\npromise.then(function(value){\n// value === 1\n});\n```\nInstead of writing the above, your code now simply becomes the following:\n```javascript\nvar promise = RSVP.Promise.resolve(1);\npromise.then(function(value){\n// value === 1\n});\n```",
            "static": "Useful for tooling.\n`value`",
            "params": [
                {
                    "name": "object",
                    "description": ""
                },
                {
                    "name": "label",
                    "description": "optional string for identifying the returned promise.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "promise"
            },
            "class": "Ember.RSVP.Promise",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 69074,
            "description": "This is a convenient alias for `RSVP.Promise.race`.",
            "static": "for tooling.",
            "params": [
                {
                    "name": "array",
                    "description": "Array of promises.",
                    "type": "Array"
                },
                {
                    "name": "label",
                    "description": "An optional label. This is useful",
                    "type": "String"
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.RSVP",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 69093,
            "description": "This is a convenient alias for `RSVP.Promise.reject`.",
            "static": "Useful for tooling.",
            "params": [
                {
                    "name": "reason",
                    "description": "value that the returned promise will be rejected with.",
                    "type": "Any"
                },
                {
                    "name": "label",
                    "description": "optional string for identifying the returned promise.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.RSVP",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 69112,
            "description": "This is a convenient alias for `RSVP.Promise.resolve`.",
            "static": "Useful for tooling.\n`value`",
            "params": [
                {
                    "name": "value",
                    "description": "value that the returned promise will be resolved with",
                    "type": "Any"
                },
                {
                    "name": "label",
                    "description": "optional string for identifying the returned promise.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.RSVP",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 69130,
            "description": "`RSVP.rethrow` will rethrow an error on the next turn of the JavaScript event\nloop in order to aid debugging.\nPromises A+ specifies that any exceptions that occur with a promise must be\ncaught by the promises implementation and bubbled to the last handler. For\nthis reason, it is recommended that you always specify a second rejection\nhandler function to `then`. However, `RSVP.rethrow` will throw the exception\noutside of the promise, so it bubbles up to your console if in the browser,\nor domain/cause uncaught exception in Node. `rethrow` will also throw the\nerror again so the error can be handled by the promise per the spec.\n```javascript\nfunction throws(){\nthrow new Error('Whoops!');\n}\nvar promise = new RSVP.Promise(function(resolve, reject){\nthrows();\n});\npromise.catch(RSVP.rethrow).then(function(){\n// Code here doesn't run because the promise became rejected due to an\n// error!\n}, function (err){\n// handle the error here\n});\n```\nThe 'Whoops' error will be thrown on the next turn of the event loop\nand you can watch for it in your console. You can also handle it using a\nrejection handler given to `.then` or `.catch` on the returned promise.",
            "static": 1,
            "params": [
                {
                    "name": "reason",
                    "description": "reason the promise became rejected.",
                    "type": "Error"
                }
            ],
            "return": {
                "description": ""
            },
            "throws": {
                "description": "Error"
            },
            "class": "Ember.RSVP",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 69175,
            "description": "Description",
            "itemtype": "method",
            "name": "objectOrFunction",
            "params": [
                {
                    "name": "x",
                    "description": ""
                }
            ],
            "return": {
                "description": "LogicalExpression"
            },
            "class": "Ember.RSVP",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 69186,
            "description": "Description",
            "itemtype": "method",
            "name": "isFunction",
            "params": [
                {
                    "name": "x",
                    "description": ""
                }
            ],
            "return": {
                "description": "BinaryExpression"
            },
            "class": "Ember.RSVP",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 69197,
            "description": "Description",
            "itemtype": "method",
            "name": "isMaybeThenable",
            "params": [
                {
                    "name": "x",
                    "description": ""
                }
            ],
            "return": {
                "description": "LogicalExpression"
            },
            "class": "Ember.RSVP",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 69209,
            "description": "Description",
            "params": [
                {
                    "name": "x",
                    "description": ""
                }
            ],
            "return": {
                "description": "BinaryExpression"
            },
            "class": "Ember.RSVP",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 69227,
            "description": "Description",
            "itemtype": "method",
            "name": "F",
            "return": {
                "description": ""
            },
            "class": "Ember.RSVP",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 69288,
            "description": "This module defines a subclass of Ember.DefaultResolver that adds two\nimportant features:\n 1) The resolver makes the container aware of es6 modules via the AMD\n    output. The loader's _moduleEntries is consulted so that classes can be\n    resolved directly via the module loader, without needing a manual\n    `import`.\n 2) is able to provide injections to classes that implement `extend`\n    (as is typical with Ember).",
            "itemtype": "method",
            "name": "classFactory",
            "params": [
                {
                    "name": "klass",
                    "description": ""
                }
            ],
            "return": {
                "description": "ObjectExpression"
            },
            "class": "Ember.RSVP",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 69303,
            "description": "Description",
            "itemtype": "method",
            "name": "create",
            "params": [
                {
                    "name": "injections",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.RSVP",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 69323,
            "description": "Description",
            "itemtype": "method",
            "name": "makeDictionary",
            "return": {
                "description": "cache"
            },
            "class": "Ember.RSVP",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 69339,
            "description": "Description",
            "itemtype": "method",
            "name": "parseName",
            "params": [
                {
                    "name": "fullName",
                    "description": ""
                }
            ],
            "return": {
                "description": "ObjectExpression"
            },
            "class": "Ember.RSVP",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 69380,
            "description": "Description",
            "itemtype": "method",
            "name": "chooseModuleName",
            "params": [
                {
                    "name": "moduleEntries",
                    "description": ""
                },
                {
                    "name": "moduleName",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.RSVP",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 69416,
            "description": "Description",
            "itemtype": "method",
            "name": "resolveOther",
            "params": [
                {
                    "name": "parsedName",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.RSVP",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 69454,
            "description": "Description",
            "itemtype": "method",
            "name": "makeToString",
            "params": [
                {
                    "name": "factory",
                    "description": ""
                },
                {
                    "name": "fullName",
                    "description": ""
                }
            ],
            "return": {
                "description": "BinaryExpression"
            },
            "class": "Ember.RSVP",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 69465,
            "description": "Description",
            "itemtype": "method",
            "name": "shouldWrapInClassFactory",
            "params": [
                {
                    "name": "module",
                    "description": ""
                },
                {
                    "name": "parsedName",
                    "description": ""
                }
            ],
            "return": {
                "description": "Literal"
            },
            "class": "Ember.RSVP",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 69475,
            "description": "Description",
            "itemtype": "method",
            "name": "init",
            "return": {
                "description": ""
            },
            "class": "Ember.RSVP",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 69490,
            "description": "Description",
            "itemtype": "method",
            "name": "normalize",
            "params": [
                {
                    "name": "fullName",
                    "description": ""
                }
            ],
            "return": {
                "description": "LogicalExpression"
            },
            "class": "Ember.RSVP",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 69512,
            "description": "Description",
            "itemtype": "method",
            "name": "pluralize",
            "params": [
                {
                    "name": "type",
                    "description": ""
                }
            ],
            "return": {
                "description": "LogicalExpression"
            },
            "class": "Ember.RSVP",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 69522,
            "description": "Description",
            "itemtype": "method",
            "name": "podBasedLookupWithPrefix",
            "params": [
                {
                    "name": "podPrefix",
                    "description": ""
                },
                {
                    "name": "parsedName",
                    "description": ""
                }
            ],
            "return": {
                "description": "BinaryExpression"
            },
            "class": "Ember.RSVP",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 69539,
            "description": "Description",
            "itemtype": "method",
            "name": "podBasedModuleName",
            "params": [
                {
                    "name": "parsedName",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.RSVP",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 69551,
            "description": "Description",
            "itemtype": "method",
            "name": "podBasedComponentsInSubdir",
            "params": [
                {
                    "name": "parsedName",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.RSVP",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 69566,
            "description": "Description",
            "itemtype": "method",
            "name": "mainModuleName",
            "params": [
                {
                    "name": "parsedName",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.RSVP",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 69581,
            "description": "Description",
            "itemtype": "method",
            "name": "defaultModuleName",
            "params": [
                {
                    "name": "parsedName",
                    "description": ""
                }
            ],
            "return": {
                "description": "BinaryExpression"
            },
            "class": "Ember.RSVP",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 69591,
            "description": "Description",
            "itemtype": "method",
            "name": "prefix",
            "params": [
                {
                    "name": "parsedName",
                    "description": ""
                }
            ],
            "return": {
                "description": "tmpPrefix"
            },
            "class": "Ember.RSVP",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 69607,
            "description": "A listing of functions to test for moduleName's based on the provided\n      `parsedName`. This allows easy customization of additional module based\n      lookup patterns.",
            "itemtype": "property",
            "name": "moduleNameLookupPatterns",
            "return": {
                "description": "",
                "type": "Ember.Array"
            },
            "class": "Ember.RSVP",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 69625,
            "description": "Description",
            "itemtype": "method",
            "name": "findModuleName",
            "params": [
                {
                    "name": "parsedName",
                    "description": ""
                },
                {
                    "name": "loggingDisabled",
                    "description": ""
                }
            ],
            "return": {
                "description": "moduleName"
            },
            "class": "Ember.RSVP",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 69665,
            "description": "Description",
            "itemtype": "method",
            "name": "lookupDescription",
            "params": [
                {
                    "name": "fullName",
                    "description": ""
                }
            ],
            "return": {
                "description": "moduleName"
            },
            "class": "Ember.RSVP",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 69741,
            "description": "The container of the application being debugged.\nThis property will be injected\non creation.",
            "itemtype": "property",
            "name": "container",
            "default": "null",
            "class": "Ember.RSVP",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 69751,
            "description": "The resolver instance of the application\nbeing debugged. This property will be injected\non creation.",
            "itemtype": "property",
            "name": "resolver",
            "default": "null",
            "class": "Ember.RSVP",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 69760,
            "description": "Returns true if it is possible to catalog a list of available\nclasses in the resolver for a given type.",
            "itemtype": "method",
            "name": "canCatalogEntriesByType",
            "params": [
                {
                    "name": "type",
                    "description": "The type. e.g. \"model\", \"controller\", \"route\"",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Literal"
            },
            "class": "Ember.RSVP",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 69771,
            "description": "Returns the available classes a given type.",
            "itemtype": "method",
            "name": "catalogEntriesByType",
            "params": [
                {
                    "name": "type",
                    "description": "The type. e.g. \"model\", \"controller\", \"route\"",
                    "type": "String"
                }
            ],
            "return": {
                "description": "types"
            },
            "class": "Ember.RSVP",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 69782,
            "description": "Description",
            "itemtype": "method",
            "name": "makeToString",
            "return": {
                "description": "MemberExpression"
            },
            "class": "Ember.RSVP",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 69825,
            "description": "Description",
            "itemtype": "method",
            "name": "initialize",
            "params": [
                {
                    "name": "container",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.RSVP",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 69856,
            "description": "Description",
            "params": [
                {
                    "name": "app",
                    "description": ""
                },
                {
                    "name": "prefix",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.RSVP",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 70013,
            "description": "Description",
            "params": [
                {
                    "name": "name",
                    "description": ""
                },
                {
                    "name": "deps",
                    "description": ""
                },
                {
                    "name": "callback",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.RSVP",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 70027,
            "description": "Description",
            "itemtype": "method",
            "name": "reify",
            "params": [
                {
                    "name": "deps",
                    "description": ""
                },
                {
                    "name": "name",
                    "description": ""
                },
                {
                    "name": "seen",
                    "description": ""
                }
            ],
            "return": {
                "description": "ObjectExpression"
            },
            "class": "Ember.RSVP",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 70057,
            "description": "Description",
            "params": [
                {
                    "name": "name",
                    "description": ""
                }
            ],
            "return": {
                "description": "ConditionalExpression"
            },
            "class": "Ember.RSVP",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 70092,
            "description": "Description",
            "itemtype": "method",
            "name": "resolve",
            "params": [
                {
                    "name": "child",
                    "description": ""
                },
                {
                    "name": "name",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.RSVP",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 70124,
            "description": "Description",
            "itemtype": "method",
            "name": "clear",
            "return": {
                "description": ""
            },
            "class": "Ember.RSVP",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 70153,
            "description": "Description",
            "params": [
                {
                    "name": "container",
                    "description": ""
                },
                {
                    "name": "application",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.RSVP",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 70289,
            "description": "The ActiveModelAdapter overrides the `pathForType` method to build\nunderscored URLs by decamelizing and pluralizing the object type name.\n```js\nthis.pathForType(\"famousPerson\");\n//=> \"famous_people\"\n```",
            "itemtype": "method",
            "name": "pathForType",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "DS.ActiveModelAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 70306,
            "description": "The ActiveModelAdapter overrides the `ajaxError` method\nto return a DS.InvalidError for all 422 Unprocessable Entity\nresponses.\nA 422 HTTP response from the server generally implies that the request\nwas well formed but the API was unable to process it because the\ncontent was not semantically correct or meaningful per the API.\nFor more information on 422 HTTP Error code see 11.2 WebDAV RFC 4918\nhttps://tools.ietf.org/html/rfc4918#section-11.2",
            "itemtype": "method",
            "name": "ajaxError",
            "params": [
                {
                    "name": "jqXHR",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.ActiveModelAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 70449,
            "description": "Converts camelCased attributes to underscored when serializing.",
            "itemtype": "method",
            "name": "keyForAttribute",
            "params": [
                {
                    "name": "attr",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "DS.ActiveModelSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 70459,
            "description": "Underscores relationship names and appends \"_id\" or \"_ids\" when serializing\nrelationship keys.",
            "itemtype": "method",
            "name": "keyForRelationship",
            "params": [
                {
                    "name": "rawKey",
                    "description": ""
                },
                {
                    "name": "kind",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.ActiveModelSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 70483,
            "description": "Underscores the JSON root keys when serializing.",
            "itemtype": "method",
            "name": "serializeIntoHash",
            "params": [
                {
                    "name": "data",
                    "description": ""
                },
                {
                    "name": "type",
                    "description": ""
                },
                {
                    "name": "record",
                    "description": ""
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.ActiveModelSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 70497,
            "description": "Serializes a polymorphic type as a fully capitalized model name.",
            "itemtype": "method",
            "name": "serializePolymorphicType",
            "params": [
                {
                    "name": "record",
                    "description": ""
                },
                {
                    "name": "json",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "relationship",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.ActiveModelSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 70519,
            "description": "Add extra step to `DS.RESTSerializer.normalize` so links are normalized.\nIf your payload looks like:\n```js\n{\n\"post\": {\n\"id\": 1,\n\"title\": \"Rails is omakase\",\n\"links\": { \"flagged_comments\": \"api/comments/flagged\" }\n}\n}\n```\nThe normalized version would look like this\n```js\n{\n\"post\": {\n\"id\": 1,\n\"title\": \"Rails is omakase\",\n\"links\": { \"flaggedComments\": \"api/comments/flagged\" }\n}\n}\n```",
            "itemtype": "method",
            "name": "normalize",
            "params": [
                {
                    "name": "type",
                    "description": ""
                },
                {
                    "name": "hash",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "prop",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "DS.ActiveModelSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 70553,
            "description": "Convert `snake_cased` links  to `camelCase`",
            "itemtype": "method",
            "name": "normalizeLinks",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.ActiveModelSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 70574,
            "description": "Normalize the polymorphic type from the JSON.\nNormalize:\n```js\n{\nid: \"1\"\nminion: { type: \"evil_minion\", id: \"12\"}\n}\n```\nTo:\n```js\n{\nid: \"1\"\nminion: { type: \"evilMinion\", id: \"12\"}\n}\n```",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "normalizeRelationships",
            "params": [
                {
                    "name": "type",
                    "description": ""
                },
                {
                    "name": "hash",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.ActiveModelSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 70783,
            "description": "If `simulateRemoteResponse` is `true` the `FixtureAdapter` will\nwait a number of milliseconds before resolving promises with the\nfixture values. The wait time can be configured via the `latency`\nproperty.",
            "itemtype": "property",
            "name": "simulateRemoteResponse",
            "type": "{Boolean}",
            "default": "true",
            "class": "DS.FixtureAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 70795,
            "description": "By default the `FixtureAdapter` will simulate a wait of the\n`latency` milliseconds before resolving promises with the fixture\nvalues. This behavior can be turned off via the\n`simulateRemoteResponse` property.",
            "itemtype": "property",
            "name": "latency",
            "type": "{Number}",
            "default": "50",
            "class": "DS.FixtureAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 70807,
            "description": "Implement this method in order to provide data associated with a type",
            "itemtype": "method",
            "name": "fixturesForType",
            "params": [
                {
                    "name": "type",
                    "description": ""
                }
            ],
            "return": {
                "description": "Literal"
            },
            "class": "DS.FixtureAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 70828,
            "description": "Implement this method in order to query fixtures data",
            "itemtype": "method",
            "name": "queryFixtures",
            "params": [
                {
                    "name": "fixtures",
                    "description": ""
                },
                {
                    "name": "query",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "type",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.FixtureAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 70840,
            "description": "Description",
            "itemtype": "method",
            "name": "updateFixtures",
            "params": [
                {
                    "name": "type",
                    "description": ""
                },
                {
                    "name": "fixture",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.FixtureAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 70859,
            "description": "Implement this method in order to provide json for CRUD methods",
            "itemtype": "method",
            "name": "mockJSON",
            "params": [
                {
                    "name": "store",
                    "description": ""
                },
                {
                    "name": "type",
                    "description": ""
                },
                {
                    "name": "record",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "DS.FixtureAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 70871,
            "description": "Description",
            "itemtype": "method",
            "name": "generateIdForRecord",
            "params": [
                {
                    "name": "store",
                    "description": ""
                }
            ],
            "return": {
                "description": "BinaryExpression"
            },
            "class": "DS.FixtureAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 70881,
            "description": "Description",
            "itemtype": "method",
            "name": "find",
            "params": [
                {
                    "name": "store",
                    "description": ""
                },
                {
                    "name": "type",
                    "description": ""
                },
                {
                    "name": "id",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.FixtureAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 70906,
            "description": "Description",
            "itemtype": "method",
            "name": "findMany",
            "params": [
                {
                    "name": "store",
                    "description": ""
                },
                {
                    "name": "type",
                    "description": ""
                },
                {
                    "name": "ids",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.FixtureAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 70932,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "findAll",
            "params": [
                {
                    "name": "store",
                    "description": ""
                },
                {
                    "name": "type",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "DS.FixtureAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 70949,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "findQuery",
            "params": [
                {
                    "name": "store",
                    "description": ""
                },
                {
                    "name": "type",
                    "description": ""
                },
                {
                    "name": "query",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "array",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.FixtureAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 70972,
            "description": "Description",
            "itemtype": "method",
            "name": "createRecord",
            "params": [
                {
                    "name": "store",
                    "description": ""
                },
                {
                    "name": "type",
                    "description": ""
                },
                {
                    "name": "record",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "DS.FixtureAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 70990,
            "description": "Description",
            "itemtype": "method",
            "name": "updateRecord",
            "params": [
                {
                    "name": "store",
                    "description": ""
                },
                {
                    "name": "type",
                    "description": ""
                },
                {
                    "name": "record",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "DS.FixtureAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 71008,
            "description": "Description",
            "itemtype": "method",
            "name": "deleteRecord",
            "params": [
                {
                    "name": "store",
                    "description": ""
                },
                {
                    "name": "type",
                    "description": ""
                },
                {
                    "name": "record",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "DS.FixtureAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 71025,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "deleteLoadedFixture",
            "params": [
                {
                    "name": "type",
                    "description": ""
                },
                {
                    "name": "record",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.FixtureAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 71042,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "findExistingFixture",
            "params": [
                {
                    "name": "type",
                    "description": ""
                },
                {
                    "name": "record",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "DS.FixtureAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 71056,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "findFixtureById",
            "params": [
                {
                    "name": "fixtures",
                    "description": ""
                },
                {
                    "name": "id",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "DS.FixtureAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 71073,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "simulateRemoteCall",
            "params": [
                {
                    "name": "callback",
                    "description": ""
                },
                {
                    "name": "context",
                    "description": ""
                }
            ],
            "return": {
                "description": "NewExpression"
            },
            "class": "DS.FixtureAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 71271,
            "description": "By default the RESTAdapter will send each find request coming from a `store.find`\nor from accessing a relationship separately to the server. If your server supports passing\nids as a query string, you can set coalesceFindRequests to true to coalesce all find requests\nwithin a single runloop.\n\nFor example, if you have an initial payload of\n```javascript\npost: {\n  id:1,\n  comments: [1,2]\n}\n```\n\nBy default calling `post.get('comments')` will trigger the following requests(assuming the\ncomments haven't been loaded before):\n\n```\nGET /comments/1\nGET /comments/2\n```\n\nIf you set coalesceFindRequests to `true` it will instead trigger the following request:\n\n```\nGET /comments?ids[]=1&ids[]=2\n```\n\nSetting coalesceFindRequests to `true` also works for `store.find` requests and `belongsTo`\nrelationships accessed within the same runloop. If you set `coalesceFindRequests: true`\n\n```javascript\nstore.find('comment', 1);\nstore.find('comment', 2);\n```\n\nwill also send a request to: `GET /comments?ids[]=1&ids[]=2`",
            "itemtype": "property",
            "name": "coalesceFindRequests",
            "type": "{boolean}",
            "class": "DS.RESTAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 71314,
            "description": "Endpoint paths can be prefixed with a `namespace` by setting the namespace\nproperty on the adapter:\n\n```javascript\nDS.RESTAdapter.reopen({\n  namespace: 'api/1'\n});\n```\n\nRequests for `App.Post` would now target `/api/1/post/`.",
            "itemtype": "property",
            "name": "namespace",
            "type": "{String}",
            "class": "DS.RESTAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 71330,
            "description": "An adapter can target other hosts by setting the `host` property.\n\n```javascript\nDS.RESTAdapter.reopen({\n  host: 'https://api.example.com'\n});\n```\n\nRequests for `App.Post` would now target `https://api.example.com/post/`.",
            "itemtype": "property",
            "name": "host",
            "type": "{String}",
            "class": "DS.RESTAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 71345,
            "description": "Some APIs require HTTP headers, e.g. to provide an API\nkey. Arbitrary headers can be set as key/value pairs on the\n`RESTAdapter`'s `headers` object and Ember Data will send them\nalong with each ajax request. For dynamic headers see [headers\ncustomization](/api/data/classes/DS.RESTAdapter.html#toc_headers-customization).\n\n```javascript\nApp.ApplicationAdapter = DS.RESTAdapter.extend({\n  headers: {\n    \"API_KEY\": \"secret key\",\n    \"ANOTHER_HEADER\": \"Some header value\"\n  }\n});\n```",
            "itemtype": "property",
            "name": "headers",
            "type": "{Object}",
            "class": "DS.RESTAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 71365,
            "description": "Called by the store in order to fetch the JSON for a given\ntype and ID.\nThe `find` method makes an Ajax request to a URL computed by `buildURL`, and returns a\npromise for the resulting payload.\nThis method performs an HTTP `GET` request with the id provided as part of the query string.",
            "itemtype": "method",
            "name": "find",
            "params": [
                {
                    "name": "store",
                    "description": ""
                },
                {
                    "name": "type",
                    "description": ""
                },
                {
                    "name": "id",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "record",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "DS.RESTAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 71382,
            "description": "Called by the store in order to fetch a JSON array for all\nof the records for a given type.\nThe `findAll` method makes an Ajax (HTTP GET) request to a URL computed by `buildURL`, and returns a\npromise for the resulting payload.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "findAll",
            "params": [
                {
                    "name": "store",
                    "description": ""
                },
                {
                    "name": "type",
                    "description": ""
                },
                {
                    "name": "sinceToken",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "DS.RESTAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 71404,
            "description": "Called by the store in order to fetch a JSON array for\nthe records that match a particular query.\nThe `findQuery` method makes an Ajax (HTTP GET) request to a URL computed by `buildURL`, and returns a\npromise for the resulting payload.\nThe `query` argument is a simple JavaScript object that will be passed directly\nto the server as parameters.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "findQuery",
            "params": [
                {
                    "name": "store",
                    "description": ""
                },
                {
                    "name": "type",
                    "description": ""
                },
                {
                    "name": "query",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "DS.RESTAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 71422,
            "description": "Called by the store in order to fetch several records together if `coalesceFindRequests` is true\nFor example, if the original payload looks like:\n```js\n{\n\"id\": 1,\n\"title\": \"Rails is omakase\",\n\"comments\": [ 1, 2, 3 ]\n}\n```\nThe IDs will be passed as a URL-encoded Array of IDs, in this form:\n```\nids[]=1&ids[]=2&ids[]=3\n```\nMany servers, such as Rails and PHP, will automatically convert this URL-encoded array\ninto an Array for you on the server-side. If you want to encode the\nIDs, differently, just override this (one-line) method.\nThe `findMany` method makes an Ajax (HTTP GET) request to a URL computed by `buildURL`, and returns a\npromise for the resulting payload.",
            "itemtype": "method",
            "name": "findMany",
            "params": [
                {
                    "name": "store",
                    "description": ""
                },
                {
                    "name": "type",
                    "description": ""
                },
                {
                    "name": "ids",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "records",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "DS.RESTAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 71452,
            "description": "Called by the store in order to fetch a JSON array for\nthe unloaded records in a has-many relationship that were originally\nspecified as a URL (inside of `links`).\nFor example, if your original payload looks like this:\n```js\n{\n\"post\": {\n\"id\": 1,\n\"title\": \"Rails is omakase\",\n\"links\": { \"comments\": \"/posts/1/comments\" }\n}\n}\n```\nThis method will be called with the parent record and `/posts/1/comments`.\nThe `findHasMany` method will make an Ajax (HTTP GET) request to the originally specified URL.\nIf the URL is host-relative (starting with a single slash), the\nrequest will use the host specified on the adapter (if any).",
            "itemtype": "method",
            "name": "findHasMany",
            "params": [
                {
                    "name": "store",
                    "description": ""
                },
                {
                    "name": "record",
                    "description": ""
                },
                {
                    "name": "url",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "relationship",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "DS.RESTAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 71489,
            "description": "Called by the store in order to fetch a JSON array for\nthe unloaded records in a belongs-to relationship that were originally\nspecified as a URL (inside of `links`).\nFor example, if your original payload looks like this:\n```js\n{\n\"person\": {\n\"id\": 1,\n\"name\": \"Tom Dale\",\n\"links\": { \"group\": \"/people/1/group\" }\n}\n}\n```\nThis method will be called with the parent record and `/people/1/group`.\nThe `findBelongsTo` method will make an Ajax (HTTP GET) request to the originally specified URL.",
            "itemtype": "method",
            "name": "findBelongsTo",
            "params": [
                {
                    "name": "store",
                    "description": ""
                },
                {
                    "name": "record",
                    "description": ""
                },
                {
                    "name": "url",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "relationship",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "DS.RESTAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 71519,
            "description": "Called by the store when a newly created record is\nsaved via the `save` method on a model record instance.\nThe `createRecord` method serializes the record and makes an Ajax (HTTP POST) request\nto a URL computed by `buildURL`.\nSee `serialize` for information on how to customize the serialized form\nof a record.",
            "itemtype": "method",
            "name": "createRecord",
            "params": [
                {
                    "name": "store",
                    "description": ""
                },
                {
                    "name": "type",
                    "description": ""
                },
                {
                    "name": "record",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "DS.RESTAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 71541,
            "description": "Called by the store when an existing record is saved\nvia the `save` method on a model record instance.\nThe `updateRecord` method serializes the record and makes an Ajax (HTTP PUT) request\nto a URL computed by `buildURL`.\nSee `serialize` for information on how to customize the serialized form\nof a record.",
            "itemtype": "method",
            "name": "updateRecord",
            "params": [
                {
                    "name": "store",
                    "description": ""
                },
                {
                    "name": "type",
                    "description": ""
                },
                {
                    "name": "record",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "DS.RESTAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 71565,
            "description": "Called by the store when a record is deleted.\nThe `deleteRecord` method  makes an Ajax (HTTP DELETE) request to a URL computed by `buildURL`.",
            "itemtype": "method",
            "name": "deleteRecord",
            "params": [
                {
                    "name": "store",
                    "description": ""
                },
                {
                    "name": "type",
                    "description": ""
                },
                {
                    "name": "record",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "DS.RESTAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 71580,
            "description": "Builds a URL for a given type and optional ID.\nBy default, it pluralizes the type's name (for example, 'post'\nbecomes 'posts' and 'person' becomes 'people'). To override the\npluralization see [pathForType](#method_pathForType).\nIf an ID is specified, it adds the ID to the path generated\nfor the type, separated by a `/`.",
            "itemtype": "method",
            "name": "buildURL",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "id",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "record",
                    "description": ""
                }
            ],
            "return": {
                "description": "url"
            },
            "class": "DS.RESTAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 71613,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "urlPrefix",
            "params": [
                {
                    "name": "path",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "parentURL",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "DS.RESTAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 71666,
            "description": "Organize records into groups, each of which is to be passed to separate\ncalls to `findMany`.\nThis implementation groups together records that have the same base URL but\ndiffering ids. For example `/comments/1` and `/comments/2` will be grouped together\nbecause we know findMany can coalesce them together as `/comments?ids[]=1&ids[]=2`\nIt also supports urls where ids are passed as a query param, such as `/comments?id=1`\nbut not those where there is more than 1 query param such as `/comments?id=2&name=David`\nCurrently only the query param of `id` is supported. If you need to support others, please\noverride this or the `_stripIDFromURL` method.\nIt does not group records that have differing base urls, such as for example: `/posts/1/comments/2`\nand `/posts/2/comments/3`\nloaded separately by `findMany`.",
            "itemtype": "method",
            "name": "groupRecordsForFindMany",
            "params": [
                {
                    "name": "store",
                    "description": ""
                },
                {
                    "name": "records",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "groupsArray"
            },
            "class": "DS.RESTAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 71686,
            "description": "Description",
            "itemtype": "method",
            "name": "defaultValue",
            "return": {
                "description": "ArrayExpression"
            },
            "class": "DS.RESTAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 71699,
            "description": "Description",
            "itemtype": "method",
            "name": "splitGroupToFitInUrl",
            "params": [
                {
                    "name": "group",
                    "description": ""
                },
                {
                    "name": "maxUrlLength",
                    "description": ""
                }
            ],
            "return": {
                "description": "splitGroups"
            },
            "class": "DS.RESTAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 71741,
            "description": "Determines the pathname for a given type.\nBy default, it pluralizes the type's name (for example,\n'post' becomes 'posts' and 'person' becomes 'people').\n### Pathname customization\nFor example if you have an object LineItem with an\nendpoint of \"/line_items/\".\n```js\nApp.ApplicationAdapter = DS.RESTAdapter.extend({\npathForType: function(type) {\nvar decamelized = Ember.String.decamelize(type);\nreturn Ember.String.pluralize(decamelized);\n}\n});\n```",
            "itemtype": "method",
            "name": "pathForType",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "DS.RESTAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 71765,
            "description": "Takes an ajax response, and returns a relevant error.\nReturning a `DS.InvalidError` from this method will cause the\nrecord to transition into the `invalid` state and make the\n`errors` object available on the record.\n```javascript\nApp.ApplicationAdapter = DS.RESTAdapter.extend({\najaxError: function(jqXHR) {\nvar error = this._super(jqXHR);\nif (jqXHR && jqXHR.status === 422) {\nvar jsonErrors = Ember.$.parseJSON(jqXHR.responseText)[\"errors\"];\nreturn new DS.InvalidError(jsonErrors);\n} else {\nreturn error;\n}\n}\n});\n```\nNote: As a correctness optimization, the default implementation of\nthe `ajaxError` method strips out the `then` method from jquery's\najax response (jqXHR). This is important because the jqXHR's\n`then` method fulfills the promise with itself resulting in a\ncircular \"thenable\" chain which may cause problems for some\npromise libraries.",
            "itemtype": "method",
            "name": "ajaxError",
            "params": [
                {
                    "name": "jqXHR",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "responseText",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "jqXHR"
            },
            "class": "DS.RESTAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 71802,
            "description": "Takes an ajax response, and returns the json payload.\nBy default this hook just returns the jsonPayload passed to it.\nYou might want to override it in two cases:\n1. Your API might return useful results in the request headers.\nIf you need to access these, you can override this hook to copy them\nfrom jqXHR to the payload object so they can be processed in you serializer.\n2. Your API might return errors as successful responses with status code\n200 and an Errors text or object. You can return a DS.InvalidError from\nthis hook and it will automatically reject the promise and put your record\ninto the invald state.",
            "itemtype": "method",
            "name": "ajaxSuccess",
            "params": [
                {
                    "name": "jqXHR",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "jsonPayload",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "jsonPayload"
            },
            "class": "DS.RESTAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 71822,
            "description": "Takes a URL, an HTTP method and a hash of data, and makes an\nHTTP request.\nWhen the server responds with a payload, Ember Data will call into `extractSingle`\nor `extractArray` (depending on whether the original query was for one record or\nmany records).\nBy default, `ajax` method has the following behavior:\nIt sets the response `dataType` to `\"json\"`\nIf the HTTP method is not `\"GET\"`, it sets the `Content-Type` to be\n`application/json; charset=utf-8`\nIf the HTTP method is not `\"GET\"`, it stringifies the data passed in. The\ndata is the serialized record in the case of a save.\nRegisters success and failure handlers.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "ajax",
            "params": [
                {
                    "name": "url",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "type",
                    "description": "The request type GET, POST, PUT, DELETE etc.",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": ""
                }
            ],
            "return": {
                "description": "NewExpression"
            },
            "class": "DS.RESTAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 71848,
            "description": "Description",
            "itemtype": "method",
            "name": "success",
            "params": [
                {
                    "name": "json",
                    "description": ""
                },
                {
                    "name": "textStatus",
                    "description": ""
                },
                {
                    "name": "jqXHR",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.RESTAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 71865,
            "description": "Description",
            "itemtype": "method",
            "name": "error",
            "params": [
                {
                    "name": "jqXHR",
                    "description": ""
                },
                {
                    "name": "textStatus",
                    "description": ""
                },
                {
                    "name": "errorThrown",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.RESTAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 71881,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "ajaxOptions",
            "params": [
                {
                    "name": "url",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "type",
                    "description": "The request type GET, POST, PUT, DELETE etc.",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": ""
                }
            ],
            "return": {
                "description": "hash"
            },
            "class": "DS.RESTAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 71903,
            "description": "Description",
            "itemtype": "method",
            "name": "beforeSend",
            "params": [
                {
                    "name": "xhr",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.RESTAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 71921,
            "description": "Description",
            "itemtype": "method",
            "name": "endsWith",
            "params": [
                {
                    "name": "string",
                    "description": ""
                },
                {
                    "name": "suffix",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.RESTAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 71952,
            "itemtype": "property",
            "name": "VERSION",
            "type": "String",
            "default": "'1.0.0-beta.10'",
            "static": 1,
            "class": "DS",
            "module": "ember-data"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 72076,
            "description": "Description",
            "itemtype": "method",
            "name": "parse",
            "params": [
                {
                    "name": "date",
                    "description": ""
                }
            ],
            "return": {
                "description": "timestamp"
            },
            "class": "Ember.Date",
            "module": "ember-data",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 72126,
            "description": "Configures a container with injections on Ember applications\nfor the Ember-Data store. Accepts an optional namespace argument.",
            "params": [
                {
                    "name": "container",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Date",
            "module": "ember-data",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 72146,
            "description": "Configures a container for use with an Ember-Data\nstore. Accepts an optional namespace argument.",
            "params": [
                {
                    "name": "container",
                    "description": ""
                },
                {
                    "name": "application",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Date",
            "module": "ember-data",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 72182,
            "description": "Configures a container with injections on Ember applications\nfor the Ember-Data store. Accepts an optional namespace argument.",
            "params": [
                {
                    "name": "container",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Date",
            "module": "ember-data",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 72204,
            "description": "Configures a container for use with Ember-Data\ntransforms.",
            "params": [
                {
                    "name": "container",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Date",
            "module": "ember-data",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 72321,
            "description": "Normalize the record and recursively normalize/extract all the embedded records\nwhile pushing them into the store as they are encountered\nA payload with an attr configured for embedded records needs to be extracted:\n```js\n{\n\"post\": {\n\"id\": \"1\"\n\"title\": \"Rails is omakase\",\n\"comments\": [{\n\"id\": \"1\",\n\"body\": \"Rails is unagi\"\n}, {\n\"id\": \"2\",\n\"body\": \"Omakase O_o\"\n}]\n}\n}\n```",
            "itemtype": "method",
            "name": "normalize",
            "params": [
                {
                    "name": "type",
                    "description": ""
                },
                {
                    "name": "hash",
                    "description": "to be normalized",
                    "type": "Object"
                },
                {
                    "name": "prop",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "DS.EmbeddedRecordsMixin",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 72351,
            "description": "Description",
            "itemtype": "method",
            "name": "keyForRelationship",
            "params": [
                {
                    "name": "key",
                    "description": ""
                },
                {
                    "name": "type",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.EmbeddedRecordsMixin",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 72366,
            "description": "Serialize `belongsTo` relationship when it is configured as an embedded object.\nThis example of an author model belongs to a post model:\n```js\nPost = DS.Model.extend({\ntitle:    DS.attr('string'),\nbody:     DS.attr('string'),\nauthor:   DS.belongsTo('author')\n});\nAuthor = DS.Model.extend({\nname:     DS.attr('string'),\npost:     DS.belongsTo('post')\n});\n```\nUse a custom (type) serializer for the post model to configure embedded author\n```js\nApp.PostSerializer = DS.RESTSerializer.extend(DS.EmbeddedRecordsMixin, {\nattrs: {\nauthor: {embedded: 'always'}\n}\n})\n```\nA payload with an attribute configured for embedded records can serialize\nthe records together under the root attribute's payload:\n```js\n{\n\"post\": {\n\"id\": \"1\"\n\"title\": \"Rails is omakase\",\n\"author\": {\n\"id\": \"2\"\n\"name\": \"dhh\"\n}\n}\n}\n```",
            "itemtype": "method",
            "name": "serializeBelongsTo",
            "params": [
                {
                    "name": "record",
                    "description": ""
                },
                {
                    "name": "json",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "relationship",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.EmbeddedRecordsMixin",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 72436,
            "description": "Serialize `hasMany` relationship when it is configured as embedded objects.\nThis example of a post model has many comments:\n```js\nPost = DS.Model.extend({\ntitle:    DS.attr('string'),\nbody:     DS.attr('string'),\ncomments: DS.hasMany('comment')\n});\nComment = DS.Model.extend({\nbody:     DS.attr('string'),\npost:     DS.belongsTo('post')\n});\n```\nUse a custom (type) serializer for the post model to configure embedded comments\n```js\nApp.PostSerializer = DS.RESTSerializer.extend(DS.EmbeddedRecordsMixin, {\nattrs: {\ncomments: {embedded: 'always'}\n}\n})\n```\nA payload with an attribute configured for embedded records can serialize\nthe records together under the root attribute's payload:\n```js\n{\n\"post\": {\n\"id\": \"1\"\n\"title\": \"Rails is omakase\",\n\"body\": \"I want this for my ORM, I want that for my template language...\"\n\"comments\": [{\n\"id\": \"1\",\n\"body\": \"Rails is unagi\"\n}, {\n\"id\": \"2\",\n\"body\": \"Omakase O_o\"\n}]\n}\n}\n```\nThe attrs options object can use more specific instruction for extracting and\nserializing. When serializing, an option to embed `ids` or `records` can be set.\nWhen extracting the only option is `records`.\nSo `{embedded: 'always'}` is shorthand for:\n`{serialize: 'records', deserialize: 'records'}`\nTo embed the `ids` for a related object (using a hasMany relationship):\n```js\nApp.PostSerializer = DS.RESTSerializer.extend(DS.EmbeddedRecordsMixin, {\nattrs: {\ncomments: {serialize: 'ids', deserialize: 'records'}\n}\n})\n```\n```js\n{\n\"post\": {\n\"id\": \"1\"\n\"title\": \"Rails is omakase\",\n\"body\": \"I want this for my ORM, I want that for my template language...\"\n\"comments\": [\"1\", \"2\"]\n}\n}\n```",
            "itemtype": "method",
            "name": "serializeHasMany",
            "params": [
                {
                    "name": "record",
                    "description": ""
                },
                {
                    "name": "json",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "relationship",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.EmbeddedRecordsMixin",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 72527,
            "description": "When serializing an embedded record, modify the property (in the json payload)\nthat refers to the parent record (foreign key for relationship).\nSerializing a `belongsTo` relationship removes the property that refers to the\nparent record\nSerializing a `hasMany` relationship does not remove the property that refers to\nthe parent record.",
            "itemtype": "method",
            "name": "removeEmbeddedForeignKey",
            "params": [
                {
                    "name": "record",
                    "description": ""
                },
                {
                    "name": "embeddedRecord",
                    "description": ""
                },
                {
                    "name": "relationship",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "json",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.EmbeddedRecordsMixin",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 72558,
            "description": "Description",
            "itemtype": "method",
            "name": "hasEmbeddedAlwaysOption",
            "params": [
                {
                    "name": "attr",
                    "description": ""
                }
            ],
            "return": {
                "description": "LogicalExpression"
            },
            "class": "DS.EmbeddedRecordsMixin",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 72570,
            "description": "Description",
            "itemtype": "method",
            "name": "hasSerializeRecordsOption",
            "params": [
                {
                    "name": "attr",
                    "description": ""
                }
            ],
            "return": {
                "description": "LogicalExpression"
            },
            "class": "DS.EmbeddedRecordsMixin",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 72583,
            "description": "Description",
            "itemtype": "method",
            "name": "hasSerializeIdsOption",
            "params": [
                {
                    "name": "attr",
                    "description": ""
                }
            ],
            "return": {
                "description": "LogicalExpression"
            },
            "class": "DS.EmbeddedRecordsMixin",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 72595,
            "description": "Description",
            "itemtype": "method",
            "name": "noSerializeOptionSpecified",
            "params": [
                {
                    "name": "attr",
                    "description": ""
                }
            ],
            "return": {
                "description": "UnaryExpression"
            },
            "class": "DS.EmbeddedRecordsMixin",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 72609,
            "description": "Description",
            "itemtype": "method",
            "name": "hasDeserializeRecordsOption",
            "params": [
                {
                    "name": "attr",
                    "description": ""
                }
            ],
            "return": {
                "description": "LogicalExpression"
            },
            "class": "DS.EmbeddedRecordsMixin",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 72621,
            "description": "Description",
            "itemtype": "method",
            "name": "attrsOption",
            "params": [
                {
                    "name": "attr",
                    "description": ""
                }
            ],
            "return": {
                "description": "LogicalExpression"
            },
            "class": "DS.EmbeddedRecordsMixin",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 72635,
            "description": "Description",
            "itemtype": "method",
            "name": "extractEmbeddedRecords",
            "params": [
                {
                    "name": "serializer",
                    "description": ""
                },
                {
                    "name": "store",
                    "description": ""
                },
                {
                    "name": "type",
                    "description": ""
                },
                {
                    "name": "partial",
                    "description": ""
                }
            ],
            "return": {
                "description": "partial"
            },
            "class": "DS.EmbeddedRecordsMixin",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 72667,
            "description": "Description",
            "itemtype": "method",
            "name": "extractEmbeddedHasMany",
            "params": [
                {
                    "name": "store",
                    "description": ""
                },
                {
                    "name": "key",
                    "description": ""
                },
                {
                    "name": "embeddedType",
                    "description": ""
                },
                {
                    "name": "hash",
                    "description": ""
                }
            ],
            "return": {
                "description": "hash"
            },
            "class": "DS.EmbeddedRecordsMixin",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 72694,
            "description": "Description",
            "itemtype": "method",
            "name": "extractEmbeddedHasManyPolymorphic",
            "params": [
                {
                    "name": "store",
                    "description": ""
                },
                {
                    "name": "key",
                    "description": ""
                },
                {
                    "name": "hash",
                    "description": ""
                }
            ],
            "return": {
                "description": "hash"
            },
            "class": "DS.EmbeddedRecordsMixin",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 72724,
            "description": "Description",
            "itemtype": "method",
            "name": "extractEmbeddedBelongsTo",
            "params": [
                {
                    "name": "store",
                    "description": ""
                },
                {
                    "name": "key",
                    "description": ""
                },
                {
                    "name": "embeddedType",
                    "description": ""
                },
                {
                    "name": "hash",
                    "description": ""
                }
            ],
            "return": {
                "description": "hash"
            },
            "class": "DS.EmbeddedRecordsMixin",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 72774,
            "description": "The primaryKey is used when serializing and deserializing\ndata. Ember Data always uses the `id` property to store the id of\nthe record. The external source may not always follow this\nconvention. In these cases it is useful to override the\nprimaryKey property to match the primaryKey of your external\nstore.\n\nExample\n\n```javascript\nApp.ApplicationSerializer = DS.JSONSerializer.extend({\n  primaryKey: '_id'\n});\n```",
            "itemtype": "property",
            "name": "primaryKey",
            "type": "{String}",
            "default": "'id'",
            "class": "DS.JSONSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 72796,
            "description": "The `attrs` object can be used to declare a simple mapping between\nproperty names on `DS.Model` records and payload keys in the\nserialized JSON object representing the record. An object with the\nproperty `key` can also be used to designate the attribute's key on\nthe response payload.\n\nExample\n\n```javascript\nApp.Person = DS.Model.extend({\n  firstName: DS.attr('string'),\n  lastName: DS.attr('string'),\n  occupation: DS.attr('string'),\n  admin: DS.attr('boolean')\n});\n\nApp.PersonSerializer = DS.JSONSerializer.extend({\n  attrs: {\n    admin: 'is_admin',\n    occupation: {key: 'career'}\n  }\n});\n```\n\nYou can also remove attributes by setting the `serialize` key to\nfalse in your mapping object.\n\nExample\n\n```javascript\nApp.PersonSerializer = DS.JSONSerializer.extend({\n  attrs: {\n    admin: {serialize: false},\n    occupation: {key: 'career'}\n  }\n});\n```\n\nWhen serialized:\n\n```javascript\n{\n  \"career\": \"magician\"\n}\n```\n\nNote that the `admin` is now not included in the payload.",
            "itemtype": "property",
            "name": "attrs",
            "type": "{Object}",
            "class": "DS.JSONSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 72849,
            "description": "Given a subclass of `DS.Model` and a JSON object this method will\niterate through each attribute of the `DS.Model` and invoke the\n`DS.Transform#deserialize` method on the matching property of the\nJSON object.  This method is typically called after the\nserializer's `normalize` method.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "applyTransforms",
            "params": [
                {
                    "name": "type",
                    "description": ""
                },
                {
                    "name": "data",
                    "description": "The data to transform",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "data"
            },
            "class": "DS.JSONSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 72872,
            "description": "Normalizes a part of the JSON payload returned by\nthe server. You should override this method, munge the hash\nand call super if you have generic normalization to do.\nIt takes the type of the record that is being normalized\n(as a DS.Model class), the property where the hash was\noriginally found, and the hash to normalize.\nYou can use this method, for example, to normalize underscored keys to camelized\nor other general-purpose normalizations.\nExample\n```javascript\nApp.ApplicationSerializer = DS.JSONSerializer.extend({\nnormalize: function(type, hash) {\nvar fields = Ember.get(type, 'fields');\nfields.forEach(function(field) {\nvar payloadField = Ember.String.underscore(field);\nif (field === payloadField) { return; }\nhash[field] = hash[payloadField];\ndelete hash[payloadField];\n});\nreturn this._super.apply(this, arguments);\n}\n});\n```",
            "itemtype": "method",
            "name": "normalize",
            "params": [
                {
                    "name": "type",
                    "description": ""
                },
                {
                    "name": "hash",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "hash"
            },
            "class": "DS.JSONSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 72913,
            "description": "You can use this method to normalize all payloads, regardless of whether they\nrepresent single records or an array.\nFor example, you might want to remove some extraneous data from the payload:\n```js\nApp.ApplicationSerializer = DS.JSONSerializer.extend({\nnormalizePayload: function(payload) {\ndelete payload.version;\ndelete payload.status;\nreturn payload;\n}\n});\n```",
            "itemtype": "method",
            "name": "normalizePayload",
            "params": [
                {
                    "name": "payload",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "payload"
            },
            "class": "DS.JSONSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 72934,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "normalizeAttributes",
            "params": [
                {
                    "name": "type",
                    "description": ""
                },
                {
                    "name": "hash",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.JSONSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 72956,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "normalizeRelationships",
            "params": [
                {
                    "name": "type",
                    "description": ""
                },
                {
                    "name": "hash",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.JSONSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 72978,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "normalizeUsingDeclaredMapping",
            "params": [
                {
                    "name": "type",
                    "description": ""
                },
                {
                    "name": "hash",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.JSONSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 73001,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "normalizeId",
            "params": [
                {
                    "name": "hash",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.JSONSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 73016,
            "description": "Looks up the property key that was set by the custom `attr` mapping\npassed to the serializer.",
            "itemtype": "method",
            "name": "_getMappedKey",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "key",
                "type": "String"
            },
            "class": "DS.JSONSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 73043,
            "description": "Check attrs.key.serialize property to inform if the `key`\ncan be serialized",
            "itemtype": "method",
            "name": "_canSerialize",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "true if the key can be serialized",
                "type": "Boolean"
            },
            "class": "DS.JSONSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 73059,
            "description": "Called when a record is saved in order to convert the\nrecord into JSON.\nBy default, it creates a JSON object with a key for\neach attribute and belongsTo relationship.\nFor example, consider this model:\n```javascript\nApp.Comment = DS.Model.extend({\ntitle: DS.attr(),\nbody: DS.attr(),\nauthor: DS.belongsTo('user')\n});\n```\nThe default serialization would create a JSON object like:\n```javascript\n{\n\"title\": \"Rails is unagi\",\n\"body\": \"Rails? Omakase? O_O\",\n\"author\": 12\n}\n```\nBy default, attributes are passed through as-is, unless\nyou specified an attribute type (`DS.attr('date')`). If\nyou specify a transform, the JavaScript value will be\nserialized when inserted into the JSON hash.\nBy default, belongs-to relationships are converted into\nIDs when inserted into the JSON hash.\n## IDs\n`serialize` takes an options hash with a single option:\n`includeId`. If this option is `true`, `serialize` will,\nby default include the ID in the JSON object it builds.\nThe adapter passes in `includeId: true` when serializing\na record for `createRecord`, but not for `updateRecord`.\n## Customization\nYour server may expect a different JSON format than the\nbuilt-in serialization format.\nIn that case, you can implement `serialize` yourself and\nreturn a JSON hash of your choosing.\n```javascript\nApp.PostSerializer = DS.JSONSerializer.extend({\nserialize: function(post, options) {\nvar json = {\nPOST_TTL: post.get('title'),\nPOST_BDY: post.get('body'),\nPOST_CMS: post.get('comments').mapBy('id')\n}\nif (options.includeId) {\njson.POST_ID_ = post.get('id');\n}\nreturn json;\n}\n});\n```\n## Customizing an App-Wide Serializer\nIf you want to define a serializer for your entire\napplication, you'll probably want to use `eachAttribute`\nand `eachRelationship` on the record.\n```javascript\nApp.ApplicationSerializer = DS.JSONSerializer.extend({\nserialize: function(record, options) {\nvar json = {};\nrecord.eachAttribute(function(name) {\njson[serverAttributeName(name)] = record.get(name);\n})\nrecord.eachRelationship(function(name, relationship) {\nif (relationship.kind === 'hasMany') {\njson[serverHasManyName(name)] = record.get(name).mapBy('id');\n}\n});\nif (options.includeId) {\njson.ID_ = record.get('id');\n}\nreturn json;\n}\n});\nfunction serverAttributeName(attribute) {\nreturn attribute.underscore().toUpperCase();\n}\nfunction serverHasManyName(name) {\nreturn serverAttributeName(name.singularize()) + \"_IDS\";\n}\n```\nThis serializer will generate JSON that looks like this:\n```javascript\n{\n\"TITLE\": \"Rails is omakase\",\n\"BODY\": \"Yep. Omakase.\",\n\"COMMENT_IDS\": [ 1, 2, 3 ]\n}\n```\n## Tweaking the Default JSON\nIf you just want to do some small tweaks on the default JSON,\nyou can call super first and make the tweaks on the returned\nJSON.\n```javascript\nApp.PostSerializer = DS.JSONSerializer.extend({\nserialize: function(record, options) {\nvar json = this._super.apply(this, arguments);\njson.subject = json.title;\ndelete json.title;\nreturn json;\n}\n});\n```",
            "itemtype": "method",
            "name": "serialize",
            "params": [
                {
                    "name": "record",
                    "description": ""
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "json"
            },
            "class": "DS.JSONSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 73194,
            "description": "You can use this method to customize how a serialized record is added to the complete\nJSON hash to be sent to the server. By default the JSON Serializer does not namespace\nthe payload and just sends the raw serialized JSON object.\nIf your server expects namespaced keys, you should consider using the RESTSerializer.\nOtherwise you can override this method to customize how the record is added to the hash.\nFor example, your server may expect underscored root objects.\n```js\nApp.ApplicationSerializer = DS.RESTSerializer.extend({\nserializeIntoHash: function(data, type, record, options) {\nvar root = Ember.String.decamelize(type.typeKey);\ndata[root] = this.serialize(record, options);\n}\n});\n```",
            "itemtype": "method",
            "name": "serializeIntoHash",
            "params": [
                {
                    "name": "hash",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "type",
                    "description": ""
                },
                {
                    "name": "record",
                    "description": ""
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.JSONSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 73220,
            "description": "`serializeAttribute` can be used to customize how `DS.attr`\nproperties are serialized\nFor example if you wanted to ensure all your attributes were always\nserialized as properties on an `attributes` object you could\nwrite:\n```javascript\nApp.ApplicationSerializer = DS.JSONSerializer.extend({\nserializeAttribute: function(record, json, key, attributes) {\njson.attributes = json.attributes || {};\nthis._super(record, json.attributes, key, attributes);\n}\n});\n```",
            "itemtype": "method",
            "name": "serializeAttribute",
            "params": [
                {
                    "name": "record",
                    "description": ""
                },
                {
                    "name": "json",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "attribute",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.JSONSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 73263,
            "description": "`serializeBelongsTo` can be used to customize how `DS.belongsTo`\nproperties are serialized.\nExample\n```javascript\nApp.PostSerializer = DS.JSONSerializer.extend({\nserializeBelongsTo: function(record, json, relationship) {\nvar key = relationship.key;\nvar belongsTo = get(record, key);\nkey = this.keyForRelationship ? this.keyForRelationship(key, \"belongsTo\") : key;\njson[key] = Ember.isNone(belongsTo) ? belongsTo : belongsTo.toJSON();\n}\n});\n```",
            "itemtype": "method",
            "name": "serializeBelongsTo",
            "params": [
                {
                    "name": "record",
                    "description": ""
                },
                {
                    "name": "json",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "relationship",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.JSONSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 73308,
            "description": "`serializeHasMany` can be used to customize how `DS.hasMany`\nproperties are serialized.\nExample\n```javascript\nApp.PostSerializer = DS.JSONSerializer.extend({\nserializeHasMany: function(record, json, relationship) {\nvar key = relationship.key;\nif (key === 'comments') {\nreturn;\n} else {\nthis._super.apply(this, arguments);\n}\n}\n});\n```",
            "itemtype": "method",
            "name": "serializeHasMany",
            "params": [
                {
                    "name": "record",
                    "description": ""
                },
                {
                    "name": "json",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "relationship",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.JSONSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 73352,
            "description": "You can use this method to customize how polymorphic objects are\nserialized. Objects are considered to be polymorphic if\n`{polymorphic: true}` is pass as the second argument to the\n`DS.belongsTo` function.\n\nExample\n\n```javascript\nApp.CommentSerializer = DS.JSONSerializer.extend({\n  serializePolymorphicType: function(record, json, relationship) {\n    var key = relationship.key,\n        belongsTo = get(record, key);\n    key = this.keyForAttribute ? this.keyForAttribute(key) : key;\n\n    if (Ember.isNone(belongsTo)) {\n      json[key + \"_type\"] = null;\n    } else {\n      json[key + \"_type\"] = belongsTo.constructor.typeKey;\n    }\n  }\n});\n       ```",
            "itemtype": "method",
            "name": "serializePolymorphicType",
            "params": [
                {
                    "name": "record",
                    "description": "",
                    "type": "DS.Model"
                },
                {
                    "name": "json",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "relationship",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "DS.JSONSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 73385,
            "description": "The `extract` method is used to deserialize payload data from the\nserver. By default the `JSONSerializer` does not push the records\ninto the store. However records that subclass `JSONSerializer`\nsuch as the `RESTSerializer` may push records into the store as\npart of the extract call.\nThis method delegates to a more specific extract method based on\nthe `requestType`.\nExample\n```javascript\nvar get = Ember.get;\nsocket.on('message', function(message) {\nvar modelName = message.model;\nvar data = message.data;\nvar type = store.modelFor(modelName);\nvar serializer = store.serializerFor(type.typeKey);\nvar record = serializer.extract(store, type, data, get(data, 'id'), 'single');\nstore.push(modelName, record);\n});\n```",
            "itemtype": "method",
            "name": "extract",
            "params": [
                {
                    "name": "store",
                    "description": ""
                },
                {
                    "name": "type",
                    "description": ""
                },
                {
                    "name": "payload",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "id",
                    "description": ""
                },
                {
                    "name": "requestType",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "DS.JSONSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 73420,
            "description": "`extractFindAll` is a hook into the extract method used when a\ncall is made to `DS.Store#findAll`. By default this method is an\nalias for [extractArray](#method_extractArray).",
            "itemtype": "method",
            "name": "extractFindAll",
            "params": [
                {
                    "name": "store",
                    "description": ""
                },
                {
                    "name": "type",
                    "description": ""
                },
                {
                    "name": "payload",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "id",
                    "description": ""
                },
                {
                    "name": "requestType",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "DS.JSONSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 73435,
            "description": "`extractFindQuery` is a hook into the extract method used when a\ncall is made to `DS.Store#findQuery`. By default this method is an\nalias for [extractArray](#method_extractArray).",
            "itemtype": "method",
            "name": "extractFindQuery",
            "params": [
                {
                    "name": "store",
                    "description": ""
                },
                {
                    "name": "type",
                    "description": ""
                },
                {
                    "name": "payload",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "id",
                    "description": ""
                },
                {
                    "name": "requestType",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "DS.JSONSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 73450,
            "description": "`extractFindMany` is a hook into the extract method used when a\ncall is made to `DS.Store#findMany`. By default this method is\nalias for [extractArray](#method_extractArray).",
            "itemtype": "method",
            "name": "extractFindMany",
            "params": [
                {
                    "name": "store",
                    "description": ""
                },
                {
                    "name": "type",
                    "description": ""
                },
                {
                    "name": "payload",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "id",
                    "description": ""
                },
                {
                    "name": "requestType",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "DS.JSONSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 73465,
            "description": "`extractFindHasMany` is a hook into the extract method used when a\ncall is made to `DS.Store#findHasMany`. By default this method is\nalias for [extractArray](#method_extractArray).",
            "itemtype": "method",
            "name": "extractFindHasMany",
            "params": [
                {
                    "name": "store",
                    "description": ""
                },
                {
                    "name": "type",
                    "description": ""
                },
                {
                    "name": "payload",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "id",
                    "description": ""
                },
                {
                    "name": "requestType",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "DS.JSONSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 73481,
            "description": "`extractCreateRecord` is a hook into the extract method used when a\ncall is made to `DS.Store#createRecord`. By default this method is\nalias for [extractSave](#method_extractSave).",
            "itemtype": "method",
            "name": "extractCreateRecord",
            "params": [
                {
                    "name": "store",
                    "description": ""
                },
                {
                    "name": "type",
                    "description": ""
                },
                {
                    "name": "payload",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "id",
                    "description": ""
                },
                {
                    "name": "requestType",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "DS.JSONSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 73496,
            "description": "`extractUpdateRecord` is a hook into the extract method used when\na call is made to `DS.Store#update`. By default this method is alias\nfor [extractSave](#method_extractSave).",
            "itemtype": "method",
            "name": "extractUpdateRecord",
            "params": [
                {
                    "name": "store",
                    "description": ""
                },
                {
                    "name": "type",
                    "description": ""
                },
                {
                    "name": "payload",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "id",
                    "description": ""
                },
                {
                    "name": "requestType",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "DS.JSONSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 73511,
            "description": "`extractDeleteRecord` is a hook into the extract method used when\na call is made to `DS.Store#deleteRecord`. By default this method is\nalias for [extractSave](#method_extractSave).",
            "itemtype": "method",
            "name": "extractDeleteRecord",
            "params": [
                {
                    "name": "store",
                    "description": ""
                },
                {
                    "name": "type",
                    "description": ""
                },
                {
                    "name": "payload",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "id",
                    "description": ""
                },
                {
                    "name": "requestType",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "DS.JSONSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 73527,
            "description": "`extractFind` is a hook into the extract method used when\na call is made to `DS.Store#find`. By default this method is\nalias for [extractSingle](#method_extractSingle).",
            "itemtype": "method",
            "name": "extractFind",
            "params": [
                {
                    "name": "store",
                    "description": ""
                },
                {
                    "name": "type",
                    "description": ""
                },
                {
                    "name": "payload",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "id",
                    "description": ""
                },
                {
                    "name": "requestType",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "DS.JSONSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 73542,
            "description": "`extractFindBelongsTo` is a hook into the extract method used when\na call is made to `DS.Store#findBelongsTo`. By default this method is\nalias for [extractSingle](#method_extractSingle).",
            "itemtype": "method",
            "name": "extractFindBelongsTo",
            "params": [
                {
                    "name": "store",
                    "description": ""
                },
                {
                    "name": "type",
                    "description": ""
                },
                {
                    "name": "payload",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "id",
                    "description": ""
                },
                {
                    "name": "requestType",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "DS.JSONSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 73557,
            "description": "`extractSave` is a hook into the extract method used when a call\nis made to `DS.Model#save`. By default this method is alias\nfor [extractSingle](#method_extractSingle).",
            "itemtype": "method",
            "name": "extractSave",
            "params": [
                {
                    "name": "store",
                    "description": ""
                },
                {
                    "name": "type",
                    "description": ""
                },
                {
                    "name": "payload",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "id",
                    "description": ""
                },
                {
                    "name": "requestType",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "DS.JSONSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 73573,
            "description": "`extractSingle` is used to deserialize a single record returned\nfrom the adapter.\nExample\n```javascript\nApp.PostSerializer = DS.JSONSerializer.extend({\nextractSingle: function(store, type, payload) {\npayload.comments = payload._embedded.comment;\ndelete payload._embedded;\nreturn this._super(store, type, payload);\n},\n});\n```",
            "itemtype": "method",
            "name": "extractSingle",
            "params": [
                {
                    "name": "store",
                    "description": ""
                },
                {
                    "name": "type",
                    "description": ""
                },
                {
                    "name": "payload",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "id",
                    "description": ""
                },
                {
                    "name": "requestType",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "DS.JSONSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 73599,
            "description": "`extractArray` is used to deserialize an array of records\nreturned from the adapter.\nExample\n```javascript\nApp.PostSerializer = DS.JSONSerializer.extend({\nextractArray: function(store, type, payload) {\nreturn payload.map(function(json) {\nreturn this.extractSingle(store, type, json);\n}, this);\n}\n});\n```",
            "itemtype": "method",
            "name": "extractArray",
            "params": [
                {
                    "name": "store",
                    "description": ""
                },
                {
                    "name": "type",
                    "description": ""
                },
                {
                    "name": "arrayPayload",
                    "description": ""
                },
                {
                    "name": "id",
                    "description": ""
                },
                {
                    "name": "requestType",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "DS.JSONSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 73629,
            "description": "`extractMeta` is used to deserialize any meta information in the\nadapter payload. By default Ember Data expects meta information to\nbe located on the `meta` property of the payload object.\nExample\n```javascript\nApp.PostSerializer = DS.JSONSerializer.extend({\nextractMeta: function(store, type, payload) {\nif (payload && payload._pagination) {\nstore.metaForType(type, payload._pagination);\ndelete payload._pagination;\n}\n}\n});\n```",
            "itemtype": "method",
            "name": "extractMeta",
            "params": [
                {
                    "name": "store",
                    "description": ""
                },
                {
                    "name": "type",
                    "description": ""
                },
                {
                    "name": "payload",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.JSONSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 73657,
            "description": "`keyForAttribute` can be used to define rules for how to convert an\nattribute name in your model to a key in your JSON.\nExample\n```javascript\nApp.ApplicationSerializer = DS.RESTSerializer.extend({\nkeyForAttribute: function(attr) {\nreturn Ember.String.underscore(attr).toUpperCase();\n}\n});\n```",
            "itemtype": "method",
            "name": "keyForAttribute",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "key"
            },
            "class": "DS.JSONSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 73676,
            "description": "`keyForRelationship` can be used to define a custom key when\nserializing relationship properties. By default `JSONSerializer`\ndoes not provide an implementation of this method.\nExample\n```javascript\nApp.PostSerializer = DS.JSONSerializer.extend({\nkeyForRelationship: function(key, relationship) {\nreturn 'rel_' + Ember.String.underscore(key);\n}\n});\n```",
            "itemtype": "method",
            "name": "keyForRelationship",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "type",
                    "description": ""
                }
            ],
            "return": {
                "description": "key"
            },
            "class": "DS.JSONSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 73699,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "transformFor",
            "params": [
                {
                    "name": "attributeType",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "skipAssertion",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "transform"
            },
            "class": "DS.JSONSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 73729,
            "description": "Description",
            "itemtype": "method",
            "name": "coerceId",
            "params": [
                {
                    "name": "id",
                    "description": ""
                }
            ],
            "return": {
                "description": "ConditionalExpression"
            },
            "class": "DS.JSONSerializer",
            "module": "ember-data"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 73780,
            "description": "If you want to do normalizations specific to some part of the payload, you\ncan specify those under `normalizeHash`.\n\nFor example, given the following json where the the `IDs` under\n`\"comments\"` are provided as `_id` instead of `id`.\n\n```javascript\n{\n  \"post\": {\n    \"id\": 1,\n    \"title\": \"Rails is omakase\",\n    \"comments\": [ 1, 2 ]\n  },\n  \"comments\": [{\n    \"_id\": 1,\n    \"body\": \"FIRST\"\n  }, {\n    \"_id\": 2,\n    \"body\": \"Rails is unagi\"\n  }]\n}\n```\n\nYou use `normalizeHash` to normalize just the comments:\n\n```javascript\nApp.PostSerializer = DS.RESTSerializer.extend({\n  normalizeHash: {\n    comments: function(hash) {\n      hash.id = hash._id;\n      delete hash._id;\n      return hash;\n    }\n  }\n});\n```\n\nThe key under `normalizeHash` is usually just the original key\nthat was in the original payload. However, key names will be\nimpacted by any modifications done in the `normalizePayload`\nmethod. The `DS.RESTSerializer`'s default implementation makes no\nchanges to the payload keys.",
            "itemtype": "property",
            "name": "normalizeHash",
            "type": "{Object}",
            "default": "undefined",
            "class": "DS.RESTSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 73829,
            "description": "Normalizes a part of the JSON payload returned by\nthe server. You should override this method, munge the hash\nand call super if you have generic normalization to do.\nIt takes the type of the record that is being normalized\n(as a DS.Model class), the property where the hash was\noriginally found, and the hash to normalize.\nFor example, if you have a payload that looks like this:\n```js\n{\n\"post\": {\n\"id\": 1,\n\"title\": \"Rails is omakase\",\n\"comments\": [ 1, 2 ]\n},\n\"comments\": [{\n\"id\": 1,\n\"body\": \"FIRST\"\n}, {\n\"id\": 2,\n\"body\": \"Rails is unagi\"\n}]\n}\n```\nThe `normalize` method will be called three times:\nWith `App.Post`, `\"posts\"` and `{ id: 1, title: \"Rails is omakase\", ... }`\nWith `App.Comment`, `\"comments\"` and `{ id: 1, body: \"FIRST\" }`\nWith `App.Comment`, `\"comments\"` and `{ id: 2, body: \"Rails is unagi\" }`\nYou can use this method, for example, to normalize underscored keys to camelized\nor other general-purpose normalizations.\nIf you want to do normalizations specific to some part of the payload, you\ncan specify those under `normalizeHash`.\nFor example, if the `IDs` under `\"comments\"` are provided as `_id` instead of\n`id`, you can specify how to normalize just the comments:\n```js\nApp.PostSerializer = DS.RESTSerializer.extend({\nnormalizeHash: {\ncomments: function(hash) {\nhash.id = hash._id;\ndelete hash._id;\nreturn hash;\n}\n}\n});\n```\nThe key under `normalizeHash` is just the original key that was in the original\npayload.",
            "itemtype": "method",
            "name": "normalize",
            "params": [
                {
                    "name": "type",
                    "description": ""
                },
                {
                    "name": "hash",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "prop",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "hash"
            },
            "class": "DS.RESTSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 73898,
            "description": "Called when the server has returned a payload representing\na single record, such as in response to a `find` or `save`.\nIt is your opportunity to clean up the server's response into the normalized\nform expected by Ember Data.\nIf you want, you can just restructure the top-level of your payload, and\ndo more fine-grained normalization in the `normalize` method.\nFor example, if you have a payload like this in response to a request for\npost 1:\n```js\n{\n\"id\": 1,\n\"title\": \"Rails is omakase\",\n\"_embedded\": {\n\"comment\": [{\n\"_id\": 1,\n\"comment_title\": \"FIRST\"\n}, {\n\"_id\": 2,\n\"comment_title\": \"Rails is unagi\"\n}]\n}\n}\n```\nYou could implement a serializer that looks like this to get your payload\ninto shape:\n```js\nApp.PostSerializer = DS.RESTSerializer.extend({\n// First, restructure the top-level so it's organized by type\nextractSingle: function(store, type, payload, id) {\nvar comments = payload._embedded.comment;\ndelete payload._embedded;\npayload = { comments: comments, post: payload };\nreturn this._super(store, type, payload, id);\n},\nnormalizeHash: {\n// Next, normalize individual comments, which (after `extract`)\n// are now located under `comments`\ncomments: function(hash) {\nhash.id = hash._id;\nhash.title = hash.comment_title;\ndelete hash._id;\ndelete hash.comment_title;\nreturn hash;\n}\n}\n})\n```\nWhen you call super from your own implementation of `extractSingle`, the\nbuilt-in implementation will find the primary record in your normalized\npayload and push the remaining records into the store.\nThe primary record is the single hash found under `post` or the first\nelement of the `posts` array.\nThe primary record has special meaning when the record is being created\nfor the first time or updated (`createRecord` or `updateRecord`). In\nparticular, it will update the properties of the record that was saved.",
            "itemtype": "method",
            "name": "extractSingle",
            "params": [
                {
                    "name": "store",
                    "description": ""
                },
                {
                    "name": "primaryType",
                    "description": ""
                },
                {
                    "name": "rawPayload",
                    "description": ""
                },
                {
                    "name": "recordId",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "primaryRecord"
            },
            "class": "DS.RESTSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 74006,
            "description": "Called when the server has returned a payload representing\nmultiple records, such as in response to a `findAll` or `findQuery`.\nIt is your opportunity to clean up the server's response into the normalized\nform expected by Ember Data.\nIf you want, you can just restructure the top-level of your payload, and\ndo more fine-grained normalization in the `normalize` method.\nFor example, if you have a payload like this in response to a request for\nall posts:\n```js\n{\n\"_embedded\": {\n\"post\": [{\n\"id\": 1,\n\"title\": \"Rails is omakase\"\n}, {\n\"id\": 2,\n\"title\": \"The Parley Letter\"\n}],\n\"comment\": [{\n\"_id\": 1,\n\"comment_title\": \"Rails is unagi\"\n\"post_id\": 1\n}, {\n\"_id\": 2,\n\"comment_title\": \"Don't tread on me\",\n\"post_id\": 2\n}]\n}\n}\n```\nYou could implement a serializer that looks like this to get your payload\ninto shape:\n```js\nApp.PostSerializer = DS.RESTSerializer.extend({\n// First, restructure the top-level so it's organized by type\n// and the comments are listed under a post's `comments` key.\nextractArray: function(store, type, payload) {\nvar posts = payload._embedded.post;\nvar comments = [];\nvar postCache = {};\nposts.forEach(function(post) {\npost.comments = [];\npostCache[post.id] = post;\n});\npayload._embedded.comment.forEach(function(comment) {\ncomments.push(comment);\npostCache[comment.post_id].comments.push(comment);\ndelete comment.post_id;\n});\npayload = { comments: comments, posts: payload };\nreturn this._super(store, type, payload);\n},\nnormalizeHash: {\n// Next, normalize individual comments, which (after `extract`)\n// are now located under `comments`\ncomments: function(hash) {\nhash.id = hash._id;\nhash.title = hash.comment_title;\ndelete hash._id;\ndelete hash.comment_title;\nreturn hash;\n}\n}\n})\n```\nWhen you call super from your own implementation of `extractArray`, the\nbuilt-in implementation will find the primary array in your normalized\npayload and push the remaining records into the store.\nThe primary array is the array found under `posts`.\nThe primary record has special meaning when responding to `findQuery`\nor `findHasMany`. In particular, the primary array will become the\nlist of records in the record array that kicked off the request.\nIf your primary array contains secondary (embedded) records of the same type,\nyou cannot place these into the primary array `posts`. Instead, place the\nsecondary items into an underscore prefixed property `_posts`, which will\npush these items into the store and will not affect the resulting query.\nto the original query.",
            "itemtype": "method",
            "name": "extractArray",
            "params": [
                {
                    "name": "store",
                    "description": ""
                },
                {
                    "name": "primaryType",
                    "description": ""
                },
                {
                    "name": "rawPayload",
                    "description": ""
                }
            ],
            "return": {
                "description": "primaryArray"
            },
            "class": "DS.RESTSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 74124,
            "description": "This method allows you to push a payload containing top-level\ncollections of records organized per type.\n```js\n{\n\"posts\": [{\n\"id\": \"1\",\n\"title\": \"Rails is omakase\",\n\"author\", \"1\",\n\"comments\": [ \"1\" ]\n}],\n\"comments\": [{\n\"id\": \"1\",\n\"body\": \"FIRST\"\n}],\n\"users\": [{\n\"id\": \"1\",\n\"name\": \"@d2h\"\n}]\n}\n```\nIt will first normalize the payload, so you can use this to push\nin data streaming in from your server structured the same way\nthat fetches and saves are structured.",
            "itemtype": "method",
            "name": "pushPayload",
            "params": [
                {
                    "name": "store",
                    "description": ""
                },
                {
                    "name": "rawPayload",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.RESTSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 74170,
            "description": "This method is used to convert each JSON root key in the payload\ninto a typeKey that it can use to look up the appropriate model for\nthat part of the payload. By default the typeKey for a model is its\nname in camelCase, so if your JSON root key is 'fast-car' you would\nuse typeForRoot to convert it to 'fastCar' so that Ember Data finds\nthe `FastCar` model.\nIf you diverge from this norm you should also consider changes to\nstore._normalizeTypeKey as well.\nFor example, your server may return prefixed root keys like so:\n```js\n{\n\"response-fast-car\": {\n\"id\": \"1\",\n\"name\": \"corvette\"\n}\n}\n```\nIn order for Ember Data to know that the model corresponding to\nthe 'response-fast-car' hash is `FastCar` (typeKey: 'fastCar'),\nyou can override typeForRoot to convert 'response-fast-car' to\n'fastCar' like so:\n```js\nApp.ApplicationSerializer = DS.RESTSerializer.extend({\ntypeForRoot: function(root) {\n// 'response-fast-car' should become 'fast-car'\nvar subRoot = root.substring(9);\n// _super normalizes 'fast-car' to 'fastCar'\nreturn this._super(subRoot);\n}\n});\n```",
            "itemtype": "method",
            "name": "typeForRoot",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "DS.RESTSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 74212,
            "description": "Called when a record is saved in order to convert the\nrecord into JSON.\nBy default, it creates a JSON object with a key for\neach attribute and belongsTo relationship.\nFor example, consider this model:\n```js\nApp.Comment = DS.Model.extend({\ntitle: DS.attr(),\nbody: DS.attr(),\nauthor: DS.belongsTo('user')\n});\n```\nThe default serialization would create a JSON object like:\n```js\n{\n\"title\": \"Rails is unagi\",\n\"body\": \"Rails? Omakase? O_O\",\n\"author\": 12\n}\n```\nBy default, attributes are passed through as-is, unless\nyou specified an attribute type (`DS.attr('date')`). If\nyou specify a transform, the JavaScript value will be\nserialized when inserted into the JSON hash.\nBy default, belongs-to relationships are converted into\nIDs when inserted into the JSON hash.\n## IDs\n`serialize` takes an options hash with a single option:\n`includeId`. If this option is `true`, `serialize` will,\nby default include the ID in the JSON object it builds.\nThe adapter passes in `includeId: true` when serializing\na record for `createRecord`, but not for `updateRecord`.\n## Customization\nYour server may expect a different JSON format than the\nbuilt-in serialization format.\nIn that case, you can implement `serialize` yourself and\nreturn a JSON hash of your choosing.\n```js\nApp.PostSerializer = DS.RESTSerializer.extend({\nserialize: function(post, options) {\nvar json = {\nPOST_TTL: post.get('title'),\nPOST_BDY: post.get('body'),\nPOST_CMS: post.get('comments').mapBy('id')\n}\nif (options.includeId) {\njson.POST_ID_ = post.get('id');\n}\nreturn json;\n}\n});\n```\n## Customizing an App-Wide Serializer\nIf you want to define a serializer for your entire\napplication, you'll probably want to use `eachAttribute`\nand `eachRelationship` on the record.\n```js\nApp.ApplicationSerializer = DS.RESTSerializer.extend({\nserialize: function(record, options) {\nvar json = {};\nrecord.eachAttribute(function(name) {\njson[serverAttributeName(name)] = record.get(name);\n})\nrecord.eachRelationship(function(name, relationship) {\nif (relationship.kind === 'hasMany') {\njson[serverHasManyName(name)] = record.get(name).mapBy('id');\n}\n});\nif (options.includeId) {\njson.ID_ = record.get('id');\n}\nreturn json;\n}\n});\nfunction serverAttributeName(attribute) {\nreturn attribute.underscore().toUpperCase();\n}\nfunction serverHasManyName(name) {\nreturn serverAttributeName(name.singularize()) + \"_IDS\";\n}\n```\nThis serializer will generate JSON that looks like this:\n```js\n{\n\"TITLE\": \"Rails is omakase\",\n\"BODY\": \"Yep. Omakase.\",\n\"COMMENT_IDS\": [ 1, 2, 3 ]\n}\n```\n## Tweaking the Default JSON\nIf you just want to do some small tweaks on the default JSON,\nyou can call super first and make the tweaks on the returned\nJSON.\n```js\nApp.PostSerializer = DS.RESTSerializer.extend({\nserialize: function(record, options) {\nvar json = this._super(record, options);\njson.subject = json.title;\ndelete json.title;\nreturn json;\n}\n});\n```",
            "itemtype": "method",
            "name": "serialize",
            "params": [
                {
                    "name": "record",
                    "description": ""
                },
                {
                    "name": "options",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "DS.RESTSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 74325,
            "description": "You can use this method to customize the root keys serialized into the JSON.\nBy default the REST Serializer sends the typeKey of a model, which is a camelized\nversion of the name.\nFor example, your server may expect underscored root objects.\n```js\nApp.ApplicationSerializer = DS.RESTSerializer.extend({\nserializeIntoHash: function(data, type, record, options) {\nvar root = Ember.String.decamelize(type.typeKey);\ndata[root] = this.serialize(record, options);\n}\n});\n```",
            "itemtype": "method",
            "name": "serializeIntoHash",
            "params": [
                {
                    "name": "hash",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "type",
                    "description": ""
                },
                {
                    "name": "record",
                    "description": ""
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.RESTSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 74349,
            "description": "You can use this method to customize how polymorphic objects are serialized.\nBy default the JSON Serializer creates the key by appending `Type` to\nthe attribute and value from the model's camelcased model name.",
            "itemtype": "method",
            "name": "serializePolymorphicType",
            "params": [
                {
                    "name": "record",
                    "description": ""
                },
                {
                    "name": "json",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "relationship",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.RESTSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 74381,
            "description": "Description",
            "params": [
                {
                    "name": "container",
                    "description": ""
                },
                {
                    "name": "application",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.RESTSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 74526,
            "description": "If you would like your adapter to use a custom serializer you can\nset the `defaultSerializer` property to be the name of the custom\nserializer.\n\nNote the `defaultSerializer` serializer has a lower priority than\na model specific serializer (i.e. `PostSerializer`) or the\n`application` serializer.\n\n```javascript\nvar DjangoAdapter = DS.Adapter.extend({\n  defaultSerializer: 'django'\n});\n```",
            "itemtype": "property",
            "name": "defaultSerializer",
            "type": "{String}",
            "class": "DS.Adapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 74545,
            "description": "The `find()` method is invoked when the store is asked for a record that\nhas not previously been loaded. In response to `find()` being called, you\nshould query your persistence layer for a record with the given ID. Once\nfound, you can asynchronously call the store's `push()` method to push\nthe record into the store.\n\nHere is an example `find` implementation:\n\n```javascript\nApp.ApplicationAdapter = DS.Adapter.extend({\n  find: function(store, type, id) {\n    var url = [type.typeKey, id].join('/');\n\n    return new Ember.RSVP.Promise(function(resolve, reject) {\n      jQuery.getJSON(url).then(function(data) {\n        Ember.run(null, resolve, data);\n      }, function(jqXHR) {\n        jqXHR.then = null; // tame jQuery's ill mannered promises\n        Ember.run(null, reject, jqXHR);\n      });\n    });\n  }\n});\n```",
            "itemtype": "method",
            "name": "find",
            "params": [
                {
                    "name": "store",
                    "description": "",
                    "type": "DS.Store"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "subclass of DS.Model"
                },
                {
                    "name": "id",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "promise",
                "type": "Promise"
            },
            "class": "DS.Adapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 74579,
            "description": "The `findAll()` method is called when you call `find` on the store\nwithout an ID (i.e. `store.find('post')`).\n\nExample\n\n```javascript\nApp.ApplicationAdapter = DS.Adapter.extend({\n  findAll: function(store, type, sinceToken) {\n    var url = type;\n    var query = { since: sinceToken };\n    return new Ember.RSVP.Promise(function(resolve, reject) {\n      jQuery.getJSON(url, query).then(function(data) {\n        Ember.run(null, resolve, data);\n      }, function(jqXHR) {\n        jqXHR.then = null; // tame jQuery's ill mannered promises\n        Ember.run(null, reject, jqXHR);\n      });\n    });\n  }\n});\n```",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "findAll",
            "params": [
                {
                    "name": "store",
                    "description": "",
                    "type": "DS.Store"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "subclass of DS.Model"
                },
                {
                    "name": "sinceToken",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "promise",
                "type": "Promise"
            },
            "class": "DS.Adapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 74611,
            "description": "This method is called when you call `find` on the store with a\nquery object as the second parameter (i.e. `store.find('person', {\npage: 1 })`).\n\nExample\n\n```javascript\nApp.ApplicationAdapter = DS.Adapter.extend({\n  findQuery: function(store, type, query) {\n    var url = type;\n    return new Ember.RSVP.Promise(function(resolve, reject) {\n      jQuery.getJSON(url, query).then(function(data) {\n        Ember.run(null, resolve, data);\n      }, function(jqXHR) {\n        jqXHR.then = null; // tame jQuery's ill mannered promises\n        Ember.run(null, reject, jqXHR);\n      });\n    });\n  }\n});\n```",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "findQuery",
            "params": [
                {
                    "name": "store",
                    "description": "",
                    "type": "DS.Store"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "subclass of DS.Model"
                },
                {
                    "name": "query",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "recordArray",
                    "description": "",
                    "type": "DS.AdapterPopulatedRecordArray"
                }
            ],
            "return": {
                "description": "promise",
                "type": "Promise"
            },
            "class": "DS.Adapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 74644,
            "description": "If the globally unique IDs for your records should be generated on the client,\nimplement the `generateIdForRecord()` method. This method will be invoked\neach time you create a new record, and the value returned from it will be\nassigned to the record's `primaryKey`.\n\nMost traditional REST-like HTTP APIs will not use this method. Instead, the ID\nof the record will be set by the server, and your adapter will update the store\nwith the new ID when it calls `didCreateRecord()`. Only implement this method if\nyou intend to generate record IDs on the client-side.\n\nThe `generateIdForRecord()` method will be invoked with the requesting store as\nthe first parameter and the newly created record as the second parameter:\n\n```javascript\ngenerateIdForRecord: function(store, record) {\n  var uuid = App.generateUUIDWithStatisticallyLowOddsOfCollision();\n  return uuid;\n}\n```",
            "itemtype": "method",
            "name": "generateIdForRecord",
            "params": [
                {
                    "name": "store",
                    "description": "",
                    "type": "DS.Store"
                },
                {
                    "name": "record",
                    "description": "",
                    "type": "DS.Model"
                }
            ],
            "return": {
                "description": "id",
                "type": "String|Number"
            },
            "class": "DS.Adapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 74672,
            "description": "Proxies to the serializer's `serialize` method.\nExample\n```javascript\nApp.ApplicationAdapter = DS.Adapter.extend({\ncreateRecord: function(store, type, record) {\nvar data = this.serialize(record, { includeId: true });\nvar url = type;\n// ...\n}\n});\n```",
            "itemtype": "method",
            "name": "serialize",
            "params": [
                {
                    "name": "record",
                    "description": ""
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "DS.Adapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 74693,
            "description": "Implement this method in a subclass to handle the creation of\nnew records.\n\nSerializes the record and send it to the server.\n\nExample\n\n```javascript\nApp.ApplicationAdapter = DS.Adapter.extend({\n  createRecord: function(store, type, record) {\n    var data = this.serialize(record, { includeId: true });\n    var url = type;\n\n    return new Ember.RSVP.Promise(function(resolve, reject) {\n      jQuery.ajax({\n        type: 'POST',\n        url: url,\n        dataType: 'json',\n        data: data\n      }).then(function(data) {\n        Ember.run(null, resolve, data);\n      }, function(jqXHR) {\n        jqXHR.then = null; // tame jQuery's ill mannered promises\n        Ember.run(null, reject, jqXHR);\n      });\n    });\n  }\n});\n```",
            "itemtype": "method",
            "name": "createRecord",
            "params": [
                {
                    "name": "store",
                    "description": "",
                    "type": "DS.Store"
                },
                {
                    "name": "type",
                    "description": "the DS.Model class of the record",
                    "type": "subclass of DS.Model"
                },
                {
                    "name": "record",
                    "description": "",
                    "type": "DS.Model"
                }
            ],
            "return": {
                "description": "promise",
                "type": "Promise"
            },
            "class": "DS.Adapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 74732,
            "description": "Implement this method in a subclass to handle the updating of\na record.\n\nSerializes the record update and send it to the server.\n\nExample\n\n```javascript\nApp.ApplicationAdapter = DS.Adapter.extend({\n  updateRecord: function(store, type, record) {\n    var data = this.serialize(record, { includeId: true });\n    var id = record.get('id');\n    var url = [type, id].join('/');\n\n    return new Ember.RSVP.Promise(function(resolve, reject) {\n      jQuery.ajax({\n        type: 'PUT',\n        url: url,\n        dataType: 'json',\n        data: data\n      }).then(function(data) {\n        Ember.run(null, resolve, data);\n      }, function(jqXHR) {\n        jqXHR.then = null; // tame jQuery's ill mannered promises\n        Ember.run(null, reject, jqXHR);\n      });\n    });\n  }\n});\n```",
            "itemtype": "method",
            "name": "updateRecord",
            "params": [
                {
                    "name": "store",
                    "description": "",
                    "type": "DS.Store"
                },
                {
                    "name": "type",
                    "description": "the DS.Model class of the record",
                    "type": "subclass of DS.Model"
                },
                {
                    "name": "record",
                    "description": "",
                    "type": "DS.Model"
                }
            ],
            "return": {
                "description": "promise",
                "type": "Promise"
            },
            "class": "DS.Adapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 74772,
            "description": "Implement this method in a subclass to handle the deletion of\na record.\n\nSends a delete request for the record to the server.\n\nExample\n\n```javascript\nApp.ApplicationAdapter = DS.Adapter.extend({\n  deleteRecord: function(store, type, record) {\n    var data = this.serialize(record, { includeId: true });\n    var id = record.get('id');\n    var url = [type, id].join('/');\n\n    return new Ember.RSVP.Promise(function(resolve, reject) {\n      jQuery.ajax({\n        type: 'DELETE',\n        url: url,\n        dataType: 'json',\n        data: data\n      }).then(function(data) {\n        Ember.run(null, resolve, data);\n      }, function(jqXHR) {\n        jqXHR.then = null; // tame jQuery's ill mannered promises\n        Ember.run(null, reject, jqXHR);\n      });\n    });\n  }\n});\n```",
            "itemtype": "method",
            "name": "deleteRecord",
            "params": [
                {
                    "name": "store",
                    "description": "",
                    "type": "DS.Store"
                },
                {
                    "name": "type",
                    "description": "the DS.Model class of the record",
                    "type": "subclass of DS.Model"
                },
                {
                    "name": "record",
                    "description": "",
                    "type": "DS.Model"
                }
            ],
            "return": {
                "description": "promise",
                "type": "Promise"
            },
            "class": "DS.Adapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 74812,
            "description": "By default the store will try to coalesce all `fetchRecord` calls within the same runloop\ninto as few requests as possible by calling groupRecordsForFindMany and passing it into a findMany call.\nYou can opt out of this behaviour by either not implementing the findMany hook or by setting\ncoalesceFindRequests to false",
            "itemtype": "property",
            "name": "coalesceFindRequests",
            "type": "{boolean}",
            "class": "DS.Adapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 74823,
            "description": "Find multiple records at once if coalesceFindRequests is true",
            "itemtype": "method",
            "name": "findMany",
            "params": [
                {
                    "name": "store",
                    "description": "",
                    "type": "DS.Store"
                },
                {
                    "name": "type",
                    "description": "the DS.Model class of the records",
                    "type": "subclass of DS.Model"
                },
                {
                    "name": "ids",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "records",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "promise",
                "type": "Promise"
            },
            "class": "DS.Adapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 74834,
            "description": "Organize records into groups, each of which is to be passed to separate\ncalls to `findMany`.\nFor example, if your api has nested URLs that depend on the parent, you will\nwant to group records by their parent.\nThe default implementation returns the records as a single group.\nloaded separately by `findMany`.",
            "itemtype": "method",
            "name": "groupRecordsForFindMany",
            "params": [
                {
                    "name": "store",
                    "description": ""
                },
                {
                    "name": "records",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "ArrayExpression"
            },
            "class": "DS.Adapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 74873,
            "description": "Description",
            "itemtype": "method",
            "name": "aliasedFactory",
            "params": [
                {
                    "name": "path",
                    "description": ""
                },
                {
                    "name": "preLookup",
                    "description": ""
                }
            ],
            "return": {
                "description": "ObjectExpression"
            },
            "class": "DS.ContainerProxy",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 74884,
            "description": "Description",
            "itemtype": "method",
            "name": "create",
            "return": {
                "description": "CallExpression"
            },
            "class": "DS.ContainerProxy",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 74896,
            "description": "Description",
            "itemtype": "method",
            "name": "registerAlias",
            "params": [
                {
                    "name": "source",
                    "description": ""
                },
                {
                    "name": "dest",
                    "description": ""
                },
                {
                    "name": "preLookup",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "DS.ContainerProxy",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 74910,
            "description": "Description",
            "itemtype": "method",
            "name": "registerDeprecation",
            "params": [
                {
                    "name": "deprecated",
                    "description": ""
                },
                {
                    "name": "valid",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "DS.ContainerProxy",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 74918,
            "description": "Description",
            "itemtype": "method",
            "name": "preLookupCallback",
            "return": {
                "description": ""
            },
            "class": "DS.ContainerProxy",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 74931,
            "description": "Description",
            "itemtype": "method",
            "name": "registerDeprecations",
            "params": [
                {
                    "name": "proxyPairs",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.ContainerProxy",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 74984,
            "description": "Description",
            "itemtype": "method",
            "name": "getFilters",
            "return": {
                "description": "ArrayExpression"
            },
            "class": "DS.DebugAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 74997,
            "description": "Description",
            "itemtype": "method",
            "name": "detect",
            "params": [
                {
                    "name": "klass",
                    "description": ""
                }
            ],
            "return": {
                "description": "LogicalExpression"
            },
            "class": "DS.DebugAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 75007,
            "description": "Description",
            "itemtype": "method",
            "name": "columnsForType",
            "params": [
                {
                    "name": "type",
                    "description": ""
                }
            ],
            "return": {
                "description": "columns"
            },
            "class": "DS.DebugAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 75028,
            "description": "Description",
            "itemtype": "method",
            "name": "getRecords",
            "params": [
                {
                    "name": "type",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "DS.DebugAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 75038,
            "description": "Description",
            "itemtype": "method",
            "name": "getRecordColumnValues",
            "params": [
                {
                    "name": "record",
                    "description": ""
                }
            ],
            "return": {
                "description": "columnValues"
            },
            "class": "DS.DebugAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 75058,
            "description": "Description",
            "itemtype": "method",
            "name": "getRecordKeywords",
            "params": [
                {
                    "name": "record",
                    "description": ""
                }
            ],
            "return": {
                "description": "keywords"
            },
            "class": "DS.DebugAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 75076,
            "description": "Description",
            "itemtype": "method",
            "name": "getRecordFilterValues",
            "params": [
                {
                    "name": "record",
                    "description": ""
                }
            ],
            "return": {
                "description": "ObjectExpression"
            },
            "class": "DS.DebugAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 75090,
            "description": "Description",
            "itemtype": "method",
            "name": "getRecordColor",
            "params": [
                {
                    "name": "record",
                    "description": ""
                }
            ],
            "return": {
                "description": "color"
            },
            "class": "DS.DebugAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 75106,
            "description": "Description",
            "itemtype": "method",
            "name": "observeRecord",
            "params": [
                {
                    "name": "record",
                    "description": ""
                },
                {
                    "name": "recordUpdated",
                    "description": ""
                }
            ],
            "return": {
                "description": "release"
            },
            "class": "DS.DebugAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 75122,
            "description": "Description",
            "itemtype": "method",
            "name": "handler",
            "return": {
                "description": ""
            },
            "class": "DS.DebugAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 75136,
            "description": "Description",
            "itemtype": "method",
            "name": "release",
            "return": {
                "description": ""
            },
            "class": "DS.DebugAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 75158,
            "description": "Provides info about the model for debugging purposes\nby grouping the properties into more semantic groups.\n\nMeant to be used by debugging tools such as the Chrome Ember Extension.\n\n- Groups all attributes in \"Attributes\" group.\n- Groups all belongsTo relationships in \"Belongs To\" group.\n- Groups all hasMany relationships in \"Has Many\" group.\n- Groups all flags in \"Flags\" group.\n- Flags relationship CPs as expensive properties.",
            "itemtype": "method",
            "name": "_debugInfo",
            "access": "private",
            "tagname": "",
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 75259,
            "description": "A map whose keys are the attributes of the model (properties\ndescribed by DS.attr) and whose values are the meta object for the\nproperty.\n\nExample\n\n```javascript\n\nApp.Person = DS.Model.extend({\n  firstName: attr('string'),\n  lastName: attr('string'),\n  birthday: attr('date')\n});\n\nvar attributes = Ember.get(App.Person, 'attributes')\n\nattributes.forEach(function(name, meta) {\n  console.log(name, meta);\n});\n\n// prints:\n// firstName {type: \"string\", isAttribute: true, options: Object, parentType: function, name: \"firstName\"}\n// lastName {type: \"string\", isAttribute: true, options: Object, parentType: function, name: \"lastName\"}\n// birthday {type: \"date\", isAttribute: true, options: Object, parentType: function, name: \"birthday\"}\n```",
            "itemtype": "property",
            "name": "attributes",
            "static": 1,
            "type": "{Ember.Map}",
            "readonly": "",
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 75306,
            "description": "A map whose keys are the attributes of the model (properties\ndescribed by DS.attr) and whose values are type of transformation\napplied to each attribute. This map does not include any\nattributes that do not have an transformation type.\n\nExample\n\n```javascript\nApp.Person = DS.Model.extend({\n  firstName: attr(),\n  lastName: attr('string'),\n  birthday: attr('date')\n});\n\nvar transformedAttributes = Ember.get(App.Person, 'transformedAttributes')\n\ntransformedAttributes.forEach(function(field, type) {\n  console.log(field, type);\n});\n\n// prints:\n// lastName string\n// birthday date\n```",
            "itemtype": "property",
            "name": "transformedAttributes",
            "static": 1,
            "type": "{Ember.Map}",
            "readonly": "",
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 75349,
            "description": "Iterates through the attributes of the model, calling the passed function on each\nattribute.\nThe callback method you provide should have the following signature (all\nparameters are optional):\n```javascript\nfunction(name, meta);\n```\n- `name` the name of the current property in the iteration\n- `meta` the meta object for the attribute property in the iteration\nNote that in addition to a callback, you can also pass an optional target\nobject that will be set as `this` on the context.\nExample\n```javascript\nApp.Person = DS.Model.extend({\nfirstName: attr('string'),\nlastName: attr('string'),\nbirthday: attr('date')\n});\nApp.Person.eachAttribute(function(name, meta) {\nconsole.log(name, meta);\n});\n// prints:\n// firstName {type: \"string\", isAttribute: true, options: Object, parentType: function, name: \"firstName\"}\n// lastName {type: \"string\", isAttribute: true, options: Object, parentType: function, name: \"lastName\"}\n// birthday {type: \"date\", isAttribute: true, options: Object, parentType: function, name: \"birthday\"}\n```",
            "static": 1,
            "itemtype": "method",
            "name": "eachAttribute",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to execute",
                    "type": "Function"
                },
                {
                    "name": "binding",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 75388,
            "description": "Iterates through the transformedAttributes of the model, calling\nthe passed function on each attribute. Note the callback will not be\ncalled for any attributes that do not have an transformation type.\nThe callback method you provide should have the following signature (all\nparameters are optional):\n```javascript\nfunction(name, type);\n```\n- `name` the name of the current property in the iteration\n- `type` a string containing the name of the type of transformed\napplied to the attribute\nNote that in addition to a callback, you can also pass an optional target\nobject that will be set as `this` on the context.\nExample\n```javascript\nApp.Person = DS.Model.extend({\nfirstName: attr(),\nlastName: attr('string'),\nbirthday: attr('date')\n});\nApp.Person.eachTransformedAttribute(function(name, type) {\nconsole.log(name, type);\n});\n// prints:\n// lastName string\n// birthday date\n```",
            "static": 1,
            "itemtype": "method",
            "name": "eachTransformedAttribute",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to execute",
                    "type": "Function"
                },
                {
                    "name": "binding",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 75431,
            "description": "Description",
            "itemtype": "method",
            "name": "eachAttribute",
            "params": [
                {
                    "name": "callback",
                    "description": ""
                },
                {
                    "name": "binding",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 75443,
            "description": "Description",
            "itemtype": "method",
            "name": "getDefaultValue",
            "params": [
                {
                    "name": "record",
                    "description": ""
                },
                {
                    "name": "options",
                    "description": ""
                },
                {
                    "name": "key",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 75459,
            "description": "Description",
            "itemtype": "method",
            "name": "hasValue",
            "params": [
                {
                    "name": "record",
                    "description": ""
                },
                {
                    "name": "key",
                    "description": ""
                }
            ],
            "return": {
                "description": "LogicalExpression"
            },
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 75472,
            "description": "Description",
            "itemtype": "method",
            "name": "getValue",
            "params": [
                {
                    "name": "record",
                    "description": ""
                },
                {
                    "name": "key",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 75489,
            "description": "`DS.attr` defines an attribute on a [DS.Model](/api/data/classes/DS.Model.html).\nBy default, attributes are passed through as-is, however you can specify an\noptional type to have the value automatically transformed.\nEmber Data ships with four basic transform types: `string`, `number`,\n`boolean` and `date`. You can define your own transforms by subclassing\n[DS.Transform](/api/data/classes/DS.Transform.html).\nNote that you cannot use `attr` to define an attribute of `id`.\n`DS.attr` takes an optional hash as a second parameter, currently\nsupported options are:\n- `defaultValue`: Pass a string or a function to be called to set the attribute\nto a default value if none is supplied.\nExample\n```javascript\nvar attr = DS.attr;\nApp.User = DS.Model.extend({\nusername: attr('string'),\nemail: attr('string'),\nverified: attr('boolean', {defaultValue: false})\n});\n```",
            "params": [
                {
                    "name": "type",
                    "description": "the attribute type",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "a hash of options",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "DS",
            "module": "ember-data"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 75640,
            "description": "Register with target handler",
            "itemtype": "method",
            "name": "registerHandlers",
            "params": [
                {
                    "name": "target",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "becameInvalid",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "becameValid",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.Errors",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 75653,
            "itemtype": "property",
            "name": "errorsByAttributeName",
            "type": "{Ember.MapWithDefault}",
            "access": "private",
            "tagname": "",
            "class": "DS.Errors",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 75659,
            "description": "Description",
            "itemtype": "method",
            "name": "initialValue",
            "return": {
                "description": "CallExpression"
            },
            "class": "DS.Errors",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 75666,
            "description": "Description",
            "itemtype": "method",
            "name": "defaultValue",
            "return": {
                "description": "CallExpression"
            },
            "class": "DS.Errors",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 75677,
            "description": "Description",
            "itemtype": "method",
            "name": "addedItem",
            "params": [
                {
                    "name": "errors",
                    "description": ""
                },
                {
                    "name": "error",
                    "description": ""
                }
            ],
            "return": {
                "description": "errors"
            },
            "class": "DS.Errors",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 75690,
            "description": "Description",
            "itemtype": "method",
            "name": "removedItem",
            "params": [
                {
                    "name": "errors",
                    "description": ""
                },
                {
                    "name": "error",
                    "description": ""
                }
            ],
            "return": {
                "description": "errors"
            },
            "class": "DS.Errors",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 75704,
            "description": "Returns errors for a given attribute\n```javascript\nvar user = store.createRecord('user', {\nusername: 'tomster',\nemail: 'invalidEmail'\n});\nuser.save().catch(function(){\nuser.get('errors').errorsFor('email'); // [\"Doesn't look like a valid email.\"]\n});\n```",
            "itemtype": "method",
            "name": "errorsFor",
            "params": [
                {
                    "name": "attribute",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "DS.Errors",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 75723,
            "description": "An array containing all of the error messages for this\nrecord. This is useful for displaying all errors to the user.\n\n```handlebars\n{{#each errors.messages}}\n  <div class=\"error\">\n    {{message}}\n  </div>\n{{/each}}\n```",
            "itemtype": "property",
            "name": "messages",
            "type": "{Array}",
            "class": "DS.Errors",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 75740,
            "itemtype": "property",
            "name": "content",
            "type": "{Array}",
            "access": "private",
            "tagname": "",
            "class": "DS.Errors",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 75749,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "unknownProperty",
            "params": [
                {
                    "name": "attribute",
                    "description": ""
                }
            ],
            "return": {
                "description": "errors"
            },
            "class": "DS.Errors",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 75761,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "nextObject",
            "params": [
                {
                    "name": "index",
                    "description": ""
                },
                {
                    "name": "previousObject",
                    "description": ""
                },
                {
                    "name": "context",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "DS.Errors",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 75773,
            "description": "Total number of errors.",
            "itemtype": "property",
            "name": "length",
            "type": "{Number}",
            "readonly": "",
            "class": "DS.Errors",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 75782,
            "itemtype": "property",
            "name": "isEmpty",
            "type": "{Boolean}",
            "readonly": "",
            "class": "DS.Errors",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 75789,
            "description": "Adds error messages to a given attribute and sends\n`becameInvalid` event to the record.\nExample:\n```javascript\nif (!user.get('username') {\nuser.get('errors').add('username', 'This field is required');\n}\n```",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "attribute",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "messages",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.Errors",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 75817,
            "itemtype": "method",
            "name": "_findOrCreateMessages",
            "access": "private",
            "tagname": "",
            "class": "DS.Errors",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 75832,
            "description": "Removes all error messages from the given attribute and sends\n`becameValid` event to the record if there no more errors left.\nExample:\n```javascript\nApp.User = DS.Model.extend({\nemail: DS.attr('string'),\ntwoFactorAuth: DS.attr('boolean'),\nphone: DS.attr('string')\n});\nApp.UserEditRoute = Ember.Route.extend({\nactions: {\nsave: function(user) {\nif (!user.get('twoFactorAuth')) {\nuser.get('errors').remove('phone');\n}\nuser.save();\n}\n}\n});\n```",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "attribute",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.Errors",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 75871,
            "description": "Removes all error messages and sends `becameValid` event\nto the record.\nExample:\n```javascript\nApp.UserEditRoute = Ember.Route.extend({\nactions: {\nretrySave: function(user) {\nuser.get('errors').clear();\nuser.save();\n}\n}\n});\n```",
            "itemtype": "method",
            "name": "clear",
            "return": {
                "description": ""
            },
            "class": "DS.Errors",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 75897,
            "description": "Checks if there is error messages for the given attribute.\n```javascript\nApp.UserEditRoute = Ember.Route.extend({\nactions: {\nsave: function(user) {\nif (user.get('errors').has('email')) {\nreturn alert('Please update your email before attempting to save.');\n}\nuser.save();\n}\n}\n});\n```",
            "itemtype": "method",
            "name": "has",
            "params": [
                {
                    "name": "attribute",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "UnaryExpression"
            },
            "class": "DS.Errors",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 75948,
            "description": "Description",
            "itemtype": "method",
            "name": "splitOnDot",
            "params": [
                {
                    "name": "name",
                    "description": ""
                }
            ],
            "return": {
                "description": "LogicalExpression"
            },
            "class": "DS.Errors",
            "module": "ember-data"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 75960,
            "description": "Description",
            "itemtype": "method",
            "name": "extractPivotName",
            "params": [
                {
                    "name": "name",
                    "description": ""
                }
            ],
            "return": {
                "description": "LogicalExpression"
            },
            "class": "DS.Errors",
            "module": "ember-data"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 75985,
            "description": "If this property is `true` the record is in the `empty`\nstate. Empty is the first state all records enter after they have\nbeen created. Most records created by the store will quickly\ntransition to the `loading` state if data needs to be fetched from\nthe server or the `created` state if the record is created on the\nclient. A record can also enter the empty state if the adapter is\nunable to locate the record.",
            "itemtype": "property",
            "name": "isEmpty",
            "type": "{Boolean}",
            "readonly": "",
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 75999,
            "description": "If this property is `true` the record is in the `loading` state. A\nrecord enters this state when the store asks the adapter for its\ndata. It remains in this state until the adapter provides the\nrequested data.",
            "itemtype": "property",
            "name": "isLoading",
            "type": "{Boolean}",
            "readonly": "",
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 76010,
            "description": "If this property is `true` the record is in the `loaded` state. A\nrecord enters this state when its data is populated. Most of a\nrecord's lifecycle is spent inside substates of the `loaded`\nstate.\n\nExample\n\n```javascript\nvar record = store.createRecord('model');\nrecord.get('isLoaded'); // true\n\nstore.find('model', 1).then(function(model) {\n  model.get('isLoaded'); // true\n});\n```",
            "itemtype": "property",
            "name": "isLoaded",
            "type": "{Boolean}",
            "readonly": "",
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 76032,
            "description": "If this property is `true` the record is in the `dirty` state. The\nrecord has local changes that have not yet been saved by the\nadapter. This includes records that have been created (but not yet\nsaved) or deleted.\n\nExample\n\n```javascript\nvar record = store.createRecord('model');\nrecord.get('isDirty'); // true\n\nstore.find('model', 1).then(function(model) {\n  model.get('isDirty'); // false\n  model.set('foo', 'some value');\n  model.get('isDirty'); // true\n});\n```",
            "itemtype": "property",
            "name": "isDirty",
            "type": "{Boolean}",
            "readonly": "",
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 76056,
            "description": "If this property is `true` the record is in the `saving` state. A\nrecord enters the saving state when `save` is called, but the\nadapter has not yet acknowledged that the changes have been\npersisted to the backend.\n\nExample\n\n```javascript\nvar record = store.createRecord('model');\nrecord.get('isSaving'); // false\nvar promise = record.save();\nrecord.get('isSaving'); // true\npromise.then(function() {\n  record.get('isSaving'); // false\n});\n```",
            "itemtype": "property",
            "name": "isSaving",
            "type": "{Boolean}",
            "readonly": "",
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 76079,
            "description": "If this property is `true` the record is in the `deleted` state\nand has been marked for deletion. When `isDeleted` is true and\n`isDirty` is true, the record is deleted locally but the deletion\nwas not yet persisted. When `isSaving` is true, the change is\nin-flight. When both `isDirty` and `isSaving` are false, the\nchange has persisted.\n\nExample\n\n```javascript\nvar record = store.createRecord('model');\nrecord.get('isDeleted');    // false\nrecord.deleteRecord();\n\n// Locally deleted\nrecord.get('isDeleted');    // true\nrecord.get('isDirty');      // true\nrecord.get('isSaving');     // false\n\n// Persisting the deletion\nvar promise = record.save();\nrecord.get('isDeleted');    // true\nrecord.get('isSaving');     // true\n\n// Deletion Persisted\npromise.then(function() {\n  record.get('isDeleted');  // true\n  record.get('isSaving');   // false\n  record.get('isDirty');    // false\n});\n```",
            "itemtype": "property",
            "name": "isDeleted",
            "type": "{Boolean}",
            "readonly": "",
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 76117,
            "description": "If this property is `true` the record is in the `new` state. A\nrecord will be in the `new` state when it has been created on the\nclient and the adapter has not yet report that it was successfully\nsaved.\n\nExample\n\n```javascript\nvar record = store.createRecord('model');\nrecord.get('isNew'); // true\n\nrecord.save().then(function(model) {\n  model.get('isNew'); // false\n});\n```",
            "itemtype": "property",
            "name": "isNew",
            "type": "{Boolean}",
            "readonly": "",
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 76139,
            "description": "If this property is `true` the record is in the `valid` state.\n\nA record will be in the `valid` state when the adapter did not report any\nserver-side validation failures.",
            "itemtype": "property",
            "name": "isValid",
            "type": "{Boolean}",
            "readonly": "",
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 76150,
            "description": "If the record is in the dirty state this property will report what\nkind of change has caused it to move into the dirty\nstate. Possible values are:\n\n- `created` The record has been created by the client and not yet saved to the adapter.\n- `updated` The record has been updated by the client and not yet saved to the adapter.\n- `deleted` The record has been deleted by the client and not yet saved to the adapter.\n\nExample\n\n```javascript\nvar record = store.createRecord('model');\nrecord.get('dirtyType'); // 'created'\n```",
            "itemtype": "property",
            "name": "dirtyType",
            "type": "{String}",
            "readonly": "",
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 76172,
            "description": "If `true` the adapter reported that it was unable to save local\nchanges to the backend for any reason other than a server-side\nvalidation error.\n\nExample\n\n```javascript\nrecord.get('isError'); // false\nrecord.set('foo', 'valid value');\nrecord.save().then(null, function() {\n  record.get('isError'); // true\n});\n```",
            "itemtype": "property",
            "name": "isError",
            "type": "{Boolean}",
            "readonly": "",
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 76192,
            "description": "If `true` the store is attempting to reload the record form the adapter.\n\nExample\n\n```javascript\nrecord.get('isReloading'); // false\nrecord.reload();\nrecord.get('isReloading'); // true\n```",
            "itemtype": "property",
            "name": "isReloading",
            "type": "{Boolean}",
            "readonly": "",
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 76209,
            "description": "The `clientId` property is a transient numerical identifier\ngenerated at runtime by the data store. It is important\nprimarily because newly created objects may not yet have an\nexternally generated id.",
            "itemtype": "property",
            "name": "clientId",
            "access": "private",
            "tagname": "",
            "type": "{Number|String}",
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 76220,
            "description": "All ember models have an id property. This is an identifier\nmanaged by an external source. These are always coerced to be\nstrings before being used internally. Note when declaring the\nattributes for a model it is an error to declare an id\nattribute.\n\n```javascript\nvar record = store.createRecord('model');\nrecord.get('id'); // null\n\nstore.find('model', 1).then(function(model) {\n  model.get('id'); // '1'\n});\n```",
            "itemtype": "property",
            "name": "id",
            "type": "{String}",
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 76241,
            "itemtype": "property",
            "name": "currentState",
            "access": "private",
            "tagname": "",
            "type": "{Object}",
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 76248,
            "description": "When the record is in the `invalid` state this object will contain\nany errors returned by the adapter. When present the errors hash\ntypically contains keys corresponding to the invalid property names\nand values which are an array of error messages.\n\n```javascript\nrecord.get('errors.length'); // 0\nrecord.set('foo', 'invalid value');\nrecord.save().then(null, function() {\n  record.get('errors').get('foo'); // ['foo should be a number.']\n});\n```",
            "itemtype": "property",
            "name": "errors",
            "type": "{DS.Errors}",
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 76277,
            "description": "Create a JSON representation of the record, using the serialization\nstrategy of the store's adapter.\n`serialize` takes an optional hash as a parameter, currently\nsupported options are:\n- `includeId`: `true` if the record's ID should be included in the\nJSON representation.",
            "itemtype": "method",
            "name": "serialize",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 76293,
            "description": "Use [DS.JSONSerializer](DS.JSONSerializer.html) to\nget the JSON representation of a record.\n`toJSON` takes an optional hash as a parameter, currently\nsupported options are:\n- `includeId`: `true` if the record's ID should be included in the\nJSON representation.",
            "itemtype": "method",
            "name": "toJSON",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 76311,
            "description": "Fired when the record is loaded from the server.",
            "itemtype": "event",
            "name": "didLoad",
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 76318,
            "description": "Fired when the record is updated.",
            "itemtype": "event",
            "name": "didUpdate",
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 76325,
            "description": "Fired when the record is created.",
            "itemtype": "event",
            "name": "didCreate",
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 76332,
            "description": "Fired when the record is deleted.",
            "itemtype": "event",
            "name": "didDelete",
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 76339,
            "description": "Fired when the record becomes invalid.",
            "itemtype": "event",
            "name": "becameInvalid",
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 76346,
            "description": "Fired when the record enters the error state.",
            "itemtype": "event",
            "name": "becameError",
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 76353,
            "itemtype": "property",
            "name": "data",
            "access": "private",
            "tagname": "",
            "type": "{Object}",
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 76365,
            "description": "Description",
            "itemtype": "method",
            "name": "init",
            "return": {
                "description": ""
            },
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 76390,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "send",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "context",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 76407,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "transitionTo",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 76461,
            "description": "Description",
            "itemtype": "method",
            "name": "withTransaction",
            "params": [
                {
                    "name": "fn",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 76472,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "loadingData",
            "params": [
                {
                    "name": "promise",
                    "description": "",
                    "type": "Promise"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 76482,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "loadedData",
            "return": {
                "description": ""
            },
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 76491,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "notFound",
            "return": {
                "description": ""
            },
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 76500,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "pushedData",
            "return": {
                "description": ""
            },
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 76509,
            "description": "Marks the record as deleted but does not save it. You must call\n`save` afterwards if you want to persist it. You might use this\nmethod if you want to allow the user to still `rollback()` a\ndelete after it was made.\nExample\n```javascript\nApp.ModelDeleteRoute = Ember.Route.extend({\nactions: {\nsoftDelete: function() {\nthis.controller.get('model').deleteRecord();\n},\nconfirm: function() {\nthis.controller.get('model').save();\n},\nundo: function() {\nthis.controller.get('model').rollback();\n}\n}\n});\n```",
            "itemtype": "method",
            "name": "deleteRecord",
            "return": {
                "description": ""
            },
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 76537,
            "description": "Same as `deleteRecord`, but saves the record immediately.\nExample\n```javascript\nApp.ModelDeleteRoute = Ember.Route.extend({\nactions: {\ndelete: function() {\nvar controller = this.controller;\ncontroller.get('model').destroyRecord().then(function() {\ncontroller.transitionToRoute('model.index');\n});\n}\n}\n});\n```\nsuccessfully or rejected if the adapter returns with an error.",
            "itemtype": "method",
            "name": "destroyRecord",
            "return": {
                "description": "CallExpression"
            },
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 76561,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "unloadRecord",
            "return": {
                "description": ""
            },
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 76572,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "clearRelationships",
            "return": {
                "description": ""
            },
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 76588,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "updateRecordArrays",
            "return": {
                "description": ""
            },
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 76598,
            "description": "When a find request is triggered on the store, the user can optionally pass in\nattributes and relationships to be preloaded. These are meant to behave as if they\ncame back from the server, except the user obtained them out of band and is informing\nthe store of their existence. The most common use case is for supporting client side\nnested URLs, such as `/posts/1/comments/2` so the user can do\n`store.find('comment', 2, {post:1})` without having to fetch the post.\n\nPreloaded data can be attributes and relationships passed in either as IDs or as actual\nmodels.",
            "itemtype": "method",
            "name": "_preloadData",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "preload",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 76664,
            "description": "Returns an object, whose keys are changed properties, and value is\nan [oldProp, newProp] array.\nExample\n```javascript\nApp.Mascot = DS.Model.extend({\nname: attr('string')\n});\nvar person = store.createRecord('person');\nperson.changedAttributes(); // {}\nperson.set('name', 'Tomster');\nperson.changedAttributes(); // {name: [undefined, 'Tomster']}\n```\nand value is an [oldProp, newProp] array.",
            "itemtype": "method",
            "name": "changedAttributes",
            "return": {
                "description": "diffData"
            },
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 76694,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "adapterWillCommit",
            "return": {
                "description": ""
            },
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 76703,
            "description": "If the adapter did not return a hash in response to a commit,\nmerge the changed attributes and relationships into the existing\nsaved data.",
            "itemtype": "method",
            "name": "adapterDidCommit",
            "params": [
                {
                    "name": "data",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 76730,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "adapterDidDirty",
            "return": {
                "description": ""
            },
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 76741,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "updateRecordArraysLater",
            "return": {
                "description": ""
            },
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 76754,
            "access": "private",
            "tagname": "the existing data, not replace it.",
            "itemtype": "method",
            "name": "setupData",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "partial",
                    "description": "the data should be merged into",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 76774,
            "description": "Description",
            "itemtype": "method",
            "name": "materializeId",
            "params": [
                {
                    "name": "id",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 76784,
            "description": "Description",
            "itemtype": "method",
            "name": "materializeAttributes",
            "params": [
                {
                    "name": "attributes",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 76795,
            "description": "Description",
            "itemtype": "method",
            "name": "materializeAttribute",
            "params": [
                {
                    "name": "name",
                    "description": ""
                },
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 76806,
            "description": "If the model `isDirty` this function will discard any unsaved\nchanges\nExample\n```javascript\nrecord.get('name'); // 'Untitled Document'\nrecord.set('name', 'Doc 1');\nrecord.get('name'); // 'Doc 1'\nrecord.rollback();\nrecord.get('name'); // 'Untitled Document'\n```",
            "itemtype": "method",
            "name": "rollback",
            "return": {
                "description": ""
            },
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 76837,
            "description": "Description",
            "itemtype": "method",
            "name": "toStringExtension",
            "return": {
                "description": "CallExpression"
            },
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 76846,
            "description": "Save the record and persist any changes to the record to an\nextenal source via the adapter.\nExample\n```javascript\nrecord.set('name', 'Tomster');\nrecord.save().then(function(){\n// Success callback\n}, function() {\n// Error callback\n});\n```\nsuccessfully or rejected if the adapter returns with an error.",
            "itemtype": "method",
            "name": "save",
            "return": {
                "description": "CallExpression"
            },
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 76875,
            "description": "Reload the record from the adapter.\nThis will only work if the record has already finished loading\nand has not yet been modified (`isLoaded` but not `isDirty`,\nor `isSaving`).\nExample\n```javascript\nApp.ModelViewRoute = Ember.Route.extend({\nactions: {\nreload: function() {\nthis.controller.get('model').reload();\n}\n}\n});\n```\nadapter returns successfully or rejected if the adapter returns\nwith an error.",
            "itemtype": "method",
            "name": "reload",
            "return": {
                "description": "CallExpression"
            },
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 76918,
            "description": "Description",
            "itemtype": "method",
            "name": "adapterDidUpdateAttribute",
            "params": [
                {
                    "name": "attributeName",
                    "description": ""
                },
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 76941,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "adapterDidInvalidate",
            "params": [
                {
                    "name": "errors",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 76949,
            "description": "Description",
            "itemtype": "method",
            "name": "addError",
            "params": [
                {
                    "name": "name",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 76965,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "adapterDidError",
            "return": {
                "description": ""
            },
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 76975,
            "description": "Override the default event firing from Ember.Evented to\nalso call methods with the given name.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "trigger",
            "params": [
                {
                    "name": "name",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 76988,
            "description": "Description",
            "itemtype": "method",
            "name": "triggerLater",
            "return": {
                "description": ""
            },
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 77006,
            "description": "Description",
            "itemtype": "method",
            "name": "willDestroy",
            "return": {
                "description": ""
            },
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 77018,
            "description": "Description",
            "itemtype": "method",
            "name": "willMergeMixin",
            "params": [
                {
                    "name": "props",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 77030,
            "description": "Alias DS.Model's `create` method to `_create`. This allows us to create DS.Model\ninstances from within the store, but if end users accidentally call `create()`\n(instead of `createRecord()`), we can raise an error.",
            "itemtype": "method",
            "name": "_create",
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 77041,
            "description": "Override the class' `create()` method to raise an error. This\nprevents end users from inadvertently calling `create()` instead\nof `createRecord()`. The store is still able to create instances\nby calling the `_create()` method. To create an instance of a\n`DS.Model` use [store.createRecord](DS.Store.html#method_createRecord).",
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "method",
            "name": "create",
            "return": {
                "description": ""
            },
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 77283,
            "description": "Description",
            "itemtype": "method",
            "name": "propertyWasReset",
            "params": [
                {
                    "name": "record",
                    "description": ""
                },
                {
                    "name": "name",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.RootState",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 77301,
            "description": "Description",
            "itemtype": "method",
            "name": "willCommit",
            "params": [
                {
                    "name": "record",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.RootState",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 77311,
            "description": "Description",
            "itemtype": "method",
            "name": "reloadRecord",
            "params": [
                {
                    "name": "record",
                    "description": ""
                },
                {
                    "name": "resolve",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.RootState",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 77322,
            "description": "Description",
            "itemtype": "method",
            "name": "rolledBack",
            "params": [
                {
                    "name": "record",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.RootState",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 77332,
            "description": "Description",
            "itemtype": "method",
            "name": "becameInvalid",
            "params": [
                {
                    "name": "record",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.RootState",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 77342,
            "description": "Description",
            "itemtype": "method",
            "name": "rollback",
            "params": [
                {
                    "name": "record",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.RootState",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 77365,
            "description": "Description",
            "itemtype": "method",
            "name": "unloadRecord",
            "params": [
                {
                    "name": "record",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.RootState",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 77378,
            "description": "Description",
            "itemtype": "method",
            "name": "didCommit",
            "params": [
                {
                    "name": "record",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.RootState",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 77391,
            "description": "Description",
            "itemtype": "method",
            "name": "becameInvalid",
            "params": [
                {
                    "name": "record",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.RootState",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 77402,
            "description": "Description",
            "itemtype": "method",
            "name": "becameError",
            "params": [
                {
                    "name": "record",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.RootState",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 77421,
            "description": "Description",
            "itemtype": "method",
            "name": "deleteRecord",
            "params": [
                {
                    "name": "record",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.RootState",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 77432,
            "description": "Description",
            "itemtype": "method",
            "name": "didSetProperty",
            "params": [
                {
                    "name": "record",
                    "description": ""
                },
                {
                    "name": "context",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.RootState",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 77447,
            "description": "Description",
            "itemtype": "method",
            "name": "willCommit",
            "params": [
                {
                    "name": "record",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.RootState",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 77458,
            "description": "Description",
            "itemtype": "method",
            "name": "rolledBack",
            "params": [
                {
                    "name": "record",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.RootState",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 77468,
            "description": "Description",
            "itemtype": "method",
            "name": "becameValid",
            "params": [
                {
                    "name": "record",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.RootState",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 77478,
            "description": "Description",
            "itemtype": "method",
            "name": "invokeLifecycleCallbacks",
            "params": [
                {
                    "name": "record",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.RootState",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 77488,
            "description": "Description",
            "itemtype": "method",
            "name": "exit",
            "params": [
                {
                    "name": "record",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.RootState",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 77504,
            "description": "Description",
            "itemtype": "method",
            "name": "deepClone",
            "params": [
                {
                    "name": "object",
                    "description": ""
                }
            ],
            "return": {
                "description": "clone"
            },
            "class": "DS.RootState",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 77525,
            "description": "Description",
            "itemtype": "method",
            "name": "mixin",
            "params": [
                {
                    "name": "original",
                    "description": ""
                },
                {
                    "name": "hash",
                    "description": ""
                }
            ],
            "return": {
                "description": "original"
            },
            "class": "DS.RootState",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 77540,
            "description": "Description",
            "itemtype": "method",
            "name": "dirtyState",
            "params": [
                {
                    "name": "options",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "DS.RootState",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 77557,
            "description": "Description",
            "itemtype": "method",
            "name": "rolledBack",
            "params": [
                {
                    "name": "record",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.RootState",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 77571,
            "description": "Description",
            "itemtype": "method",
            "name": "deleteRecord",
            "params": [
                {
                    "name": "record",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.RootState",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 77582,
            "description": "Description",
            "itemtype": "method",
            "name": "rollback",
            "params": [
                {
                    "name": "record",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.RootState",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 77595,
            "description": "Description",
            "itemtype": "method",
            "name": "assertAgainstUnloadRecord",
            "params": [
                {
                    "name": "record",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.RootState",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 77607,
            "description": "Description",
            "itemtype": "method",
            "name": "deleteRecord",
            "params": [
                {
                    "name": "record",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.RootState",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 77636,
            "description": "Description",
            "itemtype": "method",
            "name": "unloadRecord",
            "params": [
                {
                    "name": "record",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.RootState",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 77663,
            "description": "Description",
            "itemtype": "method",
            "name": "loadingData",
            "params": [
                {
                    "name": "record",
                    "description": ""
                },
                {
                    "name": "promise",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.RootState",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 77675,
            "description": "Description",
            "itemtype": "method",
            "name": "loadedData",
            "params": [
                {
                    "name": "record",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.RootState",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 77686,
            "description": "Description",
            "itemtype": "method",
            "name": "pushedData",
            "params": [
                {
                    "name": "record",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.RootState",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 77708,
            "description": "Description",
            "itemtype": "method",
            "name": "exit",
            "params": [
                {
                    "name": "record",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.RootState",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 77719,
            "description": "Description",
            "itemtype": "method",
            "name": "pushedData",
            "params": [
                {
                    "name": "record",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.RootState",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 77731,
            "description": "Description",
            "itemtype": "method",
            "name": "becameError",
            "params": [
                {
                    "name": "record",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.RootState",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 77741,
            "description": "Description",
            "itemtype": "method",
            "name": "notFound",
            "params": [
                {
                    "name": "record",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.RootState",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 77770,
            "description": "Description",
            "itemtype": "method",
            "name": "setup",
            "params": [
                {
                    "name": "record",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.RootState",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 77797,
            "description": "Description",
            "itemtype": "method",
            "name": "becomeDirty",
            "params": [
                {
                    "name": "record",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.RootState",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 77807,
            "description": "Description",
            "itemtype": "method",
            "name": "willCommit",
            "params": [
                {
                    "name": "record",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.RootState",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 77817,
            "description": "Description",
            "itemtype": "method",
            "name": "reloadRecord",
            "params": [
                {
                    "name": "record",
                    "description": ""
                },
                {
                    "name": "resolve",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.RootState",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 77828,
            "description": "Description",
            "itemtype": "method",
            "name": "deleteRecord",
            "params": [
                {
                    "name": "record",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.RootState",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 77839,
            "description": "Description",
            "itemtype": "method",
            "name": "unloadRecord",
            "params": [
                {
                    "name": "record",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.RootState",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 77852,
            "description": "Description",
            "itemtype": "method",
            "name": "didCommit",
            "params": [
                {
                    "name": "record",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.RootState",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 77890,
            "description": "Description",
            "itemtype": "method",
            "name": "setup",
            "params": [
                {
                    "name": "record",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.RootState",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 77909,
            "description": "Description",
            "itemtype": "method",
            "name": "willCommit",
            "params": [
                {
                    "name": "record",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.RootState",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 77919,
            "description": "Description",
            "itemtype": "method",
            "name": "rollback",
            "params": [
                {
                    "name": "record",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.RootState",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 77932,
            "description": "Description",
            "itemtype": "method",
            "name": "rolledBack",
            "params": [
                {
                    "name": "record",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.RootState",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 77957,
            "description": "Description",
            "itemtype": "method",
            "name": "didCommit",
            "params": [
                {
                    "name": "record",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.RootState",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 77969,
            "description": "Description",
            "itemtype": "method",
            "name": "becameError",
            "params": [
                {
                    "name": "record",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.RootState",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 77988,
            "description": "Description",
            "itemtype": "method",
            "name": "setup",
            "params": [
                {
                    "name": "record",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.RootState",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 77999,
            "description": "Description",
            "itemtype": "method",
            "name": "invokeLifecycleCallbacks",
            "params": [
                {
                    "name": "record",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.RootState",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 78016,
            "description": "Description",
            "itemtype": "method",
            "name": "invokeLifecycleCallbacks",
            "params": [
                {
                    "name": "record",
                    "description": ""
                },
                {
                    "name": "dirtyType",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.RootState",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 78034,
            "description": "Description",
            "itemtype": "method",
            "name": "wireState",
            "params": [
                {
                    "name": "object",
                    "description": ""
                },
                {
                    "name": "parent",
                    "description": ""
                },
                {
                    "name": "name",
                    "description": ""
                }
            ],
            "return": {
                "description": "object"
            },
            "class": "DS.RootState",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 78131,
            "description": "Description",
            "itemtype": "method",
            "name": "promiseObject",
            "params": [
                {
                    "name": "promise",
                    "description": ""
                },
                {
                    "name": "label",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "DS.PromiseObject",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 78144,
            "description": "Description",
            "itemtype": "method",
            "name": "promiseArray",
            "params": [
                {
                    "name": "promise",
                    "description": ""
                },
                {
                    "name": "label",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "DS.PromiseObject",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 78184,
            "description": "Description",
            "itemtype": "method",
            "name": "init",
            "return": {
                "description": ""
            },
            "class": "DS.RecordArrayManager",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 78191,
            "description": "Description",
            "itemtype": "method",
            "name": "defaultValue",
            "return": {
                "description": "ArrayExpression"
            },
            "class": "DS.RecordArrayManager",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 78203,
            "description": "Description",
            "itemtype": "method",
            "name": "recordDidChange",
            "params": [
                {
                    "name": "record",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.RecordArrayManager",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 78215,
            "description": "Description",
            "itemtype": "method",
            "name": "recordArraysForRecord",
            "params": [
                {
                    "name": "record",
                    "description": ""
                }
            ],
            "return": {
                "description": "MemberExpression"
            },
            "class": "DS.RecordArrayManager",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 78226,
            "description": "This method is invoked whenever data is loaded into the store by the\nadapter or updated by the adapter, or when a record has changed.\nIt updates all record arrays that a record belongs to.\nTo avoid thrashing, it only runs at most once per run loop.",
            "itemtype": "method",
            "name": "updateRecordArrays",
            "return": {
                "description": ""
            },
            "class": "DS.RecordArrayManager",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 78279,
            "description": "Update an individual filter.",
            "itemtype": "method",
            "name": "updateRecordArray",
            "params": [
                {
                    "name": "array",
                    "description": ""
                },
                {
                    "name": "filter",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "Class"
                },
                {
                    "name": "record",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.RecordArrayManager",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 78310,
            "description": "This method is invoked if the `filterFunction` property is\nchanged on a `DS.FilteredRecordArray`.\nIt essentially re-runs the filter from scratch. This same\nmethod is invoked when the filter is created in th first place.",
            "itemtype": "method",
            "name": "updateFilter",
            "params": [
                {
                    "name": "array",
                    "description": ""
                },
                {
                    "name": "type",
                    "description": ""
                },
                {
                    "name": "filter",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.RecordArrayManager",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 78334,
            "description": "Create a `DS.ManyArray` for a type and list of record references, and index\nthe `ManyArray` under each reference. This allows us to efficiently remove\nrecords from `ManyArray`s when they are deleted.",
            "itemtype": "method",
            "name": "createManyArray",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "Class"
                },
                {
                    "name": "records",
                    "description": ""
                }
            ],
            "return": {
                "description": "manyArray"
            },
            "class": "DS.RecordArrayManager",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 78358,
            "description": "Create a `DS.RecordArray` for a type and register it for updates.",
            "itemtype": "method",
            "name": "createRecordArray",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "Class"
                }
            ],
            "return": {
                "description": "array"
            },
            "class": "DS.RecordArrayManager",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 78377,
            "description": "Create a `DS.FilteredRecordArray` for a type and register it for updates.",
            "itemtype": "method",
            "name": "createFilteredRecordArray",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "Class"
                },
                {
                    "name": "filter",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "query",
                    "description": "(optional",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "array"
            },
            "class": "DS.RecordArrayManager",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 78400,
            "description": "Create a `DS.AdapterPopulatedRecordArray` for a type with given query.",
            "itemtype": "method",
            "name": "createAdapterPopulatedRecordArray",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "Class"
                },
                {
                    "name": "query",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "array"
            },
            "class": "DS.RecordArrayManager",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 78421,
            "description": "Register a RecordArray for a given type to be backed by\na filter function. This will cause the array to update\nautomatically when records of that type change attribute\nvalues or states.",
            "itemtype": "method",
            "name": "registerFilteredRecordArray",
            "params": [
                {
                    "name": "array",
                    "description": ""
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "Class"
                },
                {
                    "name": "filter",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.RecordArrayManager",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 78444,
            "description": "Description",
            "itemtype": "method",
            "name": "registerWaitingRecordArray",
            "params": [
                {
                    "name": "record",
                    "description": ""
                },
                {
                    "name": "array",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.RecordArrayManager",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 78457,
            "description": "Description",
            "itemtype": "method",
            "name": "willDestroy",
            "return": {
                "description": ""
            },
            "class": "DS.RecordArrayManager",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 78470,
            "description": "Description",
            "itemtype": "method",
            "name": "values",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                }
            ],
            "return": {
                "description": "result"
            },
            "class": "DS.RecordArrayManager",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 78487,
            "description": "Description",
            "itemtype": "method",
            "name": "destroy",
            "params": [
                {
                    "name": "entry",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.RecordArrayManager",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 78497,
            "description": "Description",
            "itemtype": "method",
            "name": "flatten",
            "params": [
                {
                    "name": "list",
                    "description": ""
                }
            ],
            "return": {
                "description": "result"
            },
            "class": "DS.RecordArrayManager",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 78543,
            "description": "Description",
            "itemtype": "method",
            "name": "cloneNull",
            "params": [
                {
                    "name": "source",
                    "description": ""
                }
            ],
            "return": {
                "description": "clone"
            },
            "class": "DS.RecordArrayManager",
            "module": "ember-data"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 78570,
            "description": "Description",
            "itemtype": "method",
            "name": "replace",
            "return": {
                "description": ""
            },
            "class": "DS.AdapterPopulatedRecordArray",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 78580,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "load",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.AdapterPopulatedRecordArray",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 78630,
            "description": "The filterFunction is a function used to test records from the store to\ndetermine if they should be part of the record array.\n\nExample\n\n```javascript\nvar allPeople = store.all('person');\nallPeople.mapBy('name'); // [\"Tom Dale\", \"Yehuda Katz\", \"Trek Glowacki\"]\n\nvar people = store.filter('person', function(person) {\n  if (person.get('name').match(/Katz$/)) { return true; }\n});\npeople.mapBy('name'); // [\"Yehuda Katz\"]\n\nvar notKatzFilter = function(person) {\n  return !person.get('name').match(/Katz$/);\n};\npeople.set('filterFunction', notKatzFilter);\npeople.mapBy('name'); // [\"Tom Dale\", \"Trek Glowacki\"]\n```",
            "itemtype": "method",
            "name": "filterFunction",
            "params": [
                {
                    "name": "record",
                    "description": "",
                    "type": "DS.Model"
                }
            ],
            "return": {
                "description": "`true` if the record should be in the array",
                "type": "Boolean"
            },
            "class": "DS.FilteredRecordArray",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 78659,
            "description": "Description",
            "itemtype": "method",
            "name": "replace",
            "return": {
                "description": ""
            },
            "class": "DS.FilteredRecordArray",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 78669,
            "itemtype": "method",
            "name": "updateFilter",
            "access": "private",
            "tagname": "",
            "class": "DS.FilteredRecordArray",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 78732,
            "description": "Description",
            "itemtype": "method",
            "name": "init",
            "return": {
                "description": ""
            },
            "class": "DS.ManyArray",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 78741,
            "description": "The property name of the relationship",
            "itemtype": "property",
            "name": "name",
            "type": "String",
            "access": "private",
            "tagname": "",
            "class": "DS.ManyArray",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 78749,
            "description": "The record to which this relationship belongs.",
            "itemtype": "property",
            "name": "owner",
            "type": "DS.Model",
            "access": "private",
            "tagname": "",
            "class": "DS.ManyArray",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 78757,
            "description": "`true` if the relationship is polymorphic, `false` otherwise.",
            "itemtype": "property",
            "name": "isPolymorphic",
            "type": "Boolean",
            "access": "private",
            "tagname": "",
            "class": "DS.ManyArray",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 78769,
            "description": "The relationship which manages this array.",
            "itemtype": "property",
            "name": "owner",
            "type": "DS.Model",
            "access": "private",
            "tagname": "",
            "class": "DS.ManyArray",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 78779,
            "description": "Used for async `hasMany` arrays\nto keep track of when they will resolve.",
            "itemtype": "property",
            "name": "promise",
            "type": "Ember.RSVP.Promise",
            "access": "private",
            "tagname": "",
            "class": "DS.ManyArray",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 78788,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "loadingRecordsCount",
            "params": [
                {
                    "name": "count",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.ManyArray",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 78798,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "loadedRecord",
            "return": {
                "description": ""
            },
            "class": "DS.ManyArray",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 78811,
            "description": "Description",
            "itemtype": "method",
            "name": "replaceContent",
            "params": [
                {
                    "name": "idx",
                    "description": ""
                },
                {
                    "name": "amt",
                    "description": ""
                },
                {
                    "name": "objects",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.ManyArray",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 78830,
            "description": "Create a child record within the owner",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "createRecord",
            "params": [
                {
                    "name": "hash",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "record"
            },
            "class": "DS.ManyArray",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 78876,
            "description": "The model type contained by this record array.",
            "itemtype": "property",
            "name": "type",
            "type": "DS.Model",
            "class": "DS.RecordArray",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 78884,
            "description": "The array of client ids backing the record array. When a\nrecord is requested from the record array, the record\nfor the client id at the same index is materialized, if\nnecessary, by the store.",
            "itemtype": "property",
            "name": "content",
            "access": "private",
            "tagname": "",
            "type": "Ember.Array",
            "class": "DS.RecordArray",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 78896,
            "description": "The flag to signal a `RecordArray` is currently loading data.\n\nExample\n\n```javascript\nvar people = store.all('person');\npeople.get('isLoaded'); // true\n```",
            "itemtype": "property",
            "name": "isLoaded",
            "type": "Boolean",
            "class": "DS.RecordArray",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 78910,
            "description": "The flag to signal a `RecordArray` is currently loading data.\n\nExample\n\n```javascript\nvar people = store.all('person');\npeople.get('isUpdating'); // false\npeople.update();\npeople.get('isUpdating'); // true\n```",
            "itemtype": "property",
            "name": "isUpdating",
            "type": "Boolean",
            "class": "DS.RecordArray",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 78927,
            "description": "The store that created this record array.",
            "itemtype": "property",
            "name": "store",
            "access": "private",
            "tagname": "",
            "type": "DS.Store",
            "class": "DS.RecordArray",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 78936,
            "description": "Retrieves an object from the content by index.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "objectAtContent",
            "params": [
                {
                    "name": "index",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "DS.RecordArray",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 78949,
            "description": "Used to get the latest version of all of the records in this array\nfrom the adapter.\nExample\n```javascript\nvar people = store.all('person');\npeople.get('isUpdating'); // false\npeople.update();\npeople.get('isUpdating'); // true\n```",
            "itemtype": "method",
            "name": "update",
            "return": {
                "description": "CallExpression"
            },
            "class": "DS.RecordArray",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 78971,
            "description": "Adds a record to the `RecordArray` without duplicates",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "addRecord",
            "params": [
                {
                    "name": "record",
                    "description": ""
                },
                {
                    "name": "idx",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.RecordArray",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 78990,
            "description": "Adds a record to the `RecordArray`, but allows duplicates",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "pushRecord",
            "params": [
                {
                    "name": "record",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.RecordArray",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 79002,
            "description": "Removes a record to the `RecordArray`.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "removeRecord",
            "params": [
                {
                    "name": "record",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.RecordArray",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 79013,
            "description": "Saves all of the records in the `RecordArray`.\nExample\n```javascript\nvar messages = store.all('message');\nmessages.forEach(function(message) {\nmessage.set('hasBeenSeen', true);\n});\nmessages.save();\n```",
            "itemtype": "method",
            "name": "save",
            "return": {
                "description": "CallExpression"
            },
            "class": "DS.RecordArray",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 79047,
            "description": "Description",
            "itemtype": "method",
            "name": "willDestroy",
            "return": {
                "description": ""
            },
            "class": "DS.RecordArray",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 79064,
            "description": "Description",
            "itemtype": "method",
            "name": "typeForRelationshipMeta",
            "params": [
                {
                    "name": "store",
                    "description": ""
                },
                {
                    "name": "meta",
                    "description": ""
                }
            ],
            "return": {
                "description": "type"
            },
            "class": "DS.RecordArray",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 79088,
            "description": "Description",
            "itemtype": "method",
            "name": "relationshipFromMeta",
            "params": [
                {
                    "name": "store",
                    "description": ""
                },
                {
                    "name": "meta",
                    "description": ""
                }
            ],
            "return": {
                "description": "ObjectExpression"
            },
            "class": "DS.RecordArray",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 79130,
            "description": "`DS.belongsTo` is used to define One-To-One and One-To-Many\nrelationships on a [DS.Model](/api/data/classes/DS.Model.html).\n`DS.belongsTo` takes an optional hash as a second parameter, currently\nsupported options are:\n- `async`: A boolean value used to explicitly declare this to be an async relationship.\n- `inverse`: A string used to identify the inverse property on a\nrelated model in a One-To-Many relationship. See [Explicit Inverses](#toc_explicit-inverses)\n#### One-To-One\nTo declare a one-to-one relationship between two models, use\n`DS.belongsTo`:\n```javascript\nApp.User = DS.Model.extend({\nprofile: DS.belongsTo('profile')\n});\nApp.Profile = DS.Model.extend({\nuser: DS.belongsTo('user')\n});\n```\n#### One-To-Many\nTo declare a one-to-many relationship between two models, use\n`DS.belongsTo` in combination with `DS.hasMany`, like this:\n```javascript\nApp.Post = DS.Model.extend({\ncomments: DS.hasMany('comment')\n});\nApp.Comment = DS.Model.extend({\npost: DS.belongsTo('post')\n});\n```",
            "itemtype": "method",
            "name": "belongsTo",
            "params": [
                {
                    "name": "type",
                    "description": ""
                },
                {
                    "name": "options",
                    "description": "a hash of options",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "DS",
            "module": "ember-data"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 79205,
            "description": "Description",
            "itemtype": "method",
            "name": "notifyBelongsToAdded",
            "params": [
                {
                    "name": "key",
                    "description": ""
                },
                {
                    "name": "relationship",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 79216,
            "description": "Description",
            "itemtype": "method",
            "name": "notifyBelongsToRemoved",
            "params": [
                {
                    "name": "key",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 79254,
            "description": "This Ember.js hook allows an object to be notified when a property\nis defined.\nIn this case, we use it to be notified when an Ember Data user defines a\nbelongs-to relationship. In that case, we need to set up observers for\neach one, allowing us to track relationship changes and automatically\nreflect changes in the inverse has-many array.\nThis hook passes the class being set up, as well as the key and value\nbeing defined. So, for example, when the user does this:\n```javascript\nDS.Model.extend({\nparent: DS.belongsTo('user')\n});\n```\nThis hook would be called with \"parent\" as the key and the computed\nproperty returned by `DS.belongsTo` as the value.",
            "itemtype": "method",
            "name": "didDefineProperty",
            "params": [
                {
                    "name": "proto",
                    "description": ""
                },
                {
                    "name": "key",
                    "description": ""
                },
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 79308,
            "description": "For a given relationship name, returns the model type of the relationship.\nFor example, if you define a model like this:\n```javascript\nApp.Post = DS.Model.extend({\ncomments: DS.hasMany('comment')\n});\n```\nCalling `App.Post.typeForRelationship('comments')` will return `App.Comment`.",
            "static": 1,
            "itemtype": "method",
            "name": "typeForRelationship",
            "params": [
                {
                    "name": "name",
                    "description": "the name of the relationship",
                    "type": "String"
                }
            ],
            "return": {
                "description": "LogicalExpression"
            },
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 79327,
            "description": "Description",
            "itemtype": "method",
            "name": "inverseFor",
            "params": [
                {
                    "name": "name",
                    "description": ""
                }
            ],
            "return": {
                "description": "ObjectExpression"
            },
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 79365,
            "description": "Description",
            "itemtype": "method",
            "name": "findPossibleInverses",
            "params": [
                {
                    "name": "type",
                    "description": ""
                },
                {
                    "name": "inverseType",
                    "description": ""
                },
                {
                    "name": "possibleRelationships",
                    "description": ""
                }
            ],
            "return": {
                "description": "possibleRelationships"
            },
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 79398,
            "description": "The model's relationships as a map, keyed on the type of the\nrelationship. The value of each entry is an array containing a descriptor\nfor each relationship with that type, describing the name of the relationship\nas well as the type.\n\nFor example, given the following model definition:\n\n```javascript\nApp.Blog = DS.Model.extend({\n  users: DS.hasMany('user'),\n  owner: DS.belongsTo('user'),\n  posts: DS.hasMany('post')\n});\n```\n\nThis computed property would return a map describing these\nrelationships, like this:\n\n```javascript\nvar relationships = Ember.get(App.Blog, 'relationships');\nrelationships.get(App.User);\n//=> [ { name: 'users', kind: 'hasMany' },\n//     { name: 'owner', kind: 'belongsTo' } ]\nrelationships.get(App.Post);\n//=> [ { name: 'posts', kind: 'hasMany' } ]\n```",
            "itemtype": "property",
            "name": "relationships",
            "static": 1,
            "type": "Ember.Map",
            "readonly": "",
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 79433,
            "description": "Description",
            "itemtype": "method",
            "name": "defaultValue",
            "return": {
                "description": "ArrayExpression"
            },
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 79459,
            "description": "A hash containing lists of the model's relationships, grouped\nby the relationship kind. For example, given a model with this\ndefinition:\n\n```javascript\nApp.Blog = DS.Model.extend({\n  users: DS.hasMany('user'),\n  owner: DS.belongsTo('user'),\n\n  posts: DS.hasMany('post')\n});\n```\n\nThis property would contain the following:\n\n```javascript\nvar relationshipNames = Ember.get(App.Blog, 'relationshipNames');\nrelationshipNames.hasMany;\n//=> ['users', 'posts']\nrelationshipNames.belongsTo;\n//=> ['owner']\n```",
            "itemtype": "property",
            "name": "relationshipNames",
            "static": 1,
            "type": "Object",
            "readonly": "",
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 79503,
            "description": "An array of types directly related to a model. Each type will be\nincluded once, regardless of the number of relationships it has with\nthe model.\n\nFor example, given a model with this definition:\n\n```javascript\nApp.Blog = DS.Model.extend({\n  users: DS.hasMany('user'),\n  owner: DS.belongsTo('user'),\n\n  posts: DS.hasMany('post')\n});\n```\n\nThis property would contain the following:\n\n```javascript\nvar relatedTypes = Ember.get(App.Blog, 'relatedTypes');\n//=> [ App.User, App.Post ]\n```",
            "itemtype": "property",
            "name": "relatedTypes",
            "static": 1,
            "type": "Ember.Array",
            "readonly": "",
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 79555,
            "description": "A map whose keys are the relationships of a model and whose values are\nrelationship descriptors.\n\nFor example, given a model with this\ndefinition:\n\n```javascript\nApp.Blog = DS.Model.extend({\n  users: DS.hasMany('user'),\n  owner: DS.belongsTo('user'),\n\n  posts: DS.hasMany('post')\n});\n```\n\nThis property would contain the following:\n\n```javascript\nvar relationshipsByName = Ember.get(App.Blog, 'relationshipsByName');\nrelationshipsByName.get('users');\n//=> { key: 'users', kind: 'hasMany', type: App.User }\nrelationshipsByName.get('owner');\n//=> { key: 'owner', kind: 'belongsTo', type: App.User }\n```",
            "itemtype": "property",
            "name": "relationshipsByName",
            "static": 1,
            "type": "Ember.Map",
            "readonly": "",
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 79601,
            "description": "A map whose keys are the fields of the model and whose values are strings\ndescribing the kind of the field. A model's fields are the union of all of its\nattributes and relationships.\n\nFor example:\n\n```javascript\n\nApp.Blog = DS.Model.extend({\n  users: DS.hasMany('user'),\n  owner: DS.belongsTo('user'),\n\n  posts: DS.hasMany('post'),\n\n  title: DS.attr('string')\n});\n\nvar fields = Ember.get(App.Blog, 'fields');\nfields.forEach(function(field, kind) {\n  console.log(field, kind);\n});\n\n// prints:\n// users, hasMany\n// owner, belongsTo\n// posts, hasMany\n// title, attribute\n```",
            "itemtype": "property",
            "name": "fields",
            "static": 1,
            "type": "Ember.Map",
            "readonly": "",
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 79650,
            "description": "Given a callback, iterates over each of the relationships in the model,\ninvoking the callback with the name of each relationship and its relationship\ndescriptor.",
            "static": 1,
            "itemtype": "method",
            "name": "eachRelationship",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback to invoke",
                    "type": "Function"
                },
                {
                    "name": "binding",
                    "description": "the value to which the callback's `this` should be bound",
                    "type": "Any"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 79666,
            "description": "Given a callback, iterates over each of the types related to a model,\ninvoking the callback with the related type's class. Each type will be\nreturned just once, regardless of how many different relationships it has\nwith a model.",
            "static": 1,
            "itemtype": "method",
            "name": "eachRelatedType",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback to invoke",
                    "type": "Function"
                },
                {
                    "name": "binding",
                    "description": "the value to which the callback's `this` should be bound",
                    "type": "Any"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 79683,
            "description": "Description",
            "itemtype": "method",
            "name": "determineRelationshipType",
            "params": [
                {
                    "name": "knownSide",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 79712,
            "description": "Given a callback, iterates over each of the relationships in the model,\ninvoking the callback with the name of each relationship and its relationship\ndescriptor.",
            "itemtype": "method",
            "name": "eachRelationship",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback to invoke",
                    "type": "Function"
                },
                {
                    "name": "binding",
                    "description": "the value to which the callback's `this` should be bound",
                    "type": "Any"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 79725,
            "description": "Description",
            "itemtype": "method",
            "name": "relationshipFor",
            "params": [
                {
                    "name": "name",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 79735,
            "description": "Description",
            "itemtype": "method",
            "name": "inverseFor",
            "params": [
                {
                    "name": "key",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 79757,
            "description": "`DS.hasMany` is used to define One-To-Many and Many-To-Many\nrelationships on a [DS.Model](/api/data/classes/DS.Model.html).\n`DS.hasMany` takes an optional hash as a second parameter, currently\nsupported options are:\n- `async`: A boolean value used to explicitly declare this to be an async relationship.\n- `inverse`: A string used to identify the inverse property on a related model.\n#### One-To-Many\nTo declare a one-to-many relationship between two models, use\n`DS.belongsTo` in combination with `DS.hasMany`, like this:\n```javascript\nApp.Post = DS.Model.extend({\ncomments: DS.hasMany('comment')\n});\nApp.Comment = DS.Model.extend({\npost: DS.belongsTo('post')\n});\n```\n#### Many-To-Many\nTo declare a many-to-many relationship between two models, use\n`DS.hasMany`:\n```javascript\nApp.Post = DS.Model.extend({\ntags: DS.hasMany('tag')\n});\nApp.Tag = DS.Model.extend({\nposts: DS.hasMany('post')\n});\n```\n#### Explicit Inverses\nEmber Data will do its best to discover which relationships map to\none another. In the one-to-many code above, for example, Ember Data\ncan figure out that changing the `comments` relationship should update\nthe `post` relationship on the inverse because post is the only\nrelationship to that model.\nHowever, sometimes you may have multiple `belongsTo`/`hasManys` for the\nsame type. You can specify which property on the related model is\nthe inverse using `DS.hasMany`'s `inverse` option:\n```javascript\nvar belongsTo = DS.belongsTo,\nhasMany = DS.hasMany;\nApp.Comment = DS.Model.extend({\nonePost: belongsTo('post'),\ntwoPost: belongsTo('post'),\nredPost: belongsTo('post'),\nbluePost: belongsTo('post')\n});\nApp.Post = DS.Model.extend({\ncomments: hasMany('comment', {\ninverse: 'redPost'\n})\n});\n```\nYou can also specify an inverse on a `belongsTo`, which works how\nyou'd expect.",
            "itemtype": "method",
            "name": "hasMany",
            "params": [
                {
                    "name": "type",
                    "description": ""
                },
                {
                    "name": "options",
                    "description": "a hash of options",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "DS",
            "module": "ember-data"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 79846,
            "description": "Description",
            "itemtype": "method",
            "name": "notifyHasManyAdded",
            "params": [
                {
                    "name": "key",
                    "description": ""
                },
                {
                    "name": "record",
                    "description": ""
                },
                {
                    "name": "idx",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS",
            "module": "ember-data"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 79864,
            "description": "Description",
            "itemtype": "method",
            "name": "notifyHasManyRemoved",
            "params": [
                {
                    "name": "key",
                    "description": ""
                },
                {
                    "name": "record",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS",
            "module": "ember-data"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 79888,
            "description": "Description",
            "itemtype": "method",
            "name": "Relationship",
            "params": [
                {
                    "name": "store",
                    "description": ""
                },
                {
                    "name": "record",
                    "description": ""
                },
                {
                    "name": "inverseKey",
                    "description": ""
                },
                {
                    "name": "relationshipMeta",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS",
            "module": "ember-data"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 79914,
            "description": "Description",
            "itemtype": "method",
            "name": "clear",
            "return": {
                "description": ""
            },
            "class": "DS",
            "module": "ember-data"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 79925,
            "description": "Description",
            "itemtype": "method",
            "name": "removeRecords",
            "params": [
                {
                    "name": "records",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS",
            "module": "ember-data"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 79938,
            "description": "Description",
            "itemtype": "method",
            "name": "addRecords",
            "params": [
                {
                    "name": "records",
                    "description": ""
                },
                {
                    "name": "idx",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS",
            "module": "ember-data"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 79956,
            "description": "Description",
            "itemtype": "method",
            "name": "addRecord",
            "params": [
                {
                    "name": "record",
                    "description": ""
                },
                {
                    "name": "idx",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS",
            "module": "ember-data"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 79974,
            "description": "Description",
            "itemtype": "method",
            "name": "removeRecord",
            "params": [
                {
                    "name": "record",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS",
            "module": "ember-data"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 79995,
            "description": "Description",
            "itemtype": "method",
            "name": "updateLink",
            "params": [
                {
                    "name": "link",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS",
            "module": "ember-data"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 80009,
            "description": "Description",
            "itemtype": "method",
            "name": "updateRecordsFromAdapter",
            "params": [
                {
                    "name": "records",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS",
            "module": "ember-data"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 80021,
            "description": "Description",
            "itemtype": "method",
            "name": "ManyRelationship",
            "params": [
                {
                    "name": "store",
                    "description": ""
                },
                {
                    "name": "record",
                    "description": ""
                },
                {
                    "name": "inverseKey",
                    "description": ""
                },
                {
                    "name": "relationshipMeta",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS",
            "module": "ember-data"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 80043,
            "description": "Description",
            "itemtype": "method",
            "name": "destroy",
            "return": {
                "description": ""
            },
            "class": "DS",
            "module": "ember-data"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 80052,
            "description": "Description",
            "itemtype": "method",
            "name": "notifyRecordRelationshipAdded",
            "params": [
                {
                    "name": "record",
                    "description": ""
                },
                {
                    "name": "idx",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS",
            "module": "ember-data"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 80064,
            "description": "Description",
            "itemtype": "method",
            "name": "notifyRecordRelationshipRemoved",
            "params": [
                {
                    "name": "record",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS",
            "module": "ember-data"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 80074,
            "description": "Description",
            "itemtype": "method",
            "name": "computeChanges",
            "params": [
                {
                    "name": "records",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS",
            "module": "ember-data"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 80103,
            "description": "Description",
            "itemtype": "method",
            "name": "getRecords",
            "return": {
                "description": ""
            },
            "class": "DS",
            "module": "ember-data"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 80138,
            "description": "Description",
            "itemtype": "method",
            "name": "BelongsToRelationship",
            "params": [
                {
                    "name": "store",
                    "description": ""
                },
                {
                    "name": "record",
                    "description": ""
                },
                {
                    "name": "inverseKey",
                    "description": ""
                },
                {
                    "name": "relationshipMeta",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS",
            "module": "ember-data"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 80160,
            "description": "Description",
            "itemtype": "method",
            "name": "setRecord",
            "params": [
                {
                    "name": "newRecord",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS",
            "module": "ember-data"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 80175,
            "description": "Description",
            "itemtype": "method",
            "name": "addRecord",
            "params": [
                {
                    "name": "newRecord",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS",
            "module": "ember-data"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 80194,
            "description": "Description",
            "itemtype": "method",
            "name": "notifyRecordRelationshipAdded",
            "params": [
                {
                    "name": "newRecord",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS",
            "module": "ember-data"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 80204,
            "description": "Description",
            "itemtype": "method",
            "name": "notifyRecordRelationshipRemoved",
            "params": [
                {
                    "name": "record",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS",
            "module": "ember-data"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 80215,
            "description": "Description",
            "itemtype": "method",
            "name": "removeRecord",
            "params": [
                {
                    "name": "record",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS",
            "module": "ember-data"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 80227,
            "description": "Description",
            "itemtype": "method",
            "name": "currentOtherSideFor",
            "return": {
                "description": "MemberExpression"
            },
            "class": "DS",
            "module": "ember-data"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 80236,
            "description": "Description",
            "itemtype": "method",
            "name": "getRecord",
            "return": {
                "description": ""
            },
            "class": "DS",
            "module": "ember-data"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 80267,
            "description": "Description",
            "itemtype": "method",
            "name": "setForArray",
            "params": [
                {
                    "name": "array",
                    "description": ""
                }
            ],
            "return": {
                "description": "set"
            },
            "class": "DS",
            "module": "ember-data"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 80285,
            "description": "Description",
            "itemtype": "method",
            "name": "createRelationshipFor",
            "params": [
                {
                    "name": "record",
                    "description": ""
                },
                {
                    "name": "relationshipMeta",
                    "description": ""
                },
                {
                    "name": "store",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS",
            "module": "ember-data"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 80368,
            "description": "Description",
            "itemtype": "method",
            "name": "coerceId",
            "params": [
                {
                    "name": "id",
                    "description": ""
                }
            ],
            "return": {
                "description": "ConditionalExpression"
            },
            "class": "DS",
            "module": "ember-data"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 80459,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "init",
            "return": {
                "description": ""
            },
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 80476,
            "description": "The adapter to use to communicate to a backend server or other persistence layer.\n\nThis can be specified as an instance, class, or string.\n\nIf you want to specify `App.CustomAdapter` as a string, do:\n\n```js\nadapter: 'custom'\n```",
            "itemtype": "property",
            "name": "adapter",
            "default": "DS.RESTAdapter",
            "type": "{DS.Adapter|String}",
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 80493,
            "description": "Returns a JSON representation of the record using a custom\ntype-specific serializer, if one exists.\nThe available options are:\n`includeId`: `true` if the record's ID should be included in\nthe JSON representation",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "serialize",
            "params": [
                {
                    "name": "record",
                    "description": ""
                },
                {
                    "name": "options",
                    "description": "an options hash",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 80509,
            "description": "This property returns the adapter, after resolving a possible\nstring key.\n\nIf the supplied `adapter` was a class, or a String property\npath resolved to a class, this property will instantiate the\nclass.\n\nThis property is cacheable, so the same instance of a specified\nadapter class should be used for the lifetime of the store.",
            "itemtype": "property",
            "name": "defaultAdapter",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "DS.Adapter"
            },
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 80546,
            "description": "Create a new record in the current store. The properties passed\nto this method are set on the newly created record.\nTo create a new instance of `App.Post`:\n```js\nstore.createRecord('post', {\ntitle: \"Rails is omakase\"\n});\n```\nnewly created record.",
            "itemtype": "method",
            "name": "createRecord",
            "params": [
                {
                    "name": "typeName",
                    "description": ""
                },
                {
                    "name": "inputProperties",
                    "description": ""
                }
            ],
            "return": {
                "description": "record"
            },
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 80589,
            "description": "If possible, this method asks the adapter to generate an ID for\na newly created record.",
            "itemtype": "method",
            "name": "_generateId",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "if the adapter can generate one, an ID",
                "type": "String"
            },
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 80612,
            "description": "For symmetry, a record can be deleted via the store.\nExample\n```javascript\nvar post = store.createRecord('post', {\ntitle: \"Rails is omakase\"\n});\nstore.deleteRecord(post);\n```",
            "itemtype": "method",
            "name": "deleteRecord",
            "params": [
                {
                    "name": "record",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 80629,
            "description": "For symmetry, a record can be unloaded via the store. Only\nnon-dirty records can be unloaded.\nExample\n```javascript\nstore.find('post', 1).then(function(post) {\nstore.unloadRecord(post);\n});\n```",
            "itemtype": "method",
            "name": "unloadRecord",
            "params": [
                {
                    "name": "record",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 80650,
            "description": "This is the main entry point into finding records. The first parameter to\nthis method is the model's name as a string.\n---\nTo find a record by ID, pass the `id` as the second parameter:\n```javascript\nstore.find('person', 1);\n```\nThe `find` method will always return a **promise** that will be resolved\nwith the record. If the record was already in the store, the promise will\nbe resolved immediately. Otherwise, the store will ask the adapter's `find`\nmethod to find the necessary data.\nThe `find` method will always resolve its promise with the same object for\na given type and `id`.\n---\nYou can optionally `preload` specific attributes and relationships that you know of\nby passing them as the third argument to find.\nFor example, if your Ember route looks like `/posts/1/comments/2` and your API route\nfor the comment also looks like `/posts/1/comments/2` if you want to fetch the comment\nwithout fetching the post you can pass in the post to the `find` call:\n```javascript\nstore.find('comment', 2, {post: 1});\n```\nIf you have access to the post model you can also pass the model itself:\n```javascript\nstore.find('post', 1).then(function (myPostModel) {\nstore.find('comment', 2, {post: myPostModel});\n});\n```\nThis way, your adapter's `find` or `buildURL` method will be able to look up the\nrelationship on the record and construct the nested URL without having to first\nfetch the post.\n---\nTo find all records for a type, call `find` with no additional parameters:\n```javascript\nstore.find('person');\n```\nThis will ask the adapter's `findAll` method to find the records for the\ngiven type, and return a promise that will be resolved once the server\nreturns the values.\n---\nTo find a record by a query, call `find` with a hash as the second\nparameter:\n```javascript\nstore.find('person', { page: 1 });\n```\nThis will ask the adapter's `findQuery` method to find the records for\nthe query, and return a promise that will be resolved once the server\nresponds.",
            "itemtype": "method",
            "name": "find",
            "params": [
                {
                    "name": "type",
                    "description": ""
                },
                {
                    "name": "id",
                    "description": ""
                },
                {
                    "name": "preload",
                    "description": "- optional set of attributes and relationships passed in either as IDs or as actual models",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 80721,
            "description": "This method returns a record for a given type and id combination.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "findById",
            "params": [
                {
                    "name": "typeName",
                    "description": ""
                },
                {
                    "name": "id",
                    "description": ""
                },
                {
                    "name": "preload",
                    "description": "- optional set of attributes and relationships passed in either as IDs or as actual models",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 80755,
            "description": "This method makes a series of requests to the adapter's `find` method\nand returns a promise that resolves once they are all loaded.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "findByIds",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "ids",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 80772,
            "description": "This method is called by `findById` if it discovers that a particular\ntype/id pair hasn't been loaded yet to kick off a request to the\nadapter.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "fetchRecord",
            "params": [
                {
                    "name": "record",
                    "description": ""
                }
            ],
            "return": {
                "description": "promise"
            },
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 80793,
            "description": "Description",
            "itemtype": "method",
            "name": "scheduleFetchMany",
            "params": [
                {
                    "name": "records",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 80803,
            "description": "Description",
            "itemtype": "method",
            "name": "scheduleFetch",
            "params": [
                {
                    "name": "record",
                    "description": ""
                }
            ],
            "return": {
                "description": "promise"
            },
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 80833,
            "description": "Description",
            "itemtype": "method",
            "name": "flushAllPendingFetches",
            "return": {
                "description": ""
            },
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 80857,
            "description": "Description",
            "itemtype": "method",
            "name": "resolveFoundRecords",
            "params": [
                {
                    "name": "records",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 80873,
            "description": "Description",
            "itemtype": "method",
            "name": "makeMissingRecordsRejector",
            "params": [
                {
                    "name": "requestedRecords",
                    "description": ""
                }
            ],
            "return": {
                "description": "FunctionExpression"
            },
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 80886,
            "description": "Description",
            "itemtype": "method",
            "name": "makeRecordsRejector",
            "params": [
                {
                    "name": "records",
                    "description": ""
                }
            ],
            "return": {
                "description": "FunctionExpression"
            },
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 80898,
            "description": "Description",
            "itemtype": "method",
            "name": "rejectRecords",
            "params": [
                {
                    "name": "records",
                    "description": ""
                },
                {
                    "name": "error",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 80939,
            "description": "Get a record by a given type and ID without triggering a fetch.\nThis method will synchronously return the record if it is available in the store,\notherwise it will return `null`. A record is available if it has been fetched earlier, or\npushed manually into the store.\n_Note: This is an synchronous method and does not return a promise._\n```js\nvar post = store.getById('post', 1);\npost.get('id'); // 1\n```",
            "itemtype": "method",
            "name": "getById",
            "params": [
                {
                    "name": "type",
                    "description": ""
                },
                {
                    "name": "id",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 80962,
            "description": "This method is called by the record's `reload` method.\nThis method calls the adapter's `find` method, which returns a promise. When\n*that** promise resolves, `reloadRecord` will resolve the promise returned\nby the record's `reload`.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "reloadRecord",
            "params": [
                {
                    "name": "record",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 80984,
            "description": "Returns true if a record for a given type and ID is already loaded.",
            "itemtype": "method",
            "name": "hasRecordForId",
            "params": [
                {
                    "name": "typeName",
                    "description": ""
                },
                {
                    "name": "inputId",
                    "description": ""
                }
            ],
            "return": {
                "description": "UnaryExpression"
            },
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 80997,
            "description": "Returns id record for a given type and ID. If one isn't already loaded,\nit builds a new record and leaves it in the `empty` state.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "recordForId",
            "params": [
                {
                    "name": "typeName",
                    "description": ""
                },
                {
                    "name": "inputId",
                    "description": ""
                }
            ],
            "return": {
                "description": "record"
            },
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 81019,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "findMany",
            "params": [
                {
                    "name": "records",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 81033,
            "description": "If a relationship was originally populated by the adapter as a link\n(as opposed to a list of IDs), this method is called when the\nrelationship is fetched.\nThe link (which is usually a URL) is passed through unchanged, so the\nadapter can make whatever request it wants.\nThe usual use-case is for the server to register a URL as a link, and\nthen use that URL in the future to make a request for the relationship.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "findHasMany",
            "params": [
                {
                    "name": "owner",
                    "description": ""
                },
                {
                    "name": "link",
                    "description": "",
                    "type": "Any"
                },
                {
                    "name": "type",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 81057,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "findBelongsTo",
            "params": [
                {
                    "name": "owner",
                    "description": ""
                },
                {
                    "name": "link",
                    "description": "",
                    "type": "Any"
                },
                {
                    "name": "relationship",
                    "description": "",
                    "type": "Relationship"
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 81074,
            "description": "This method delegates a query to the adapter. This is the one place where\nadapter-level semantics are exposed to the application.\nExposing queries this way seems preferable to creating an abstract query\nlanguage for all server-side queries, and then require all adapters to\nimplement them.\nThis method returns a promise, which is resolved with a `RecordArray`\nonce the server returns.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "findQuery",
            "params": [
                {
                    "name": "typeName",
                    "description": ""
                },
                {
                    "name": "query",
                    "description": "an opaque query to be used by the adapter",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 81101,
            "description": "This method returns an array of all records adapter can find.\nIt triggers the adapter's `findAll` method to give it an opportunity to populate\nthe array with records of that type.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "findAll",
            "params": [
                {
                    "name": "typeName",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 81116,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "fetchAll",
            "params": [
                {
                    "name": "type",
                    "description": ""
                },
                {
                    "name": "array",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 81135,
            "description": "Description",
            "itemtype": "method",
            "name": "didUpdateAll",
            "params": [
                {
                    "name": "type",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 81146,
            "description": "This method returns a filtered array that contains all of the known records\nfor a given type.\nNote that because it's just a filter, it will have any locally\ncreated records of the type.\nAlso note that multiple calls to `all` for a given type will always\nreturn the same RecordArray.\nExample\n```javascript\nvar localPosts = store.all('post');\n```",
            "itemtype": "method",
            "name": "all",
            "params": [
                {
                    "name": "typeName",
                    "description": ""
                }
            ],
            "return": {
                "description": "array"
            },
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 81175,
            "description": "This method unloads all of the known records for a given type.\n```javascript\nstore.unloadAll('post');\n```",
            "itemtype": "method",
            "name": "unloadAll",
            "params": [
                {
                    "name": "type",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 81199,
            "description": "Takes a type and filter function, and returns a live RecordArray that\nremains up to date as new records are loaded into the store or created\nlocally.\nThe callback function takes a materialized record, and returns true\nif the record should be included in the filter and false if it should\nnot.\nThe filter function is called once on all records for the type when\nit is created, and then once on each newly loaded or created record.\nIf any of a record's properties change, or if it changes state, the\nfilter function will be invoked again to determine whether it should\nstill be in the array.\nOptionally you can pass a query which will be triggered at first. The\nresults returned by the server could then appear in the filter if they\nmatch the filter function.\nExample\n```javascript\nstore.filter('post', {unread: true}, function(post) {\nreturn post.get('unread');\n}).then(function(unreadPosts) {\nunreadPosts.get('length'); // 5\nvar unreadPost = unreadPosts.objectAt(0);\nunreadPost.set('unread', false);\nunreadPosts.get('length'); // 4\n});\n```",
            "itemtype": "method",
            "name": "filter",
            "params": [
                {
                    "name": "type",
                    "description": ""
                },
                {
                    "name": "query",
                    "description": "optional query",
                    "type": "Object"
                },
                {
                    "name": "filter",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 81260,
            "description": "This method returns if a certain record is already loaded\nin the store. Use this function to know beforehand if a find()\nwill result in a request or that it will be a cache hit.\nExample\n```javascript\nstore.recordIsLoaded('post', 1); // false\nstore.find('post', 1).then(function() {\nstore.recordIsLoaded('post', 1); // true\n});\n```",
            "itemtype": "method",
            "name": "recordIsLoaded",
            "params": [
                {
                    "name": "type",
                    "description": ""
                },
                {
                    "name": "id",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "UnaryExpression"
            },
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 81281,
            "description": "This method returns the metadata for a specific type.",
            "itemtype": "method",
            "name": "metadataFor",
            "params": [
                {
                    "name": "type",
                    "description": ""
                }
            ],
            "return": {
                "description": "MemberExpression"
            },
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 81296,
            "description": "If the adapter updates attributes or acknowledges creation\nor deletion, the record will notify the store to update its\nmembership in any filters.\nTo avoid thrashing, this method is invoked only once per\nrun loop per record.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "dataWasUpdated",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "Class"
                },
                {
                    "name": "record",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 81316,
            "description": "This method is called by `record.save`, and gets passed a\nresolver for the promise that `record.save` returns.\nIt schedules saving to happen at the end of the run loop.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "scheduleSave",
            "params": [
                {
                    "name": "record",
                    "description": ""
                },
                {
                    "name": "resolver",
                    "description": "",
                    "type": "Resolver"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 81332,
            "description": "This method is called at the end of the run loop, and\nflushes any records passed into `scheduleSave`",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "flushPendingSave",
            "return": {
                "description": ""
            },
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 81362,
            "description": "This method is called once the promise returned by an\nadapter's `createRecord`, `updateRecord` or `deleteRecord`\nis resolved.\nIf the data provides a server-generated ID, it will\nupdate the record and the store's indexes.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "didSaveRecord",
            "params": [
                {
                    "name": "record",
                    "description": ""
                },
                {
                    "name": "data",
                    "description": "optional data (see above)",
                    "type": "Object"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 81386,
            "description": "This method is called once the promise returned by an\nadapter's `createRecord`, `updateRecord` or `deleteRecord`\nis rejected with a `DS.InvalidError`.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "recordWasInvalid",
            "params": [
                {
                    "name": "record",
                    "description": ""
                },
                {
                    "name": "errors",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 81400,
            "description": "This method is called once the promise returned by an\nadapter's `createRecord`, `updateRecord` or `deleteRecord`\nis rejected (with anything other than a `DS.InvalidError`).",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "recordWasError",
            "params": [
                {
                    "name": "record",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 81413,
            "description": "When an adapter's `createRecord`, `updateRecord` or `deleteRecord`\nresolves with data, this method extracts the ID from the supplied\ndata.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "updateId",
            "params": [
                {
                    "name": "record",
                    "description": ""
                },
                {
                    "name": "data",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 81434,
            "description": "Returns a map of IDs to client IDs for a given type.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "typeMapFor",
            "params": [
                {
                    "name": "type",
                    "description": ""
                }
            ],
            "return": {
                "description": "typeMap"
            },
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 81466,
            "description": "This internal method is used by `push`.",
            "itemtype": "method",
            "name": "_load",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String or subclass of DS.Model"
                },
                {
                    "name": "data",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "partial",
                    "description": "the data should be merged into\n  the existing data, not replace it.",
                    "type": "Boolean"
                }
            ],
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 81486,
            "description": "Returns a model class for a particular key. Used by\nmethods that take a type key (like `find`, `createRecord`,\netc.)",
            "itemtype": "method",
            "name": "modelFor",
            "params": [
                {
                    "name": "key",
                    "description": ""
                }
            ],
            "return": {
                "description": "factory"
            },
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 81515,
            "description": "Push some data for a given type into the store.\nThis method expects normalized data:\nThe ID is a key named `id` (an ID is mandatory)\nThe names of attributes are the ones you used in\nyour model's `DS.attr`s.\nYour relationships must be:\nrepresented as IDs or Arrays of IDs\nrepresented as model instances\nrepresented as URLs, under the `links` key\nFor this model:\n```js\nApp.Person = DS.Model.extend({\nfirstName: DS.attr(),\nlastName: DS.attr(),\nchildren: DS.hasMany('person')\n});\n```\nTo represent the children as IDs:\n```js\n{\nid: 1,\nfirstName: \"Tom\",\nlastName: \"Dale\",\nchildren: [1, 2, 3]\n}\n```\nTo represent the children relationship as a URL:\n```js\n{\nid: 1,\nfirstName: \"Tom\",\nlastName: \"Dale\",\nlinks: {\nchildren: \"/people/1/children\"\n}\n}\n```\nIf you're streaming data or implementing an adapter,\nmake sure that you have converted the incoming data\ninto this form.\nThis method can be used both to push in brand new\nrecords, as well as to update existing records.\nupdated.",
            "itemtype": "method",
            "name": "push",
            "params": [
                {
                    "name": "typeName",
                    "description": ""
                },
                {
                    "name": "data",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "_partial",
                    "description": ""
                }
            ],
            "return": {
                "description": "record"
            },
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 81595,
            "description": "Push some raw data into the store.\nThis method can be used both to push in brand new\nrecords, as well as to update existing records. You\ncan push in more than one type of object at once.\nAll objects should be in the format expected by the\nserializer.\n```js\nApp.ApplicationSerializer = DS.ActiveModelSerializer;\nvar pushData = {\nposts: [\n{id: 1, post_title: \"Great post\", comment_ids: [2]}\n],\ncomments: [\n{id: 2, comment_body: \"Insightful comment\"}\n]\n}\nstore.pushPayload(pushData);\n```\nBy default, the data will be deserialized using a default\nserializer (the application serializer if it exists).\nAlternatively, `pushPayload` will accept a model type which\nwill determine which serializer will process the payload.\nHowever, the serializer itself (processing this data via\n`normalizePayload`) will not know which model it is\ndeserializing.\n```js\nApp.ApplicationSerializer = DS.ActiveModelSerializer;\nApp.PostSerializer = DS.JSONSerializer;\nstore.pushPayload('comment', pushData); // Will use the ApplicationSerializer\nstore.pushPayload('post', pushData); // Will use the PostSerializer\n```",
            "itemtype": "method",
            "name": "pushPayload",
            "params": [
                {
                    "name": "type",
                    "description": "Optionally, a model used to determine which serializer will be used",
                    "type": "String"
                },
                {
                    "name": "inputPayload",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 81646,
            "description": "`normalize` converts a json payload into the normalized form that\n[push](#method_push) expects.\nExample\n```js\nsocket.on('message', function(message) {\nvar modelName = message.model;\nvar data = message.data;\nstore.push(modelName, store.normalize(modelName, data));\n});\n```",
            "itemtype": "method",
            "name": "normalize",
            "params": [
                {
                    "name": "type",
                    "description": ""
                },
                {
                    "name": "payload",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 81668,
            "description": "Update existing records in the store. Unlike [push](#method_push),\nupdate will merge the new data properties with the existing\nproperties. This makes it safe to use with a subset of record\nattributes. This method expects normalized data.\n`update` is useful if your app broadcasts partial updates to\nrecords.\n```js\nApp.Person = DS.Model.extend({\nfirstName: DS.attr('string'),\nlastName: DS.attr('string')\n});\nstore.get('person', 1).then(function(tom) {\ntom.get('firstName'); // Tom\ntom.get('lastName'); // Dale\nvar updateEvent = {id: 1, firstName: \"TomHuda\"};\nstore.update('person', updateEvent);\ntom.get('firstName'); // TomHuda\ntom.get('lastName'); // Dale\n});\n```",
            "itemtype": "method",
            "name": "update",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 81700,
            "description": "If you have an Array of normalized data to push,\nyou can call `pushMany` with the Array, and it will\ncall `push` repeatedly for you.",
            "itemtype": "method",
            "name": "pushMany",
            "params": [
                {
                    "name": "type",
                    "description": ""
                },
                {
                    "name": "datas",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "result"
            },
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 81720,
            "description": "If you have some metadata to set for a type\nyou can call `metaForType`.",
            "itemtype": "method",
            "name": "metaForType",
            "params": [
                {
                    "name": "typeName",
                    "description": ""
                },
                {
                    "name": "metadata",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 81734,
            "description": "Build a brand new record for a given type, ID, and\ninitial data.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "buildRecord",
            "params": [
                {
                    "name": "type",
                    "description": ""
                },
                {
                    "name": "id",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "record"
            },
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 81778,
            "description": "When a record is destroyed, this un-indexes it and\nremoves it from any record arrays so it can be GCed.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "dematerializeRecord",
            "params": [
                {
                    "name": "record",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 81805,
            "description": "Returns the adapter for a given type.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "adapterFor",
            "params": [
                {
                    "name": "type",
                    "description": ""
                }
            ],
            "return": {
                "description": "LogicalExpression"
            },
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 81826,
            "description": "Returns an instance of the serializer for a given type. For\nexample, `serializerFor('person')` will return an instance of\n`App.PersonSerializer`.\nIf no `App.PersonSerializer` is found, this method will look\nfor an `App.ApplicationSerializer` (the default serializer for\nyour entire application).\nIf no `App.ApplicationSerializer` is found, it will fall back\nto an instance of `DS.JSONSerializer`.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "serializerFor",
            "params": [
                {
                    "name": "type",
                    "description": "the record to serialize",
                    "type": "String"
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 81847,
            "description": "Description",
            "itemtype": "method",
            "name": "willDestroy",
            "return": {
                "description": ""
            },
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 81862,
            "description": "Description",
            "itemtype": "method",
            "name": "byType",
            "params": [
                {
                    "name": "entry",
                    "description": ""
                }
            ],
            "return": {
                "description": "MemberExpression"
            },
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 81874,
            "description": "All typeKeys are camelCase internally. Changing this function may\nrequire changes to other normalization hooks (such as typeForRoot).",
            "itemtype": "method",
            "name": "_normalizeTypeKey",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "if the adapter can generate one, an ID",
                "type": "String"
            },
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 81889,
            "description": "Description",
            "itemtype": "method",
            "name": "normalizeRelationships",
            "params": [
                {
                    "name": "store",
                    "description": ""
                },
                {
                    "name": "type",
                    "description": ""
                },
                {
                    "name": "data",
                    "description": ""
                },
                {
                    "name": "record",
                    "description": ""
                }
            ],
            "return": {
                "description": "data"
            },
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 81912,
            "description": "Description",
            "itemtype": "method",
            "name": "deserializeRecordId",
            "params": [
                {
                    "name": "store",
                    "description": ""
                },
                {
                    "name": "data",
                    "description": ""
                },
                {
                    "name": "key",
                    "description": ""
                },
                {
                    "name": "relationship",
                    "description": ""
                },
                {
                    "name": "id",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 81939,
            "description": "Description",
            "itemtype": "method",
            "name": "typeFor",
            "params": [
                {
                    "name": "relationship",
                    "description": ""
                },
                {
                    "name": "key",
                    "description": ""
                },
                {
                    "name": "data",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 81955,
            "description": "Description",
            "itemtype": "method",
            "name": "deserializeRecordIds",
            "params": [
                {
                    "name": "store",
                    "description": ""
                },
                {
                    "name": "data",
                    "description": ""
                },
                {
                    "name": "key",
                    "description": ""
                },
                {
                    "name": "relationship",
                    "description": ""
                },
                {
                    "name": "ids",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 81977,
            "description": "Description",
            "itemtype": "method",
            "name": "serializerFor",
            "params": [
                {
                    "name": "container",
                    "description": ""
                },
                {
                    "name": "type",
                    "description": ""
                },
                {
                    "name": "defaultSerializer",
                    "description": ""
                }
            ],
            "return": {
                "description": "LogicalExpression"
            },
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 81992,
            "description": "Description",
            "itemtype": "method",
            "name": "defaultSerializer",
            "params": [
                {
                    "name": "container",
                    "description": ""
                }
            ],
            "return": {
                "description": "LogicalExpression"
            },
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 82003,
            "description": "Description",
            "itemtype": "method",
            "name": "serializerForAdapter",
            "params": [
                {
                    "name": "adapter",
                    "description": ""
                },
                {
                    "name": "type",
                    "description": ""
                }
            ],
            "return": {
                "description": "serializer"
            },
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 82021,
            "description": "Description",
            "itemtype": "method",
            "name": "extract",
            "params": [
                {
                    "name": "store",
                    "description": ""
                },
                {
                    "name": "type",
                    "description": ""
                },
                {
                    "name": "payload",
                    "description": ""
                }
            ],
            "return": {
                "description": "payload"
            },
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 82208,
            "description": "Description",
            "itemtype": "method",
            "name": "setupRelationships",
            "params": [
                {
                    "name": "store",
                    "description": ""
                },
                {
                    "name": "record",
                    "description": ""
                },
                {
                    "name": "data",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 82297,
            "description": "When given a deserialized value from a record attribute this\nmethod must return the serialized value.\n\nExample\n\n```javascript\nserialize: function(deserialized) {\n  return Ember.isEmpty(deserialized) ? null : Number(deserialized);\n}\n```",
            "itemtype": "method",
            "name": "serialize",
            "params": [
                {
                    "name": "deserialized",
                    "description": "The deserialized value"
                }
            ],
            "return": {
                "description": "The serialized value"
            },
            "class": "DS.Transform",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 82315,
            "description": "When given a serialize value from a JSON object this method must\nreturn the deserialized value for the record attribute.\n\nExample\n\n```javascript\ndeserialize: function(serialized) {\n  return empty(serialized) ? null : Number(serialized);\n}\n```",
            "itemtype": "method",
            "name": "deserialize",
            "params": [
                {
                    "name": "serialized",
                    "description": "The serialized value"
                }
            ],
            "return": {
                "description": "The deserialized value"
            },
            "class": "DS.Transform",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 82362,
            "description": "Description",
            "itemtype": "method",
            "name": "deserialize",
            "params": [
                {
                    "name": "serialized",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.BooleanTransform",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 82382,
            "description": "Description",
            "itemtype": "method",
            "name": "serialize",
            "params": [
                {
                    "name": "deserialized",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "DS.BooleanTransform",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 82421,
            "description": "Description",
            "itemtype": "method",
            "name": "pad",
            "params": [
                {
                    "name": "number",
                    "description": ""
                }
            ],
            "return": {
                "description": "number"
            },
            "class": "DS.DateTransform",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 82452,
            "description": "Description",
            "itemtype": "method",
            "name": "deserialize",
            "params": [
                {
                    "name": "serialized",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.DateTransform",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 82474,
            "description": "Description",
            "itemtype": "method",
            "name": "serialize",
            "params": [
                {
                    "name": "date",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DS.DateTransform",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 82519,
            "description": "Description",
            "itemtype": "method",
            "name": "deserialize",
            "params": [
                {
                    "name": "serialized",
                    "description": ""
                }
            ],
            "return": {
                "description": "ConditionalExpression"
            },
            "class": "DS.NumberTransform",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 82529,
            "description": "Description",
            "itemtype": "method",
            "name": "serialize",
            "params": [
                {
                    "name": "deserialized",
                    "description": ""
                }
            ],
            "return": {
                "description": "ConditionalExpression"
            },
            "class": "DS.NumberTransform",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 82569,
            "description": "Description",
            "itemtype": "method",
            "name": "deserialize",
            "params": [
                {
                    "name": "serialized",
                    "description": ""
                }
            ],
            "return": {
                "description": "ConditionalExpression"
            },
            "class": "DS.StringTransform",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 82578,
            "description": "Description",
            "itemtype": "method",
            "name": "serialize",
            "params": [
                {
                    "name": "deserialized",
                    "description": ""
                }
            ],
            "return": {
                "description": "ConditionalExpression"
            },
            "class": "DS.StringTransform",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 82618,
            "description": "See {{#crossLink \"Ember.String/pluralize\"}}{{/crossLink}}",
            "itemtype": "method",
            "name": "pluralize",
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.String",
            "module": "ember-data",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 82628,
            "description": "See {{#crossLink \"Ember.String/singularize\"}}{{/crossLink}}",
            "itemtype": "method",
            "name": "singularize",
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.String",
            "module": "ember-data",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 82646,
            "description": "If you have Ember Inflector (such as if Ember Data is present),\n singularize a word. For example, turn \"oxen\" into \"ox\".\nExample:\n{{singularize myProperty}}\n {{singularize \"oxen\"}}",
            "itemtype": "method",
            "name": "singularize",
            "params": [
                {
                    "name": "word",
                    "description": "word to singularize",
                    "type": "String|Property"
                }
            ],
            "class": "Ember.Handlebars.helpers",
            "module": "ember-data",
            "namespace": "Ember.Handlebars"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 82662,
            "description": "If you have Ember Inflector (such as if Ember Data is present),\n pluralize a word. For example, turn \"ox\" into \"oxen\".\nExample:\n{{pluralize myProperty}}\n {{pluralize \"oxen\"}}",
            "itemtype": "method",
            "name": "pluralize",
            "params": [
                {
                    "name": "word",
                    "description": "word to pluralize",
                    "type": "String|Property"
                }
            ],
            "class": "Ember.Handlebars.helpers",
            "module": "ember-data",
            "namespace": "Ember.Handlebars"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 82789,
            "description": "Description",
            "itemtype": "method",
            "name": "loadUncountable",
            "params": [
                {
                    "name": "rules",
                    "description": ""
                },
                {
                    "name": "uncountable",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Handlebars.helpers",
            "module": "ember-data",
            "namespace": "Ember.Handlebars"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 82802,
            "description": "Description",
            "itemtype": "method",
            "name": "loadIrregular",
            "params": [
                {
                    "name": "rules",
                    "description": ""
                },
                {
                    "name": "irregularPairs",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Handlebars.helpers",
            "module": "ember-data",
            "namespace": "Ember.Handlebars"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 82894,
            "description": "Description",
            "itemtype": "method",
            "name": "makeDictionary",
            "return": {
                "description": "cache"
            },
            "class": "Ember.Inflector",
            "module": "ember-data",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 82907,
            "access": "public",
            "tagname": "As inflections can be costly, and commonly the same subset of words are repeatedly\ninflected an optional cache is provided.",
            "itemtype": "method",
            "name": "enableCache",
            "return": {
                "description": ""
            },
            "class": "Ember.Inflector",
            "module": "ember-data",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 82917,
            "description": "Description",
            "itemtype": "method",
            "name": "singularize",
            "params": [
                {
                    "name": "word",
                    "description": ""
                }
            ],
            "return": {
                "description": "LogicalExpression"
            },
            "class": "Ember.Inflector",
            "module": "ember-data",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 82928,
            "description": "Description",
            "itemtype": "method",
            "name": "pluralize",
            "params": [
                {
                    "name": "word",
                    "description": ""
                }
            ],
            "return": {
                "description": "LogicalExpression"
            },
            "class": "Ember.Inflector",
            "module": "ember-data",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 82940,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "purgeCache",
            "return": {
                "description": ""
            },
            "class": "Ember.Inflector",
            "module": "ember-data",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 82951,
            "access": "public",
            "tagname": "disable caching",
            "itemtype": "method",
            "name": "disableCache",
            "return": {
                "description": ""
            },
            "class": "Ember.Inflector",
            "module": "ember-data",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 82960,
            "description": "Description",
            "itemtype": "method",
            "name": "singularize",
            "params": [
                {
                    "name": "word",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Inflector",
            "module": "ember-data",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 82970,
            "description": "Description",
            "itemtype": "method",
            "name": "pluralize",
            "params": [
                {
                    "name": "word",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Inflector",
            "module": "ember-data",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 82981,
            "description": "Description",
            "itemtype": "method",
            "name": "plural",
            "params": [
                {
                    "name": "regex",
                    "description": "",
                    "type": "RegExp"
                },
                {
                    "name": "string",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Inflector",
            "module": "ember-data",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 82993,
            "description": "Description",
            "itemtype": "method",
            "name": "singular",
            "params": [
                {
                    "name": "regex",
                    "description": "",
                    "type": "RegExp"
                },
                {
                    "name": "string",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Inflector",
            "module": "ember-data",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 83005,
            "description": "Description",
            "itemtype": "method",
            "name": "uncountable",
            "params": [
                {
                    "name": "string",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Inflector",
            "module": "ember-data",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 83016,
            "description": "Description",
            "itemtype": "method",
            "name": "irregular",
            "params": [
                {
                    "name": "singular",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "plural",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Ember.Inflector",
            "module": "ember-data",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 83028,
            "description": "Description",
            "itemtype": "method",
            "name": "pluralize",
            "params": [
                {
                    "name": "word",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Inflector",
            "module": "ember-data",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 83041,
            "description": "Description",
            "itemtype": "method",
            "name": "singularize",
            "params": [
                {
                    "name": "word",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Inflector",
            "module": "ember-data",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 83055,
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "inflect",
            "params": [
                {
                    "name": "word",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "typeRules",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "irregular",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "result"
            },
            "class": "Ember.Inflector",
            "module": "ember-data",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 83129,
            "description": "Description",
            "itemtype": "method",
            "name": "pluralize",
            "params": [
                {
                    "name": "word",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Inflector",
            "module": "ember-data",
            "namespace": "Ember"
        },
        {
            "file": "dist/assets/vendor.js",
            "line": 83139,
            "description": "Description",
            "itemtype": "method",
            "name": "singularize",
            "params": [
                {
                    "name": "word",
                    "description": ""
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Ember.Inflector",
            "module": "ember-data",
            "namespace": "Ember"
        },
        {
            "file": "dist/testem.js",
            "line": 1,
            "description": "This is dummy file that exists for the sole purpose\nof allowing tests to run directly in the browser as\nwell as by Testem.\n\nTestem is configured to run tests directly against\nthe test build of index.html, which requires a\nsnippet to load the testem.js file:\n  <script src=\"/testem.js\"></script>\nThis has to go after the qunit framework and app\ntests are loaded.\n\nTestem internally supplies this file. However, if you\nrun the tests directly in the browser (localhost:8000/tests),\nthis file does not exist.\n\nHence the purpose of this fake file. This file is served\ndirectly from the express server to satisify the script load.",
            "class": "Ember.Sequelize Course Model",
            "module": "ember-data",
            "namespace": "Ember"
        },
        {
            "file": "models/course.js",
            "line": 27,
            "description": "Constructs a new Sequelize Course Model",
            "itemtype": "method",
            "name": "Constructor",
            "params": [
                {
                    "name": "Available",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "Enrollment",
                    "description": "Count",
                    "type": "String"
                },
                {
                    "name": "Course",
                    "description": "Abbreviation",
                    "type": "String"
                },
                {
                    "name": "Course",
                    "description": "Number",
                    "type": "Integer"
                },
                {
                    "name": "Course",
                    "description": "Type",
                    "type": "String"
                },
                {
                    "name": "Section",
                    "description": "Number",
                    "type": "Integer"
                },
                {
                    "name": "Course",
                    "description": "Title",
                    "type": "String"
                },
                {
                    "name": "Credit",
                    "description": "Hour",
                    "type": "Decimal"
                },
                {
                    "name": "Time",
                    "description": "Begin",
                    "type": "DateTime"
                },
                {
                    "name": "Time",
                    "description": "End",
                    "type": "DateTime"
                },
                {
                    "name": "Days",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "Room",
                    "description": "Number",
                    "type": "Integer"
                },
                {
                    "name": "Building",
                    "description": "Name",
                    "type": "String"
                },
                {
                    "name": "Special",
                    "description": "Enrollment",
                    "type": "String"
                },
                {
                    "name": "Instructor",
                    "description": "Name",
                    "type": "String"
                }
            ],
            "class": "Ember.Sequelize Course Model",
            "module": "ember-data",
            "namespace": "Ember"
        },
        {
            "file": "models/department.js",
            "line": 26,
            "description": "Constructs a new Sequelize Department Model",
            "itemtype": "method",
            "name": "Constructor",
            "params": [
                {
                    "name": "Name",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "Ember.Sequelize Department Model",
            "module": "ember-data",
            "namespace": "Ember"
        },
        {
            "file": "models/instructor.js",
            "line": 26,
            "description": "Constructs a new Sequelize Instructor Model",
            "itemtype": "method",
            "name": "Constructor",
            "params": [
                {
                    "name": "Name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "Course",
                    "description": "Number",
                    "type": "Integer"
                },
                {
                    "name": "Course",
                    "description": "Abbreviation",
                    "type": "String"
                },
                {
                    "name": "Department",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "Room",
                    "description": "Number",
                    "type": "Integer"
                },
                {
                    "name": "Building",
                    "description": "Name",
                    "type": "String"
                }
            ],
            "class": "Ember.Sequelize Instructor Model",
            "module": "ember-data",
            "namespace": "Ember"
        },
        {
            "file": "index.js",
            "line": 59,
            "description": "API method to add a new Department to the database",
            "itemtype": "method",
            "name": "Post Department",
            "params": [
                {
                    "name": "Department",
                    "description": "object sent in the URL",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "200 (OK) / 500 (Internal Server Error)",
                "type": "Status Code"
            },
            "class": "LSU Scheduler API",
            "module": "lsu-scheduler"
        },
        {
            "file": "index.js",
            "line": 83,
            "description": "API method retrieve all Departments from the database",
            "itemtype": "method",
            "name": "Get Departments",
            "return": {
                "description": "200 (OK) / 404 (Not Found) / 500 (Internal Server Error)",
                "type": "Status Code"
            },
            "class": "LSU Scheduler API",
            "module": "lsu-scheduler"
        },
        {
            "file": "index.js",
            "line": 102,
            "description": "API method to add a new Course the database",
            "itemtype": "method",
            "name": "Post Course",
            "params": [
                {
                    "name": "Course",
                    "description": "object sent in the body",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "200 (OK) / 500 (Internal Server Error)",
                "type": "Status Code"
            },
            "class": "LSU Scheduler API",
            "module": "lsu-scheduler"
        },
        {
            "file": "index.js",
            "line": 140,
            "description": "API method retrieve all Courses from the database",
            "itemtype": "method",
            "name": "Get Courses",
            "return": {
                "description": "200 (OK) / 404 (Not Found) / 500 (Internal Server Error)",
                "type": "Status Code"
            },
            "class": "LSU Scheduler API",
            "module": "lsu-scheduler"
        },
        {
            "file": "index.js",
            "line": 159,
            "description": "Send html file if it doesn't match any backend route",
            "itemtype": "method",
            "name": "Get *",
            "return": {
                "description": "404 (Not Found)",
                "type": "Status Code"
            },
            "class": "LSU Scheduler API",
            "module": "lsu-scheduler"
        },
        {
            "file": "index.js",
            "line": 169,
            "description": "Sends a request to an LSU server that returns the names of all of the departments\nat LSU and saves them to the database",
            "params": [
                {
                    "name": "int",
                    "description": "number of hours to wait between requests"
                }
            ],
            "return": {
                "description": "void"
            },
            "class": "LSU Scheduler API",
            "module": "lsu-scheduler"
        },
        {
            "file": "newrelic.js",
            "line": 1,
            "description": "New Relic agent configuration.\n\nSee lib/config.defaults.js in the agent distribution for a more complete\ndescription of configuration variables and their potential values.",
            "class": "",
            "module": "lsu-scheduler"
        },
        {
            "file": "newrelic.js",
            "line": 8,
            "description": "Array of application names.",
            "class": "",
            "module": "lsu-scheduler"
        },
        {
            "file": "newrelic.js",
            "line": 12,
            "description": "Your New Relic license key.",
            "class": "",
            "module": "lsu-scheduler"
        },
        {
            "file": "newrelic.js",
            "line": 17,
            "description": "Level at which to log. 'trace' is most useful to New Relic when diagnosing\nissues with the agent, 'info' and higher will impose the least overhead on\nproduction applications.",
            "class": "",
            "module": "lsu-scheduler"
        }
    ],
    "warnings": [
        {
            "message": "replacing incorrect tag: function with method",
            "line": " dist/assets/test-support.js:1678"
        },
        {
            "message": "unknown tag: name",
            "line": " dist/assets/test-support.js:1678"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " dist/assets/test-support.js:1698"
        },
        {
            "message": "unknown tag: name",
            "line": " dist/assets/test-support.js:1698"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " dist/assets/test-support.js:1715"
        },
        {
            "message": "unknown tag: name",
            "line": " dist/assets/test-support.js:1715"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " dist/assets/test-support.js:1729"
        },
        {
            "message": "unknown tag: name",
            "line": " dist/assets/test-support.js:1729"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " dist/assets/test-support.js:1744"
        },
        {
            "message": "unknown tag: name",
            "line": " dist/assets/test-support.js:1744"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " dist/assets/test-support.js:1759"
        },
        {
            "message": "unknown tag: name",
            "line": " dist/assets/test-support.js:1759"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " dist/assets/test-support.js:1772"
        },
        {
            "message": "unknown tag: name",
            "line": " dist/assets/test-support.js:1772"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " dist/assets/test-support.js:1785"
        },
        {
            "message": "unknown tag: name",
            "line": " dist/assets/test-support.js:1785"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " dist/assets/test-support.js:1798"
        },
        {
            "message": "unknown tag: name",
            "line": " dist/assets/test-support.js:1798"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " dist/assets/vendor.js:1435"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " dist/assets/vendor.js:1454"
        },
        {
            "message": "unknown tag: version",
            "line": " dist/assets/vendor.js:30460"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " dist/assets/vendor.js:69607"
        },
        {
            "message": "Missing item type\nDescription",
            "line": " dist/assets/test-support.js:14"
        },
        {
            "message": "Missing item type\nDescription",
            "line": " dist/assets/test-support.js:84"
        },
        {
            "message": "Missing item type\nDescription",
            "line": " dist/assets/test-support.js:135"
        },
        {
            "message": "Missing item type\nDescription",
            "line": " dist/assets/test-support.js:188"
        },
        {
            "message": "Missing item type\nDescription",
            "line": " dist/assets/test-support.js:384"
        },
        {
            "message": "Missing item type\nProvides a normalized error string, correcting an issue\nwith IE 7 (and prior) where Error.prototype.toString is\nnot properly implemented\n\nBased on http://es5.github.com/#x15.11.4.4",
            "line": " dist/assets/test-support.js:476"
        },
        {
            "message": "Missing item type\nMakes a clone of an object using only Array or Object as base,\nand copies over the own enumerable properties.",
            "line": " dist/assets/test-support.js:505"
        },
        {
            "message": "Missing item type\nConfig object: Maintain internal state\nLater exposed as QUnit.config\n`config` initialized at top of scope",
            "line": " dist/assets/test-support.js:692"
        },
        {
            "message": "Missing item type",
            "line": " dist/assets/test-support.js:867"
        },
        {
            "message": "Missing item type\nDescription",
            "line": " dist/assets/test-support.js:1811"
        },
        {
            "message": "Missing item type\nDescription",
            "line": " dist/assets/test-support.js:1946"
        },
        {
            "message": "Missing item type\nDescription",
            "line": " dist/assets/test-support.js:1955"
        },
        {
            "message": "Missing item type\nDescription",
            "line": " dist/assets/test-support.js:1965"
        },
        {
            "message": "Missing item type\nDescription",
            "line": " dist/assets/test-support.js:1989"
        },
        {
            "message": "Missing item type\nDescription",
            "line": " dist/assets/test-support.js:1998"
        },
        {
            "message": "Missing item type\nDescription",
            "line": " dist/assets/test-support.js:2047"
        },
        {
            "message": "Missing item type\nDescription",
            "line": " dist/assets/test-support.js:2117"
        },
        {
            "message": "Missing item type\nDescription",
            "line": " dist/assets/test-support.js:2351"
        },
        {
            "message": "Missing item type\nDescription",
            "line": " dist/assets/vendor.js:14"
        },
        {
            "message": "Missing item type\nDescription",
            "line": " dist/assets/vendor.js:29"
        },
        {
            "message": "Missing item type\nDescription",
            "line": " dist/assets/vendor.js:79"
        },
        {
            "message": "Missing item type\nDescription",
            "line": " dist/assets/vendor.js:896"
        },
        {
            "message": "Missing item type\nDetects XML nodes",
            "line": " dist/assets/vendor.js:1435"
        },
        {
            "message": "Missing item type\nSets document-related variables once based on the current document",
            "line": " dist/assets/vendor.js:1454"
        },
        {
            "message": "Missing item type\nDescription",
            "line": " dist/assets/vendor.js:1542"
        },
        {
            "message": "Missing item type\nDescription",
            "line": " dist/assets/vendor.js:1556"
        },
        {
            "message": "Missing item type\nDescription",
            "line": " dist/assets/vendor.js:1572"
        },
        {
            "message": "Missing item type\nUtility function for retrieving the text value of an array of DOM nodes",
            "line": " dist/assets/vendor.js:1979"
        },
        {
            "message": "Missing item type\nDescription",
            "line": " dist/assets/vendor.js:2042"
        },
        {
            "message": "Missing item type\nDescription",
            "line": " dist/assets/vendor.js:2060"
        },
        {
            "message": "Missing item type\nDescription",
            "line": " dist/assets/vendor.js:2097"
        },
        {
            "message": "Missing item type\nDescription",
            "line": " dist/assets/vendor.js:2133"
        },
        {
            "message": "Missing item type\nDescription",
            "line": " dist/assets/vendor.js:2147"
        },
        {
            "message": "Missing item type\nDescription",
            "line": " dist/assets/vendor.js:2162"
        },
        {
            "message": "Missing item type\nDescription",
            "line": " dist/assets/vendor.js:2193"
        },
        {
            "message": "Missing item type\nDescription",
            "line": " dist/assets/vendor.js:2291"
        },
        {
            "message": "Missing item type\nDescription",
            "line": " dist/assets/vendor.js:2406"
        },
        {
            "message": "Missing item type\nDescription",
            "line": " dist/assets/vendor.js:2416"
        },
        {
            "message": "Missing item type\nDescription",
            "line": " dist/assets/vendor.js:2425"
        },
        {
            "message": "Missing item type\nDescription",
            "line": " dist/assets/vendor.js:2435"
        },
        {
            "message": "Missing item type\nDescription",
            "line": " dist/assets/vendor.js:2444"
        },
        {
            "message": "Missing item type\nDescription",
            "line": " dist/assets/vendor.js:2453"
        },
        {
            "message": "Missing item type\nDescription",
            "line": " dist/assets/vendor.js:2465"
        },
        {
            "message": "Missing item type\nDescription",
            "line": " dist/assets/vendor.js:2481"
        },
        {
            "message": "Missing item type\nDescription",
            "line": " dist/assets/vendor.js:2499"
        },
        {
            "message": "Missing item type\nDescription",
            "line": " dist/assets/vendor.js:2509"
        },
        {
            "message": "Missing item type\nDescription",
            "line": " dist/assets/vendor.js:2518"
        },
        {
            "message": "Missing item type\nDescription",
            "line": " dist/assets/vendor.js:2527"
        },
        {
            "message": "Missing item type\nDescription",
            "line": " dist/assets/vendor.js:2537"
        },
        {
            "message": "Missing item type\nA low-level selection function that works with Sizzle's compiled\n selector functions",
            "line": " dist/assets/vendor.js:3158"
        },
        {
            "message": "Missing item type\nDescription",
            "line": " dist/assets/vendor.js:4291"
        },
        {
            "message": "Missing item type\nDescription",
            "line": " dist/assets/vendor.js:5290"
        },
        {
            "message": "Missing item type\nDescription",
            "line": " dist/assets/vendor.js:6574"
        },
        {
            "message": "Missing item type\nRetrieve the actual display of a element",
            "line": " dist/assets/vendor.js:7558"
        },
        {
            "message": "Missing item type\nDescription",
            "line": " dist/assets/vendor.js:7688"
        },
        {
            "message": "Missing item type\nDescription",
            "line": " dist/assets/vendor.js:7697"
        },
        {
            "message": "Missing item type\nDescription",
            "line": " dist/assets/vendor.js:7748"
        },
        {
            "message": "Missing item type\nDescription",
            "line": " dist/assets/vendor.js:7757"
        },
        {
            "message": "Missing item type\nDescription",
            "line": " dist/assets/vendor.js:12114"
        },
        {
            "message": "Missing item type\nDescription",
            "line": " dist/assets/vendor.js:12238"
        },
        {
            "message": "Missing item type\nDescription",
            "line": " dist/assets/vendor.js:12387"
        },
        {
            "message": "Missing item type\nDescription",
            "line": " dist/assets/vendor.js:13035"
        },
        {
            "message": "Missing item type\nDescription",
            "line": " dist/assets/vendor.js:16714"
        },
        {
            "message": "Missing item type\nDescription",
            "line": " dist/assets/vendor.js:16726"
        },
        {
            "message": "Missing item type\nDescription",
            "line": " dist/assets/vendor.js:21279"
        },
        {
            "message": "Missing item type\nDescription",
            "line": " dist/assets/vendor.js:24342"
        },
        {
            "message": "Missing item type\nDescription",
            "line": " dist/assets/vendor.js:24393"
        },
        {
            "message": "Missing item type\nDescription",
            "line": " dist/assets/vendor.js:24440"
        },
        {
            "message": "Missing item type\nDescription",
            "line": " dist/assets/vendor.js:24462"
        },
        {
            "message": "Missing item type\nDescription",
            "line": " dist/assets/vendor.js:24962"
        },
        {
            "message": "Missing item type\nDescription",
            "line": " dist/assets/vendor.js:25099"
        },
        {
            "message": "Missing item type\nCalls [Ember.String.loc](/api/classes/Ember.String.html#method_loc) with the\nprovided string.\nThis is a convenient way to localize text. For example:\n```html\n<script type=\"text/x-handlebars\" data-template-name=\"home\">\n{{loc \"welcome\"}}\n</script>\n```\nTake note that `\"welcome\"` is a string and not an object\nreference.\nSee [Ember.String.loc](/api/classes/Ember.String.html#method_loc) for how to \nset up localized string references.",
            "line": " dist/assets/vendor.js:26049"
        },
        {
            "message": "Missing item type\nThe `partial` helper renders another template without\nchanging the template context:\n```handlebars\n{{foo}}\n{{partial \"nav\"}}\n```\nThe above example template will render a template named\n\"_nav\", which has the same context as the parent template\nit's rendered into, so if the \"_nav\" template also referenced\n`{{foo}}`, it would print the same thing as the `{{foo}}`\nin the above example.\nIf a \"_nav\" template isn't found, the `partial` helper will\nfall back to a template named \"nav\".\n## Bound template names\nThe parameter supplied to `partial` can also be a path\nto a property containing a template name, e.g.:\n```handlebars\n{{partial someTemplateName}}\n```\nThe above example will look up the value of `someTemplateName`\non the template context (e.g. a controller) and use that\nvalue as the name of the template to render. If the resolved\nvalue is falsy, nothing will be rendered. If `someTemplateName`\nchanges, the partial will be re-rendered using the new template\nname.\n## Setting the partial's context with `with`\nThe `partial` helper can be used in conjunction with the `with`\nhelper to set a context that will be used by the partial:\n```handlebars\n{{#with currentUser}}\n{{partial \"user_info\"}}\n{{/with}}\n```",
            "line": " dist/assets/vendor.js:26088"
        },
        {
            "message": "Missing item type\nDescription",
            "line": " dist/assets/vendor.js:26198"
        },
        {
            "message": "Missing item type\n`template` allows you to render a template from inside another template.\nThis allows you to re-use the same template in multiple places. For example:\n```html\n<script type=\"text/x-handlebars\" data-template-name=\"logged_in_user\">\n{{#with loggedInUser}}\nLast Login: {{lastLogin}}\nUser Info: {{template \"user_info\"}}\n{{/with}}\n</script>\n```\n```html\n<script type=\"text/x-handlebars\" data-template-name=\"user_info\">\nName: <em>{{name}}</em>\nKarma: <em>{{karma}}</em>\n</script>\n```\n```handlebars\n{{#if isUser}}\n{{template \"user_info\"}}\n{{else}}\n{{template \"unlogged_user_info\"}}\n{{/if}}\n```\nThis helper looks for templates in the global `Ember.TEMPLATES` hash. If you\nadd `<script>` tags to your page with the `data-template-name` attribute set,\nthey will be compiled and placed in this hash automatically.\nYou can also manually register templates by adding them to the hash:\n```javascript\nEmber.TEMPLATES[\"my_cool_template\"] = Ember.Handlebars.compile('<b>{{user}}</b>');\n```",
            "line": " dist/assets/vendor.js:26230"
        },
        {
            "message": "Missing item type\n`unbound` allows you to output a property without binding. *Important:* The\noutput will not be updated if the property changes. Use with caution.\n```handlebars\n<div>{{unbound somePropertyThatDoesntChange}}</div>\n```\n`unbound` can also be used in conjunction with a bound helper to\nrender it in its unbound form:\n```handlebars\n<div>{{unbound helperName somePropertyThatDoesntChange}}</div>\n```",
            "line": " dist/assets/vendor.js:26294"
        },
        {
            "message": "Missing item type\n`{{yield}}` denotes an area of a template that will be rendered inside\nof another template. It has two main uses:\n### Use with `layout`\nWhen used in a Handlebars template that is assigned to an `Ember.View`\ninstance's `layout` property Ember will render the layout template first,\ninserting the view's own rendered output at the `{{yield}}` location.\nAn empty `<body>` and the following application code:\n```javascript\nAView = Ember.View.extend({\nclassNames: ['a-view-with-layout'],\nlayout: Ember.Handlebars.compile('<div class=\"wrapper\">{{yield}}</div>'),\ntemplate: Ember.Handlebars.compile('<span>I am wrapped</span>')\n});\naView = AView.create();\naView.appendTo('body');\n```\nWill result in the following HTML output:\n```html\n<body>\n<div class='ember-view a-view-with-layout'>\n<div class=\"wrapper\">\n<span>I am wrapped</span>\n</div>\n</div>\n</body>\n```\nThe `yield` helper cannot be used outside of a template assigned to an\n`Ember.View`'s `layout` property and will throw an error if attempted.\n```javascript\nBView = Ember.View.extend({\nclassNames: ['a-view-with-layout'],\ntemplate: Ember.Handlebars.compile('{{yield}}')\n});\nbView = BView.create();\nbView.appendTo('body');\n// throws\n// Uncaught Error: assertion failed:\n// You called yield in a template that was not a layout\n```\n### Use with Ember.Component\nWhen designing components `{{yield}}` is used to denote where, inside the component's\ntemplate, an optional block passed to the component should render:\n```handlebars\n<!-- application.hbs -->\n{{#labeled-textfield value=someProperty}}\nFirst name:\n{{/labeled-textfield}}\n```\n```handlebars\n<!-- components/labeled-textfield.hbs -->\n<label>\n{{yield}} {{input value=value}}\n</label>\n```\nResult:\n```html\n<label>\nFirst name: <input type=\"text\" />\n</label>\n```",
            "line": " dist/assets/vendor.js:26742"
        },
        {
            "message": "Missing item type\nCall on a computed property to set it into non-cached mode. When in this\nmode the computed property will not automatically cache the return value.\n```javascript\nvar outsideService = Ember.Object.extend({\nvalue: function() {\nreturn OutsideService.getValue();\n}.property().volatile()\n}).create();\n```",
            "line": " dist/assets/vendor.js:29329"
        },
        {
            "message": "Missing item type\nTo get multiple properties at once, call `Ember.getProperties`\nwith an object followed by a list of strings or an array:\n```javascript\nEmber.getProperties(record, 'firstName', 'lastName', 'zipCode');\n// { firstName: 'John', lastName: 'Doe', zipCode: '10011' }\n```\nis equivalent to:\n```javascript\nEmber.getProperties(record, ['firstName', 'lastName', 'zipCode']);\n// { firstName: 'John', lastName: 'Doe', zipCode: '10011' }\n```",
            "line": " dist/assets/vendor.js:31555"
        },
        {
            "message": "Missing item type\nA value is blank if it is empty or a whitespace string.\n```javascript\nEmber.isBlank();                // true\nEmber.isBlank(null);            // true\nEmber.isBlank(undefined);       // true\nEmber.isBlank('');              // true\nEmber.isBlank([]);              // true\nEmber.isBlank('\\n\\t');          // true\nEmber.isBlank('  ');            // true\nEmber.isBlank({});              // false\nEmber.isBlank('\\n\\t Hello');    // false\nEmber.isBlank('Hello world');   // false\nEmber.isBlank([1,2,3]);         // false\n```",
            "line": " dist/assets/vendor.js:31818"
        },
        {
            "message": "Missing item type\nDescription",
            "line": " dist/assets/vendor.js:32019"
        },
        {
            "message": "Missing item type\nMerge the contents of two objects together into the first object.\n```javascript\nEmber.merge({first: 'Tom'}, {last: 'Dale'}); // {first: 'Tom', last: 'Dale'}\nvar a = {first: 'Yehuda'}, b = {last: 'Katz'};\nEmber.merge(a, b); // a == {first: 'Yehuda', last: 'Katz'}, b == {last: 'Katz'}\n```",
            "line": " dist/assets/vendor.js:32569"
        },
        {
            "message": "Missing item type\nDescription",
            "line": " dist/assets/vendor.js:33909"
        },
        {
            "message": "Missing item type\nDescription",
            "line": " dist/assets/vendor.js:33998"
        },
        {
            "message": "Missing item type\nSet a list of properties on an object. These properties are set inside\na single `beginPropertyChanges` and `endPropertyChanges` batch, so\nobservers will be buffered.\n```javascript\nvar anObject = Ember.Object.create();\nanObject.setProperties({\nfirstName: 'Stanley',\nlastName: 'Stuart',\nage: 21\n});\n```",
            "line": " dist/assets/vendor.js:35495"
        },
        {
            "message": "Missing item type\nPreviously we used `Ember.$.uuid`, however `$.uuid` has been removed from\njQuery master. We'll just bootstrap our own uuid now.",
            "line": " dist/assets/vendor.js:35534"
        },
        {
            "message": "Missing item type\nDescription",
            "line": " dist/assets/vendor.js:36072"
        },
        {
            "message": "Missing item type\nDescription",
            "line": " dist/assets/vendor.js:36099"
        },
        {
            "message": "Missing item type\nDescription",
            "line": " dist/assets/vendor.js:36162"
        },
        {
            "message": "Missing item type\nDescription",
            "line": " dist/assets/vendor.js:36192"
        },
        {
            "message": "Missing item type\nCalling ``{{render}}`` from within a template will insert another\ntemplate that matches the provided name. The inserted template will\naccess its properties on its own controller (rather than the controller\nof the parent template).\nIf a view class with the same name exists, the view class also will be used.\nNote: A given controller may only be used *once* in your app in this manner.\nA singleton instance of the controller will be created for you.\nExample:\n```javascript\nApp.NavigationController = Ember.Controller.extend({\nwho: \"world\"\n});\n```\n```handlebars\n<!-- navigation.hbs -->\nHello, {{who}}.\n```\n```handelbars\n<!-- application.hbs -->\n<h1>My great app</h1>\n{{render \"navigation\"}}\n```\n```html\n<h1>My great app</h1>\n<div class='ember-view'>\nHello, world.\n</div>\n```\nOptionally you may provide a second argument: a property path\nthat will be bound to the `model` property of the controller.\nIf a `model` property path is specified, then a new instance of the\ncontroller will be created and `{{render}}` can be used multiple times\nwith the same name.\nFor example if you had this `author` template.\n```handlebars\n<div class=\"author\">\nWritten by {{firstName}} {{lastName}}.\nTotal Posts: {{postCount}}\n</div>\n```\nYou could render it inside the `post` template using the `render` helper.\n```handlebars\n<div class=\"post\">\n<h1>{{title}}</h1>\n<div>{{body}}</div>\n{{render \"author\" author}}\n</div>\n```",
            "line": " dist/assets/vendor.js:38182"
        },
        {
            "message": "Missing item type\nFinds a controller instance.",
            "line": " dist/assets/vendor.js:40117"
        },
        {
            "message": "Missing item type\nReturns a merged query params meta object for a given route.\nUseful for asking a route what its known query params are.",
            "line": " dist/assets/vendor.js:42908"
        },
        {
            "message": "Missing item type\nThis will compare two javascript values of possibly different types.\nIt will tell you which one is greater than the other by returning:\n- -1 if the first is smaller than the second,\n- 0 if both are equal,\n- 1 if the first is greater than the second.\nThe order is calculated based on `Ember.ORDER_DEFINITION`, if types are different.\nIn case they have the same type an appropriate comparison for this type is made.\n```javascript\nEmber.compare('hello', 'hello');  // 0\nEmber.compare('abc', 'dfg');      // -1\nEmber.compare(2, 1);              // 1\n```",
            "line": " dist/assets/vendor.js:43625"
        },
        {
            "message": "Missing item type\nDescription",
            "line": " dist/assets/vendor.js:45445"
        },
        {
            "message": "Missing item type\nDescription",
            "line": " dist/assets/vendor.js:45454"
        },
        {
            "message": "Missing item type\nDescription",
            "line": " dist/assets/vendor.js:45851"
        },
        {
            "message": "Missing item type\nDescription",
            "line": " dist/assets/vendor.js:45864"
        },
        {
            "message": "Missing item type\nCreates a clone of the passed object. This function can take just about\nany type of object and create a clone of it, including primitive values\n(which are not actually cloned because they are immutable).\nIf the passed object implements the `clone()` method, then this function\nwill simply call that method and return the result.",
            "line": " dist/assets/vendor.js:46416"
        },
        {
            "message": "Missing item type\nDescription",
            "line": " dist/assets/vendor.js:46882"
        },
        {
            "message": "Missing item type",
            "line": " dist/assets/vendor.js:47691"
        },
        {
            "message": "Missing item type\nDescription",
            "line": " dist/assets/vendor.js:53114"
        },
        {
            "message": "Missing item type\nSets Ember up for testing. This is useful to perform\nbasic setup steps in order to unit test.\nUse `App.setupForTesting` to perform integration tests (full\napplication testing).",
            "line": " dist/assets/vendor.js:55457"
        },
        {
            "message": "Missing item type\nDescription",
            "line": " dist/assets/vendor.js:62408"
        },
        {
            "message": "Missing item type\nDescription",
            "line": " dist/assets/vendor.js:62416"
        },
        {
            "message": "Missing item type\nDescription",
            "line": " dist/assets/vendor.js:62429"
        },
        {
            "message": "Missing item type\nDescription",
            "line": " dist/assets/vendor.js:62447"
        },
        {
            "message": "Missing item type\nDescription",
            "line": " dist/assets/vendor.js:62469"
        },
        {
            "message": "Missing item type",
            "line": " dist/assets/vendor.js:62490"
        },
        {
            "message": "Missing item type\nDescription",
            "line": " dist/assets/vendor.js:62505"
        },
        {
            "message": "Missing item type\nDescription",
            "line": " dist/assets/vendor.js:62518"
        },
        {
            "message": "Missing item type\nDescription",
            "line": " dist/assets/vendor.js:62534"
        },
        {
            "message": "Missing item type\nDescription",
            "line": " dist/assets/vendor.js:62713"
        },
        {
            "message": "Missing item type\nDescription",
            "line": " dist/assets/vendor.js:62779"
        },
        {
            "message": "Missing item type\nDescription",
            "line": " dist/assets/vendor.js:62792"
        },
        {
            "message": "Missing item type\nDescription",
            "line": " dist/assets/vendor.js:62808"
        },
        {
            "message": "Missing item type\nDescription",
            "line": " dist/assets/vendor.js:62835"
        },
        {
            "message": "Missing item type\n, debug: function() {\n  var charSpec = this.charSpec,\n      debug = \"[\",\n      chars = charSpec.validChars || charSpec.invalidChars;\n\n  if (charSpec.invalidChars) { debug += \"^\"; }\n  debug += chars;\n  debug += \"]\";\n\n  if (charSpec.repeat) { debug += \"+\"; }\n\n  return debug;\n}",
            "line": " dist/assets/vendor.js:63247"
        },
        {
            "message": "Missing item type\nfunction debug(log) {\n  console.log(log);\n}\n\nfunction debugState(state) {\n  return state.nextStates.map(function(n) {\n    if (n.nextStates.length === 0) { return \"( \" + n.debug() + \" [accepting] )\"; }\n    return \"( \" + n.debug() + \" <then> \" + n.nextStates.map(function(s) { return s.debug() }).join(\" or \") + \" )\";\n  }).join(\", \")\n}",
            "line": " dist/assets/vendor.js:63264"
        },
        {
            "message": "Missing item type\nDescription",
            "line": " dist/assets/vendor.js:63820"
        },
        {
            "message": "Missing item type\nHook point for logging transition status updates.",
            "line": " dist/assets/vendor.js:64731"
        },
        {
            "message": "Missing item type\nDescription",
            "line": " dist/assets/vendor.js:65200"
        },
        {
            "message": "Missing item type",
            "line": " dist/assets/vendor.js:65870"
        },
        {
            "message": "Missing item type",
            "line": " dist/assets/vendor.js:65882"
        },
        {
            "message": "Missing item type",
            "line": " dist/assets/vendor.js:65911"
        },
        {
            "message": "Missing item type",
            "line": " dist/assets/vendor.js:65925"
        },
        {
            "message": "Missing item type\nDescription",
            "line": " dist/assets/vendor.js:66092"
        },
        {
            "message": "Missing item type\n`RSVP.allSettled` is similar to `RSVP.all`, but instead of implementing\na fail-fast method, it waits until all the promises have returned and\nshows you all the results. This is useful if you want to handle multiple\npromises' failure states together as a set.\nReturns a promise that is fulfilled when all the given promises have been\nsettled. The return promise is fulfilled with an array of the states of\nthe promises passed into the `promises` array argument.\nEach state object will either indicate fulfillment or rejection, and\nprovide the corresponding value or reason. The states will take one of\nthe following formats:\n```javascript\n{ state: 'fulfilled', value: value }\nor\n{ state: 'rejected', reason: reason }\n```\nExample:\n```javascript\nvar promise1 = RSVP.Promise.resolve(1);\nvar promise2 = RSVP.Promise.reject(new Error('2'));\nvar promise3 = RSVP.Promise.reject(new Error('3'));\nvar promises = [ promise1, promise2, promise3 ];\nRSVP.allSettled(promises).then(function(array){\n// array == [\n//   { state: 'fulfilled', value: 1 },\n//   { state: 'rejected', reason: Error },\n//   { state: 'rejected', reason: Error }\n// ]\n// Note that for the second item, reason.message will be '2', and for the\n// third item, reason.message will be '3'.\n}, function(error) {\n// Not run. (This block would only be called if allSettled had failed,\n// for instance if passed an incorrect argument type.)\n});\n```",
            "line": " dist/assets/vendor.js:66956"
        },
        {
            "message": "Missing item type\nThis is a convenient alias for `RSVP.Promise.all`.",
            "line": " dist/assets/vendor.js:67009"
        },
        {
            "message": "Missing item type\nDescription",
            "line": " dist/assets/vendor.js:67028"
        },
        {
            "message": "Missing item type\n`RSVP.defer` returns an object similar to jQuery's `$.Deferred`.\n`RSVP.defer` should be used when porting over code reliant on `$.Deferred`'s\ninterface. New code should use the `RSVP.Promise` constructor instead.\nThe object returned from `RSVP.defer` is a plain object with three properties:\npromise - an `RSVP.Promise`.\nreject - a function that causes the `promise` property on this object to\nbecome rejected\nresolve - a function that causes the `promise` property on this object to\nbecome fulfilled.\nExample:\n```javascript\nvar deferred = RSVP.defer();\ndeferred.resolve(\"Success!\");\ndefered.promise.then(function(value){\n// value here is \"Success!\"\n});\n```",
            "line": " dist/assets/vendor.js:67184"
        },
        {
            "message": "Missing item type\n`RSVP.filter` is similar to JavaScript's native `filter` method, except that it\nwaits for all promises to become fulfilled before running the `filterFn` on\neach item in given to `promises`. `RSVP.filter` returns a promise that will\nbecome fulfilled with the result of running `filterFn` on the values the\npromises become fulfilled with.\nFor example:\n```javascript\nvar promise1 = RSVP.resolve(1);\nvar promise2 = RSVP.resolve(2);\nvar promise3 = RSVP.resolve(3);\nvar promises = [promise1, promise2, promise3];\nvar filterFn = function(item){\nreturn item > 1;\n};\nRSVP.filter(promises, filterFn).then(function(result){\n// result is [ 2, 3 ]\n});\n```\nIf any of the `promises` given to `RSVP.filter` are rejected, the first promise\nthat is rejected will be given as an argument to the returned promise's\nrejection handler. For example:\n```javascript\nvar promise1 = RSVP.resolve(1);\nvar promise2 = RSVP.reject(new Error('2'));\nvar promise3 = RSVP.reject(new Error('3'));\nvar promises = [ promise1, promise2, promise3 ];\nvar filterFn = function(item){\nreturn item > 1;\n};\nRSVP.filter(promises, filterFn).then(function(array){\n// Code here never runs because there are rejected promises!\n}, function(reason) {\n// reason.message === '2'\n});\n```\n`RSVP.filter` will also wait for any promises returned from `filterFn`.\nFor instance, you may want to fetch a list of users then return a subset\nof those users based on some asynchronous operation:\n```javascript\nvar alice = { name: 'alice' };\nvar bob   = { name: 'bob' };\nvar users = [ alice, bob ];\nvar promises = users.map(function(user){\nreturn RSVP.resolve(user);\n});\nvar filterFn = function(user){\n// Here, Alice has permissions to create a blog post, but Bob does not.\nreturn getPrivilegesForUser(user).then(function(privs){\nreturn privs.can_create_blog_post === true;\n});\n};\nRSVP.filter(promises, filterFn).then(function(users){\n// true, because the server told us only Alice can create a blog post.\nusers.length === 1;\n// false, because Alice is the only user present in `users`\nusers[0] === bob;\n});\n```",
            "line": " dist/assets/vendor.js:67565"
        },
        {
            "message": "Missing item type\n`RSVP.hashSettled` is similar to `RSVP.allSettled`, but takes an object\ninstead of an array for its `promises` argument.\nUnlike `RSVP.all` or `RSVP.hash`, which implement a fail-fast method,\nbut like `RSVP.allSettled`, `hashSettled` waits until all the\nconstituent promises have returned and then shows you all the results\nwith their states and values/reasons. This is useful if you want to\nhandle multiple promises' failure states together as a set.\nReturns a promise that is fulfilled when all the given promises have been\nsettled, or rejected if the passed parameters are invalid.\nThe returned promise is fulfilled with a hash that has the same key names as\nthe `promises` object argument. If any of the values in the object are not\npromises, they will be copied over to the fulfilled object and marked with state\n'fulfilled'.\nExample:\n```javascript\nvar promises = {\nmyPromise: RSVP.Promise.resolve(1),\nyourPromise: RSVP.Promise.resolve(2),\ntheirPromise: RSVP.Promise.resolve(3),\nnotAPromise: 4\n};\nRSVP.hashSettled(promises).then(function(hash){\n// hash here is an object that looks like:\n// {\n//   myPromise: { state: 'fulfilled', value: 1 },\n//   yourPromise: { state: 'fulfilled', value: 2 },\n//   theirPromise: { state: 'fulfilled', value: 3 },\n//   notAPromise: { state: 'fulfilled', value: 4 }\n// }\n});\n```\nIf any of the `promises` given to `RSVP.hash` are rejected, the state will\nbe set to 'rejected' and the reason for rejection provided.\nExample:\n```javascript\nvar promises = {\nmyPromise: RSVP.Promise.resolve(1),\nrejectedPromise: RSVP.Promise.reject(new Error('rejection')),\nanotherRejectedPromise: RSVP.Promise.reject(new Error('more rejection')),\n};\nRSVP.hashSettled(promises).then(function(hash){\n// hash here is an object that looks like:\n// {\n//   myPromise:              { state: 'fulfilled', value: 1 },\n//   rejectedPromise:        { state: 'rejected', reason: Error },\n//   anotherRejectedPromise: { state: 'rejected', reason: Error },\n// }\n// Note that for rejectedPromise, reason.message == 'rejection',\n// and for anotherRejectedPromise, reason.message == 'more rejection'.\n});\n```\nAn important note: `RSVP.hashSettled` is intended for plain JavaScript objects that\nare just a set of keys and values. `RSVP.hashSettled` will NOT preserve prototype\nchains.\nExample:\n```javascript\nfunction MyConstructor(){\nthis.example = RSVP.Promise.resolve('Example');\n}\nMyConstructor.prototype = {\nprotoProperty: RSVP.Promise.resolve('Proto Property')\n};\nvar myObject = new MyConstructor();\nRSVP.hashSettled(myObject).then(function(hash){\n// protoProperty will not be present, instead you will just have an\n// object that looks like:\n// {\n//   example: { state: 'fulfilled', value: 'Example' }\n// }\n//\n// hash.hasOwnProperty('protoProperty'); // false\n// 'undefined' === typeof hash.protoProperty\n});\n```\nUseful for tooling.\nhave been settled.",
            "line": " dist/assets/vendor.js:67694"
        },
        {
            "message": "Missing item type\n`RSVP.hash` is similar to `RSVP.all`, but takes an object instead of an array\nfor its `promises` argument.\nReturns a promise that is fulfilled when all the given promises have been\nfulfilled, or rejected if any of them become rejected. The returned promise\nis fulfilled with a hash that has the same key names as the `promises` object\nargument. If any of the values in the object are not promises, they will\nsimply be copied over to the fulfilled object.\nExample:\n```javascript\nvar promises = {\nmyPromise: RSVP.resolve(1),\nyourPromise: RSVP.resolve(2),\ntheirPromise: RSVP.resolve(3),\nnotAPromise: 4\n};\nRSVP.hash(promises).then(function(hash){\n// hash here is an object that looks like:\n// {\n//   myPromise: 1,\n//   yourPromise: 2,\n//   theirPromise: 3,\n//   notAPromise: 4\n// }\n});\n````\nIf any of the `promises` given to `RSVP.hash` are rejected, the first promise\nthat is rejected will be given as the reason to the rejection handler.\nExample:\n```javascript\nvar promises = {\nmyPromise: RSVP.resolve(1),\nrejectedPromise: RSVP.reject(new Error('rejectedPromise')),\nanotherRejectedPromise: RSVP.reject(new Error('anotherRejectedPromise')),\n};\nRSVP.hash(promises).then(function(hash){\n// Code here never runs because there are rejected promises!\n}, function(reason) {\n// reason.message === 'rejectedPromise'\n});\n```\nAn important note: `RSVP.hash` is intended for plain JavaScript objects that\nare just a set of keys and values. `RSVP.hash` will NOT preserve prototype\nchains.\nExample:\n```javascript\nfunction MyConstructor(){\nthis.example = RSVP.resolve('Example');\n}\nMyConstructor.prototype = {\nprotoProperty: RSVP.resolve('Proto Property')\n};\nvar myObject = new MyConstructor();\nRSVP.hash(myObject).then(function(hash){\n// protoProperty will not be present, instead you will just have an\n// object that looks like:\n// {\n//   example: 'Example'\n// }\n//\n// hash.hasOwnProperty('protoProperty'); // false\n// 'undefined' === typeof hash.protoProperty\n});\n```",
            "line": " dist/assets/vendor.js:67788"
        },
        {
            "message": "Missing item type\nDescription",
            "line": " dist/assets/vendor.js:67873"
        },
        {
            "message": "Missing item type\n`RSVP.map` is similar to JavaScript's native `map` method, except that it\nwaits for all promises to become fulfilled before running the `mapFn` on\neach item in given to `promises`. `RSVP.map` returns a promise that will\nbecome fulfilled with the result of running `mapFn` on the values the promises\nbecome fulfilled with.\nFor example:\n```javascript\nvar promise1 = RSVP.resolve(1);\nvar promise2 = RSVP.resolve(2);\nvar promise3 = RSVP.resolve(3);\nvar promises = [ promise1, promise2, promise3 ];\nvar mapFn = function(item){\nreturn item + 1;\n};\nRSVP.map(promises, mapFn).then(function(result){\n// result is [ 2, 3, 4 ]\n});\n```\nIf any of the `promises` given to `RSVP.map` are rejected, the first promise\nthat is rejected will be given as an argument to the returned promise's\nrejection handler. For example:\n```javascript\nvar promise1 = RSVP.resolve(1);\nvar promise2 = RSVP.reject(new Error('2'));\nvar promise3 = RSVP.reject(new Error('3'));\nvar promises = [ promise1, promise2, promise3 ];\nvar mapFn = function(item){\nreturn item + 1;\n};\nRSVP.map(promises, mapFn).then(function(array){\n// Code here never runs because there are rejected promises!\n}, function(reason) {\n// reason.message === '2'\n});\n```\n`RSVP.map` will also wait if a promise is returned from `mapFn`. For example,\nsay you want to get all comments from a set of blog posts, but you need\nthe blog posts first because they contain a url to those comments.\n```javscript\nvar mapFn = function(blogPost){\n// getComments does some ajax and returns an RSVP.Promise that is fulfilled\n// with some comments data\nreturn getComments(blogPost.comments_url);\n};\n// getBlogPosts does some ajax and returns an RSVP.Promise that is fulfilled\n// with some blog post data\nRSVP.map(getBlogPosts(), mapFn).then(function(comments){\n// comments is the result of asking the server for the comments\n// of all blog posts returned from getBlogPosts()\n});\n```",
            "line": " dist/assets/vendor.js:67911"
        },
        {
            "message": "Missing item type\n`RSVP.denodeify` takes a 'node-style' function and returns a function that\nwill return an `RSVP.Promise`. You can use `denodeify` in Node.js or the\nbrowser when you'd prefer to use promises over using callbacks. For example,\n`denodeify` transforms the following:\n```javascript\nvar fs = require('fs');\nfs.readFile('myfile.txt', function(err, data){\nif (err) return handleError(err);\nhandleData(data);\n});\n```\ninto:\n```javascript\nvar fs = require('fs');\nvar readFile = RSVP.denodeify(fs.readFile);\nreadFile('myfile.txt').then(handleData, handleError);\n```\nIf the node function has multiple success parameters, then `denodeify`\njust returns the first one:\n```javascript\nvar request = RSVP.denodeify(require('request'));\nrequest('http://example.com').then(function(res) {\n// ...\n});\n```\nHowever, if you need all success parameters, setting `denodeify`'s\nsecond parameter to `true` causes it to return all success parameters\nas an array:\n```javascript\nvar request = RSVP.denodeify(require('request'), true);\nrequest('http://example.com').then(function(result) {\n// result[0] -> res\n// result[1] -> body\n});\n```\nOr if you pass it an array with names it returns the parameters as a hash:\n```javascript\nvar request = RSVP.denodeify(require('request'), ['res', 'body']);\nrequest('http://example.com').then(function(result) {\n// result.res\n// result.body\n});\n```\nSometimes you need to retain the `this`:\n```javascript\nvar app = require('express')();\nvar render = RSVP.denodeify(app.render.bind(app));\n```\nThe denodified function inherits from the original function. It works in all\nenvironments, except IE 10 and below. Consequently all properties of the original\nfunction are available to you. However, any properties you change on the\ndenodeified function won't be changed on the original function. Example:\n```javascript\nvar request = RSVP.denodeify(require('request')),\ncookieJar = request.jar(); // <- Inheritance is used here\nrequest('http://example.com', {jar: cookieJar}).then(function(res) {\n// cookieJar.cookies holds now the cookies returned by example.com\n});\n```\nUsing `denodeify` makes it easier to compose asynchronous operations instead\nof using callbacks. For example, instead of:\n```javascript\nvar fs = require('fs');\nfs.readFile('myfile.txt', function(err, data){\nif (err) { ... } // Handle error\nfs.writeFile('myfile2.txt', data, function(err){\nif (err) { ... } // Handle error\nconsole.log('done')\n});\n});\n```\nyou can chain the operations together using `then` from the returned promise:\n```javascript\nvar fs = require('fs');\nvar readFile = RSVP.denodeify(fs.readFile);\nvar writeFile = RSVP.denodeify(fs.writeFile);\nreadFile('myfile.txt').then(function(data){\nreturn writeFile('myfile2.txt', data);\n}).then(function(){\nconsole.log('done')\n}).catch(function(error){\n// Handle error\n});\n```",
            "line": " dist/assets/vendor.js:68111"
        },
        {
            "message": "Missing item type\n`catch` is simply sugar for `then(undefined, onRejection)` which makes it the same\nas the catch block of a try/catch statement.\n```js\nfunction findAuthor(){\nthrow new Error('couldn't find that author');\n}\n// synchronous\ntry {\nfindAuthor();\n} catch(reason) {\n// something went wrong\n}\n// async with promises\nfindAuthor().catch(function(reason){\n// something went wrong\n});\n```\nUseful for tooling.",
            "line": " dist/assets/vendor.js:68751"
        },
        {
            "message": "Missing item type\n`finally` will be invoked regardless of the promise's fate just as native\ntry/catch/finally behaves\nSynchronous example:\n```js\nfindAuthor() {\nif (Math.random() > 0.5) {\nthrow new Error();\n}\nreturn new Author();\n}\ntry {\nreturn findAuthor(); // succeed or fail\n} catch(error) {\nreturn findOtherAuther();\n} finally {\n// always runs\n// doesn't affect the return value\n}\n```\nAsynchronous example:\n```js\nfindAuthor().catch(function(reason){\nreturn findOtherAuther();\n}).finally(function(){\n// author was either found, or not\n});\n```\nUseful for tooling.",
            "line": " dist/assets/vendor.js:68778"
        },
        {
            "message": "Missing item type\n`RSVP.Promise.all` accepts an array of promises, and returns a new promise which\nis fulfilled with an array of fulfillment values for the passed promises, or\nrejected with the reason of the first passed promise to be rejected. It casts all\nelements of the passed iterable to promises as it runs this algorithm.\nExample:\n```javascript\nvar promise1 = RSVP.resolve(1);\nvar promise2 = RSVP.resolve(2);\nvar promise3 = RSVP.resolve(3);\nvar promises = [ promise1, promise2, promise3 ];\nRSVP.Promise.all(promises).then(function(array){\n// The array here would be [ 1, 2, 3 ];\n});\n```\nIf any of the `promises` given to `RSVP.all` are rejected, the first promise\nthat is rejected will be given as an argument to the returned promises's\nrejection handler. For example:\nExample:\n```javascript\nvar promise1 = RSVP.resolve(1);\nvar promise2 = RSVP.reject(new Error(\"2\"));\nvar promise3 = RSVP.reject(new Error(\"3\"));\nvar promises = [ promise1, promise2, promise3 ];\nRSVP.Promise.all(promises).then(function(array){\n// Code here never runs because there are rejected promises!\n}, function(error) {\n// error.message === \"2\"\n});\n```",
            "line": " dist/assets/vendor.js:68832"
        },
        {
            "message": "Missing item type\n`RSVP.Promise.race` returns a new promise which is settled in the same way as the\nfirst passed promise to settle.\nExample:\n```javascript\nvar promise1 = new RSVP.Promise(function(resolve, reject){\nsetTimeout(function(){\nresolve('promise 1');\n}, 200);\n});\nvar promise2 = new RSVP.Promise(function(resolve, reject){\nsetTimeout(function(){\nresolve('promise 2');\n}, 100);\n});\nRSVP.Promise.race([promise1, promise2]).then(function(result){\n// result === 'promise 2' because it was resolved before promise1\n// was resolved.\n});\n```\n`RSVP.Promise.race` is deterministic in that only the state of the first\nsettled promise matters. For example, even if other promises given to the\n`promises` array argument are resolved, but the first settled promise has\nbecome rejected before the other promises became fulfilled, the returned\npromise will become rejected:\n```javascript\nvar promise1 = new RSVP.Promise(function(resolve, reject){\nsetTimeout(function(){\nresolve('promise 1');\n}, 200);\n});\nvar promise2 = new RSVP.Promise(function(resolve, reject){\nsetTimeout(function(){\nreject(new Error('promise 2'));\n}, 100);\n});\nRSVP.Promise.race([promise1, promise2]).then(function(result){\n// Code here never runs\n}, function(reason){\n// reason.message === 'promise 2' because promise 2 became rejected before\n// promise 1 became fulfilled\n});\n```\nAn example real-world use case is implementing timeouts:\n```javascript\nRSVP.Promise.race([ajax('foo.json'), timeout(5000)])\n```",
            "line": " dist/assets/vendor.js:68886"
        },
        {
            "message": "Missing item type\n`RSVP.Promise.reject` returns a promise rejected with the passed `reason`.\nIt is shorthand for the following:\n```javascript\nvar promise = new RSVP.Promise(function(resolve, reject){\nreject(new Error('WHOOPS'));\n});\npromise.then(function(value){\n// Code here doesn't run because the promise is rejected!\n}, function(reason){\n// reason.message === 'WHOOPS'\n});\n```\nInstead of writing the above, your code now simply becomes the following:\n```javascript\nvar promise = RSVP.Promise.reject(new Error('WHOOPS'));\npromise.then(function(value){\n// Code here doesn't run because the promise is rejected!\n}, function(reason){\n// reason.message === 'WHOOPS'\n});\n```",
            "line": " dist/assets/vendor.js:68987"
        },
        {
            "message": "Missing item type\n`RSVP.Promise.resolve` returns a promise that will become resolved with the\npassed `value`. It is shorthand for the following:\n```javascript\nvar promise = new RSVP.Promise(function(resolve, reject){\nresolve(1);\n});\npromise.then(function(value){\n// value === 1\n});\n```\nInstead of writing the above, your code now simply becomes the following:\n```javascript\nvar promise = RSVP.Promise.resolve(1);\npromise.then(function(value){\n// value === 1\n});\n```",
            "line": " dist/assets/vendor.js:69030"
        },
        {
            "message": "Missing item type\nThis is a convenient alias for `RSVP.Promise.race`.",
            "line": " dist/assets/vendor.js:69074"
        },
        {
            "message": "Missing item type\nThis is a convenient alias for `RSVP.Promise.reject`.",
            "line": " dist/assets/vendor.js:69093"
        },
        {
            "message": "Missing item type\nThis is a convenient alias for `RSVP.Promise.resolve`.",
            "line": " dist/assets/vendor.js:69112"
        },
        {
            "message": "Missing item type\n`RSVP.rethrow` will rethrow an error on the next turn of the JavaScript event\nloop in order to aid debugging.\nPromises A+ specifies that any exceptions that occur with a promise must be\ncaught by the promises implementation and bubbled to the last handler. For\nthis reason, it is recommended that you always specify a second rejection\nhandler function to `then`. However, `RSVP.rethrow` will throw the exception\noutside of the promise, so it bubbles up to your console if in the browser,\nor domain/cause uncaught exception in Node. `rethrow` will also throw the\nerror again so the error can be handled by the promise per the spec.\n```javascript\nfunction throws(){\nthrow new Error('Whoops!');\n}\nvar promise = new RSVP.Promise(function(resolve, reject){\nthrows();\n});\npromise.catch(RSVP.rethrow).then(function(){\n// Code here doesn't run because the promise became rejected due to an\n// error!\n}, function (err){\n// handle the error here\n});\n```\nThe 'Whoops' error will be thrown on the next turn of the event loop\nand you can watch for it in your console. You can also handle it using a\nrejection handler given to `.then` or `.catch` on the returned promise.",
            "line": " dist/assets/vendor.js:69130"
        },
        {
            "message": "Missing item type\nDescription",
            "line": " dist/assets/vendor.js:69209"
        },
        {
            "message": "Missing item type\nDescription",
            "line": " dist/assets/vendor.js:69856"
        },
        {
            "message": "Missing item type\nDescription",
            "line": " dist/assets/vendor.js:70013"
        },
        {
            "message": "Missing item type\nDescription",
            "line": " dist/assets/vendor.js:70057"
        },
        {
            "message": "Missing item type\nDescription",
            "line": " dist/assets/vendor.js:70153"
        },
        {
            "message": "Missing item type\nConfigures a container with injections on Ember applications\nfor the Ember-Data store. Accepts an optional namespace argument.",
            "line": " dist/assets/vendor.js:72126"
        },
        {
            "message": "Missing item type\nConfigures a container for use with an Ember-Data\nstore. Accepts an optional namespace argument.",
            "line": " dist/assets/vendor.js:72146"
        },
        {
            "message": "Missing item type\nConfigures a container with injections on Ember applications\nfor the Ember-Data store. Accepts an optional namespace argument.",
            "line": " dist/assets/vendor.js:72182"
        },
        {
            "message": "Missing item type\nConfigures a container for use with Ember-Data\ntransforms.",
            "line": " dist/assets/vendor.js:72204"
        },
        {
            "message": "Missing item type\nDescription",
            "line": " dist/assets/vendor.js:74381"
        },
        {
            "message": "Missing item type\n`DS.attr` defines an attribute on a [DS.Model](/api/data/classes/DS.Model.html).\nBy default, attributes are passed through as-is, however you can specify an\noptional type to have the value automatically transformed.\nEmber Data ships with four basic transform types: `string`, `number`,\n`boolean` and `date`. You can define your own transforms by subclassing\n[DS.Transform](/api/data/classes/DS.Transform.html).\nNote that you cannot use `attr` to define an attribute of `id`.\n`DS.attr` takes an optional hash as a second parameter, currently\nsupported options are:\n- `defaultValue`: Pass a string or a function to be called to set the attribute\nto a default value if none is supplied.\nExample\n```javascript\nvar attr = DS.attr;\nApp.User = DS.Model.extend({\nusername: attr('string'),\nemail: attr('string'),\nverified: attr('boolean', {defaultValue: false})\n});\n```",
            "line": " dist/assets/vendor.js:75489"
        },
        {
            "message": "Missing item type\nThis is dummy file that exists for the sole purpose\nof allowing tests to run directly in the browser as\nwell as by Testem.\n\nTestem is configured to run tests directly against\nthe test build of index.html, which requires a\nsnippet to load the testem.js file:\n  <script src=\"/testem.js\"></script>\nThis has to go after the qunit framework and app\ntests are loaded.\n\nTestem internally supplies this file. However, if you\nrun the tests directly in the browser (localhost:8000/tests),\nthis file does not exist.\n\nHence the purpose of this fake file. This file is served\ndirectly from the express server to satisify the script load.",
            "line": " dist/testem.js:1"
        },
        {
            "message": "Missing item type\nSends a request to an LSU server that returns the names of all of the departments\nat LSU and saves them to the database",
            "line": " index.js:169"
        },
        {
            "message": "Missing item type\nNew Relic agent configuration.\n\nSee lib/config.defaults.js in the agent distribution for a more complete\ndescription of configuration variables and their potential values.",
            "line": " newrelic.js:1"
        },
        {
            "message": "Missing item type\nArray of application names.",
            "line": " newrelic.js:8"
        },
        {
            "message": "Missing item type\nYour New Relic license key.",
            "line": " newrelic.js:12"
        },
        {
            "message": "Missing item type\nLevel at which to log. 'trace' is most useful to New Relic when diagnosing\nissues with the agent, 'info' and higher will impose the least overhead on\nproduction applications.",
            "line": " newrelic.js:17"
        }
    ]
}